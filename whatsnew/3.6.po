# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2017, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-04-17 23:44+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: Dong-gweon Oh <flowdas@gmail.com>\n"
"Language-Team: Korean (https://python.flowdas.com)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.17.0\n"

#: ../../whatsnew/3.6.rst:3
msgid "What's New In Python 3.6"
msgstr "파이썬 3.6의 새로운 기능"

#: ../../whatsnew/3.6.rst
msgid "Editors"
msgstr "편집자"

#: ../../whatsnew/3.6.rst:5
msgid "Elvis Pranskevichus <elvis@magic.io>, Yury Selivanov <yury@magic.io>"
msgstr "Elvis Pranskevichus <elvis@magic.io>, Yury Selivanov <yury@magic.io>"

#: ../../whatsnew/3.6.rst:47
msgid ""
"This article explains the new features in Python 3.6, compared to 3.5. "
"Python 3.6 was released on December 23, 2016.  See the `changelog "
"<https://docs.python.org/3.6/whatsnew/changelog.html>`_ for a full list "
"of changes."
msgstr ""
"이 기사에서는 3.5와 비교하여 파이썬 3.6의 새로운 기능을 설명합니다. 파이썬 3.6은 2016년 12월 23일에 "
"출시되었습니다. 전체 변경 목록은 `changelog "
"<https://docs.python.org/3.6/whatsnew/changelog.html>`_\\를 참조하십시오."

#: ../../whatsnew/3.6.rst:54
msgid ":pep:`494` - Python 3.6 Release Schedule"
msgstr ":pep:`494` - 파이썬 3.6 출시 일정"

#: ../../whatsnew/3.6.rst:58
msgid "Summary -- Release highlights"
msgstr "요약 -- 배포 주요 사항"

#: ../../whatsnew/3.6.rst:60
msgid "New syntax features:"
msgstr "새로운 문법 기능:"

#: ../../whatsnew/3.6.rst:62
msgid ":ref:`PEP 498 <whatsnew36-pep498>`, formatted string literals."
msgstr ":ref:`PEP 498 <whatsnew36-pep498>`, 포맷 문자열 리터럴."

#: ../../whatsnew/3.6.rst:64
msgid ":ref:`PEP 515 <whatsnew36-pep515>`, underscores in numeric literals."
msgstr ":ref:`PEP 515 <whatsnew36-pep515>`, 숫자 리터럴의 밑줄."

#: ../../whatsnew/3.6.rst:66
msgid ":ref:`PEP 526 <whatsnew36-pep526>`, syntax for variable annotations."
msgstr ":ref:`PEP 526 <whatsnew36-pep526>`, 변수 어노테이션 문법."

#: ../../whatsnew/3.6.rst:68
msgid ":ref:`PEP 525 <whatsnew36-pep525>`, asynchronous generators."
msgstr ":ref:`PEP 525 <whatsnew36-pep525>`, 비동기 제너레이터."

#: ../../whatsnew/3.6.rst:70
msgid ":ref:`PEP 530 <whatsnew36-pep530>`: asynchronous comprehensions."
msgstr ":ref:`PEP 530 <whatsnew36-pep530>`: 비동기 컴프리헨션."

#: ../../whatsnew/3.6.rst:73
msgid "New library modules:"
msgstr "새로운 라이브러리 모듈:"

#: ../../whatsnew/3.6.rst:75
msgid ""
":mod:`secrets`: :ref:`PEP 506 -- Adding A Secrets Module To The Standard "
"Library <whatsnew36-pep506>`."
msgstr ""
":mod:`secrets`: :ref:`PEP 506 -- 표준 라이브러리에 secret 모듈 추가 "
"<whatsnew36-pep506>`."

#: ../../whatsnew/3.6.rst:78
msgid "CPython implementation improvements:"
msgstr "CPython 구현 개선:"

#: ../../whatsnew/3.6.rst:80
#, python-format
msgid ""
"The :ref:`dict <typesmapping>` type has been reimplemented to use a "
":ref:`more compact representation <whatsnew36-compactdict>` based on `a "
"proposal by Raymond Hettinger <https://mail.python.org/pipermail/python-"
"dev/2012-December/123028.html>`_ and similar to the `PyPy dict "
"implementation`_.  This resulted in dictionaries using 20% to 25% less "
"memory when compared to Python 3.5."
msgstr ""
":ref:`dict <typesmapping>` 형은 `Raymond Hettinger의 제안 "
"<https://mail.python.org/pipermail/python-"
"dev/2012-December/123028.html>`_\\에 기반한 :ref:`더욱더 간결한 표현 "
"<whatsnew36-compactdict>`\\을 사용하도록 재구현되었으며 `PyPy 딕셔너리 구현 <PyPy dict "
"implementation_>`_\\과 유사합니다. 이로 인해 파이썬 3.5와 비교할 때 딕셔너리가 20%에서 25% 적은 메모리를"
" 사용하게 되었습니다."

#: ../../whatsnew/3.6.rst:87
msgid ""
"Customization of class creation has been simplified with the :ref:`new "
"protocol <whatsnew36-pep487>`."
msgstr ":ref:`새 프로토콜 <whatsnew36-pep487>`\\로 클래스 생성의 사용자 정의가 단순화되었습니다."

#: ../../whatsnew/3.6.rst:90
msgid ""
"The class attribute definition order is :ref:`now preserved  "
"<whatsnew36-pep520>`."
msgstr "클래스 어트리뷰트 정의 순서는 :ref:`이제 보존됩니다 <whatsnew36-pep520>`."

#: ../../whatsnew/3.6.rst:93
msgid ""
"The order of elements in ``**kwargs`` now :ref:`corresponds to the order "
"<whatsnew36-pep468>` in which keyword arguments were passed to the "
"function."
msgstr ""
"``**kwargs``\\의 요소 순서는 이제 키워드 인자가 함수에 전달된 :ref:`순서에 해당합니다 "
"<whatsnew36-pep468>`."

#: ../../whatsnew/3.6.rst:97
msgid ""
"DTrace and SystemTap :ref:`probing support <whatsnew36-tracing>` has been"
" added."
msgstr "DTrace와 SystemTap :ref:`프로브 지원 <whatsnew36-tracing>`\\이 추가되었습니다."

#: ../../whatsnew/3.6.rst:100
msgid ""
"The new :ref:`PYTHONMALLOC <whatsnew36-pythonmalloc>` environment "
"variable can now be used to debug the interpreter memory allocation and "
"access errors."
msgstr ""
"이제 새로운 :ref:`PYTHONMALLOC <whatsnew36-pythonmalloc>` 환경 변수를 사용하여 인터프리터 "
"메모리 할당과 액세스 에러를 디버깅 할 수 있습니다."

#: ../../whatsnew/3.6.rst:105
msgid "Significant improvements in the standard library:"
msgstr "표준 라이브러리 대폭 개선:"

#: ../../whatsnew/3.6.rst:107
msgid ""
"The :mod:`asyncio` module has received new features, significant "
"usability and performance improvements, and a fair amount of bug fixes. "
"Starting with Python 3.6 the ``asyncio`` module is no longer provisional "
"and its API is considered stable."
msgstr ""
":mod:`asyncio` 모듈은 새로운 기능, 상당한 사용성 및 성능 향상, 상당한 양의 버그 수정을 받았습니다. 파이썬 "
"3.6부터 ``asyncio`` 모듈은 더는 잠정적이지 않으며 해당 API는 안정적인 것으로 간주합니다."

#: ../../whatsnew/3.6.rst:112
msgid ""
"A new :ref:`file system path protocol <whatsnew36-pep519>` has been "
"implemented to support :term:`path-like objects <path-like object>`. All "
"standard library functions operating on paths have been updated to work "
"with the new protocol."
msgstr ""
":term:`경로류 객체 <path-like object>`\\를 지원하기 위해 새로운 :ref:`파일 시스템 경로 프로토콜 "
"<whatsnew36-pep519>`\\이 구현되었습니다. 경로에서 작동하는 모든 표준 라이브러리 함수가 새 프로토콜과 함께 "
"작동하도록 갱신되었습니다."

#: ../../whatsnew/3.6.rst:117
msgid ""
"The :mod:`datetime` module has gained support for :ref:`Local Time "
"Disambiguation <whatsnew36-pep495>`."
msgstr ":mod:`datetime` 모듈은 :ref:`현지 시간 명확성 <whatsnew36-pep495>`\\에 대한 지원을 얻었습니다."

#: ../../whatsnew/3.6.rst:120
msgid ""
"The :mod:`typing` module received a number of :ref:`improvements "
"<whatsnew36-typing>`."
msgstr ":mod:`typing` 모듈은 여러 :ref:`개선 <whatsnew36-typing>`\\을 받았습니다."

#: ../../whatsnew/3.6.rst:123
msgid ""
"The :mod:`tracemalloc` module has been significantly reworked and is now "
"used to provide better output for :exc:`ResourceWarning` as well as "
"provide better diagnostics for memory allocation errors. See the "
":ref:`PYTHONMALLOC section <whatsnew36-pythonmalloc>` for more "
"information."
msgstr ""
":mod:`tracemalloc` 모듈은 크게 다시 작업 되었으며 이제 :exc:`ResourceWarning`\\에 대해 더 나은"
" 출력을 제공하고 메모리 할당 에러에 대한 더 나은 진단을 제공하는 데 사용됩니다. 자세한 내용은 :ref:`PYTHONMALLOC"
" 섹션 <whatsnew36-pythonmalloc>`\\을 참조하십시오."

#: ../../whatsnew/3.6.rst:130
msgid "Security improvements:"
msgstr "보안 향상:"

#: ../../whatsnew/3.6.rst:132
msgid ""
"The new :mod:`secrets` module has been added to simplify the generation "
"of cryptographically strong pseudo-random numbers suitable for managing "
"secrets such as account authentication, tokens, and similar."
msgstr ""
"새로운 :mod:`secrets` 모듈이 추가되어 계정 인증, 토큰 등과 같은 비밀 관리에 적합한 암호화 된 강력한 의사 난수 "
"생성을 단순화합니다."

#: ../../whatsnew/3.6.rst:136 ../../whatsnew/3.6.rst:1283
msgid ""
"On Linux, :func:`os.urandom` now blocks until the system urandom entropy "
"pool is initialized to increase the security. See the :pep:`524` for the "
"rationale."
msgstr ""
"리눅스에서, :func:`os.urandom`\\은 이제 보안을 강화하기 위해 시스템 urandom 엔트로피 풀이 초기화될 때까지 "
"블록합니다. 근거는 :pep:`524`\\를 참조하십시오."

#: ../../whatsnew/3.6.rst:140
msgid "The :mod:`hashlib` and :mod:`ssl` modules now support OpenSSL 1.1.0."
msgstr ":mod:`hashlib`\\와 :mod:`ssl` 모듈은 이제 OpenSSL 1.1.0을 지원합니다."

#: ../../whatsnew/3.6.rst:142
msgid ""
"The default settings and feature set of the :mod:`ssl` module have been "
"improved."
msgstr ":mod:`ssl` 모듈의 기본 설정과 기능 집합이 개선되었습니다."

#: ../../whatsnew/3.6.rst:145
msgid ""
"The :mod:`hashlib` module received support for the BLAKE2, SHA-3 and "
"SHAKE hash algorithms and the :func:`~hashlib.scrypt` key derivation "
"function."
msgstr ""
":mod:`hashlib` 모듈은 BLAKE2, SHA-3 및 SHAKE 해시 알고리즘과 :func:`~hashlib.scrypt`"
" 키 파생 함수에 대한 지원을 받았습니다."

#: ../../whatsnew/3.6.rst:149
msgid "Windows improvements:"
msgstr "윈도우 개선:"

#: ../../whatsnew/3.6.rst:151
msgid ""
":ref:`PEP 528 <whatsnew36-pep528>` and :ref:`PEP 529 "
"<whatsnew36-pep529>`, Windows filesystem and console encoding changed to "
"UTF-8."
msgstr ""
":ref:`PEP 528 <whatsnew36-pep528>`\\과 :ref:`PEP 529 <whatsnew36-pep529>`,"
" 윈도우 파일 시스템과 콘솔 인코딩이 UTF-8로 변경되었습니다."

#: ../../whatsnew/3.6.rst:154
msgid ""
"The ``py.exe`` launcher, when used interactively, no longer prefers "
"Python 2 over Python 3 when the user doesn't specify a version (via "
"command line arguments or a config file).  Handling of shebang lines "
"remains unchanged - \"python\" refers to Python 2 in that case."
msgstr ""
"``py.exe`` 런처는 대화식으로 사용할 때 사용자가 버전을 지정하지 않을 때 (명령 줄 인자나 구성 파일을 통해) 더는 파이썬"
" 3보다 파이썬 2를 선호하지 않습니다. 셔뱅 줄의 처리는 변경되지 않았습니다 - 이 경우 \"python\"은 파이썬 2를 "
"나타냅니다."

#: ../../whatsnew/3.6.rst:159
msgid ""
"``python.exe`` and ``pythonw.exe`` have been marked as long-path aware, "
"which means that the 260 character path limit may no longer apply. See "
":ref:`removing the MAX_PATH limitation <max-path>` for details."
msgstr ""
"``python.exe``\\와 ``pythonw.exe``\\는 긴 경로 인식으로 표시되어서, 260자 경로 제한이 더는 적용되지"
" 않을 수 있음을 뜻합니다. 자세한 내용은 :ref:`MAX_PATH 제한 제거 <max-path>`\\를 참조하십시오."

#: ../../whatsnew/3.6.rst:163
#, fuzzy
msgid ""
"A ``._pth`` file can be added to force isolated mode and fully specify "
"all search paths to avoid registry and environment lookup. See :ref:`the "
"documentation <windows_finding_modules>` for more information."
msgstr ""
"``._pth`` 파일을 추가하여 격리 모드를 강제 적용하고 모든 검색 경로를 완전히 지정하여 레지스트리와 환경 조회를 방지할 수 "
"있습니다. 자세한 정보는 :ref:`설명서 <finding_modules>`\\를 참조하십시오."

#: ../../whatsnew/3.6.rst:167
#, fuzzy
msgid ""
"A ``python36.zip`` file now works as a landmark to infer "
":envvar:`PYTHONHOME`. See :ref:`the documentation "
"<windows_finding_modules>` for more information."
msgstr ""
"이제 ``python36.zip`` 파일이 :envvar:`PYTHONHOME`\\을 추론하는 랜드 마크로 작동합니다. 자세한 "
"정보는 :ref:`설명서 <finding_modules>`\\를 참조하십시오."

#: ../../whatsnew/3.6.rst:176
msgid "New Features"
msgstr "새로운 기능"

#: ../../whatsnew/3.6.rst:181
msgid "PEP 498: Formatted string literals"
msgstr "PEP 498: 포맷 문자열 리터럴"

#: ../../whatsnew/3.6.rst:183
msgid ""
":pep:`498` introduces a new kind of string literals: *f-strings*, or "
":ref:`formatted string literals <f-strings>`."
msgstr ""
":pep:`498`\\은 새로운 종류의 문자열 리터럴 *f-문자열(f-strings)*, 또는 :ref:`포맷 문자열 리터럴 "
"<f-strings>`\\을 도입합니다."

#: ../../whatsnew/3.6.rst:186
msgid ""
"Formatted string literals are prefixed with ``'f'`` and are similar to "
"the format strings accepted by :meth:`str.format`.  They contain "
"replacement fields surrounded by curly braces.  The replacement fields "
"are expressions, which are evaluated at run time, and then formatted "
"using the :func:`format` protocol::"
msgstr ""
"포맷 문자열 리터럴은 ``'f'``\\를 접두어로 사용하고 :meth:`str.format`\\에서 허용하는 포맷 문자열과 "
"유사합니다. 중괄호로 둘러싸인 치환 필드가 포함됩니다. 치환 필드는 실행 시간에 평가된 다음 :func:`format` 프로토콜을 "
"사용하여 포맷되는 표현식입니다::"

#: ../../whatsnew/3.6.rst:192
#, python-brace-format
msgid ""
">>> name = \"Fred\"\n"
">>> f\"He said his name is {name}.\"\n"
"'He said his name is Fred.'\n"
">>> width = 10\n"
">>> precision = 4\n"
">>> value = decimal.Decimal(\"12.34567\")\n"
">>> f\"result: {value:{width}.{precision}}\"  # nested fields\n"
"'result:      12.35'"
msgstr ""

#: ../../whatsnew/3.6.rst:203
msgid ":pep:`498` -- Literal String Interpolation."
msgstr ":pep:`498` -- 리터럴 문자열 보간."

#: ../../whatsnew/3.6.rst:204
msgid "PEP written and implemented by Eric V. Smith."
msgstr "Eric V. Smith가 작성하고 구현한 PEP."

#: ../../whatsnew/3.6.rst:206
msgid ":ref:`Feature documentation <f-strings>`."
msgstr ":ref:`기능 설명서 <f-strings>`."

#: ../../whatsnew/3.6.rst:212
msgid "PEP 526: Syntax for variable annotations"
msgstr "PEP 526: 변수 어노테이션 문법"

#: ../../whatsnew/3.6.rst:214
msgid ""
":pep:`484` introduced the standard for type annotations of function "
"parameters, a.k.a. type hints. This PEP adds syntax to Python for "
"annotating the types of variables including class variables and instance "
"variables::"
msgstr ""
":pep:`484`\\는 함수 매개 변수의 형 어노테이션, 일명 형 힌트에 대한 표준을 도입했습니다. 이 PEP는 클래스 변수와 "
"인스턴스 변수를 포함한 변수 형에 어노테이트하기 위해 파이썬에 구문을 추가합니다::"

#: ../../whatsnew/3.6.rst:218
#, python-brace-format
msgid ""
"primes: List[int] = []\n"
"\n"
"captain: str  # Note: no initial value!\n"
"\n"
"class Starship:\n"
"    stats: Dict[str, int] = {}"
msgstr ""

#: ../../whatsnew/3.6.rst:225
msgid ""
"Just as for function annotations, the Python interpreter does not attach "
"any particular meaning to variable annotations and only stores them in "
"the ``__annotations__`` attribute of a class or module."
msgstr ""
"함수 어노테이션과 마찬가지로, 파이썬 인터프리터는 변수 어노테이션에 특별한 의미를 부여하지 않고 클래스나 모듈의 "
"``__annotations__`` 어트리뷰트에 저장하기만 합니다."

#: ../../whatsnew/3.6.rst:229
msgid ""
"In contrast to variable declarations in statically typed languages, the "
"goal of annotation syntax is to provide an easy way to specify structured"
" type metadata for third party tools and libraries via the abstract "
"syntax tree and the ``__annotations__`` attribute."
msgstr ""
"정적으로 타이핑된 언어의 변수 선언과 달리, 어노테이션 문법의 목표는 추상 구문 트리와 ``__annotations__`` "
"어트리뷰트를 통해 제삼자 도구와 라이브러리를 위해 구조화된 형 메타 데이터를 쉽게 지정할 방법을 제공하는 것입니다."

#: ../../whatsnew/3.6.rst:236
msgid ":pep:`526` -- Syntax for variable annotations."
msgstr ":pep:`526` -- 변수 어노테이션 문법."

#: ../../whatsnew/3.6.rst:237
msgid ""
"PEP written by Ryan Gonzalez, Philip House, Ivan Levkivskyi, Lisa Roach, "
"and Guido van Rossum. Implemented by Ivan Levkivskyi."
msgstr ""
"Ryan Gonzalez, Philip House, Ivan Levkivskyi, Lisa Roach 및 Guido van "
"Rossum이 작성한 PEP. Ivan Levkivskyi가 구현했습니다."

#: ../../whatsnew/3.6.rst:240
#, fuzzy
msgid ""
"Tools that use or will use the new syntax: `mypy <https://www.mypy-"
"lang.org/>`_, `pytype <https://github.com/google/pytype>`_, PyCharm, etc."
msgstr ""
"새 문법을 사용하거나 사용할 도구: `mypy <http://www.mypy-lang.org/>`_, `pytype "
"<https://github.com/google/pytype>`_, PyCharm 등."

#: ../../whatsnew/3.6.rst:248
msgid "PEP 515: Underscores in Numeric Literals"
msgstr "PEP 515: 숫자 리터럴의 밑줄"

#: ../../whatsnew/3.6.rst:250
msgid ""
":pep:`515` adds the ability to use underscores in numeric literals for "
"improved readability.  For example::"
msgstr ":pep:`515`\\는 가독성을 높이기 위해 숫자 리터럴에 밑줄을 사용하는 기능을 추가합니다. 예를 들면::"

#: ../../whatsnew/3.6.rst:253
msgid ""
">>> 1_000_000_000_000_000\n"
"1000000000000000\n"
">>> 0x_FF_FF_FF_FF\n"
"4294967295"
msgstr ""

#: ../../whatsnew/3.6.rst:258
msgid ""
"Single underscores are allowed between digits and after any base "
"specifier.  Leading, trailing, or multiple underscores in a row are not "
"allowed."
msgstr ""
"숫자 사이와 진수 지정자(base specifier) 뒤에 단일 밑줄이 허용됩니다. 선행, 후행 또는 여러 밑줄이 연속해서 나오는 "
"것은 허용되지 않습니다."

#: ../../whatsnew/3.6.rst:262
#, fuzzy
msgid ""
"The :ref:`string formatting <formatspec>` language also now has support "
"for the ``'_'`` option to signal the use of an underscore for a thousands"
" separator for floating-point presentation types and for integer "
"presentation type ``'d'``.  For integer presentation types ``'b'``, "
"``'o'``, ``'x'``, and ``'X'``, underscores will be inserted every 4 "
"digits::"
msgstr ""
":ref:`문자열 포매팅 <formatspec>` 언어는 이제 부동 소수점 표시형과 정수 표시형 ``'d'``\\에 대해 천 단위 "
"구분자에 밑줄 사용을 알리는 ``'_'`` 옵션을 지원합니다. 정수 표시형 ``'b'``, ``'o'``, ``'x'`` 및 "
"``'X'``\\의 경우, 밑줄이 4자리마다 삽입됩니다::"

#: ../../whatsnew/3.6.rst:269
#, python-brace-format
msgid ""
">>> '{:_}'.format(1000000)\n"
"'1_000_000'\n"
">>> '{:_x}'.format(0xFFFFFFFF)\n"
"'ffff_ffff'"
msgstr ""

#: ../../whatsnew/3.6.rst:276
msgid ":pep:`515` -- Underscores in Numeric Literals"
msgstr ":pep:`515` -- 숫자 리터럴의 밑줄"

#: ../../whatsnew/3.6.rst:277
msgid "PEP written by Georg Brandl and Serhiy Storchaka."
msgstr "Georg Brandl과 Serhiy Storchaka가 작성한 PEP."

#: ../../whatsnew/3.6.rst:283
msgid "PEP 525: Asynchronous Generators"
msgstr "PEP 525: 비동기 제너레이터"

#: ../../whatsnew/3.6.rst:285
msgid ""
":pep:`492` introduced support for native coroutines and ``async`` / "
"``await`` syntax to Python 3.5.  A notable limitation of the Python 3.5 "
"implementation is that it was not possible to use ``await`` and ``yield``"
" in the same function body.  In Python 3.6 this restriction has been "
"lifted, making it possible to define *asynchronous generators*::"
msgstr ""
":pep:`492`\\는 파이썬 3.5에 네이티브 코루틴과 ``async`` / ``await`` 구문에 대한 지원을 도입했습니다."
" 파이썬 3.5 구현의 주목할만한 제한은 같은 함수 본문에서 ``await``\\와 ``yield``\\를 사용할 수 없다는 "
"것입니다. 파이썬 3.6에서는 이 제한이 해제되어 *비동기 제너레이터(asynchronous generators)*\\를 정의할 수"
" 있습니다::"

#: ../../whatsnew/3.6.rst:291
msgid ""
"async def ticker(delay, to):\n"
"    \"\"\"Yield numbers from 0 to *to* every *delay* seconds.\"\"\"\n"
"    for i in range(to):\n"
"        yield i\n"
"        await asyncio.sleep(delay)"
msgstr ""

#: ../../whatsnew/3.6.rst:297
msgid "The new syntax allows for faster and more concise code."
msgstr "새로운 문법은 더 빠르고 간결한 코드를 허용합니다."

#: ../../whatsnew/3.6.rst:301
msgid ":pep:`525` -- Asynchronous Generators"
msgstr ":pep:`525` -- 비동기 제너레이터"

#: ../../whatsnew/3.6.rst:302 ../../whatsnew/3.6.rst:323
msgid "PEP written and implemented by Yury Selivanov."
msgstr "Yury Selivanov가 작성하고 구현한 PEP."

#: ../../whatsnew/3.6.rst:308
msgid "PEP 530: Asynchronous Comprehensions"
msgstr "PEP 530: 비동기 컴프리헨션"

#: ../../whatsnew/3.6.rst:310
msgid ""
":pep:`530` adds support for using ``async for`` in list, set, dict "
"comprehensions and generator expressions::"
msgstr ""
":pep:`530`\\은 리스트, 집합, 딕셔너리 컴프리헨션과 제너레이터 표현식에서 ``async for`` 사용에 대한 지원을 "
"추가합니다::"

#: ../../whatsnew/3.6.rst:313
msgid "result = [i async for i in aiter() if i % 2]"
msgstr ""

#: ../../whatsnew/3.6.rst:315
msgid ""
"Additionally, ``await`` expressions are supported in all kinds of "
"comprehensions::"
msgstr "또한, ``await`` 표현식은 모든 종류의 컴프리헨션에서 지원됩니다::"

#: ../../whatsnew/3.6.rst:318
msgid "result = [await fun() for fun in funcs if await condition()]"
msgstr ""

#: ../../whatsnew/3.6.rst:322
msgid ":pep:`530` -- Asynchronous Comprehensions"
msgstr ":pep:`530` -- 비동기 컴프리헨션"

#: ../../whatsnew/3.6.rst:329
msgid "PEP 487: Simpler customization of class creation"
msgstr "PEP 487: 더 간단한 클래스 생성 사용자 정의"

#: ../../whatsnew/3.6.rst:331
msgid ""
"It is now possible to customize subclass creation without using a "
"metaclass. The new ``__init_subclass__`` classmethod will be called on "
"the base class whenever a new subclass is created::"
msgstr ""
"이제 메타 클래스를 사용하지 않고도 서브 클래스 생성을 사용자 정의할 수 있습니다. 새 서브 클래스가 만들어질 때마다 새 "
"``__init_subclass__`` 클래스 메서드가 베이스 클래스에서 호출됩니다::"

#: ../../whatsnew/3.6.rst:335
msgid ""
"class PluginBase:\n"
"    subclasses = []\n"
"\n"
"    def __init_subclass__(cls, **kwargs):\n"
"        super().__init_subclass__(**kwargs)\n"
"        cls.subclasses.append(cls)\n"
"\n"
"class Plugin1(PluginBase):\n"
"    pass\n"
"\n"
"class Plugin2(PluginBase):\n"
"    pass"
msgstr ""

#: ../../whatsnew/3.6.rst:348
msgid ""
"In order to allow zero-argument :func:`super` calls to work correctly "
"from :meth:`~object.__init_subclass__` implementations, custom "
"metaclasses must ensure that the new ``__classcell__`` namespace entry is"
" propagated to ``type.__new__`` (as described in :ref:`class-object-"
"creation`)."
msgstr ""
"인자가 없는 :func:`super` 호출이 :meth:`~object.__init_subclass__` 구현에서 올바르게 "
"작동하도록 하기 위해, 사용자 정의 메타 클래스에서 새 ``__classcell__`` 이름 공간 항목이 "
"``type.__new__``\\로 전파되도록 해야 합니다 (:ref:`class-object-creation`\\에 "
"설명되었듯이)."

#: ../../whatsnew/3.6.rst:355 ../../whatsnew/3.6.rst:393
msgid ":pep:`487` -- Simpler customization of class creation"
msgstr ":pep:`487` -- 더 간단한 클래스 생성 사용자 정의"

#: ../../whatsnew/3.6.rst:356 ../../whatsnew/3.6.rst:394
msgid "PEP written and implemented by Martin Teichmann."
msgstr "Martin Teichmann이 작성하고 구현한 PEP."

#: ../../whatsnew/3.6.rst:358
msgid ":ref:`Feature documentation <class-customization>`"
msgstr ":ref:`기능 설명서 <class-customization>`"

#: ../../whatsnew/3.6.rst:364
msgid "PEP 487: Descriptor Protocol Enhancements"
msgstr "PEP 487: 디스크립터 프로토콜 향상"

#: ../../whatsnew/3.6.rst:366
msgid ""
":pep:`487` extends the descriptor protocol to include the new optional "
":meth:`~object.__set_name__` method.  Whenever a new class is defined, "
"the new method will be called on all descriptors included in the "
"definition, providing them with a reference to the class being defined "
"and the name given to the descriptor within the class namespace.  In "
"other words, instances of descriptors can now know the attribute name of "
"the descriptor in the owner class::"
msgstr ""
":pep:`487`\\은 새로운 선택적 :meth:`~object.__set_name__` 메서드를 포함하도록 디스크립터 프로토콜을"
" 확장합니다. 새 클래스가 정의될 때마다, 정의에 포함된 모든 디스크립터에 대해 새 메서드가 호출되어, 정의되는 클래스에 대한 "
"참조와 클래스 이름 공간 내에서 디스크립터에 지정된 이름을 제공합니다. 즉, 디스크립터의 인스턴스는 이제 소유자 클래스에 있는 "
"디스크립터의 어트리뷰트 이름을 알 수 있습니다::"

#: ../../whatsnew/3.6.rst:374
#, python-brace-format
msgid ""
"class IntField:\n"
"    def __get__(self, instance, owner):\n"
"        return instance.__dict__[self.name]\n"
"\n"
"    def __set__(self, instance, value):\n"
"        if not isinstance(value, int):\n"
"            raise ValueError(f'expecting integer in {self.name}')\n"
"        instance.__dict__[self.name] = value\n"
"\n"
"    # this is the new initializer:\n"
"    def __set_name__(self, owner, name):\n"
"        self.name = name\n"
"\n"
"class Model:\n"
"    int_field = IntField()"
msgstr ""

#: ../../whatsnew/3.6.rst:396
msgid ":ref:`Feature documentation <descriptors>`"
msgstr ":ref:`기능 설명서 <descriptors>`"

#: ../../whatsnew/3.6.rst:402
msgid "PEP 519: Adding a file system path protocol"
msgstr "PEP 519: 파일 시스템 경로 프로토콜 추가"

#: ../../whatsnew/3.6.rst:404
msgid ""
"File system paths have historically been represented as :class:`str` or "
":class:`bytes` objects. This has led to people who write code which "
"operate on file system paths to assume that such objects are only one of "
"those two types (an :class:`int` representing a file descriptor does not "
"count as that is not a file path). Unfortunately that assumption prevents"
" alternative object representations of file system paths like "
":mod:`pathlib` from working with pre-existing code, including Python's "
"standard library."
msgstr ""
"파일 시스템 경로는 역사적으로 :class:`str`\\이나 :class:`bytes` 객체로 표현되었습니다. 이로 인해 파일 "
"시스템 경로에서 작동하는 코드를 작성하는 사람들은 이러한 객체가 두 형 중 하나일 뿐이라고 가정합니다 (파일 기술자를 나타내는 "
":class:`int`\\는 파일 경로가 아니기 때문에 고려하지 않습니다). 불행히도 이러한 가정은 :mod:`pathlib`\\와"
" 같은 파일 시스템 경로의 대체 객체 표현이 파이썬의 표준 라이브러리를 포함하여 기존 코드와 함께 작동하지 못하게 합니다."

#: ../../whatsnew/3.6.rst:413
msgid ""
"To fix this situation, a new interface represented by "
":class:`os.PathLike` has been defined. By implementing the "
":meth:`~os.PathLike.__fspath__` method, an object signals that it "
"represents a path. An object can then provide a low-level representation "
"of a file system path as a :class:`str` or :class:`bytes` object. This "
"means an object is considered :term:`path-like <path-like object>` if it "
"implements :class:`os.PathLike` or is a :class:`str` or :class:`bytes` "
"object which represents a file system path. Code can use "
":func:`os.fspath`, :func:`os.fsdecode`, or :func:`os.fsencode` to "
"explicitly get a :class:`str` and/or :class:`bytes` representation of a "
"path-like object."
msgstr ""
"이 상황을 해결하기 위해, :class:`os.PathLike`\\으로 표현되는 새 인터페이스가 정의되었습니다. "
":meth:`~os.PathLike.__fspath__` 메서드를 구현하면, 객체가 경로를 나타낸다는 신호를 보내는 것입니다. 그런"
" 다음 객체는 파일 시스템 경로의 저수준 표현을 :class:`str`\\이나 :class:`bytes` 객체로 제공할 수 "
"있습니다. 이것은 :class:`os.PathLike`\\을 구현하거나 파일 시스템 경로를 나타내는 :class:`str`\\나 "
":class:`bytes` 객체면 객체를 :term:`경로류 <path-like object>`\\로 간주함을 뜻합니다. 코드는 "
":func:`os.fspath`, :func:`os.fsdecode` 또는 :func:`os.fsencode`\\를 사용하여 경로류"
" 객체의 :class:`str` 및/또는 :class:`bytes` 표현을 명시적으로 얻을 수 있습니다."

#: ../../whatsnew/3.6.rst:426
msgid ""
"The built-in :func:`open` function has been updated to accept "
":class:`os.PathLike` objects, as have all relevant functions in the "
":mod:`os` and :mod:`os.path` modules, and most other functions and "
"classes in the standard library.  The :class:`os.DirEntry` class and "
"relevant classes in :mod:`pathlib` have also been updated to implement "
":class:`os.PathLike`."
msgstr ""
"내장 :func:`open` 함수는 :mod:`os`\\와 :mod:`os.path` 모듈의 모든 관련 함수와 표준 라이브러리의 "
"대부분의 다른 함수와 클래스와 마찬가지로, :class:`os.PathLike` 객체를 받아들이도록 갱신되었습니다. "
":class:`os.DirEntry` 클래스와 :mod:`pathlib`\\의 관련 클래스도 "
":class:`os.PathLike`\\을 구현하도록 갱신되었습니다."

#: ../../whatsnew/3.6.rst:433
msgid ""
"The hope is that updating the fundamental functions for operating on file"
" system paths will lead to third-party code to implicitly support all "
":term:`path-like objects <path-like object>` without any code changes, or"
" at least very minimal ones (e.g. calling :func:`os.fspath` at the "
"beginning of code before operating on a path-like object)."
msgstr ""
"기대하는 것은 파일 시스템 경로에서 작동하는 기반 함수들을 갱신하면 코드 변경 없이, 혹은 최소한의 변경만으로도 (예를 들어 경로류"
" 객체에 대한 연산 전에 코드 시작 부분에서 :func:`os.fspath`\\를 호출하기), 제삼자 코드가 모든 "
":term:`경로류 객체 <path-like object>`\\를 묵시적으로 지원하게 되는 것입니다."

#: ../../whatsnew/3.6.rst:440
msgid ""
"Here are some examples of how the new interface allows for "
":class:`pathlib.Path` to be used more easily and transparently with pre-"
"existing code::"
msgstr ""
"다음은 새 인터페이스를 사용하여 :class:`pathlib.Path`\\를 기존 코드로보다 쉽고 투명하게 사용할 수 있는 방법에 "
"대한 몇 가지 예입니다::"

#: ../../whatsnew/3.6.rst:444
msgid ""
">>> import pathlib\n"
">>> with open(pathlib.Path(\"README\")) as f:\n"
"...     contents = f.read()\n"
"...\n"
">>> import os.path\n"
">>> os.path.splitext(pathlib.Path(\"some_file.txt\"))\n"
"('some_file', '.txt')\n"
">>> os.path.join(\"/a/b\", pathlib.Path(\"c\"))\n"
"'/a/b/c'\n"
">>> import os\n"
">>> os.fspath(pathlib.Path(\"some_file.txt\"))\n"
"'some_file.txt'"
msgstr ""

#: ../../whatsnew/3.6.rst:457
msgid ""
"(Implemented by Brett Cannon, Ethan Furman, Dusty Phillips, and Jelle "
"Zijlstra.)"
msgstr ""
"(Implemented by Brett Cannon, Ethan Furman, Dusty Phillips, and Jelle "
"Zijlstra.)"

#: ../../whatsnew/3.6.rst:461
msgid ":pep:`519` -- Adding a file system path protocol"
msgstr ":pep:`519` -- 파일 시스템 경로 프로토콜 추가"

#: ../../whatsnew/3.6.rst:462
msgid "PEP written by Brett Cannon and Koos Zevenhoven."
msgstr "Brett Cannon과 Koos Zevenhoven이 작성한 PEP."

#: ../../whatsnew/3.6.rst:468
msgid "PEP 495: Local Time Disambiguation"
msgstr "PEP 495: 현지 시간 명확성"

#: ../../whatsnew/3.6.rst:470
msgid ""
"In most world locations, there have been and will be times when local "
"clocks are moved back.  In those times, intervals are introduced in which"
" local clocks show the same time twice in the same day. In these "
"situations, the information displayed on a local clock (or stored in a "
"Python datetime instance) is insufficient to identify a particular moment"
" in time."
msgstr ""
"대부분의 세계 위치에서, 현지 시계가 뒤로 이동하는 시간이 있었고 앞으로도 있을 것입니다. 이 시간에는, 현지 시계가 같은 날에 "
"같은 시간을 두 번 표시하는 간격이 도입되었습니다. 이러한 상황에서, 현지 시계에 표시되는 (또는 파이썬 datetime 인스턴스에"
" 저장된) 정보는 특정 시점을 식별하기에 충분하지 않습니다."

#: ../../whatsnew/3.6.rst:476
msgid ""
":pep:`495` adds the new *fold* attribute to instances of "
":class:`datetime.datetime` and :class:`datetime.time` classes to "
"differentiate between two moments in time for which local times are the "
"same::"
msgstr ""
":pep:`495`\\는 :class:`datetime.datetime`\\과 :class:`datetime.time` 클래스의 "
"인스턴스에 새로운 *fold* 어트리뷰트를 추가하여 현지 시간이 같은 두 순간을 구별합니다::"

#: ../../whatsnew/3.6.rst:480
msgid ""
">>> u0 = datetime(2016, 11, 6, 4, tzinfo=timezone.utc)\n"
">>> for i in range(4):\n"
"...     u = u0 + i*HOUR\n"
"...     t = u.astimezone(Eastern)\n"
"...     print(u.time(), 'UTC =', t.time(), t.tzname(), t.fold)\n"
"...\n"
"04:00:00 UTC = 00:00:00 EDT 0\n"
"05:00:00 UTC = 01:00:00 EDT 0\n"
"06:00:00 UTC = 01:00:00 EST 1\n"
"07:00:00 UTC = 02:00:00 EST 0"
msgstr ""

#: ../../whatsnew/3.6.rst:491
msgid ""
"The values of the :attr:`fold <datetime.datetime.fold>` attribute have "
"the value ``0`` for all instances except those that represent the second "
"(chronologically) moment in time in an ambiguous case."
msgstr ""
":attr:`fold <datetime.datetime.fold>` 어트리뷰트의 값은 모호한 경우의 두 번째 (시간순으로) 순간을 "
"나타내는 인스턴스를 제외한 모든 인스턴스에 대해 ``0`` 값을 갖습니다."

#: ../../whatsnew/3.6.rst:497
msgid ":pep:`495` -- Local Time Disambiguation"
msgstr ":pep:`495` -- 현지 시간 명확성"

#: ../../whatsnew/3.6.rst:498
msgid ""
"PEP written by Alexander Belopolsky and Tim Peters, implementation by "
"Alexander Belopolsky."
msgstr "Alexander Belopolsky와 Tim Peters가 작성하고 Alexander Belopolsky가 구현한 PEP."

#: ../../whatsnew/3.6.rst:505
msgid "PEP 529: Change Windows filesystem encoding to UTF-8"
msgstr "PEP 529: 윈도우 파일 시스템 인코딩을 UTF-8로 변경"

#: ../../whatsnew/3.6.rst:507
msgid ""
"Representing filesystem paths is best performed with str (Unicode) rather"
" than bytes. However, there are some situations where using bytes is "
"sufficient and correct."
msgstr ""
"파일 시스템 경로를 나타내는 것은 bytes가 아닌 str(유니코드)로 수행하는 것이 가장 좋습니다. 그러나, bytes 사용이 "
"충분하고 올바른 경우가 있습니다."

#: ../../whatsnew/3.6.rst:511
#, fuzzy
msgid ""
"Prior to Python 3.6, data loss could result when using bytes paths on "
"Windows. With this change, using bytes to represent paths is now "
"supported on Windows, provided those bytes are encoded with the encoding "
"returned by :func:`sys.getfilesystemencoding`, which now defaults to "
"``'utf-8'``."
msgstr ""
"파이썬 3.6 이전에는, 윈도우에서 bytes 경로를 사용할 때 데이터 손실이 발생할 수 있습니다. 이 변경으로 인해, 이제 "
"윈도우에서 bytes를 사용하여 경로를 나타내는 것이 지원됩니다. 단, 해당 bytes는 "
":func:`sys.getfilesystemencoding()`\\에서 반환한 인코딩으로 인코딩되며, 현재 기본값은 "
"``'utf-8'``\\입니다."

#: ../../whatsnew/3.6.rst:516
#, fuzzy
msgid ""
"Applications that do not use str to represent paths should use "
":func:`os.fsencode` and :func:`os.fsdecode` to ensure their bytes are "
"correctly encoded. To revert to the previous behaviour, set "
":envvar:`PYTHONLEGACYWINDOWSFSENCODING` or call "
":func:`sys._enablelegacywindowsfsencoding`."
msgstr ""
"경로를 나타내기 위해 str을 사용하지 않는 응용 프로그램은 :func:`os.fsencode()`\\와 "
":func:`os.fsdecode()`\\를 사용하여 해당 bytes가 올바르게 인코딩되도록 해야 합니다. 이전 동작으로 "
"되돌리려면, :envvar:`PYTHONLEGACYWINDOWSFSENCODING`\\을 설정하거나 "
":func:`sys._enablelegacywindowsfsencoding`\\을 호출하십시오."

#: ../../whatsnew/3.6.rst:522
msgid ""
"See :pep:`529` for more information and discussion of code modifications "
"that may be required."
msgstr "필요한 코드 수정에 대한 자세한 정보와 논의는 :pep:`529`\\를 참조하십시오."

#: ../../whatsnew/3.6.rst:529
msgid "PEP 528: Change Windows console encoding to UTF-8"
msgstr "PEP 528: 윈도우 콘솔 인코딩을 UTF-8로 변경"

#: ../../whatsnew/3.6.rst:531
msgid ""
"The default console on Windows will now accept all Unicode characters and"
" provide correctly read str objects to Python code. ``sys.stdin``, "
"``sys.stdout`` and ``sys.stderr`` now default to utf-8 encoding."
msgstr ""
"윈도우의 기본 콘솔은 이제 모든 유니코드 문자를 허용하고 파이썬 코드에 올바르게 읽힌 str 객체를 제공합니다. "
"``sys.stdin``, ``sys.stdout`` 및 ``sys.stderr``\\은 이제 utf-8 인코딩으로 기본 "
"설정됩니다."

#: ../../whatsnew/3.6.rst:535
msgid ""
"This change only applies when using an interactive console, and not when "
"redirecting files or pipes. To revert to the previous behaviour for "
"interactive console use, set :envvar:`PYTHONLEGACYWINDOWSSTDIO`."
msgstr ""
"이 변경은 대화 형 콘솔을 사용할 때만 적용되며, 파일이나 파이프를 리디렉션 할 때는 적용되지 않습니다. 대화식 콘솔 사용 시에 "
"이전 동작으로 되돌리려면, :envvar:`PYTHONLEGACYWINDOWSSTDIO`\\를 설정하십시오."

#: ../../whatsnew/3.6.rst:541
msgid ":pep:`528` -- Change Windows console encoding to UTF-8"
msgstr ":pep:`528` -- 윈도우 콘솔 인코딩을 UTF-8로 변경"

#: ../../whatsnew/3.6.rst:542
msgid "PEP written and implemented by Steve Dower."
msgstr "Steve Dower가 작성하고 구현한 PEP."

#: ../../whatsnew/3.6.rst:548
msgid "PEP 520: Preserving Class Attribute Definition Order"
msgstr "PEP 520: 클래스 어트리뷰트 정의 순서 유지"

#: ../../whatsnew/3.6.rst:550
#, fuzzy
msgid ""
"Attributes in a class definition body have a natural ordering: the same "
"order in which the names appear in the source.  This order is now "
"preserved in the new class's :attr:`~type.__dict__` attribute."
msgstr ""
"클래스 정의 본문의 어트리뷰트는 자연스러운 순서를 갖습니다: 이름이 소스에 나타나는 것과 같은 순서. 이 순서는 이제 새 클래스의 "
":attr:`~object.__dict__` 어트리뷰트에 유지됩니다."

#: ../../whatsnew/3.6.rst:554
msgid ""
"Also, the effective default class *execution* namespace (returned from "
":ref:`type.__prepare__() <prepare>`) is now an insertion-order-preserving"
" mapping."
msgstr ""
"또한, 유효한 기본 클래스 *실행* 이름 공간(:ref:`type.__prepare__() <prepare>`\\에서 반환되는 "
"것)은 이제 삽입 순서 보존 매핑입니다."

#: ../../whatsnew/3.6.rst:560
msgid ":pep:`520` -- Preserving Class Attribute Definition Order"
msgstr ":pep:`520` -- 클래스 어트리뷰트 정의 순서 유지"

#: ../../whatsnew/3.6.rst:561 ../../whatsnew/3.6.rst:575
msgid "PEP written and implemented by Eric Snow."
msgstr "Eric Snow가 작성하고 구현한 PEP."

#: ../../whatsnew/3.6.rst:567
msgid "PEP 468: Preserving Keyword Argument Order"
msgstr "PEP 468: 키워드 인자 순서 유지"

#: ../../whatsnew/3.6.rst:569
msgid ""
"``**kwargs`` in a function signature is now guaranteed to be an "
"insertion-order-preserving mapping."
msgstr "함수 서명의 ``**kwargs``\\는 이제 삽입 순서 보존 매핑임이 보장됩니다."

#: ../../whatsnew/3.6.rst:574
msgid ":pep:`468` -- Preserving Keyword Argument Order"
msgstr ":pep:`468` -- 키워드 인자 순서 유지"

#: ../../whatsnew/3.6.rst:581
msgid "New :ref:`dict <typesmapping>` implementation"
msgstr "새로운 :ref:`dict <typesmapping>` 구현"

#: ../../whatsnew/3.6.rst:583
#, python-format
msgid ""
"The :ref:`dict <typesmapping>` type now uses a \"compact\" representation"
" based on `a proposal by Raymond Hettinger "
"<https://mail.python.org/pipermail/python-"
"dev/2012-December/123028.html>`_ which was `first implemented by PyPy "
"<https://morepypy.blogspot.com/2015/01/faster-more-memory-efficient-and-"
"more.html>`_. The memory usage of the new :func:`dict` is between 20% and"
" 25% smaller compared to Python 3.5."
msgstr ""
":ref:`dict <typesmapping>` 형은 이제 `PyPy에서 처음 구현된 "
"<https://morepypy.blogspot.com/2015/01/faster-more-memory-efficient-and-"
"more.html>`_ `Raymond Hettinger의 제안 <https://mail.python.org/pipermail"
"/python-dev/2012-December/123028.html>`_\\에 기반한 \"간결한\" 표현을 사용합니다. 새로운 "
":func:`dict`\\의 메모리 사용량은 파이썬 3.5에 비해 20%에서 25% 더 적습니다."

#: ../../whatsnew/3.6.rst:591
msgid ""
"The order-preserving aspect of this new implementation is considered an "
"implementation detail and should not be relied upon (this may change in "
"the future, but it is desired to have this new dict implementation in the"
" language for a few releases before changing the language spec to mandate"
" order-preserving semantics for all current and future Python "
"implementations; this also helps preserve backwards-compatibility with "
"older versions of the language where random iteration order is still in "
"effect, e.g. Python 3.5)."
msgstr ""
"이 새로운 구현의 순서 보존 측면은 구현 세부 사항으로 간주하며 이에 의존해서는 안 됩니다 (향후에 변경될 수 있지만, 현재와 "
"미래의 모든 파이썬 구현에 대해 순서 보존 의미 체계를 의무화하도록 언어 명세를 변경하기 전에 몇 번의 릴리스에서 이 새로운 "
"dict 구현을 언어에 포함하는 것이 바람직합니다; 이것은 또한 무작위 이터레이션 순서가 여전히 유효한 언어의 이전 버전과의 과거 "
"호환성을 유지하는 데 도움이 됩니다, 예를 들어 파이썬 3.5)."

#: ../../whatsnew/3.6.rst:600
msgid ""
"(Contributed by INADA Naoki in :issue:`27350`. Idea `originally suggested"
" by Raymond Hettinger <https://mail.python.org/pipermail/python-"
"dev/2012-December/123028.html>`_.)"
msgstr ""
"(Contributed by INADA Naoki in :issue:`27350`. `원래 Raymond Hettinger가 제안한"
" <https://mail.python.org/pipermail/python-"
"dev/2012-December/123028.html>`_ 아이디어.)"

#: ../../whatsnew/3.6.rst:608
msgid "PEP 523: Adding a frame evaluation API to CPython"
msgstr "PEP 523: CPython에 프레임 평가 API 추가"

#: ../../whatsnew/3.6.rst:610
msgid ""
"While Python provides extensive support to customize how code executes, "
"one place it has not done so is in the evaluation of frame objects.  If "
"you wanted some way to intercept frame evaluation in Python there really "
"wasn't any way without directly manipulating function pointers for "
"defined functions."
msgstr ""
"파이썬은 코드 실행 방법을 사용자 정의하기 위한 광범위한 지원을 제공하지만, 빠진 한 가지는 프레임 객체를 평가하는 것입니다. "
"파이썬에서 프레임 평가를 가로채는 방법을 원한다면 정의된 함수에 대한 함수 포인터를 직접 조작하지 않고는 방법이 없었습니다."

#: ../../whatsnew/3.6.rst:616
msgid ""
":pep:`523` changes this by providing an API to make frame evaluation "
"pluggable at the C level. This will allow for tools such as debuggers and"
" JITs to intercept frame evaluation before the execution of Python code "
"begins. This enables the use of alternative evaluation implementations "
"for Python code, tracking frame evaluation, etc."
msgstr ""
":pep:`523`\\은 프레임 평가를 C 수준에서 끼워 넣을 수 있도록 하는 API를 제공하여 이를 바꿉니다. 이를 통해 디버거와"
" JIT과 같은 도구가 파이썬 코드 실행이 시작되기 전에 프레임 평가를 가로챌 수 있습니다. 이를 통해 파이썬 코드의 대체 평가 "
"구현, 추적 프레임 평가 등이 가능해집니다."

#: ../../whatsnew/3.6.rst:623
msgid ""
"This API is not part of the limited C API and is marked as private to "
"signal that usage of this API is expected to be limited and only "
"applicable to very select, low-level use-cases. Semantics of the API will"
" change with Python as necessary."
msgstr ""
"이 API는 제한된 C API의 일부가 아니며 이 API의 사용이 제한적일 것으로 기대하고, 매우 선별된 저수준 사용 사례에만 적용"
" 가능함을 알리기 위해 비공개로 표시됩니다. API의 의미는 필요에 따라 파이썬과 함께 변경됩니다."

#: ../../whatsnew/3.6.rst:630
msgid ":pep:`523` -- Adding a frame evaluation API to CPython"
msgstr ":pep:`523` -- CPython에 프레임 평가 API 추가"

#: ../../whatsnew/3.6.rst:631
msgid "PEP written by Brett Cannon and Dino Viehland."
msgstr "Brett Cannon과 Dino Viehland가 작성한 PEP."

#: ../../whatsnew/3.6.rst:637
msgid "PYTHONMALLOC environment variable"
msgstr "PYTHONMALLOC 환경 변수"

#: ../../whatsnew/3.6.rst:639
msgid ""
"The new :envvar:`PYTHONMALLOC` environment variable allows setting the "
"Python memory allocators and installing debug hooks."
msgstr ""
"새로운 :envvar:`PYTHONMALLOC` 환경 변수를 사용하면 파이썬 메모리 할당자를 설정하고 디버그 훅을 설치할 수 "
"있습니다."

#: ../../whatsnew/3.6.rst:642
msgid ""
"It is now possible to install debug hooks on Python memory allocators on "
"Python compiled in release mode using ``PYTHONMALLOC=debug``. Effects of "
"debug hooks:"
msgstr ""
"이제 ``PYTHONMALLOC=debug``\\를 사용하여 릴리스 모드로 컴파일된 파이썬의 파이썬 메모리 할당자에 디버그 훅을 "
"설치할 수 있습니다. 디버그 훅의 효과:"

#: ../../whatsnew/3.6.rst:645
msgid "Newly allocated memory is filled with the byte ``0xCB``"
msgstr "새로 할당된 메모리는 ``0xCB`` 바이트로 채워집니다"

#: ../../whatsnew/3.6.rst:646
msgid "Freed memory is filled with the byte ``0xDB``"
msgstr "해제된 메모리는 ``0xDB`` 바이트로 채워집니다"

#: ../../whatsnew/3.6.rst:647
msgid ""
"Detect violations of the Python memory allocator API. For example, "
":c:func:`PyObject_Free` called on a memory block allocated by "
":c:func:`PyMem_Malloc`."
msgstr ""
"파이썬 메모리 할당자 API 위반을 감지합니다. 예를 들어, :c:func:`PyMem_Malloc`\\에 의해 할당된 메모리 "
"블록에 대해 호출된 :c:func:`PyObject_Free`."

#: ../../whatsnew/3.6.rst:650
msgid "Detect writes before the start of a buffer (buffer underflows)"
msgstr "버퍼 시작 앞에 쓰기를 감지합니다 (버퍼 언더플로)"

#: ../../whatsnew/3.6.rst:651
msgid "Detect writes after the end of a buffer (buffer overflows)"
msgstr "버퍼 끝 뒤에 쓰기를 감지합니다 (버퍼 오버플로)"

#: ../../whatsnew/3.6.rst:652
#, fuzzy
msgid ""
"Check that the :term:`GIL <global interpreter lock>` is held when "
"allocator functions of :c:macro:`PYMEM_DOMAIN_OBJ` (ex: "
":c:func:`PyObject_Malloc`) and :c:macro:`PYMEM_DOMAIN_MEM` (ex: "
":c:func:`PyMem_Malloc`) domains are called."
msgstr ""
":c:data:`PYMEM_DOMAIN_OBJ`\\(예: :c:func:`PyObject_Malloc`)와 "
":c:data:`PYMEM_DOMAIN_MEM`\\(예: :c:func:`PyMem_Malloc`) 도메인의 할당자 함수가 호출될 "
"때 :term:`GIL <global interpreter lock>`\\을 잡았는지 확인합니다."

#: ../../whatsnew/3.6.rst:656
msgid "Checking if the GIL is held is also a new feature of Python 3.6."
msgstr "GIL을 잡았는지 확인하는 것도 파이썬 3.6의 새로운 기능입니다."

#: ../../whatsnew/3.6.rst:658
msgid ""
"See the :c:func:`PyMem_SetupDebugHooks` function for debug hooks on "
"Python memory allocators."
msgstr "파이썬 메모리 할당자에 대한 디버그 훅은 :c:func:`PyMem_SetupDebugHooks` 함수를 참조하십시오."

#: ../../whatsnew/3.6.rst:661
msgid ""
"It is now also possible to force the usage of the :c:func:`malloc` "
"allocator of the C library for all Python memory allocations using "
"``PYTHONMALLOC=malloc``. This is helpful when using external memory "
"debuggers like Valgrind on a Python compiled in release mode."
msgstr ""
"이제 ``PYTHONMALLOC=malloc``\\을 사용해서 모든 파이썬 메모리 할당에 대해 C 라이브러리의 "
":c:func:`malloc` 할당자를 강제로 사용하게 할 수도 있습니다. 이것은 릴리스 모드로 컴파일된 파이썬에 Valgrind와"
" 같은 외부 메모리 디버거를 사용할 때 유용합니다."

#: ../../whatsnew/3.6.rst:666
msgid ""
"On error, the debug hooks on Python memory allocators now use the "
":mod:`tracemalloc` module to get the traceback where a memory block was "
"allocated."
msgstr ""
"에러 시, 파이썬 메모리 할당자의 디버그 훅은 이제 :mod:`tracemalloc` 모듈을 사용하여 메모리 블록이 할당된 "
"트레이스백을 가져옵니다."

#: ../../whatsnew/3.6.rst:670
msgid ""
"Example of fatal error on buffer overflow using ``python3.6 -X "
"tracemalloc=5`` (store 5 frames in traces)::"
msgstr ""
"``python3.6 -X tracemalloc=5``\\(트레이스에 5개 프레임을 저장합니다)를 사용하는 버퍼 오버플로로 인한 "
"치명적인 에러의 예::"

#: ../../whatsnew/3.6.rst:673
msgid ""
"Debug memory block at address p=0x7fbcd41666f8: API 'o'\n"
"    4 bytes originally requested\n"
"    The 7 pad bytes at p-7 are FORBIDDENBYTE, as expected.\n"
"    The 8 pad bytes at tail=0x7fbcd41666fc are not all FORBIDDENBYTE "
"(0xfb):\n"
"        at tail+0: 0x02 *** OUCH\n"
"        at tail+1: 0xfb\n"
"        at tail+2: 0xfb\n"
"        at tail+3: 0xfb\n"
"        at tail+4: 0xfb\n"
"        at tail+5: 0xfb\n"
"        at tail+6: 0xfb\n"
"        at tail+7: 0xfb\n"
"    The block was made by call #1233329 to debug malloc/realloc.\n"
"    Data at p: 1a 2b 30 00\n"
"\n"
"Memory block allocated at (most recent call first):\n"
"  File \"test/test_bytes.py\", line 323\n"
"  File \"unittest/case.py\", line 600\n"
"  File \"unittest/case.py\", line 648\n"
"  File \"unittest/suite.py\", line 122\n"
"  File \"unittest/suite.py\", line 84\n"
"\n"
"Fatal Python error: bad trailing pad byte\n"
"\n"
"Current thread 0x00007fbcdbd32700 (most recent call first):\n"
"  File \"test/test_bytes.py\", line 323 in test_hex\n"
"  File \"unittest/case.py\", line 600 in run\n"
"  File \"unittest/case.py\", line 648 in __call__\n"
"  File \"unittest/suite.py\", line 122 in run\n"
"  File \"unittest/suite.py\", line 84 in __call__\n"
"  File \"unittest/suite.py\", line 122 in run\n"
"  File \"unittest/suite.py\", line 84 in __call__\n"
"  ..."
msgstr ""

#: ../../whatsnew/3.6.rst:707
msgid "(Contributed by Victor Stinner in :issue:`26516` and :issue:`26564`.)"
msgstr "(Contributed by Victor Stinner in :issue:`26516` and :issue:`26564`.)"

#: ../../whatsnew/3.6.rst:713
msgid "DTrace and SystemTap probing support"
msgstr "DTrace와 SystemTap 프로브 지원"

#: ../../whatsnew/3.6.rst:715
msgid ""
"Python can now be built ``--with-dtrace`` which enables static markers "
"for the following events in the interpreter:"
msgstr "이제 파이썬은 인터프리터에서 다음 이벤트에 대한 정적 마커를 활성화하는 ``--with-dtrace``\\로 빌드 할 수 있습니다:"

#: ../../whatsnew/3.6.rst:718
msgid "function call/return"
msgstr "함수 호출/반환"

#: ../../whatsnew/3.6.rst:720
msgid "garbage collection started/finished"
msgstr "가비지 수거 시작/완료"

#: ../../whatsnew/3.6.rst:722
msgid "line of code executed."
msgstr "실행된 코드 줄."

#: ../../whatsnew/3.6.rst:724
#, fuzzy
msgid ""
"This can be used to instrument running interpreters in production, "
"without the need to recompile specific :ref:`debug builds <debug-build>` "
"or providing application-specific profiling/debugging code."
msgstr ""
"이것은 특정 디버그 빌드를 다시 컴파일하거나 응용 프로그램별 프로파일링/디버깅 코드를 제공할 필요 없이, 프로덕션에서 실행 중인 "
"인터프리터를 계측하는 데 사용할 수 있습니다."

#: ../../whatsnew/3.6.rst:728
msgid "More details in :ref:`instrumentation`."
msgstr "자세한 내용은 :ref:`instrumentation`\\에 있습니다."

#: ../../whatsnew/3.6.rst:730
msgid ""
"The current implementation is tested on Linux and macOS.  Additional "
"markers may be added in the future."
msgstr "현재 구현은 리눅스와 macOS에서 테스트되었습니다. 향후 추가 마커가 추가될 수 있습니다."

#: ../../whatsnew/3.6.rst:733
msgid ""
"(Contributed by Łukasz Langa in :issue:`21590`, based on patches by Jesús"
" Cea Avión, David Malcolm, and Nikhil Benesch.)"
msgstr ""
"(Contributed by Łukasz Langa in :issue:`21590`, based on patches by Jesús"
" Cea Avión, David Malcolm, and Nikhil Benesch.)"

#: ../../whatsnew/3.6.rst:738
msgid "Other Language Changes"
msgstr "기타 언어 변경"

#: ../../whatsnew/3.6.rst:740
msgid "Some smaller changes made to the core Python language are:"
msgstr "핵심 파이썬 언어에 대한 몇 가지 작은 변경 사항은 다음과 같습니다:"

#: ../../whatsnew/3.6.rst:742
msgid ""
"A ``global`` or ``nonlocal`` statement must now textually appear before "
"the first use of the affected name in the same scope. Previously this was"
" a :exc:`SyntaxWarning`."
msgstr ""
"``global``\\이나 ``nonlocal`` 문은 이제 같은 스코프에서 영향을 받는 이름을 처음 사용하기 전에 텍스트로 "
"나타나야 합니다. 이전에는 :exc:`SyntaxWarning`\\이었습니다."

#: ../../whatsnew/3.6.rst:746
msgid ""
"It is now possible to set a :ref:`special method <specialnames>` to "
"``None`` to indicate that the corresponding operation is not available. "
"For example, if a class sets :meth:`__iter__` to ``None``, the class is "
"not iterable. (Contributed by Andrew Barnert and Ivan Levkivskyi in "
":issue:`25958`.)"
msgstr ""
"이제 해당 연산을 사용할 수 없음을 나타내기 위해 :ref:`특수 메서드 <specialnames>`\\를 ``None``\\으로 "
"설정할 수 있습니다. 예를 들어, 클래스가 :meth:`__iter__`\\를 ``None``\\으로 설정하면, 해당 클래스는 "
"이터러블이 아닙니다. (Contributed by Andrew Barnert and Ivan Levkivskyi in "
":issue:`25958`.)"

#: ../../whatsnew/3.6.rst:752
#, python-brace-format
msgid ""
"Long sequences of repeated traceback lines are now abbreviated as "
"``\"[Previous line repeated {count} more times]\"`` (see "
":ref:`whatsnew36-traceback` for an example). (Contributed by Emanuel "
"Barry in :issue:`26823`.)"
msgstr ""
"반복되는 트레이스백 줄의 긴 시퀀스는 이제 ``\"[Previous line repeated {count} more "
"times]\"``\\로 축약됩니다 (예는 :ref:`whatsnew36-traceback` 을 참조하십시오). "
"(Contributed by Emanuel Barry in :issue:`26823`.)"

#: ../../whatsnew/3.6.rst:757
msgid ""
"Import now raises the new exception :exc:`ModuleNotFoundError` (subclass "
"of :exc:`ImportError`) when it cannot find a module.  Code that currently"
" checks for ImportError (in try-except) will still work. (Contributed by "
"Eric Snow in :issue:`15767`.)"
msgstr ""
"임포트는 이제 모듈을 찾을 수 없을 때 새로운 예외 "
":exc:`ModuleNotFoundError`\\(:exc:`ImportError`\\의 서브 클래스)를 발생시킵니다. 현재 "
"(try-except에서) ImportError를 확인하는 코드는 계속 작동합니다. (Contributed by Eric Snow "
"in :issue:`15767`.)"

#: ../../whatsnew/3.6.rst:762
msgid ""
"Class methods relying on zero-argument ``super()`` will now work "
"correctly when called from metaclass methods during class creation. "
"(Contributed by Martin Teichmann in :issue:`23722`.)"
msgstr ""
"인자가 없는 ``super()``\\에 의존하는 클래스 메서드는 이제 클래스 생성 중에 메타 클래스 메서드에서 호출될 때 올바르게 "
"작동합니다. (Contributed by Martin Teichmann in :issue:`23722`.)"

#: ../../whatsnew/3.6.rst:768
msgid "New Modules"
msgstr "새로운 모듈"

#: ../../whatsnew/3.6.rst:773
msgid "secrets"
msgstr "secrets"

#: ../../whatsnew/3.6.rst:775
msgid ""
"The main purpose of the new :mod:`secrets` module is to provide an "
"obvious way to reliably generate cryptographically strong pseudo-random "
"values suitable for managing secrets, such as account authentication, "
"tokens, and similar."
msgstr ""
"새로운 :mod:`secrets` 모듈의 주요 목적은 계정 인증, 토큰 등과 같은 비밀 관리에 적합한 암호학적으로 강력한 의사 난수"
" 값을 신뢰성 있게 생성할 수 있는 확실한 방법을 제공하는 것입니다."

#: ../../whatsnew/3.6.rst:781
#, fuzzy
msgid ""
"Note that the pseudo-random generators in the :mod:`random` module should"
" *NOT* be used for security purposes.  Use :mod:`secrets` on Python 3.6+ "
"and :func:`os.urandom` on Python 3.5 and earlier."
msgstr ""
":mod:`random` 모듈의 의사 난수 생성기는 보안 목적으로 사용하지 *않아야* 합니다. 파이썬 3.6 이상에서는 "
":mod:`secrets`\\를 사용하고 파이썬 3.5와 이전 버전에서는 :func:`os.urandom()`\\을 사용하십시오."

#: ../../whatsnew/3.6.rst:787
msgid ":pep:`506` -- Adding A Secrets Module To The Standard Library"
msgstr ":pep:`506` -- 표준 라이브러리에 비밀 모듈 추가"

#: ../../whatsnew/3.6.rst:788
msgid "PEP written and implemented by Steven D'Aprano."
msgstr "Steven D'Aprano 가 작성하고 구현한 PEP."

#: ../../whatsnew/3.6.rst:792
msgid "Improved Modules"
msgstr "개선된 모듈"

#: ../../whatsnew/3.6.rst:795
msgid "array"
msgstr "array"

#: ../../whatsnew/3.6.rst:797
msgid ""
"Exhausted iterators of :class:`array.array` will now stay exhausted even "
"if the iterated array is extended.  This is consistent with the behavior "
"of other mutable sequences."
msgstr ""
":class:`array.array`\\의 소진된 이터레이터는 이제 이터레이트 되는 배열이 확장된 경우에도 소진된 상태로 "
"유지됩니다. 이것은 다른 가변 시퀀스의 동작과 일치합니다."

#: ../../whatsnew/3.6.rst:801
msgid "Contributed by Serhiy Storchaka in :issue:`26492`."
msgstr "Contributed by Serhiy Storchaka in :issue:`26492`."

#: ../../whatsnew/3.6.rst:804
msgid "ast"
msgstr "ast"

#: ../../whatsnew/3.6.rst:806
msgid ""
"The new :class:`ast.Constant` AST node has been added.  It can be used by"
" external AST optimizers for the purposes of constant folding."
msgstr ""
"새로운 :class:`ast.Constant` AST 노드가 추가되었습니다. 상수 폴딩을 위해 외부 AST 최적화기에서 사용할 수 "
"있습니다."

#: ../../whatsnew/3.6.rst:809
msgid "Contributed by Victor Stinner in :issue:`26146`."
msgstr "Contributed by Victor Stinner in :issue:`26146`."

#: ../../whatsnew/3.6.rst:813
msgid "asyncio"
msgstr "asyncio"

#: ../../whatsnew/3.6.rst:815
msgid ""
"Starting with Python 3.6 the ``asyncio`` module is no longer provisional "
"and its API is considered stable."
msgstr "파이썬 3.6부터 ``asyncio`` 모듈은 더는 잠정적이 아니며 해당 API는 안정적인 것으로 간주합니다."

#: ../../whatsnew/3.6.rst:818
msgid ""
"Notable changes in the :mod:`asyncio` module since Python 3.5.0 (all "
"backported to 3.5.x due to the provisional status):"
msgstr ""
"파이썬 3.5.0 이후 :mod:`asyncio` 모듈의 주목할만한 변경 사항 (잠정적 상태로 인해 모두 3.5.x로 역 "
"이식되었습니다):"

#: ../../whatsnew/3.6.rst:821
msgid ""
"The :func:`~asyncio.get_event_loop` function has been changed to always "
"return the currently running loop when called from coroutines and "
"callbacks. (Contributed by Yury Selivanov in :issue:`28613`.)"
msgstr ""
":func:`~asyncio.get_event_loop` 함수는 코루틴과 콜백에서 호출될 때 항상 현재 실행 중인 루프를 반환하도록"
" 변경되었습니다. (Contributed by Yury Selivanov in :issue:`28613`.)"

#: ../../whatsnew/3.6.rst:826
msgid ""
"The :func:`~asyncio.ensure_future` function and all functions that use "
"it, such as :meth:`loop.run_until_complete() "
"<asyncio.loop.run_until_complete>`, now accept all kinds of "
":term:`awaitable objects <awaitable>`. (Contributed by Yury Selivanov.)"
msgstr ""
":func:`~asyncio.ensure_future` 함수와 이를 사용하는 모든 함수(가령 "
":meth:`loop.run_until_complete() <asyncio.loop.run_until_complete>`)는 이제 "
"모든 종류의 :term:`어웨이터블 객체 <awaitable>`\\를 받아들입니다. (Contributed by Yury "
"Selivanov.)"

#: ../../whatsnew/3.6.rst:831
msgid ""
"New :func:`~asyncio.run_coroutine_threadsafe` function to submit "
"coroutines to event loops from other threads. (Contributed by Vincent "
"Michel.)"
msgstr ""
"다른 스레드의 이벤트 루프에 코루틴을 제출하는 새로운 :func:`~asyncio.run_coroutine_threadsafe` "
"함수. (Contributed by Vincent Michel.)"

#: ../../whatsnew/3.6.rst:835
msgid ""
"New :meth:`Transport.is_closing() <asyncio.BaseTransport.is_closing>` "
"method to check if the transport is closing or closed. (Contributed by "
"Yury Selivanov.)"
msgstr ""
"트랜스포트가 닫히고 있거나 닫혔는지 확인하는 새로운 :meth:`Transport.is_closing() "
"<asyncio.BaseTransport.is_closing>` 메서드. (Contributed by Yury Selivanov.)"

#: ../../whatsnew/3.6.rst:839
msgid ""
"The :meth:`loop.create_server() <asyncio.loop.create_server>` method can "
"now accept a list of hosts. (Contributed by Yann Sionneau.)"
msgstr ""
":meth:`loop.create_server() <asyncio.loop.create_server>` 메서드는 이제 호스트 "
"리스트를 받아들일 수 있습니다. (Contributed by Yann Sionneau.)"

#: ../../whatsnew/3.6.rst:843
msgid ""
"New :meth:`loop.create_future() <asyncio.loop.create_future>` method to "
"create Future objects.  This allows alternative event loop "
"implementations, such as `uvloop "
"<https://github.com/MagicStack/uvloop>`_, to provide a faster "
":class:`asyncio.Future` implementation. (Contributed by Yury Selivanov in"
" :issue:`27041`.)"
msgstr ""
"Future 객체를 만드는 새로운 :meth:`loop.create_future() "
"<asyncio.loop.create_future>` 메서드. 이를 통해 `uvloop "
"<https://github.com/MagicStack/uvloop>`_\\와 같은 대체 이벤트 루프 구현이 더 빠른 "
":class:`asyncio.Future` 구현을 제공할 수 있습니다. (Contributed by Yury Selivanov in"
" :issue:`27041`.)"

#: ../../whatsnew/3.6.rst:850
msgid ""
"New :meth:`loop.get_exception_handler() "
"<asyncio.loop.get_exception_handler>` method to get the current exception"
" handler. (Contributed by Yury Selivanov in :issue:`27040`.)"
msgstr ""
"현재 예외 처리기를 가져오는 새로운 :meth:`loop.get_exception_handler() "
"<asyncio.loop.get_exception_handler>` 메서드. (Contributed by Yury Selivanov"
" in :issue:`27040`.)"

#: ../../whatsnew/3.6.rst:854
msgid ""
"New :meth:`StreamReader.readuntil() <asyncio.StreamReader.readuntil>` "
"method to read data from the stream until a separator bytes sequence "
"appears. (Contributed by Mark Korenberg.)"
msgstr ""
"구분자 바이트 시퀀스가 나타날 때까지 스트림에서 데이터를 읽는 새로운 :meth:`StreamReader.readuntil() "
"<asyncio.StreamReader.readuntil>` 메서드. (Contributed by Mark Korenberg.)"

#: ../../whatsnew/3.6.rst:859
msgid ""
"The performance of :meth:`StreamReader.readexactly() "
"<asyncio.StreamReader.readexactly>` has been improved. (Contributed by "
"Mark Korenberg in :issue:`28370`.)"
msgstr ""
":meth:`StreamReader.readexactly() <asyncio.StreamReader.readexactly>`\\의 "
"성능이 향상되었습니다. (Contributed by Mark Korenberg in :issue:`28370`.)"

#: ../../whatsnew/3.6.rst:863
msgid ""
"The :meth:`loop.getaddrinfo() <asyncio.loop.getaddrinfo>` method is "
"optimized to avoid calling the system ``getaddrinfo`` function if the "
"address is already resolved. (Contributed by A. Jesse Jiryu Davis.)"
msgstr ""
":meth:`loop.getaddrinfo() <asyncio.loop.getaddrinfo>` 메서드는 주소가 이미 결정되었으면 "
"시스템 ``getaddrinfo`` 함수를 호출하지 않도록 최적화되었습니다. (Contributed by A. Jesse Jiryu"
" Davis.)"

#: ../../whatsnew/3.6.rst:868
msgid ""
"The :meth:`loop.stop() <asyncio.loop.stop>` method has been changed to "
"stop the loop immediately after the current iteration.  Any new callbacks"
" scheduled as a result of the last iteration will be discarded. "
"(Contributed by Guido van Rossum in :issue:`25593`.)"
msgstr ""
"현재 이터레이션 직후 루프를 중지하도록 :meth:`loop.stop() <asyncio.loop.stop>` 메서드가 "
"변경되었습니다. 마지막 이터레이션의 결과로 예약된 모든 새 콜백은 버려집니다. (Contributed by Guido van "
"Rossum in :issue:`25593`.)"

#: ../../whatsnew/3.6.rst:874
msgid ""
":meth:`Future.set_exception <asyncio.futures.Future.set_exception>` will "
"now raise :exc:`TypeError` when passed an instance of the "
":exc:`StopIteration` exception. (Contributed by Chris Angelico in "
":issue:`26221`.)"
msgstr ""
":meth:`Future.set_exception <asyncio.futures.Future.set_exception>`\\은 이제"
" :exc:`StopIteration` 예외의 인스턴스가 전달될 때 :exc:`TypeError`\\를 발생시킵니다. "
"(Contributed by Chris Angelico in :issue:`26221`.)"

#: ../../whatsnew/3.6.rst:879
msgid ""
"New :meth:`loop.connect_accepted_socket() "
"<asyncio.loop.connect_accepted_socket>` method to be used by servers that"
" accept connections outside of asyncio, but that use asyncio to handle "
"them. (Contributed by Jim Fulton in :issue:`27392`.)"
msgstr ""
"asyncio 외부의 연결을 받아들이지만 이를 처리하기 위해 asyncio를 사용하는 서버에서 사용할 새로운 "
":meth:`loop.connect_accepted_socket() "
"<asyncio.loop.connect_accepted_socket>` 메서드. (Contributed by Jim Fulton "
"in :issue:`27392`.)"

#: ../../whatsnew/3.6.rst:884
msgid ""
"``TCP_NODELAY`` flag is now set for all TCP transports by default. "
"(Contributed by Yury Selivanov in :issue:`27456`.)"
msgstr ""
"``TCP_NODELAY`` 플래그는 이제 기본적으로 모든 TCP 트랜스포트에 대해 설정됩니다. (Contributed by "
"Yury Selivanov in :issue:`27456`.)"

#: ../../whatsnew/3.6.rst:887
msgid ""
"New :meth:`loop.shutdown_asyncgens() <asyncio.loop.shutdown_asyncgens>` "
"to properly close pending asynchronous generators before closing the "
"loop. (Contributed by Yury Selivanov in :issue:`28003`.)"
msgstr ""
"루프를 닫기 전에 계류 중인 비동기 제너레이터를 제대로 닫는 새로운 :meth:`loop.shutdown_asyncgens() "
"<asyncio.loop.shutdown_asyncgens>`. (Contributed by Yury Selivanov in "
":issue:`28003`.)"

#: ../../whatsnew/3.6.rst:892
#, python-format
msgid ""
":class:`Future <asyncio.Future>` and :class:`Task <asyncio.Task>` classes"
" now have an optimized C implementation which makes asyncio code up to "
"30% faster. (Contributed by Yury Selivanov and INADA Naoki in "
":issue:`26081` and :issue:`28544`.)"
msgstr ""
":class:`Future <asyncio.Future>`\\와 :class:`Task <asyncio.Task>` 클래스는 이제 "
"asyncio 코드를 최대 30% 더 빠르게 만드는 최적화된 C 구현을 갖습니다. (Contributed by Yury "
"Selivanov and INADA Naoki in :issue:`26081` and :issue:`28544`.)"

#: ../../whatsnew/3.6.rst:900
msgid "binascii"
msgstr "Binascii"

#: ../../whatsnew/3.6.rst:902
msgid ""
"The :func:`~binascii.b2a_base64` function now accepts an optional "
"*newline* keyword argument to control whether the newline character is "
"appended to the return value. (Contributed by Victor Stinner in "
":issue:`25357`.)"
msgstr ""
":func:`~binascii.b2a_base64` 함수는 이제 반환 값에 줄 넘김 문자를 추가할지를 제어하기 위해 선택적 "
"*newline* 키워드 인자를 받아들입니다. (Contributed by Victor Stinner in "
":issue:`25357`.)"

#: ../../whatsnew/3.6.rst:909
msgid "cmath"
msgstr "cmath"

#: ../../whatsnew/3.6.rst:911
msgid ""
"The new :const:`cmath.tau` (*τ*) constant has been added. (Contributed by"
" Lisa Roach in :issue:`12345`, see :pep:`628` for details.)"
msgstr ""
"새로운 :const:`cmath.tau` (*τ*) 상수가 추가되었습니다. (Contributed by Lisa Roach in "
":issue:`12345`, see :pep:`628` for details.)"

#: ../../whatsnew/3.6.rst:914
msgid ""
"New constants: :const:`cmath.inf` and :const:`cmath.nan` to match "
":const:`math.inf` and :const:`math.nan`, and also :const:`cmath.infj` and"
" :const:`cmath.nanj` to match the format used by complex repr. "
"(Contributed by Mark Dickinson in :issue:`23229`.)"
msgstr ""
"새로운 상수: :const:`math.inf`\\와 :const:`math.nan`\\과 일치하는 "
":const:`cmath.inf`\\와 :const:`cmath.nan`, 그리고 복소수 repr에서 사용하는 형식과 일치하는 "
":const:`cmath.infj`\\와 :const:`cmath.nanj`. (Contributed by Mark "
"Dickinson in :issue:`23229`.)"

#: ../../whatsnew/3.6.rst:921
msgid "collections"
msgstr "collections"

#: ../../whatsnew/3.6.rst:923
msgid ""
"The new :class:`~collections.abc.Collection` abstract base class has been"
" added to represent sized iterable container classes. (Contributed by "
"Ivan Levkivskyi, docs by Neil Girdhar in :issue:`27598`.)"
msgstr ""
"새로운 :class:`~collections.abc.Collection` 추상 베이스 클래스가 추가되어 길이가 있는 이터러블 "
"컨테이너 클래스를 나타냅니다. (Contributed by Ivan Levkivskyi, docs by Neil Girdhar in"
" :issue:`27598`.)"

#: ../../whatsnew/3.6.rst:927
msgid ""
"The new :class:`~collections.abc.Reversible` abstract base class "
"represents iterable classes that also provide the :meth:`__reversed__` "
"method. (Contributed by Ivan Levkivskyi in :issue:`25987`.)"
msgstr ""
"새로운 :class:`~collections.abc.Reversible` 추상 베이스 클래스는 :meth:`__reversed__`"
" 메서드도 제공하는 이터러블 클래스를 나타냅니다. (Contributed by Ivan Levkivskyi in "
":issue:`25987`.)"

#: ../../whatsnew/3.6.rst:931
msgid ""
"The new :class:`~collections.abc.AsyncGenerator` abstract base class "
"represents asynchronous generators. (Contributed by Yury Selivanov in "
":issue:`28720`.)"
msgstr ""
"새로운 :class:`~collections.abc.AsyncGenerator` 추상 베이스 클래스는 비동기 제너레이터를 "
"나타냅니다. (Contributed by Yury Selivanov in :issue:`28720`.)"

#: ../../whatsnew/3.6.rst:935
#, fuzzy
msgid ""
"The :func:`~collections.namedtuple` function now accepts an optional "
"keyword argument *module*, which, when specified, is used for the "
":attr:`~type.__module__` attribute of the returned named tuple class. "
"(Contributed by Raymond Hettinger in :issue:`17941`.)"
msgstr ""
":func:`~collections.namedtuple` 함수는 이제 지정되면 반환된 네임드 튜플 클래스의 "
"``__module__`` 어트리뷰트에 사용되는 선택적 키워드 인자 *module*\\을 받아들입니다. (Contributed by"
" Raymond Hettinger in :issue:`17941`.)"

#: ../../whatsnew/3.6.rst:940 ../../whatsnew/3.6.rst:2295
msgid ""
"The *verbose* and *rename* arguments for :func:`~collections.namedtuple` "
"are now keyword-only. (Contributed by Raymond Hettinger in "
":issue:`25628`.)"
msgstr ""
":func:`~collections.namedtuple`\\에 대한 *verbose*\\와 *rename* 인자는 이제 키워드 "
"전용입니다. (Contributed by Raymond Hettinger in :issue:`25628`.)"

#: ../../whatsnew/3.6.rst:944
msgid ""
"Recursive :class:`collections.deque` instances can now be pickled. "
"(Contributed by Serhiy Storchaka in :issue:`26482`.)"
msgstr ""
"이제 재귀 :class:`collections.deque` 인스턴스를 피클 할 수 있습니다. (Contributed by "
"Serhiy Storchaka in :issue:`26482`.)"

#: ../../whatsnew/3.6.rst:949
msgid "concurrent.futures"
msgstr "concurrent.futures"

#: ../../whatsnew/3.6.rst:951
msgid ""
"The :class:`ThreadPoolExecutor <concurrent.futures.ThreadPoolExecutor>` "
"class constructor now accepts an optional *thread_name_prefix* argument "
"to make it possible to customize the names of the threads created by the "
"pool. (Contributed by Gregory P. Smith in :issue:`27664`.)"
msgstr ""
":class:`ThreadPoolExecutor <concurrent.futures.ThreadPoolExecutor>` 클래스 "
"생성자는 이제 선택적 *thread_name_prefix* 인자를 받아들여 풀이 만든 스레드의 이름을 사용자 정의할 수 있습니다. "
"(Contributed by Gregory P. Smith in :issue:`27664`.)"

#: ../../whatsnew/3.6.rst:959
msgid "contextlib"
msgstr "contextlib"

#: ../../whatsnew/3.6.rst:961
#, fuzzy
msgid ""
"The :class:`contextlib.AbstractContextManager` class has been added to "
"provide an abstract base class for context managers.  It provides a "
"sensible default implementation for ``__enter__()`` which returns "
"``self`` and leaves ``__exit__()`` an abstract method.  A matching class "
"has been added to the :mod:`typing` module as "
":class:`typing.ContextManager`. (Contributed by Brett Cannon in "
":issue:`25609`.)"
msgstr ""
"컨텍스트 관리자를 위한 추상 베이스 클래스를 제공하기 위해 "
":class:`contextlib.AbstractContextManager` 클래스가 추가되었습니다. ``self``\\를 반환하는"
" `__exit__()`\\의 합리적인 기본 구현을 제공하고 `__enter__()`\\는 추상 메서드로 남겨 둡니다. 일치하는 "
"클래스가 :mod:`typing` 모듈에 :class:`typing.ContextManager`\\로 추가되었습니다. "
"(Contributed by Brett Cannon in :issue:`25609`.)"

#: ../../whatsnew/3.6.rst:971
msgid "datetime"
msgstr "datetime"

#: ../../whatsnew/3.6.rst:973
msgid ""
"The :class:`~datetime.datetime` and :class:`~datetime.time` classes have "
"the new :attr:`~time.fold` attribute used to disambiguate local time when"
" necessary.  Many functions in the :mod:`datetime` have been updated to "
"support local time disambiguation. See :ref:`Local Time Disambiguation "
"<whatsnew36-pep495>` section for more information. (Contributed by "
"Alexander Belopolsky in :issue:`24773`.)"
msgstr ""
":class:`~datetime.datetime`\\과 :class:`~datetime.time` 클래스에는 필요할 때 현지 시간을"
" 명확히 하는 데 사용되는 새로운 :attr:`~time.fold` 어트리뷰트를 갖습니다. :mod:`datetime`\\의 많은 "
"함수가 현지 시간 명확성을 지원하도록 갱신되었습니다. 자세한 내용은 :ref:`현지 시간 명확성 "
"<whatsnew36-pep495>` 섹션을 참조하십시오. (Contributed by Alexander Belopolsky in "
":issue:`24773`.)"

#: ../../whatsnew/3.6.rst:981
#, python-format
msgid ""
"The :meth:`datetime.strftime() <datetime.datetime.strftime>` and "
":meth:`date.strftime() <datetime.date.strftime>` methods now support ISO "
"8601 date directives ``%G``, ``%u`` and ``%V``. (Contributed by Ashley "
"Anderson in :issue:`12006`.)"
msgstr ""
":meth:`datetime.strftime() <datetime.datetime.strftime>`\\과 "
":meth:`date.strftime() <datetime.date.strftime>` 메서드는 이제 ISO 8601 날짜 지시자 "
"``%G``, ``%u`` 및 ``%V``\\를 지원합니다. (Contributed by Ashley Anderson in "
":issue:`12006`.)"

#: ../../whatsnew/3.6.rst:986
msgid ""
"The :func:`datetime.isoformat() <datetime.datetime.isoformat>` function "
"now accepts an optional *timespec* argument that specifies the number of "
"additional components of the time value to include. (Contributed by "
"Alessandro Cucci and Alexander Belopolsky in :issue:`19475`.)"
msgstr ""
":func:`datetime.isoformat() <datetime.datetime.isoformat>` 함수는 이제 포함할 시간 "
"값의 추가 구성 요소 수를 지정하는 선택적 *timespec* 인자를 받아들입니다. (Contributed by Alessandro"
" Cucci and Alexander Belopolsky in :issue:`19475`.)"

#: ../../whatsnew/3.6.rst:991
msgid ""
"The :meth:`datetime.combine() <datetime.datetime.combine>` now accepts an"
" optional *tzinfo* argument. (Contributed by Alexander Belopolsky in "
":issue:`27661`.)"
msgstr ""
":meth:`datetime.combine() <datetime.datetime.combine>`\\은 이제 선택적 *tzinfo*"
" 인자를 받아들입니다. (Contributed by Alexander Belopolsky in :issue:`27661`.)"

#: ../../whatsnew/3.6.rst:997
msgid "decimal"
msgstr "decimal"

#: ../../whatsnew/3.6.rst:999
msgid ""
"New :meth:`Decimal.as_integer_ratio() <decimal.Decimal.as_integer_ratio>`"
" method that returns a pair ``(n, d)`` of integers that represent the "
"given :class:`~decimal.Decimal` instance as a fraction, in lowest terms "
"and with a positive denominator::"
msgstr ""
"주어진 :class:`~decimal.Decimal` 인스턴스를 분수로 표현하는 정수 쌍 ``(n, d)``\\를 가장 작은 항과 "
"양의 분모로 반환하는 새로운 :meth:`Decimal.as_integer_ratio() "
"<decimal.Decimal.as_integer_ratio>` 메서드::"

#: ../../whatsnew/3.6.rst:1004
msgid ""
">>> Decimal('-3.14').as_integer_ratio()\n"
"(-157, 50)"
msgstr ""

#: ../../whatsnew/3.6.rst:1007
msgid "(Contributed by Stefan Krah amd Mark Dickinson in :issue:`25928`.)"
msgstr "(Contributed by Stefan Krah amd Mark Dickinson in :issue:`25928`.)"

#: ../../whatsnew/3.6.rst:1012 ../../whatsnew/3.6.rst:1990
msgid "distutils"
msgstr "distutils"

#: ../../whatsnew/3.6.rst:1014
#, fuzzy
msgid ""
"The ``default_format`` attribute has been removed from "
"``distutils.command.sdist.sdist`` and the ``formats`` attribute defaults "
"to ``['gztar']``. Although not anticipated, any code relying on the "
"presence of ``default_format`` may need to be adapted. See :issue:`27819`"
" for more details."
msgstr ""
"``default_format`` 어트리뷰트는 :class:`distutils.command.sdist.sdist`\\에서 "
"제거되었으며 ``formats`` 어트리뷰트의 기본값은 ``['gztar']``\\입니다. 예상되지는 않지만, "
"``default_format``\\의 존재에 의존하는 모든 코드를 조정해야 할 수 있습니다. 자세한 내용은 "
":issue:`27819`\\를 참조하십시오."

#: ../../whatsnew/3.6.rst:1022
msgid "email"
msgstr "email"

#: ../../whatsnew/3.6.rst:1024
msgid ""
"The new email API, enabled via the *policy* keyword to various "
"constructors, is no longer provisional.  The :mod:`email` documentation "
"has been reorganized and rewritten to focus on the new API, while "
"retaining the old documentation for the legacy API.  (Contributed by R. "
"David Murray in :issue:`24277`.)"
msgstr ""
"다양한 생성자에 대한 *policy* 키워드를 통해 활성화되는 새 이메일 API는 더는 잠정적이 아닙니다. :mod:`email` "
"설명서는 레거시 API에 대한 이전 설명서를 유지하면서 새 API에 초점을 맞추기 위해 재구성되고 재작성되었습니다. "
"(Contributed by R. David Murray in :issue:`24277`.)"

#: ../../whatsnew/3.6.rst:1029
msgid ""
"The :mod:`email.mime` classes now all accept an optional *policy* "
"keyword. (Contributed by Berker Peksag in :issue:`27331`.)"
msgstr ""
"이제 :mod:`email.mime` 클래스는 모두 선택적 *policy* 키워드를 받아들입니다. (Contributed by "
"Berker Peksag in :issue:`27331`.)"

#: ../../whatsnew/3.6.rst:1032
msgid ""
"The :class:`~email.generator.DecodedGenerator` now supports the *policy* "
"keyword."
msgstr ":class:`~email.generator.DecodedGenerator`\\는 이제 *policy* 키워드를 지원합니다."

#: ../../whatsnew/3.6.rst:1035
msgid ""
"There is a new :mod:`~email.policy` attribute, "
":attr:`~email.policy.Policy.message_factory`, that controls what class is"
" used by default when the parser creates new message objects.  For the "
":attr:`email.policy.compat32` policy this is "
":class:`~email.message.Message`, for the new policies it is "
":class:`~email.message.EmailMessage`. (Contributed by R. David Murray in "
":issue:`20476`.)"
msgstr ""
"구문 분석기가 새 메시지 객체를 만들 때 기본적으로 사용되는 클래스를 제어하는, 새 :mod:`~email.policy` 어트리뷰트"
" :attr:`~email.policy.Policy.message_factory`\\가 있습니다. "
":attr:`email.policy.compat32` 정책의 경우 :class:`~email.message.Message`\\이고,"
" 새 정책의 경우 :class:`~email.message.EmailMessage`\\입니다. (Contributed by R. "
"David Murray in :issue:`20476`.)"

#: ../../whatsnew/3.6.rst:1044
msgid "encodings"
msgstr "encodings"

#: ../../whatsnew/3.6.rst:1046
msgid ""
"On Windows, added the ``'oem'`` encoding to use ``CP_OEMCP``, and the "
"``'ansi'`` alias for the existing ``'mbcs'`` encoding, which uses the "
"``CP_ACP`` code page. (Contributed by Steve Dower in :issue:`27959`.)"
msgstr ""
"윈도우에서, ``CP_OEMCP``\\를 사용하는 ``'oem'`` 인코딩을 추가하고, ``CP_ACP`` 코드 페이지를 사용하는 "
"기존 ``'mbcs'`` 인코딩을 위한 ``'ansi'`` 별칭을 추가했습니다. (Contributed by Steve Dower "
"in :issue:`27959`.)"

#: ../../whatsnew/3.6.rst:1052
msgid "enum"
msgstr "enum"

#: ../../whatsnew/3.6.rst:1054
msgid ""
"Two new enumeration base classes have been added to the :mod:`enum` "
"module: :class:`~enum.Flag` and :class:`~enum.IntFlags`.  Both are used "
"to define constants that can be combined using the bitwise operators. "
"(Contributed by Ethan Furman in :issue:`23591`.)"
msgstr ""
":mod:`enum` 모듈에 :class:`~enum.Flag`\\와 :class:`~enum.IntFlags`\\라는 두 개의 "
"새로운 열거 베이스 클래스가 추가되었습니다. 둘 다 비트별 연산자를 사용하여 결합할 수 있는 상수를 정의하는 데 사용됩니다. "
"(Contributed by Ethan Furman in :issue:`23591`.)"

#: ../../whatsnew/3.6.rst:1059
msgid ""
"Many standard library modules have been updated to use the "
":class:`~enum.IntFlags` class for their constants."
msgstr "상수에 :class:`~enum.IntFlags` 클래스를 사용하도록 많은 표준 라이브러리 모듈이 갱신되었습니다."

#: ../../whatsnew/3.6.rst:1062
msgid ""
"The new :class:`enum.auto` value can be used to assign values to enum "
"members automatically::"
msgstr "새 :class:`enum.auto` 값을 사용하여 값을 열거형 멤버에 자동으로 할당할 수 있습니다::"

#: ../../whatsnew/3.6.rst:1065
msgid ""
">>> from enum import Enum, auto\n"
">>> class Color(Enum):\n"
"...     red = auto()\n"
"...     blue = auto()\n"
"...     green = auto()\n"
"...\n"
">>> list(Color)\n"
"[<Color.red: 1>, <Color.blue: 2>, <Color.green: 3>]"
msgstr ""

#: ../../whatsnew/3.6.rst:1076
msgid "faulthandler"
msgstr "faulthandler"

#: ../../whatsnew/3.6.rst:1078
msgid ""
"On Windows, the :mod:`faulthandler` module now installs a handler for "
"Windows exceptions: see :func:`faulthandler.enable`. (Contributed by "
"Victor Stinner in :issue:`23848`.)"
msgstr ""
"윈도우에서, :mod:`faulthandler` 모듈은 이제 윈도우 예외에 대한 처리기를 설치합니다: "
":func:`faulthandler.enable`\\을 참조하십시오. (Contributed by Victor Stinner in "
":issue:`23848`.)"

#: ../../whatsnew/3.6.rst:1084
msgid "fileinput"
msgstr "fileinput"

#: ../../whatsnew/3.6.rst:1086
msgid ""
":func:`~fileinput.hook_encoded` now supports the *errors* argument. "
"(Contributed by Joseph Hackman in :issue:`25788`.)"
msgstr ""
":func:`~fileinput.hook_encoded`\\는 이제 *errors* 인자를 지원합니다. (Contributed by"
" Joseph Hackman in :issue:`25788`.)"

#: ../../whatsnew/3.6.rst:1091
msgid "hashlib"
msgstr "hashlib"

#: ../../whatsnew/3.6.rst:1093
msgid ""
":mod:`hashlib` supports OpenSSL 1.1.0.  The minimum recommend version is "
"1.0.2. (Contributed by Christian Heimes in :issue:`26470`.)"
msgstr ""
":mod:`hashlib`\\는 OpenSSL 1.1.0을 지원합니다. 최소 권장 버전은 1.0.2입니다. (Contributed "
"by Christian Heimes in :issue:`26470`.)"

#: ../../whatsnew/3.6.rst:1096
msgid ""
"BLAKE2 hash functions were added to the module. :func:`~hashlib.blake2b` "
"and :func:`~hashlib.blake2s` are always available and support the full "
"feature set of BLAKE2. (Contributed by Christian Heimes in :issue:`26798`"
" based on code by Dmitry Chestnykh and Samuel Neves. Documentation "
"written by Dmitry Chestnykh.)"
msgstr ""
"BLAKE2 해시 함수가 모듈에 추가되었습니다. :func:`~hashlib.blake2b`\\와 "
":func:`~hashlib.blake2s`\\는 항상 사용할 수 있으며 BLAKE2의 전체 기능 집합을 지원합니다. "
"(Contributed by Christian Heimes in :issue:`26798` based on code by "
"Dmitry Chestnykh and Samuel Neves. Documentation written by Dmitry "
"Chestnykh.)"

#: ../../whatsnew/3.6.rst:1102
msgid ""
"The SHA-3 hash functions :func:`~hashlib.sha3_224`, "
":func:`~hashlib.sha3_256`, :func:`~hashlib.sha3_384`, "
":func:`~hashlib.sha3_512`, and SHAKE hash functions "
":func:`~hashlib.shake_128` and :func:`~hashlib.shake_256` were added. "
"(Contributed by Christian Heimes in :issue:`16113`. Keccak Code Package "
"by Guido Bertoni, Joan Daemen, Michaël Peeters, Gilles Van Assche, and "
"Ronny Van Keer.)"
msgstr ""
"SHA-3 해시 함수 :func:`~hashlib.sha3_224`, :func:`~hashlib.sha3_256`, "
":func:`~hashlib.sha3_384`, :func:`~hashlib.sha3_512` 및 SHAKE 해시 함수 "
":func:`~hashlib.shake_128`\\과 :func:`~hashlib.shake_256`\\이 추가되었습니다. "
"(Contributed by Christian Heimes in :issue:`16113`. Keccak Code Package "
"by Guido Bertoni, Joan Daemen, Michaël Peeters, Gilles Van Assche, and "
"Ronny Van Keer.)"

#: ../../whatsnew/3.6.rst:1109
msgid ""
"The password-based key derivation function :func:`~hashlib.scrypt` is now"
" available with OpenSSL 1.1.0 and newer. (Contributed by Christian Heimes"
" in :issue:`27928`.)"
msgstr ""
"비밀번호 기반 키 파생 함수 :func:`~hashlib.scrypt`\\는 이제 OpenSSL 1.1.0 이상에서 사용할 수 "
"있습니다. (Contributed by Christian Heimes in :issue:`27928`.)"

#: ../../whatsnew/3.6.rst:1114
msgid "http.client"
msgstr "http.client"

#: ../../whatsnew/3.6.rst:1116
msgid ""
":meth:`HTTPConnection.request() <http.client.HTTPConnection.request>` and"
" :meth:`~http.client.HTTPConnection.endheaders` both now support chunked "
"encoding request bodies. (Contributed by Demian Brecht and Rolf Krahl in "
":issue:`12319`.)"
msgstr ""
":meth:`HTTPConnection.request() <http.client.HTTPConnection.request>`\\와 "
":meth:`~http.client.HTTPConnection.endheaders` 모두 이제 청크 인코딩(chunked "
"encoding) 요청 본문을 지원합니다. (Contributed by Demian Brecht and Rolf Krahl in "
":issue:`12319`.)"

#: ../../whatsnew/3.6.rst:1123
msgid "idlelib and IDLE"
msgstr "idlelib와 IDLE"

#: ../../whatsnew/3.6.rst:1125
msgid ""
"The idlelib package is being modernized and refactored to make IDLE look "
"and work better and to make the code easier to understand, test, and "
"improve. Part of making IDLE look better, especially on Linux and Mac, is"
" using ttk widgets, mostly in the dialogs.  As a result, IDLE no longer "
"runs with tcl/tk 8.4.  It now requires tcl/tk 8.5 or 8.6.  We recommend "
"running the latest release of either."
msgstr ""
"idlelib 패키지는 IDLE의 모양과 작동을 개선하고 코드를 더 쉽게 이해하고, 테스트하고 개선할 수 있도록 현대화와 리팩토링 "
"되고 있습니다. 특히 리눅스와 맥에서 IDLE을 더 보기 좋게 만드는 부분은 대부분 대화 상자에서 ttk 위젯을 사용하는 것입니다."
" 결과적으로, IDLE은 더는 tcl/tk 8.4에서 실행되지 않습니다. 이제 tcl/tk 8.5나 8.6이 필요합니다. 둘 중 "
"어느 것이든 최신 릴리스를 실행하는 것이 좋습니다."

#: ../../whatsnew/3.6.rst:1132
msgid ""
"'Modernizing' includes renaming and consolidation of idlelib modules. The"
" renaming of files with partial uppercase names is similar to the "
"renaming of, for instance, Tkinter and TkFont to tkinter and tkinter.font"
" in 3.0.  As a result, imports of idlelib files that worked in 3.5 will "
"usually not work in 3.6.  At least a module name change will be needed "
"(see idlelib/README.txt), sometimes more.  (Name changes contributed by "
"Al Swiegart and Terry Reedy in :issue:`24225`.  Most idlelib patches "
"since have been and will be part of the process.)"
msgstr ""
"'현대화'에는 idlelib 모듈의 이름 변경과 통합이 포함됩니다. 부분 대문자 이름을 가진 파일의 이름을 바꾸는 것은, 예를 들어"
" 3.0에서 Tkinter와 TkFont를 tkinter와 tkinter.font로 이름을 바꾸는 것과 유사합니다. 결과적으로, "
"3.5에서 작동했던 idlelib 파일 임포트는 일반적으로 3.6에서 작동하지 않습니다. 최소한 모듈 이름 변경이 필요합니다 "
"(idlelib/README.txt를 참조하십시오). (:issue:`24225`\\에서 Al Swiegart와 Terry "
"Reedy에 의해 이름이 변경되었습니다. 이후 대부분의 idlelib 패치는 프로세스의 일부였고 앞으로도 그럴 것입니다.)"

#: ../../whatsnew/3.6.rst:1141
msgid ""
"In compensation, the eventual result with be that some idlelib classes "
"will be easier to use, with better APIs and docstrings explaining them.  "
"Additional useful information will be added to idlelib when available."
msgstr ""
"이에 대한 보상으로, 결과적으로 일부 idlelib 클래스는 더 나은 API와 그를 설명하는 독스트링을 통해 더 쉽게 사용할 수 "
"있습니다. 사용할 수 있으면 추가 유용한 정보가 idlelib에 추가될 것입니다."

#: ../../whatsnew/3.6.rst:1145
msgid "New in 3.6.2:"
msgstr "3.6.2의 새로운 기능:"

#: ../../whatsnew/3.6.rst:1147
msgid ""
"Multiple fixes for autocompletion. (Contributed by Louie Lu in "
":issue:`15786`.)"
msgstr "자동 완성에 대한 여러 수정. (Contributed by Louie Lu in :issue:`15786`.)"

#: ../../whatsnew/3.6.rst:1149
msgid "New in 3.6.3:"
msgstr "3.6.3의 새로운 기능:"

#: ../../whatsnew/3.6.rst:1151
msgid ""
"Module Browser (on the File menu, formerly called Class Browser), now "
"displays nested functions and classes in addition to top-level functions "
"and classes. (Contributed by Guilherme Polo, Cheryl Sabella, and Terry "
"Jan Reedy in :issue:`1612262`.)"
msgstr ""
"모듈 브라우저(File 메뉴에 있는, 예전에는 클래스 브라우저라고 했습니다)는 이제 최상위 함수와 클래스 외에도 중첩된 함수와 "
"클래스를 표시합니다. (Contributed by Guilherme Polo, Cheryl Sabella, and Terry Jan"
" Reedy in :issue:`1612262`.)"

#: ../../whatsnew/3.6.rst:1157
msgid ""
"The IDLE features formerly implemented as extensions have been "
"reimplemented as normal features.  Their settings have been moved from "
"the Extensions tab to other dialog tabs. (Contributed by Charles "
"Wohlganger and Terry Jan Reedy in :issue:`27099`.)"
msgstr ""
"이전에 확장으로 구현된 IDLE 기능은 일반 기능으로 다시 구현되었습니다. 설정이 Extension 탭에서 다른 대화 상자 탭으로 "
"이동되었습니다. (Contributed by Charles Wohlganger and Terry Jan Reedy in "
":issue:`27099`.)"

#: ../../whatsnew/3.6.rst:1162
msgid ""
"The Settings dialog (Options, Configure IDLE) has been partly rewritten "
"to improve both appearance and function. (Contributed by Cheryl Sabella "
"and Terry Jan Reedy in multiple issues.)"
msgstr ""
"설정 대화 상자(Options, Configure IDLE)가 부분적으로 다시 작성되어 모양과 기능이 모두 향상되었습니다. "
"(Contributed by Cheryl Sabella and Terry Jan Reedy in multiple issues.)"

#: ../../whatsnew/3.6.rst:1166
msgid "New in 3.6.4:"
msgstr "3.6.4의 새로운 기능:"

#: ../../whatsnew/3.6.rst:1168
msgid ""
"The font sample now includes a selection of non-Latin characters so that "
"users can better see the effect of selecting a particular font. "
"(Contributed by Terry Jan Reedy in :issue:`13802`.) The sample can be "
"edited to include other characters. (Contributed by Serhiy Storchaka in "
":issue:`31860`.)"
msgstr ""
"이제 글꼴 샘플에는 사용자가 특정 글꼴 선택의 효과를 더 잘 볼 수 있도록 비 라틴 문자 선택이 포함됩니다. (Contributed"
" by Terry Jan Reedy in :issue:`13802`.) 샘플은 다른 문자를 포함하도록 편집 할 수 있습니다. "
"(Contributed by Serhiy Storchaka in :issue:`31860`.)"

#: ../../whatsnew/3.6.rst:1174
msgid "New in 3.6.6:"
msgstr "3.6.6의 새로운 기능:"

#: ../../whatsnew/3.6.rst:1176
msgid ""
"Editor code context option revised.  Box displays all context lines up to"
" maxlines.  Clicking on a context line jumps the editor to that line.  "
"Context colors for custom themes is added to Highlights tab of Settings "
"dialog. (Contributed by Cheryl Sabella and Terry Jan Reedy in "
":issue:`33642`, :issue:`33768`, and :issue:`33679`.)"
msgstr ""
"편집기 코드 컨텍스트 옵션이 수정되었습니다. 상자는 최대 maxlines까지 모든 컨텍스트 줄을 표시합니다. 컨텍스트 줄을 클릭하면"
" 편집기가 해당 줄로 이동합니다. 사용자 정의 테마의 컨텍스트 색상이 Settings 대화 상자의 Highlights 탭에 "
"추가되었습니다. (Contributed by Cheryl Sabella and Terry Jan Reedy in "
":issue:`33642`, :issue:`33768`, and :issue:`33679`.)"

#: ../../whatsnew/3.6.rst:1182
msgid ""
"On Windows, a new API call tells Windows that tk scales for DPI. On "
"Windows 8.1+ or 10, with DPI compatibility properties of the Python "
"binary unchanged, and a monitor resolution greater than 96 DPI, this "
"should make text and lines sharper.  It should otherwise have no effect. "
"(Contributed by Terry Jan Reedy in :issue:`33656`.)"
msgstr ""
"윈도우에서, 새로운 API 호출은 tk가 DPI에 맞게 확장됨을 윈도우에 알립니다. 윈도우 8.1 이상이나 10에서, 파이썬 "
"바이너리의 DPI 호환성 속성이 변경되지 않고, 96 DPI보다 큰 모니터 해상도를 사용하면, 텍스트와 선이 더 선명해져야 합니다."
" 그렇지 않으면 효과가 없습니다. (Contributed by Terry Jan Reedy in :issue:`33656`.)"

#: ../../whatsnew/3.6.rst:1188
msgid "New in 3.6.7:"
msgstr "3.6.7의 새로운 기능:"

#: ../../whatsnew/3.6.rst:1190
msgid ""
"Output over N lines (50 by default) is squeezed down to a button. N can "
"be changed in the PyShell section of the General page of the Settings "
"dialog.  Fewer, but possibly extra long, lines can be squeezed by right "
"clicking on the output.  Squeezed output can be expanded in place by "
"double-clicking the button or into the clipboard or a separate window by "
"right-clicking the button.  (Contributed by Tal Einat in "
":issue:`1529353`.)"
msgstr ""
"N 줄 (기본값은 50) 이상의 출력은 버튼으로 압착됩니다. N은 Settings 대화 상자의 General 페이지에 있는 "
"PyShell 섹션에서 변경할 수 있습니다. 더 적은 (하지만 더 길 수는 있는) 줄은 출력을 마우스 오른쪽 버튼으로 클릭하여 "
"압착할 수 있습니다. 압착된 출력은 버튼을 더블 클릭하여 제자리에서 확장하거나 마우스 오른쪽 버튼으로 버튼을 클릭하여 클립 보드나 "
"별도의 창으로 확장 할 수 있습니다. (Contributed by Tal Einat in :issue:`1529353`.)"

#: ../../whatsnew/3.6.rst:1199 ../../whatsnew/3.6.rst:2007
msgid "importlib"
msgstr "importlib"

#: ../../whatsnew/3.6.rst:1201
msgid ""
"Import now raises the new exception :exc:`ModuleNotFoundError` (subclass "
"of :exc:`ImportError`) when it cannot find a module.  Code that current "
"checks for ``ImportError`` (in try-except) will still work. (Contributed "
"by Eric Snow in :issue:`15767`.)"
msgstr ""
"임포트는 이제 모듈을 찾을 수 없을 때 새로운 예외 "
":exc:`ModuleNotFoundError`\\(:exc:`ImportError`\\의 서브 클래스)를 발생시킵니다. 현재 "
"(try-except에서) ``ImportError``\\를 검사하는 코드는 계속 작동합니다. (Contributed by Eric"
" Snow in :issue:`15767`.)"

#: ../../whatsnew/3.6.rst:1206
msgid ""
":class:`importlib.util.LazyLoader` now calls "
":meth:`~importlib.abc.Loader.create_module` on the wrapped loader, "
"removing the restriction that "
":class:`importlib.machinery.BuiltinImporter` and "
":class:`importlib.machinery.ExtensionFileLoader` couldn't be used with "
":class:`importlib.util.LazyLoader`."
msgstr ""
":class:`importlib.util.LazyLoader`\\는 이제 래핑 된 로더에서 "
":meth:`~importlib.abc.Loader.create_module`\\을 호출하여, "
":class:`importlib.machinery.BuiltinImporter`\\와 "
":class:`importlib.machinery.ExtensionFileLoader`\\를 "
":class:`importlib.util.LazyLoader`\\와 함께 사용할 수 없는 제한을 제거합니다."

#: ../../whatsnew/3.6.rst:1212
msgid ""
":func:`importlib.util.cache_from_source`, "
":func:`importlib.util.source_from_cache`, and "
":func:`importlib.util.spec_from_file_location` now accept a :term:`path-"
"like object`."
msgstr ""
":func:`importlib.util.cache_from_source`, "
":func:`importlib.util.source_from_cache` 및 "
":func:`importlib.util.spec_from_file_location`\\은 이제 :term:`경로류 객체 <path-"
"like object>`\\를 받아들입니다."

#: ../../whatsnew/3.6.rst:1219
msgid "inspect"
msgstr "inspect"

#: ../../whatsnew/3.6.rst:1221
msgid ""
"The :func:`inspect.signature() <inspect.signature>` function now reports "
"the implicit ``.0`` parameters generated by the compiler for "
"comprehension and generator expression scopes as if they were positional-"
"only parameters called ``implicit0``. (Contributed by Jelle Zijlstra in "
":issue:`19611`.)"
msgstr ""
":func:`inspect.signature() <inspect.signature>` 함수는 이제 컴프리헨션과 제너레이터 표현식 "
"스코프에 대해 컴파일러가 생성한 묵시적 ``.0`` 매개 변수를 ``implicit0``\\이라는 위치 전용 매개 변수인 것처럼 "
"보고합니다. (Contributed by Jelle Zijlstra in :issue:`19611`.)"

#: ../../whatsnew/3.6.rst:1226
msgid ""
"To reduce code churn when upgrading from Python 2.7 and the legacy "
":func:`inspect.getargspec` API, the previously documented deprecation of "
":func:`inspect.getfullargspec` has been reversed. While this function is "
"convenient for single/source Python 2/3 code bases, the richer "
":func:`inspect.signature` interface remains the recommended approach for "
"new code. (Contributed by Nick Coghlan in :issue:`27172`)"
msgstr ""
"파이썬 2.7과 레거시 :func:`inspect.getargspec` API에서 업그레이드할 때 코드 변동을 줄이기 위해, 이전에"
" 문서화된 :func:`inspect.getfullargspec` 의 폐지가 취소되었습니다. 이 함수는 단일/소스 파이썬 2/3 "
"코드 베이스에 편리하지만, 더 풍부한 :func:`inspect.signature` 인터페이스는 새 코드에 권장되는 접근 방식으로 "
"남아 있습니다. (Contributed by Nick Coghlan in :issue:`27172`)"

#: ../../whatsnew/3.6.rst:1235
msgid "json"
msgstr "json"

#: ../../whatsnew/3.6.rst:1237
msgid ""
":func:`json.load` and :func:`json.loads` now support binary input.  "
"Encoded JSON should be represented using either UTF-8, UTF-16, or UTF-32."
" (Contributed by Serhiy Storchaka in :issue:`17909`.)"
msgstr ""
":func:`json.load`\\와 :func:`json.loads`\\는 이제 바이너리 입력을 지원합니다. 인코딩된 JSON은 "
"UTF-8, UTF-16 또는 UTF-32를 사용하여 표현해야 합니다. (Contributed by Serhiy Storchaka "
"in :issue:`17909`.)"

#: ../../whatsnew/3.6.rst:1243
msgid "logging"
msgstr "logging"

#: ../../whatsnew/3.6.rst:1245
msgid ""
"The new :meth:`WatchedFileHandler.reopenIfNeeded() "
"<logging.handlers.WatchedFileHandler.reopenIfNeeded>` method has been "
"added to add the ability to check if the log file needs to be reopened. "
"(Contributed by Marian Horban in :issue:`24884`.)"
msgstr ""
"새로운 :meth:`WatchedFileHandler.reopenIfNeeded() "
"<logging.handlers.WatchedFileHandler.reopenIfNeeded>` 메서드가 추가되어 로그 파일을 다시"
" 열어야 하는지 확인하는 기능이 추가되었습니다. (Contributed by Marian Horban in "
":issue:`24884`.)"

#: ../../whatsnew/3.6.rst:1252
msgid "math"
msgstr "math"

#: ../../whatsnew/3.6.rst:1254
msgid ""
"The tau (*τ*) constant has been added to the :mod:`math` and :mod:`cmath`"
" modules. (Contributed by Lisa Roach in :issue:`12345`, see :pep:`628` "
"for details.)"
msgstr ""
"tau (*τ*) 상수가 :mod:`math`\\와 :mod:`cmath` 모듈에 추가되었습니다. (Contributed by "
"Lisa Roach in :issue:`12345`, see :pep:`628` for details.)"

#: ../../whatsnew/3.6.rst:1260
msgid "multiprocessing"
msgstr "multiprocessing"

#: ../../whatsnew/3.6.rst:1262
msgid ""
":ref:`Proxy Objects <multiprocessing-proxy_objects>` returned by "
":func:`multiprocessing.Manager` can now be nested. (Contributed by Davin "
"Potts in :issue:`6766`.)"
msgstr ""
":func:`multiprocessing.Manager`\\에서 반환된 :ref:`프락시 객체 <multiprocessing-"
"proxy_objects>`\\는 이제 중첩될 수 있습니다. (Contributed by Davin Potts in "
":issue:`6766`.)"

#: ../../whatsnew/3.6.rst:1268 ../../whatsnew/3.6.rst:2021
msgid "os"
msgstr "os"

#: ../../whatsnew/3.6.rst:1270
msgid ""
"See the summary of :ref:`PEP 519 <whatsnew36-pep519>` for details on how "
"the :mod:`os` and :mod:`os.path` modules now support :term:`path-like "
"objects <path-like object>`."
msgstr ""
":mod:`os`\\와 :mod:`os.path` 모듈이 이제 :term:`경로류 객체 <path-like object>`\\를 "
"지원하는 방법에 대한 자세한 내용은 :ref:`PEP 519 <whatsnew36-pep519>` 요약을 참조하십시오."

#: ../../whatsnew/3.6.rst:1274
msgid ":func:`~os.scandir` now supports :class:`bytes` paths on Windows."
msgstr ":func:`~os.scandir`\\은 이제 윈도우에서 :class:`bytes` 경로를 지원합니다."

#: ../../whatsnew/3.6.rst:1276
msgid ""
"A new :meth:`~os.scandir.close` method allows explicitly closing a "
":func:`~os.scandir` iterator.  The :func:`~os.scandir` iterator now "
"supports the :term:`context manager` protocol.  If a :func:`scandir` "
"iterator is neither exhausted nor explicitly closed a "
":exc:`ResourceWarning` will be emitted in its destructor. (Contributed by"
" Serhiy Storchaka in :issue:`25994`.)"
msgstr ""
"새로운 :meth:`~os.scandir.close` 메서드를 사용하면 :func:`~os.scandir` 이터레이터를 명시적으로 "
"닫을 수 있습니다. :func:`~os.scandir` 이터레이터는 이제 :term:`컨텍스트 관리자 <context "
"manager>` 프로토콜을 지원합니다. :func:`scandir` 이터레이터가 소진되지도 않고 명시적으로 닫히지도 않으면 "
":exc:`ResourceWarning`\\이 파괴자에서 방출됩니다. (Contributed by Serhiy Storchaka "
"in :issue:`25994`.)"

#: ../../whatsnew/3.6.rst:1286
msgid ""
"The Linux ``getrandom()`` syscall (get random bytes) is now exposed as "
"the new :func:`os.getrandom` function. (Contributed by Victor Stinner, "
"part of the :pep:`524`)"
msgstr ""
"리눅스 ``getrandom()`` 시스템 호출(무작위 바이트 얻기)이 이제 새로운 :func:`os.getrandom` 함수로 "
"노출됩니다. (Contributed by Victor Stinner, part of the :pep:`524`)"

#: ../../whatsnew/3.6.rst:1292
msgid "pathlib"
msgstr "pathlib"

#: ../../whatsnew/3.6.rst:1294
msgid ""
":mod:`pathlib` now supports :term:`path-like objects <path-like object>`."
" (Contributed by Brett Cannon in :issue:`27186`.)"
msgstr ""
":mod:`pathlib`\\는 이제 :term:`경로류 객체 <path-like object>`\\를 지원합니다. "
"(Contributed by Brett Cannon in :issue:`27186`.)"

#: ../../whatsnew/3.6.rst:1297
msgid "See the summary of :ref:`PEP 519 <whatsnew36-pep519>` for details."
msgstr "자세한 내용은 :ref:`PEP 519 <whatsnew36-pep519>` 요약을 참조하십시오."

#: ../../whatsnew/3.6.rst:1301
msgid "pdb"
msgstr "pdb"

#: ../../whatsnew/3.6.rst:1303
msgid ""
"The :class:`~pdb.Pdb` class constructor has a new optional *readrc* "
"argument to control whether ``.pdbrc`` files should be read."
msgstr ""
":class:`~pdb.Pdb` 클래스 생성자에는 ``.pdbrc`` 파일을 읽어야 하는지를 제어하는 새로운 선택적 *readrc*"
" 인자가 있습니다."

#: ../../whatsnew/3.6.rst:1308
msgid "pickle"
msgstr "pickle"

#: ../../whatsnew/3.6.rst:1310
msgid ""
"Objects that need ``__new__`` called with keyword arguments can now be "
"pickled using :ref:`pickle protocols <pickle-protocols>` older than "
"protocol version 4. Protocol version 4 already supports this case.  "
"(Contributed by Serhiy Storchaka in :issue:`24164`.)"
msgstr ""
"키워드 인자로 호출된 ``__new__``\\가 필요한 객체는 이제 프로토콜 버전 4보다 오래된 :ref:`피클 프로토콜 "
"<pickle-protocols>`\\을 사용하여 피클 할 수 있습니다. 프로토콜 버전 4는 이미 이 경우를 지원합니다. "
"(Contributed by Serhiy Storchaka in :issue:`24164`.)"

#: ../../whatsnew/3.6.rst:1317
msgid "pickletools"
msgstr "pickletools"

#: ../../whatsnew/3.6.rst:1319
#, fuzzy
msgid ""
":func:`pickletools.dis` now outputs the implicit memo index for the "
"``MEMOIZE`` opcode. (Contributed by Serhiy Storchaka in :issue:`25382`.)"
msgstr ""
":func:`pickletools.dis()`\\는 이제 ``MEMOIZE`` 옵코드를 위한 묵시적 메모 인덱스를 출력합니다. "
"(Contributed by Serhiy Storchaka in :issue:`25382`.)"

#: ../../whatsnew/3.6.rst:1325
msgid "pydoc"
msgstr "pydoc"

#: ../../whatsnew/3.6.rst:1327
msgid ""
"The :mod:`pydoc` module has learned to respect the ``MANPAGER`` "
"environment variable. (Contributed by Matthias Klose in :issue:`8637`.)"
msgstr ""
":mod:`pydoc` 모듈은 ``MANPAGER`` 환경 변수를 존중하는 법을 배웠습니다. (Contributed by "
"Matthias Klose in :issue:`8637`.)"

#: ../../whatsnew/3.6.rst:1331
msgid ""
":func:`help` and :mod:`pydoc` can now list named tuple fields in the "
"order they were defined rather than alphabetically. (Contributed by "
"Raymond Hettinger in :issue:`24879`.)"
msgstr ""
":func:`help`\\와 :mod:`pydoc`\\은 이제 사전 순이 아닌 정의된 순서대로 네임드 튜플 필드를 나열할 수 "
"있습니다. (Contributed by Raymond Hettinger in :issue:`24879`.)"

#: ../../whatsnew/3.6.rst:1337
msgid "random"
msgstr "random"

#: ../../whatsnew/3.6.rst:1339
msgid ""
"The new :func:`~random.choices` function returns a list of elements of "
"specified size from the given population with optional weights. "
"(Contributed by Raymond Hettinger in :issue:`18844`.)"
msgstr ""
"새로운 :func:`~random.choices` 함수는 선택적 가중치(weights)를 사용하여 주어진 모집단에서 지정된 크기의 "
"요소 리스트를 반환합니다. (Contributed by Raymond Hettinger in :issue:`18844`.)"

#: ../../whatsnew/3.6.rst:1345 ../../whatsnew/3.6.rst:2029
msgid "re"
msgstr "re"

#: ../../whatsnew/3.6.rst:1347
msgid ""
"Added support of modifier spans in regular expressions.  Examples: "
"``'(?i:p)ython'`` matches ``'python'`` and ``'Python'``, but not "
"``'PYTHON'``; ``'(?i)g(?-i:v)r'`` matches ``'GvR'`` and ``'gvr'``, but "
"not ``'GVR'``. (Contributed by Serhiy Storchaka in :issue:`433028`.)"
msgstr ""
"정규식에서 수정자 범위 지원이 추가되었습니다. 예: ``'(?i:p)ython'``\\은 ``'python'``\\과 "
"``'Python'``\\과 일치하지만, ``'PYTHON'``\\은 일치하지 않습니다; ``'(?i)g(?-i:v)r'``\\는 "
"``'GvR'``\\과 ``'gvr'``\\과 일치하지만, ``'GVR'``\\은 일치하지 않습니다. (Contributed by "
"Serhiy Storchaka in :issue:`433028`.)"

#: ../../whatsnew/3.6.rst:1352
msgid ""
"Match object groups can be accessed by ``__getitem__``, which is "
"equivalent to ``group()``.  So ``mo['name']`` is now equivalent to "
"``mo.group('name')``.  (Contributed by Eric Smith in :issue:`24454`.)"
msgstr ""
"Match 객체 그룹은 ``group()``\\과 동등한 ``__getitem__``\\으로 액세스 할 수 있습니다. 따라서 "
"``mo['name']``\\은 이제 ``mo.group('name')``\\과 동등합니다. (Contributed by Eric "
"Smith in :issue:`24454`.)"

#: ../../whatsnew/3.6.rst:1356
msgid ""
":class:`~re.Match` objects now support :meth:`index-like objects "
"<object.__index__>` as group indices. (Contributed by Jeroen Demeyer and "
"Xiang Zhang in :issue:`27177`.)"
msgstr ""
":class:`~re.Match` 객체는 이제 :meth:`인덱스류 객체 <object.__index__>`\\를 그룹 인덱스로 "
"지원합니다. (Contributed by Jeroen Demeyer and Xiang Zhang in :issue:`27177`.)"

#: ../../whatsnew/3.6.rst:1363
msgid "readline"
msgstr "readline"

#: ../../whatsnew/3.6.rst:1365
msgid ""
"Added :func:`~readline.set_auto_history` to enable or disable automatic "
"addition of input to the history list.  (Contributed by Tyler Crompton in"
" :issue:`26870`.)"
msgstr ""
"히스토리 리스트에 자동 입력 추가를 활성화하거나 비활성화하는 :func:`~readline.set_auto_history`\\를 "
"추가했습니다. (Contributed by Tyler Crompton in :issue:`26870`.)"

#: ../../whatsnew/3.6.rst:1371
msgid "rlcompleter"
msgstr "rlcompleter"

#: ../../whatsnew/3.6.rst:1373
msgid ""
"Private and special attribute names now are omitted unless the prefix "
"starts with underscores.  A space or a colon is added after some "
"completed keywords. (Contributed by Serhiy Storchaka in :issue:`25011` "
"and :issue:`25209`.)"
msgstr ""
"접두사가 밑줄로 시작하지 않는 한 비공개와 특수 어트리뷰트 이름은 이제 생략됩니다. 일부 완성된 키워드 뒤에 스페이스나 콜론이 "
"추가됩니다. (Contributed by Serhiy Storchaka in :issue:`25011` and "
":issue:`25209`.)"

#: ../../whatsnew/3.6.rst:1379
msgid "shlex"
msgstr "shlex"

#: ../../whatsnew/3.6.rst:1381
msgid ""
"The :class:`~shlex.shlex` has much :ref:`improved shell compatibility "
"<improved-shell-compatibility>` through the new *punctuation_chars* "
"argument to control which characters are treated as punctuation. "
"(Contributed by Vinay Sajip in :issue:`1521950`.)"
msgstr ""
":class:`~shlex.shlex`\\는 구두점으로 처리되는 문자를 제어하기 위한 새로운 *punctuation_chars* "
"인자를 통해 훨씬 :ref:`개선된 셸 호환성 <improved-shell-compatibility>`\\을 갖습니다. "
"(Contributed by Vinay Sajip in :issue:`1521950`.)"

#: ../../whatsnew/3.6.rst:1389
msgid "site"
msgstr "site"

#: ../../whatsnew/3.6.rst:1391
#, fuzzy
msgid ""
"When specifying paths to add to :data:`sys.path` in a ``.pth`` file, you "
"may now specify file paths on top of directories (e.g. zip files). "
"(Contributed by Wolfgang Langner in :issue:`26587`)."
msgstr ""
"`.pth` 파일에서 :attr:`sys.path`\\에 추가할 경로를 지정할 때, 이제 디렉터리 위에 파일 경로를 지정할 수 "
"있습니다 (예를 들어 zip 파일). (Contributed by Wolfgang Langner in :issue:`26587`)."

#: ../../whatsnew/3.6.rst:1397
msgid "sqlite3"
msgstr "sqlite3"

#: ../../whatsnew/3.6.rst:1399
msgid ""
":attr:`sqlite3.Cursor.lastrowid` now supports the ``REPLACE`` statement. "
"(Contributed by Alex LordThorsen in :issue:`16864`.)"
msgstr ""
":attr:`sqlite3.Cursor.lastrowid`\\는 이제 ``REPLACE`` 문을 지원합니다. (Contributed"
" by Alex LordThorsen in :issue:`16864`.)"

#: ../../whatsnew/3.6.rst:1404
msgid "socket"
msgstr "socket"

#: ../../whatsnew/3.6.rst:1406
#, fuzzy
msgid ""
"The :func:`~socket.socket.ioctl` function now supports the "
":const:`~socket.SIO_LOOPBACK_FAST_PATH` control code. (Contributed by "
"Daniel Stokes in :issue:`26536`.)"
msgstr ""
":func:`~socket.socket.ioctl` 함수는 이제 "
":data:`~socket.SIO_LOOPBACK_FAST_PATH` 제어 코드를 지원합니다. (Contributed by "
"Daniel Stokes in :issue:`26536`.)"

#: ../../whatsnew/3.6.rst:1410
msgid ""
"The :meth:`~socket.socket.getsockopt` constants ``SO_DOMAIN``, "
"``SO_PROTOCOL``, ``SO_PEERSEC``, and ``SO_PASSSEC`` are now supported. "
"(Contributed by Christian Heimes in :issue:`26907`.)"
msgstr ""
":meth:`~socket.socket.getsockopt` 상수 ``SO_DOMAIN``, ``SO_PROTOCOL``, "
"``SO_PEERSEC`` 및 ``SO_PASSSEC``\\이 이제 지원됩니다. (Contributed by Christian "
"Heimes in :issue:`26907`.)"

#: ../../whatsnew/3.6.rst:1414
msgid ""
"The :meth:`~socket.socket.setsockopt` now supports the "
"``setsockopt(level, optname, None, optlen: int)`` form. (Contributed by "
"Christian Heimes in :issue:`27744`.)"
msgstr ""
":meth:`~socket.socket.setsockopt`\\는 이제 ``setsockopt(level, optname, "
"None, optlen: int)`` 형식을 지원합니다. (Contributed by Christian Heimes in "
":issue:`27744`.)"

#: ../../whatsnew/3.6.rst:1418
#, fuzzy
msgid ""
"The socket module now supports the address family :const:`~socket.AF_ALG`"
" to interface with Linux Kernel crypto API. ``ALG_*``, ``SOL_ALG`` and "
":meth:`~socket.socket.sendmsg_afalg` were added. (Contributed by "
"Christian Heimes in :issue:`27744` with support from Victor Stinner.)"
msgstr ""
"socket 모듈은 이제 리눅스 커널 암호화 API와 인터페이스 하기 위해 주소 패밀리 "
":data:`~socket.AF_ALG`\\를 지원합니다. ``ALG_*``, ``SOL_ALG`` 및 "
":meth:`~socket.socket.sendmsg_afalg`\\가 추가되었습니다. (Contributed by "
"Christian Heimes in :issue:`27744` with support from Victor Stinner.)"

#: ../../whatsnew/3.6.rst:1424
#, fuzzy
msgid ""
"New Linux constants ``TCP_USER_TIMEOUT`` and ``TCP_CONGESTION`` were "
"added. (Contributed by Omar Sandoval, :issue:`26273`)."
msgstr ""
"새로운 리눅스 상수 ``TCP_USER_TIMEOUT``\\과 ``TCP_CONGESTION``\\이 추가되었습니다. "
"(Contributed by Omar Sandoval, issue:`26273`)."

#: ../../whatsnew/3.6.rst:1429
msgid "socketserver"
msgstr "socketserver"

#: ../../whatsnew/3.6.rst:1431
msgid ""
"Servers based on the :mod:`socketserver` module, including those defined "
"in :mod:`http.server`, :mod:`xmlrpc.server` and "
":mod:`wsgiref.simple_server`, now support the :term:`context manager` "
"protocol. (Contributed by Aviv Palivoda in :issue:`26404`.)"
msgstr ""
":mod:`http.server`, :mod:`xmlrpc.server` 및 "
":mod:`wsgiref.simple_server`\\에 정의된 것들을 포함하여, :mod:`socketserver` 모듈에 "
"기반하는 서버는 이제 :term:`컨텍스트 관리자 <context manager>` 프로토콜을 지원합니다. (Contributed "
"by Aviv Palivoda in :issue:`26404`.)"

#: ../../whatsnew/3.6.rst:1437
msgid ""
"The :attr:`~socketserver.StreamRequestHandler.wfile` attribute of "
":class:`~socketserver.StreamRequestHandler` classes now implements the "
":class:`io.BufferedIOBase` writable interface.  In particular, calling "
":meth:`~io.BufferedIOBase.write` is now guaranteed to send the data in "
"full.  (Contributed by Martin Panter in :issue:`26721`.)"
msgstr ""
":class:`~socketserver.StreamRequestHandler` 클래스의 "
":attr:`~socketserver.StreamRequestHandler.wfile` 어트리뷰트는 이제 "
":class:`io.BufferedIOBase` 쓰기 가능한 인터페이스를 구현합니다. 특히 "
":meth:`~io.BufferedIOBase.write`\\를 호출하면 이제 데이터 전체를 보냄이 보장됩니다. "
"(Contributed by Martin Panter in :issue:`26721`.)"

#: ../../whatsnew/3.6.rst:1445 ../../whatsnew/3.6.rst:2037
msgid "ssl"
msgstr "ssl"

#: ../../whatsnew/3.6.rst:1447
msgid ""
":mod:`ssl` supports OpenSSL 1.1.0.  The minimum recommend version is "
"1.0.2. (Contributed by Christian Heimes in :issue:`26470`.)"
msgstr ""
":mod:`ssl`\\은 OpenSSL 1.1.0을 지원합니다. 최소 권장 버전은 1.0.2입니다. (Contributed by "
"Christian Heimes in :issue:`26470`.)"

#: ../../whatsnew/3.6.rst:1450
msgid ""
"3DES has been removed from the default cipher suites and ChaCha20 "
"Poly1305 cipher suites have been added. (Contributed by Christian Heimes "
"in :issue:`27850` and :issue:`27766`.)"
msgstr ""
"3DES는 기본 암호 스위트에서 제거되었으며 ChaCha20 Poly1305 암호 스위트가 추가되었습니다. (Contributed "
"by Christian Heimes in :issue:`27850` and :issue:`27766`.)"

#: ../../whatsnew/3.6.rst:1454
msgid ""
":class:`~ssl.SSLContext` has better default configuration for options and"
" ciphers. (Contributed by Christian Heimes in :issue:`28043`.)"
msgstr ""
":class:`~ssl.SSLContext`\\는 옵션과 암호에 대해 더 나은 기본 구성을 제공합니다. (Contributed by"
" Christian Heimes in :issue:`28043`.)"

#: ../../whatsnew/3.6.rst:1458
msgid ""
"SSL session can be copied from one client-side connection to another with"
" the new :class:`~ssl.SSLSession` class.  TLS session resumption can "
"speed up the initial handshake, reduce latency and improve performance "
"(Contributed by Christian Heimes in :issue:`19500` based on a draft by "
"Alex Warhawk.)"
msgstr ""
"SSL 세션은 새로운 :class:`~ssl.SSLSession` 클래스를 사용하여, 한 클라이언트 측 연결에서 다른 연결로 복사 "
"할 수 있습니다. TLS 세션 재개는 초기 핸드 셰이크 속도를 높이고, 지연 시간을 줄이며 성능을 향상할 수 있습니다 "
"(Contributed by Christian Heimes in :issue:`19500` based on a draft by "
"Alex Warhawk.)"

#: ../../whatsnew/3.6.rst:1464
msgid ""
"The new :meth:`~ssl.SSLContext.get_ciphers` method can be used to get a "
"list of enabled ciphers in order of cipher priority."
msgstr ""
"새로운 :meth:`~ssl.SSLContext.get_ciphers` 메서드를 사용하여 암호 우선순위에 따라 활성화된 암호 "
"리스트를 가져올 수 있습니다."

#: ../../whatsnew/3.6.rst:1467
msgid ""
"All constants and flags have been converted to :class:`~enum.IntEnum` and"
" :class:`~enum.IntFlags`. (Contributed by Christian Heimes in "
":issue:`28025`.)"
msgstr ""
"모든 상수와 플래그가 :class:`~enum.IntEnum`\\과 :class:`~enum.IntFlags`\\로 변환되었습니다."
" (Contributed by Christian Heimes in :issue:`28025`.)"

#: ../../whatsnew/3.6.rst:1471
msgid ""
"Server and client-side specific TLS protocols for "
":class:`~ssl.SSLContext` were added. (Contributed by Christian Heimes in "
":issue:`28085`.)"
msgstr ""
":class:`~ssl.SSLContext`\\를 위한 서버와 클라이언트 측 특정 TLS 프로토콜이 추가되었습니다. "
"(Contributed by Christian Heimes in :issue:`28085`.)"

#: ../../whatsnew/3.6.rst:1475
msgid ""
"Added :attr:`ssl.SSLContext.post_handshake_auth` to enable and "
":meth:`ssl.SSLSocket.verify_client_post_handshake` to initiate TLS 1.3 "
"post-handshake authentication. (Contributed by Christian Heimes in "
":gh:`78851`.)"
msgstr ""

#: ../../whatsnew/3.6.rst:1481
msgid "statistics"
msgstr "statistics"

#: ../../whatsnew/3.6.rst:1483
msgid ""
"A new :func:`~statistics.harmonic_mean` function has been added. "
"(Contributed by Steven D'Aprano in :issue:`27181`.)"
msgstr ""
"새로운 :func:`~statistics.harmonic_mean` 함수가 추가되었습니다. (Contributed by Steven"
" D'Aprano in :issue:`27181`.)"

#: ../../whatsnew/3.6.rst:1488
msgid "struct"
msgstr "struct"

#: ../../whatsnew/3.6.rst:1490
msgid ""
":mod:`struct` now supports IEEE 754 half-precision floats via the ``'e'``"
" format specifier. (Contributed by Eli Stevens, Mark Dickinson in "
":issue:`11734`.)"
msgstr ""
":mod:`struct`\\는 이제 ``'e'`` 포맷 지정자를 통해 IEEE 754 반 정밀도 부동 소수점을 지원합니다. "
"(Contributed by Eli Stevens, Mark Dickinson in :issue:`11734`.)"

#: ../../whatsnew/3.6.rst:1496
msgid "subprocess"
msgstr "subprocess"

#: ../../whatsnew/3.6.rst:1498
msgid ""
":class:`subprocess.Popen` destructor now emits a :exc:`ResourceWarning` "
"warning if the child process is still running. Use the context manager "
"protocol (``with proc: ...``) or explicitly call the "
":meth:`~subprocess.Popen.wait` method to read the exit status of the "
"child process. (Contributed by Victor Stinner in :issue:`26741`.)"
msgstr ""
":class:`subprocess.Popen` 파괴자는 이제 자식 프로세스가 계속 실행 중이면 "
":exc:`ResourceWarning` 경고를 내보냅니다. 자식 프로세스의 종료 상태를 읽으려면, 컨텍스트 관리자 "
"프로토콜(``with proc: ...``)을 사용하거나 :meth:`~subprocess.Popen.wait` 메서드를 명시적으로"
" 호출하십시오. (Contributed by Victor Stinner in :issue:`26741`.)"

#: ../../whatsnew/3.6.rst:1504
msgid ""
"The :class:`subprocess.Popen` constructor and all functions that pass "
"arguments through to it now accept *encoding* and *errors* arguments. "
"Specifying either of these will enable text mode for the *stdin*, "
"*stdout* and *stderr* streams. (Contributed by Steve Dower in "
":issue:`6135`.)"
msgstr ""
":class:`subprocess.Popen` 생성자와 그것을 통해 인자를 전달하는 모든 함수는 이제 *encoding*\\과 "
"*errors* 인자를 받아들입니다. 이들 중 하나를 지정하면 *stdin*, *stdout* 및 *stderr* 스트림에 대한 "
"텍스트 모드가 활성화됩니다. (Contributed by Steve Dower in :issue:`6135`.)"

#: ../../whatsnew/3.6.rst:1511
msgid "sys"
msgstr "sys"

#: ../../whatsnew/3.6.rst:1513
msgid ""
"The new :func:`~sys.getfilesystemencodeerrors` function returns the name "
"of the error mode used to convert between Unicode filenames and bytes "
"filenames. (Contributed by Steve Dower in :issue:`27781`.)"
msgstr ""
"새로운 :func:`~sys.getfilesystemencodeerrors` 함수는 유니코드 파일명과 바이트열 파일명 사이를 "
"변환하는 데 사용되는 에러 모드의 이름을 반환합니다. (Contributed by Steve Dower in "
":issue:`27781`.)"

#: ../../whatsnew/3.6.rst:1517
msgid ""
"On Windows the return value of the :func:`~sys.getwindowsversion` "
"function now includes the *platform_version* field which contains the "
"accurate major version, minor version and build number of the current "
"operating system, rather than the version that is being emulated for the "
"process (Contributed by Steve Dower in :issue:`27932`.)"
msgstr ""
"윈도우에서 :func:`~sys.getwindowsversion` 함수의 반환 값에는 이제 프로세스에 대해 에뮬레이션 되는 버전이 "
"아니라 현재 운영 체제의 정확한 주 버전, 부 버전 및 빌드 번호가 포함된 *platform_version* 필드가 포함됩니다 "
"(Contributed by Steve Dower in :issue:`27932`.)"

#: ../../whatsnew/3.6.rst:1525
msgid "telnetlib"
msgstr "telnetlib"

#: ../../whatsnew/3.6.rst:1527
#, fuzzy
msgid ""
":class:`!telnetlib.Telnet` is now a context manager (contributed by "
"Stéphane Wirtel in :issue:`25485`)."
msgstr ""
":class:`~telnetlib.Telnet`\\은 이제 컨텍스트 관리자입니다 (contributed by Stéphane "
"Wirtel in :issue:`25485`)."

#: ../../whatsnew/3.6.rst:1532
msgid "time"
msgstr "time"

#: ../../whatsnew/3.6.rst:1534
msgid ""
"The :class:`~time.struct_time` attributes :attr:`tm_gmtoff` and "
":attr:`tm_zone` are now available on all platforms."
msgstr ""
":class:`~time.struct_time` 어트리뷰트 :attr:`tm_gmtoff`\\와 :attr:`tm_zone`\\은 "
"이제 모든 플랫폼에서 사용할 수 있습니다."

#: ../../whatsnew/3.6.rst:1539
msgid "timeit"
msgstr "timeit"

#: ../../whatsnew/3.6.rst:1541
msgid ""
"The new :meth:`Timer.autorange() <timeit.Timer.autorange>` convenience "
"method has been added to call :meth:`Timer.timeit() "
"<timeit.Timer.timeit>` repeatedly so that the total run time is greater "
"or equal to 200 milliseconds. (Contributed by Steven D'Aprano in "
":issue:`6422`.)"
msgstr ""
"총 실행 시간이 200밀리초 이상이 되도록 :meth:`Timer.timeit() <timeit.Timer.timeit>`\\을 "
"반복적으로 호출하는 새로운 :meth:`Timer.autorange() <timeit.Timer.autorange>` 편의 메서드가"
" 추가되었습니다. (Contributed by Steven D'Aprano in :issue:`6422`.)"

#: ../../whatsnew/3.6.rst:1546
msgid ""
":mod:`timeit` now warns when there is substantial (4x) variance between "
"best and worst times. (Contributed by Serhiy Storchaka in "
":issue:`23552`.)"
msgstr ""
":mod:`timeit`\\은 이제 최상과 최악 시간 사이에 상당한 (4x) 차이가 있을 때 경고합니다. (Contributed "
"by Serhiy Storchaka in :issue:`23552`.)"

#: ../../whatsnew/3.6.rst:1552 ../../whatsnew/3.6.rst:2054
msgid "tkinter"
msgstr "tkinter"

#: ../../whatsnew/3.6.rst:1554
msgid ""
"Added methods :meth:`~tkinter.Variable.trace_add`, "
":meth:`~tkinter.Variable.trace_remove` and "
":meth:`~tkinter.Variable.trace_info` in the :class:`tkinter.Variable` "
"class.  They replace old methods "
":meth:`~tkinter.Variable.trace_variable`, "
":meth:`~tkinter.Variable.trace`, :meth:`~tkinter.Variable.trace_vdelete` "
"and :meth:`~tkinter.Variable.trace_vinfo` that use obsolete Tcl commands "
"and might not work in future versions of Tcl. (Contributed by Serhiy "
"Storchaka in :issue:`22115`)."
msgstr ""
":class:`tkinter.Variable` 클래스에 :meth:`~tkinter.Variable.trace_add`, "
":meth:`~tkinter.Variable.trace_remove` 및 "
":meth:`~tkinter.Variable.trace_info` 메서드를 추가했습니다. 오래된 Tcl 명령을 사용하는 이전 메서드"
" :meth:`~tkinter.Variable.trace_variable`, "
":meth:`~tkinter.Variable.trace`, :meth:`~tkinter.Variable.trace_vdelete` "
"및 :meth:`~tkinter.Variable.trace_vinfo`\\를 대체하며 Tcl의 향후 버전에서는 작동하지 않을 수 "
"있습니다. (Contributed by Serhiy Storchaka in :issue:`22115`)."

#: ../../whatsnew/3.6.rst:1567
msgid "traceback"
msgstr "traceback"

#: ../../whatsnew/3.6.rst:1569
msgid ""
"Both the traceback module and the interpreter's builtin exception display"
" now abbreviate long sequences of repeated lines in tracebacks as shown "
"in the following example::"
msgstr ""
"traceback 모듈과 인터프리터의 내장 예외 디스플레이는 이제 다음 예제와 같이 트레이스백에서 반복되는 긴 시퀀스의 줄을 "
"축약합니다::"

#: ../../whatsnew/3.6.rst:1573
msgid ""
">>> def f(): f()\n"
"...\n"
">>> f()\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"  File \"<stdin>\", line 1, in f\n"
"  File \"<stdin>\", line 1, in f\n"
"  File \"<stdin>\", line 1, in f\n"
"  [Previous line repeated 995 more times]\n"
"RecursionError: maximum recursion depth exceeded"
msgstr ""

#: ../../whatsnew/3.6.rst:1584
msgid "(Contributed by Emanuel Barry in :issue:`26823`.)"
msgstr "(Contributed by Emanuel Barry in :issue:`26823`.)"

#: ../../whatsnew/3.6.rst:1588
msgid "tracemalloc"
msgstr "tracemalloc"

#: ../../whatsnew/3.6.rst:1590
msgid ""
"The :mod:`tracemalloc` module now supports tracing memory allocations in "
"multiple different address spaces."
msgstr ":mod:`tracemalloc` 모듈은 이제 여러 다른 주소 공간에서 메모리 할당 추적을 지원합니다."

#: ../../whatsnew/3.6.rst:1593
msgid ""
"The new :class:`~tracemalloc.DomainFilter` filter class has been added to"
" filter block traces by their address space (domain)."
msgstr ""
"새로운 :class:`~tracemalloc.DomainFilter` 필터 클래스가 주소 공간(도메인)별로 블록 추적을 필터링하기 "
"위해 추가되었습니다."

#: ../../whatsnew/3.6.rst:1596
msgid "(Contributed by Victor Stinner in :issue:`26588`.)"
msgstr "(Contributed by Victor Stinner in :issue:`26588`.)"

#: ../../whatsnew/3.6.rst:1602
msgid "typing"
msgstr "typing"

#: ../../whatsnew/3.6.rst:1604
msgid ""
"Since the :mod:`typing` module is :term:`provisional <provisional API>`, "
"all changes introduced in Python 3.6 have also been backported to Python "
"3.5.x."
msgstr ""
":mod:`typing` 모듈이 :term:`잠정적 <provisional API>`\\이므로, 파이썬 3.6에 도입된 모든 변경 "
"사항은 파이썬 3.5.x로 역 이식되었습니다."

#: ../../whatsnew/3.6.rst:1608
msgid ""
"The :mod:`typing` module has a much improved support for generic type "
"aliases.  For example ``Dict[str, Tuple[S, T]]`` is now a valid type "
"annotation. (Contributed by Guido van Rossum in `Github #195 "
"<https://github.com/python/typing/pull/195>`_.)"
msgstr ""
":mod:`typing` 모듈은 제네릭 형 에일리어스에 대한 훨씬 향상된 지원을 제공합니다. 예를 들어 ``Dict[str, "
"Tuple[S, T]]``\\는 이제 유효한 형 어노테이션입니다. (Contributed by Guido van Rossum in "
"`Github #195 <https://github.com/python/typing/pull/195>`_.)"

#: ../../whatsnew/3.6.rst:1614
msgid ""
"The :class:`typing.ContextManager` class has been added for representing "
":class:`contextlib.AbstractContextManager`. (Contributed by Brett Cannon "
"in :issue:`25609`.)"
msgstr ""
":class:`contextlib.AbstractContextManager`\\를 나타내는 "
":class:`typing.ContextManager` 클래스가 추가되었습니다. (Contributed by Brett Cannon"
" in :issue:`25609`.)"

#: ../../whatsnew/3.6.rst:1618
msgid ""
"The :class:`typing.Collection` class has been added for representing "
":class:`collections.abc.Collection`. (Contributed by Ivan Levkivskyi in "
":issue:`27598`.)"
msgstr ""
":class:`collections.abc.Collection`\\을 나타내는 :class:`typing.Collection` "
"클래스가 추가되었습니다. (Contributed by Ivan Levkivskyi in :issue:`27598`.)"

#: ../../whatsnew/3.6.rst:1622
msgid ""
"The :const:`typing.ClassVar` type construct has been added to mark class "
"variables.  As introduced in :pep:`526`, a variable annotation wrapped in"
" ClassVar indicates that a given attribute is intended to be used as a "
"class variable and should not be set on instances of that class. "
"(Contributed by Ivan Levkivskyi in `Github #280 "
"<https://github.com/python/typing/pull/280>`_.)"
msgstr ""
"클래스 변수를 표시하기 위해 :const:`typing.ClassVar` 형 구조가 추가되었습니다. :pep:`526`\\에 도입된"
" 대로, ClassVar에 래핑 된 변수 어노테이션은 주어진 어트리뷰트가 클래스 변수로 사용되도록 의도되었으며 해당 클래스의 "
"인스턴스에 설정되어서는 안 됨을 나타냅니다. (Contributed by Ivan Levkivskyi in `Github #280 "
"<https://github.com/python/typing/pull/280>`_.)"

#: ../../whatsnew/3.6.rst:1629
msgid ""
"A new :const:`~typing.TYPE_CHECKING` constant that is assumed to be "
"``True`` by the static type checkers, but is ``False`` at runtime. "
"(Contributed by Guido van Rossum in `Github #230 "
"<https://github.com/python/typing/issues/230>`_.)"
msgstr ""
"정적 형 검사기가 ``True``\\로 가정하지만, 실행 시간에는 ``False``\\인 새 "
":const:`~typing.TYPE_CHECKING` 상수. (Contributed by Guido van Rossum in "
"`Github #230 <https://github.com/python/typing/issues/230>`_.)"

#: ../../whatsnew/3.6.rst:1634
msgid ""
"A new :func:`~typing.NewType` helper function has been added to create "
"lightweight distinct types for annotations::"
msgstr "어노테이션에 대한 경량 고유 형을 만드는 새로운 :func:`~typing.NewType` 도우미 함수가 추가되었습니다::"

#: ../../whatsnew/3.6.rst:1637
msgid ""
"from typing import NewType\n"
"\n"
"UserId = NewType('UserId', int)\n"
"some_id = UserId(524313)"
msgstr ""

#: ../../whatsnew/3.6.rst:1642
msgid ""
"The static type checker will treat the new type as if it were a subclass "
"of the original type.  (Contributed by Ivan Levkivskyi in `Github #189 "
"<https://github.com/python/typing/issues/189>`_.)"
msgstr ""
"정적 형 검사기는 새 형을 원래 형의 서브 클래스인 것처럼 처리합니다. (Contributed by Ivan Levkivskyi "
"in `Github #189 <https://github.com/python/typing/issues/189>`_.)"

#: ../../whatsnew/3.6.rst:1648
msgid "unicodedata"
msgstr "unicodedata"

#: ../../whatsnew/3.6.rst:1650
#, fuzzy
msgid ""
"The :mod:`unicodedata` module now uses data from `Unicode 9.0.0 "
"<https://unicode.org/versions/Unicode9.0.0/>`_. (Contributed by Benjamin "
"Peterson.)"
msgstr ""
":mod:`unicodedata` 모듈은 이제 `유니코드 9.0.0 "
"<http://unicode.org/versions/Unicode9.0.0/>`_\\의 데이터를 사용합니다. (Contributed"
" by Benjamin Peterson.)"

#: ../../whatsnew/3.6.rst:1656
msgid "unittest.mock"
msgstr "unittest.mock"

#: ../../whatsnew/3.6.rst:1658
msgid "The :class:`~unittest.mock.Mock` class has the following improvements:"
msgstr ":class:`~unittest.mock.Mock` 클래스는 다음과 같이 개선되었습니다:"

#: ../../whatsnew/3.6.rst:1660
msgid ""
"Two new methods, :meth:`Mock.assert_called() "
"<unittest.mock.Mock.assert_called>` and :meth:`Mock.assert_called_once() "
"<unittest.mock.Mock.assert_called_once>` to check if the mock object was "
"called. (Contributed by Amit Saha in :issue:`26323`.)"
msgstr ""
"모의 객체가 호출되었는지 확인하는 두 가지 새로운 메서드, :meth:`Mock.assert_called() "
"<unittest.mock.Mock.assert_called>`\\와 :meth:`Mock.assert_called_once() "
"<unittest.mock.Mock.assert_called_once>`. (Contributed by Amit Saha in "
":issue:`26323`.)"

#: ../../whatsnew/3.6.rst:1666
msgid ""
"The :meth:`Mock.reset_mock() <unittest.mock.Mock.reset_mock>` method now "
"has two optional keyword only arguments: *return_value* and "
"*side_effect*. (Contributed by Kushal Das in :issue:`21271`.)"
msgstr ""
":meth:`Mock.reset_mock() <unittest.mock.Mock.reset_mock>` 메서드에는 이제 두 개의 "
"선택적 키워드 전용 인자가 있습니다: *return_value*\\와 *side_effect*. (Contributed by "
"Kushal Das in :issue:`21271`.)"

#: ../../whatsnew/3.6.rst:1673
msgid "urllib.request"
msgstr "urllib.request"

#: ../../whatsnew/3.6.rst:1675
msgid ""
"If a HTTP request has a file or iterable body (other than a bytes object)"
" but no ``Content-Length`` header, rather than throwing an error, "
":class:`~urllib.request.AbstractHTTPHandler` now falls back to use "
"chunked transfer encoding. (Contributed by Demian Brecht and Rolf Krahl "
"in :issue:`12319`.)"
msgstr ""
"HTTP 요청에 파일이나 이터러블 본문(바이트열 객체가 아닌)이 있지만, ``Content-Length`` 헤더가 없으면, 에러를 "
"던지는 대신, :class:`~urllib.request.AbstractHTTPHandler`\\는 이제 청크 전송 "
"인코딩(chunked transfer encoding)을 사용하도록 폴백 됩니다. (Contributed by Demian "
"Brecht and Rolf Krahl in :issue:`12319`.)"

#: ../../whatsnew/3.6.rst:1683
msgid "urllib.robotparser"
msgstr "urllib.robotparser"

#: ../../whatsnew/3.6.rst:1685
msgid ""
":class:`~urllib.robotparser.RobotFileParser` now supports the ``Crawl-"
"delay`` and ``Request-rate`` extensions. (Contributed by Nikolay "
"Bogoychev in :issue:`16099`.)"
msgstr ""
":class:`~urllib.robotparser.RobotFileParser`\\는 이제 ``Crawl-delay``\\와 "
"``Request-rate`` 확장을 지원합니다. (Contributed by Nikolay Bogoychev in "
":issue:`16099`.)"

#: ../../whatsnew/3.6.rst:1691 ../../whatsnew/3.6.rst:2062
msgid "venv"
msgstr "venv"

#: ../../whatsnew/3.6.rst:1693
msgid ""
":mod:`venv` accepts a new parameter ``--prompt``. This parameter provides"
" an alternative prefix for the virtual environment. (Proposed by Łukasz "
"Balcerzak and ported to 3.6 by Stéphane Wirtel in :issue:`22829`.)"
msgstr ""
":mod:`venv`\\는 새 파라미터 ``--prompt``\\를 받아들입니다. 이 파라미터는 가상 환경에 대한 대체 접두사를 "
"제공합니다. (Proposed by Łukasz Balcerzak and ported to 3.6 by Stéphane Wirtel"
" in :issue:`22829`.)"

#: ../../whatsnew/3.6.rst:1699
msgid "warnings"
msgstr "warnings"

#: ../../whatsnew/3.6.rst:1701
msgid ""
"A new optional *source* parameter has been added to the "
":func:`warnings.warn_explicit` function: the destroyed object which "
"emitted a :exc:`ResourceWarning`. A *source* attribute has also been "
"added to :class:`warnings.WarningMessage` (contributed by Victor Stinner "
"in :issue:`26568` and :issue:`26567`)."
msgstr ""
"새로운 선택적 *source* 매개 변수가 :func:`warnings.warn_explicit` 함수에 추가되었습니다: "
":exc:`ResourceWarning`\\을 방출한 파괴된 객체. *source* 어트리뷰트는 "
":class:`warnings.WarningMessage`\\에도 추가되었습니다 (contributed by Victor "
"Stinner in :issue:`26568` and :issue:`26567`)."

#: ../../whatsnew/3.6.rst:1707
msgid ""
"When a :exc:`ResourceWarning` warning is logged, the :mod:`tracemalloc` "
"module is now used to try to retrieve the traceback where the destroyed "
"object was allocated."
msgstr ""
":exc:`ResourceWarning` 경고가 로그 될 때, :mod:`tracemalloc` 모듈이 이제 파괴된 객체가 할당된 "
"트레이스백을 얻는 데 사용됩니다."

#: ../../whatsnew/3.6.rst:1710
msgid "Example with the script ``example.py``::"
msgstr "``example.py`` 스크립트의 예::"

#: ../../whatsnew/3.6.rst:1712
msgid ""
"import warnings\n"
"\n"
"def func():\n"
"    return open(__file__)\n"
"\n"
"f = func()\n"
"f = None"
msgstr ""

#: ../../whatsnew/3.6.rst:1720
msgid "Output of the command ``python3.6 -Wd -X tracemalloc=5 example.py``::"
msgstr "``python3.6 -Wd -X tracemalloc=5 example.py`` 명령의 출력::"

#: ../../whatsnew/3.6.rst:1722
msgid ""
"example.py:7: ResourceWarning: unclosed file <_io.TextIOWrapper "
"name='example.py' mode='r' encoding='UTF-8'>\n"
"  f = None\n"
"Object allocated at (most recent call first):\n"
"  File \"example.py\", lineno 4\n"
"    return open(__file__)\n"
"  File \"example.py\", lineno 6\n"
"    f = func()"
msgstr ""

#: ../../whatsnew/3.6.rst:1730
msgid ""
"The \"Object allocated at\" traceback is new and is only displayed if "
":mod:`tracemalloc` is tracing Python memory allocations and if the "
":mod:`warnings` module was already imported."
msgstr ""
"\"Object allocated at\" 트레이스백은 새로운 것이며 :mod:`tracemalloc`\\이 파이썬 메모리 할당을 "
"추적하고 :mod:`warnings` 모듈을 이미 임포트 했을 때만 표시됩니다."

#: ../../whatsnew/3.6.rst:1736
msgid "winreg"
msgstr "winreg"

#: ../../whatsnew/3.6.rst:1738
msgid ""
"Added the 64-bit integer type :data:`REG_QWORD <winreg.REG_QWORD>`. "
"(Contributed by Clement Rouault in :issue:`23026`.)"
msgstr ""
"64비트 정수 형 :data:`REG_QWORD <winreg.REG_QWORD>`\\를 추가했습니다. (Contributed by"
" Clement Rouault in :issue:`23026`.)"

#: ../../whatsnew/3.6.rst:1743
msgid "winsound"
msgstr "winsound"

#: ../../whatsnew/3.6.rst:1745
msgid ""
"Allowed keyword arguments to be passed to :func:`Beep <winsound.Beep>`, "
":func:`MessageBeep <winsound.MessageBeep>`, and :func:`PlaySound "
"<winsound.PlaySound>` (:issue:`27982`)."
msgstr ""
"키워드 인자가 :func:`Beep <winsound.Beep>`, :func:`MessageBeep "
"<winsound.MessageBeep>` 및 :func:`PlaySound <winsound.PlaySound>` 에 전달되도록 "
"허용합니다 (:issue:`27982`)."

#: ../../whatsnew/3.6.rst:1751
msgid "xmlrpc.client"
msgstr "xmlrpc.client"

#: ../../whatsnew/3.6.rst:1753
msgid ""
"The :mod:`xmlrpc.client` module now supports unmarshalling additional "
"data types used by the Apache XML-RPC implementation for numerics and "
"``None``. (Contributed by Serhiy Storchaka in :issue:`26885`.)"
msgstr ""
":mod:`xmlrpc.client` 모듈은 이제 숫자와 ``None``\\에 대해 Apache XML-RPC 구현에서 사용하는 "
"추가 데이터형의 역 마셜링을 지원합니다. (Contributed by Serhiy Storchaka in "
":issue:`26885`.)"

#: ../../whatsnew/3.6.rst:1760
msgid "zipfile"
msgstr "zipfile"

#: ../../whatsnew/3.6.rst:1762
msgid ""
"A new :meth:`ZipInfo.from_file() <zipfile.ZipInfo.from_file>` class "
"method allows making a :class:`~zipfile.ZipInfo` instance from a "
"filesystem file. A new :meth:`ZipInfo.is_dir() <zipfile.ZipInfo.is_dir>` "
"method can be used to check if the :class:`~zipfile.ZipInfo` instance "
"represents a directory. (Contributed by Thomas Kluyver in "
":issue:`26039`.)"
msgstr ""
"새로운 :meth:`ZipInfo.from_file() <zipfile.ZipInfo.from_file>` 클래스 메서드를 사용하면"
" 파일 시스템 파일에서 :class:`~zipfile.ZipInfo` 인스턴스를 만들 수 있습니다. 새로운 "
":meth:`ZipInfo.is_dir() <zipfile.ZipInfo.is_dir>` 메서드를 사용하여 "
":class:`~zipfile.ZipInfo` 인스턴스가 디렉터리를 나타내는지 확인할 수 있습니다. (Contributed by "
"Thomas Kluyver in :issue:`26039`.)"

#: ../../whatsnew/3.6.rst:1768
msgid ""
"The :meth:`ZipFile.open() <zipfile.ZipFile.open>` method can now be used "
"to write data into a ZIP file, as well as for extracting data. "
"(Contributed by Thomas Kluyver in :issue:`26039`.)"
msgstr ""
"이제 :meth:`ZipFile.open() <zipfile.ZipFile.open>` 메서드를 사용하여 데이터를 추출할 뿐만 "
"아니라, ZIP 파일에 데이터를 쓸 수 있습니다. (Contributed by Thomas Kluyver in "
":issue:`26039`.)"

#: ../../whatsnew/3.6.rst:1774
msgid "zlib"
msgstr "zlib"

#: ../../whatsnew/3.6.rst:1776
msgid ""
"The :func:`~zlib.compress` and :func:`~zlib.decompress` functions now "
"accept keyword arguments. (Contributed by Aviv Palivoda in :issue:`26243`"
" and Xiang Zhang in :issue:`16764` respectively.)"
msgstr ""
":func:`~zlib.compress`\\와 :func:`~zlib.decompress` 함수는 이제 키워드 인자를 받아들입니다."
" (Contributed by Aviv Palivoda in :issue:`26243` and Xiang Zhang in "
":issue:`16764` respectively.)"

#: ../../whatsnew/3.6.rst:1783
msgid "Optimizations"
msgstr "최적화"

#: ../../whatsnew/3.6.rst:1785
msgid ""
"The Python interpreter now uses a 16-bit wordcode instead of bytecode "
"which made a number of opcode optimizations possible. (Contributed by "
"Demur Rumed with input and reviews from Serhiy Storchaka and Victor "
"Stinner in :issue:`26647` and :issue:`28050`.)"
msgstr ""
"파이썬 인터프리터는 이제 바이트 코드 대신 16비트 워드 코드를 사용하여 여러 옵코드 최적화를 가능하게 했습니다. "
"(Contributed by Demur Rumed with input and reviews from Serhiy Storchaka "
"and Victor Stinner in :issue:`26647` and :issue:`28050`.)"

#: ../../whatsnew/3.6.rst:1790
msgid ""
"The :class:`asyncio.Future` class now has an optimized C implementation. "
"(Contributed by Yury Selivanov and INADA Naoki in :issue:`26081`.)"
msgstr ""
":class:`asyncio.Future` 클래스에는 이제 최적화된 C 구현이 있습니다. (Contributed by Yury "
"Selivanov and INADA Naoki in :issue:`26081`.)"

#: ../../whatsnew/3.6.rst:1793
msgid ""
"The :class:`asyncio.Task` class now has an optimized C implementation. "
"(Contributed by Yury Selivanov in :issue:`28544`.)"
msgstr ""
":class:`asyncio.Task` 클래스에는 이제 최적화된 C 구현이 있습니다. (Contributed by Yury "
"Selivanov in :issue:`28544`.)"

#: ../../whatsnew/3.6.rst:1796
msgid ""
"Various implementation improvements in the :mod:`typing` module (such as "
"caching of generic types) allow up to 30 times performance improvements "
"and reduced memory footprint."
msgstr ""
":mod:`typing` 모듈의 다양한 구현 개선 사항(가령 제네릭 형의 캐싱)을 통해 최대 30배의 성능 향상과 메모리 요구량 "
"감소가 가능해졌습니다."

#: ../../whatsnew/3.6.rst:1800
msgid ""
"The ASCII decoder is now up to 60 times as fast for error handlers "
"``surrogateescape``, ``ignore`` and ``replace`` (Contributed by Victor "
"Stinner in :issue:`24870`)."
msgstr ""
"ASCII 디코더는 이제 에러 처리기 ``surrogateescape``, ``ignore`` 및 ``replace``\\에 대해 "
"최대 60배 빠릅니다 (Contributed by Victor Stinner in :issue:`24870`)."

#: ../../whatsnew/3.6.rst:1804
msgid ""
"The ASCII and the Latin1 encoders are now up to 3 times as fast for the "
"error handler ``surrogateescape`` (Contributed by Victor Stinner in "
":issue:`25227`)."
msgstr ""
"ASCII와 Latin1 인코더는 이제 에러 처리기 ``surrogateescape``\\에 대해 최대 3배 빠릅니다 "
"(Contributed by Victor Stinner in :issue:`25227`)."

#: ../../whatsnew/3.6.rst:1808
msgid ""
"The UTF-8 encoder is now up to 75 times as fast for error handlers "
"``ignore``, ``replace``, ``surrogateescape``, ``surrogatepass`` "
"(Contributed by Victor Stinner in :issue:`25267`)."
msgstr ""
"UTF-8 인코더는 이제 에러 처리기 ``ignore``, ``replace``, ``surrogateescape``, "
"``surrogatepass``\\에 대해 최대 75배 빠릅니다 (Contributed by Victor Stinner in "
":issue:`25267`)."

#: ../../whatsnew/3.6.rst:1812
msgid ""
"The UTF-8 decoder is now up to 15 times as fast for error handlers "
"``ignore``, ``replace`` and ``surrogateescape`` (Contributed by Victor "
"Stinner in :issue:`25301`)."
msgstr ""
"UTF-8 디코더는 이제 에러 처리기 ``ignore``, ``replace`` 및 ``surrogateescape``\\에 대해 "
"최대 15배 빠릅니다 (Contributed by Victor Stinner in :issue:`25301`)."

#: ../../whatsnew/3.6.rst:1816
msgid ""
"``bytes % args`` is now up to 2 times faster. (Contributed by Victor "
"Stinner in :issue:`25349`)."
msgstr ""
"``bytes % args``\\는 이제 최대 2배 더 빠릅니다. (Contributed by Victor Stinner in "
":issue:`25349`)."

#: ../../whatsnew/3.6.rst:1819
msgid ""
"``bytearray % args`` is now between 2.5 and 5 times faster. (Contributed "
"by Victor Stinner in :issue:`25399`)."
msgstr ""
"``bytearray % args``\\는 이제 2.5--5배 더 빠릅니다. (Contributed by Victor Stinner"
" in :issue:`25399`)."

#: ../../whatsnew/3.6.rst:1822
msgid ""
"Optimize :meth:`bytes.fromhex` and :meth:`bytearray.fromhex`: they are "
"now between 2x and 3.5x faster. (Contributed by Victor Stinner in "
":issue:`25401`)."
msgstr ""
":meth:`bytes.fromhex`\\와 :meth:`bytearray.fromhex`\\를 최적화했습니다: 이제 2배에서 "
"3.5배까지 빨라졌습니다. (Contributed by Victor Stinner in :issue:`25401`)."

#: ../../whatsnew/3.6.rst:1825
#, python-format
msgid ""
"Optimize ``bytes.replace(b'', b'.')`` and ``bytearray.replace(b'', "
"b'.')``: up to 80% faster. (Contributed by Josh Snider in "
":issue:`26574`)."
msgstr ""
"``bytes.replace(b'', b'.')``\\와 ``bytearray.replace(b'', b'.')``\\를 "
"최적화했습니다: 최대 80% 더 빠릅니다. (Contributed by Josh Snider in :issue:`26574`)."

#: ../../whatsnew/3.6.rst:1828
#, fuzzy
msgid ""
"Allocator functions of the :c:func:`PyMem_Malloc` domain "
"(:c:macro:`PYMEM_DOMAIN_MEM`) now use the :ref:`pymalloc memory allocator"
" <pymalloc>` instead of :c:func:`malloc` function of the C library. The "
"pymalloc allocator is optimized for objects smaller or equal to 512 bytes"
" with a short lifetime, and use :c:func:`malloc` for larger memory "
"blocks. (Contributed by Victor Stinner in :issue:`26249`)."
msgstr ""
":c:func:`PyMem_Malloc` 도메인(:c:data:`PYMEM_DOMAIN_MEM`)의 할당자 함수는 이제 C "
"라이브러리의 :c:func:`malloc` 함수 대신 :ref:`pymalloc 메모리 할당자 <pymalloc>`\\를 "
"사용합니다. pymalloc 할당자는 수명이 짧은 512바이트 이하의 객체에 최적화되어 있으며, 더 큰 메모리 블록에는 "
":c:func:`malloc`\\을 사용합니다. (Contributed by Victor Stinner in "
":issue:`26249`)."

#: ../../whatsnew/3.6.rst:1835
#, python-format
msgid ""
":func:`pickle.load` and :func:`pickle.loads` are now up to 10% faster "
"when deserializing many small objects (Contributed by Victor Stinner in "
":issue:`27056`)."
msgstr ""
":func:`pickle.load`\\와 :func:`pickle.loads`\\는 이제 많은 작은 객체를 역 직렬화할 때 최대 "
"10% 더 빠릅니다 (Contributed by Victor Stinner in :issue:`27056`)."

#: ../../whatsnew/3.6.rst:1839
msgid ""
"Passing :term:`keyword arguments <keyword argument>` to a function has an"
" overhead in comparison with passing :term:`positional arguments "
"<positional argument>`.  Now in extension functions implemented with "
"using Argument Clinic this overhead is significantly decreased. "
"(Contributed by Serhiy Storchaka in :issue:`27574`)."
msgstr ""
":term:`키워드 인자 <keyword argument>`\\를 함수에 전달하면 :term:`위치 인자 <positional "
"argument>`\\를 전달하는 것과 비교하여 오버헤드가 있습니다. 이제 인자 클리닉(Argument Clinic)을 사용하여 "
"구현된 확장 함수에서 이 오버헤드가 많이 감소합니다. (Contributed by Serhiy Storchaka in "
":issue:`27574`)."

#: ../../whatsnew/3.6.rst:1845
msgid ""
"Optimized :func:`~glob.glob` and :func:`~glob.iglob` functions in the "
":mod:`glob` module; they are now about 3--6 times faster. (Contributed by"
" Serhiy Storchaka in :issue:`25596`)."
msgstr ""
":mod:`glob` 모듈에서 :func:`~glob.glob`\\과 :func:`~glob.iglob` 함수를 최적화했습니다; "
"이제 약 3--6배 더 빠릅니다. (Contributed by Serhiy Storchaka in :issue:`25596`)."

#: ../../whatsnew/3.6.rst:1849
msgid ""
"Optimized globbing in :mod:`pathlib` by using :func:`os.scandir`; it is "
"now about 1.5--4 times faster. (Contributed by Serhiy Storchaka in "
":issue:`26032`)."
msgstr ""
":func:`os.scandir`\\을 사용하여 :mod:`pathlib`\\에서 글로빙(globbing)을 최적화했습니다; 이제 "
"약 1.5--4배 더 빨라졌습니다. (Contributed by Serhiy Storchaka in :issue:`26032`)."

#: ../../whatsnew/3.6.rst:1853
msgid ""
":class:`xml.etree.ElementTree` parsing, iteration and deepcopy "
"performance has been significantly improved. (Contributed by Serhiy "
"Storchaka in :issue:`25638`, :issue:`25873`, and :issue:`25869`.)"
msgstr ""
":class:`xml.etree.ElementTree` 구문 분석, 이터레이션 및 깊은 복사 성능이 크게 향상되었습니다. "
"(Contributed by Serhiy Storchaka in :issue:`25638`, :issue:`25873`, and "
":issue:`25869`.)"

#: ../../whatsnew/3.6.rst:1858
msgid ""
"Creation of :class:`fractions.Fraction` instances from floats and "
"decimals is now 2 to 3 times faster. (Contributed by Serhiy Storchaka in "
":issue:`25971`.)"
msgstr ""
"이제 부동 소수점과 십진수(decimals)에서 :class:`fractions.Fraction` 인스턴스를 생성하는 것이 2--"
"3배 빨라졌습니다. (Contributed by Serhiy Storchaka in :issue:`25971`.)"

#: ../../whatsnew/3.6.rst:1864
msgid "Build and C API Changes"
msgstr "빌드와 C API 변경"

#: ../../whatsnew/3.6.rst:1866
msgid ""
"Python now requires some C99 support in the toolchain to build. Most "
"notably, Python now uses standard integer types and macros in place of "
"custom macros like ``PY_LONG_LONG``. For more information, see :pep:`7` "
"and :issue:`17884`."
msgstr ""
"이제 파이썬을 빌드하려면 도구 체인에서 일부 C99 지원이 필요합니다. 특히, 파이썬은 이제 ``PY_LONG_LONG``\\과 "
"같은 사용자 정의 매크로 자리에 표준 정수 형과 매크로를 사용합니다. 자세한 내용은, :pep:`7`\\과 "
":issue:`17884`\\를 참조하십시오."

#: ../../whatsnew/3.6.rst:1871
msgid ""
"Cross-compiling CPython with the Android NDK and the Android API level "
"set to 21 (Android 5.0 Lollipop) or greater runs successfully. While "
"Android is not yet a supported platform, the Python test suite runs on "
"the Android emulator with only about 16 tests failures. See the Android "
"meta-issue :issue:`26865`."
msgstr ""
"안드로이드 NDK와 안드로이드 API 수준이 21 (안드로이드 5.0 Lollipop) 이상으로 CPython을 교차 컴파일하면 "
"성공적으로 실행됩니다. 안드로이드는 아직 지원되는 플랫폼이 아니지만, 파이썬 테스트 스위트는 약 16번의 테스트 실패만으로 "
"안드로이드 에뮬레이터에서 실행됩니다. 안드로이드 메타 이슈 :issue:`26865`\\를 참조하세요."

#: ../../whatsnew/3.6.rst:1876
msgid ""
"The ``--enable-optimizations`` configure flag has been added. Turning it "
"on will activate expensive optimizations like PGO. (Original patch by "
"Alecsandru Patrascu of Intel in :issue:`26359`.)"
msgstr ""
"``--enable-optimizations`` 구성 플래그가 추가되었습니다. 이를 켜면 PGO와 같은 값 비싼 최적화가 "
"활성화됩니다. (Original patch by Alecsandru Patrascu of Intel in "
":issue:`26359`.)"

#: ../../whatsnew/3.6.rst:1880
#, fuzzy
msgid ""
"The :term:`GIL <global interpreter lock>` must now be held when allocator"
" functions of :c:macro:`PYMEM_DOMAIN_OBJ` (ex: :c:func:`PyObject_Malloc`)"
" and :c:macro:`PYMEM_DOMAIN_MEM` (ex: :c:func:`PyMem_Malloc`) domains are"
" called."
msgstr ""
"이제 :c:data:`PYMEM_DOMAIN_OBJ`\\(예를 들어: :c:func:`PyObject_Malloc`)와 "
":c:data:`PYMEM_DOMAIN_MEM`\\(예를 들어: :c:func:`PyMem_Malloc`) 도메인의 할당자 함수가 "
"호출될 때 :term:`GIL <global interpreter lock>`\\이 유지되어야 합니다."

#: ../../whatsnew/3.6.rst:1884
msgid ""
"New :c:func:`Py_FinalizeEx` API which indicates if flushing buffered data"
" failed. (Contributed by Martin Panter in :issue:`5319`.)"
msgstr ""
"버퍼링 된 데이터 플러시가 실패했는지를 나타내는 새로운 :c:func:`Py_FinalizeEx` API. (Contributed "
"by Martin Panter in :issue:`5319`.)"

#: ../../whatsnew/3.6.rst:1888
msgid ""
":c:func:`PyArg_ParseTupleAndKeywords` now supports :ref:`positional-only "
"parameters <positional-only_parameter>`.  Positional-only parameters are "
"defined by empty names. (Contributed by Serhiy Storchaka in "
":issue:`26282`)."
msgstr ""
":c:func:`PyArg_ParseTupleAndKeywords` 는 이제 :ref:`위치 전용 매개 변수 <positional-"
"only_parameter>`\\를 지원합니다. 위치 전용 매개 변수는 빈 이름으로 정의됩니다. (Contributed by "
"Serhiy Storchaka in :issue:`26282`)."

#: ../../whatsnew/3.6.rst:1893
#, python-brace-format
msgid ""
"``PyTraceback_Print`` method now abbreviates long sequences of repeated "
"lines as ``\"[Previous line repeated {count} more times]\"``. "
"(Contributed by Emanuel Barry in :issue:`26823`.)"
msgstr ""
"``PyTraceback_Print`` 메서드는 이제 반복되는 줄의 긴 시퀀스를 ``\"[Previous line repeated "
"{count} more times]\"``\\로 줄여줍니다. (Contributed by Emanuel Barry in "
":issue:`26823`.)"

#: ../../whatsnew/3.6.rst:1897
msgid ""
"The new :c:func:`PyErr_SetImportErrorSubclass` function allows for "
"specifying a subclass of :exc:`ImportError` to raise. (Contributed by "
"Eric Snow in :issue:`15767`.)"
msgstr ""
"새로운 :c:func:`PyErr_SetImportErrorSubclass` 함수를 사용하면 발생시킬 "
":exc:`ImportError`\\의 서브 클래스를 지정할 수 있습니다. (Contributed by Eric Snow in "
":issue:`15767`.)"

#: ../../whatsnew/3.6.rst:1901
msgid ""
"The new :c:func:`PyErr_ResourceWarning` function can be used to generate "
"a :exc:`ResourceWarning` providing the source of the resource allocation."
" (Contributed by Victor Stinner in :issue:`26567`.)"
msgstr ""
"새로운 :c:func:`PyErr_ResourceWarning` 함수는 리소스 할당의 소스를 제공하는 "
":exc:`ResourceWarning`\\을 생성하는 데 사용할 수 있습니다. (Contributed by Victor "
"Stinner in :issue:`26567`.)"

#: ../../whatsnew/3.6.rst:1905
msgid ""
"The new :c:func:`PyOS_FSPath` function returns the file system "
"representation of a :term:`path-like object`. (Contributed by Brett "
"Cannon in :issue:`27186`.)"
msgstr ""
"새로운 :c:func:`PyOS_FSPath` 함수는 :term:`경로류 객체 <path-like object>`\\의 파일 시스템"
" 표현을 반환합니다. (Contributed by Brett Cannon in :issue:`27186`.)"

#: ../../whatsnew/3.6.rst:1909
msgid ""
"The :c:func:`PyUnicode_FSConverter` and :c:func:`PyUnicode_FSDecoder` "
"functions will now accept :term:`path-like objects <path-like object>`."
msgstr ""
":c:func:`PyUnicode_FSConverter`\\와 :c:func:`PyUnicode_FSDecoder` 함수는 이제 "
":term:`경로류 객체 <path-like object>`\\를 받아들입니다."

#: ../../whatsnew/3.6.rst:1914
msgid "Other Improvements"
msgstr "기타 개선 사항"

#: ../../whatsnew/3.6.rst:1916
msgid ""
"When :option:`--version` (short form: :option:`-V`) is supplied twice, "
"Python prints :data:`sys.version` for detailed information."
msgstr ""
":option:`--version`\\(약식 형식: :option:`-V`)이 두 번 제공되면, 파이썬은 자세한 정보로 "
":data:`sys.version`\\을 인쇄합니다."

#: ../../whatsnew/3.6.rst:1919
msgid ""
"$ ./python -VV\n"
"Python 3.6.0b4+ (3.6:223967b49e49+, Nov 21 2016, 20:55:04)\n"
"[GCC 4.2.1 Compatible Apple LLVM 8.0.0 (clang-800.0.42.1)]"
msgstr ""

#: ../../whatsnew/3.6.rst:1927
msgid "Deprecated"
msgstr "폐지"

#: ../../whatsnew/3.6.rst:1930
msgid "New Keywords"
msgstr "새 키워드"

#: ../../whatsnew/3.6.rst:1932
msgid ""
"``async`` and ``await`` are not recommended to be used as variable, "
"class, function or module names.  Introduced by :pep:`492` in Python 3.5,"
" they will become proper keywords in Python 3.7.  Starting in Python 3.6,"
" the use of ``async`` or ``await`` as names will generate a "
":exc:`DeprecationWarning`."
msgstr ""
"``async``\\와 ``await``\\는 변수, 클래스, 함수 또는 모듈 이름으로 사용하지 않는 것이 좋습니다. 파이썬 "
"3.5에서 :pep:`492`\\에 의해 도입되었으며, 파이썬 3.7에서 정식 키워드가 될 것입니다. 파이썬 3.6부터, "
"``async``\\나 ``await``\\를 이름으로 사용하면 :exc:`DeprecationWarning`\\이 생성됩니다."

#: ../../whatsnew/3.6.rst:1939
msgid "Deprecated Python behavior"
msgstr "폐지된 파이썬 동작"

#: ../../whatsnew/3.6.rst:1941
msgid ""
"Raising the :exc:`StopIteration` exception inside a generator will now "
"generate a :exc:`DeprecationWarning`, and will trigger a "
":exc:`RuntimeError` in Python 3.7.  See :ref:`whatsnew-pep-479` for "
"details."
msgstr ""
"제너레이터 내에서 :exc:`StopIteration` 예외를 발생시키면 이제 :exc:`DeprecationWarning`\\이 "
"생성되고, 파이썬 3.7에서는 :exc:`RuntimeError`\\가 트리거될 것입니다. 자세한 내용은 :ref"
":`whatsnew-pep-479`\\를 참조하십시오."

#: ../../whatsnew/3.6.rst:1945
msgid ""
"The :meth:`__aiter__` method is now expected to return an asynchronous "
"iterator directly instead of returning an awaitable as previously. Doing "
"the former will trigger a :exc:`DeprecationWarning`.  Backward "
"compatibility will be removed in Python 3.7. (Contributed by Yury "
"Selivanov in :issue:`27243`.)"
msgstr ""
"이제 :meth:`__aiter__` 메서드는 이전과 같이 어웨이터블을 반환하는 대신 비동기 이터레이터를 직접 반환해야 합니다. "
"전자를 수행하면 :exc:`DeprecationWarning`\\이 트리거됩니다. 이전 버전과의 호환성은 파이썬 3.7에서 제거될 "
"것입니다. (Contributed by Yury Selivanov in :issue:`27243`.)"

#: ../../whatsnew/3.6.rst:1951
msgid ""
"A backslash-character pair that is not a valid escape sequence now "
"generates a :exc:`DeprecationWarning`.  Although this will eventually "
"become a :exc:`SyntaxError`, that will not be for several Python "
"releases. (Contributed by Emanuel Barry in :issue:`27364`.)"
msgstr ""
"유효한 이스케이프 시퀀스가 아닌 역 슬래시 문자 쌍은 이제 :exc:`DeprecationWarning`\\을 생성합니다. 이것은 "
"결국 :exc:`SyntaxError`\\가 될 것이지만, 몇 번의 파이썬 릴리스에서는 그렇게 되지 않을 것입니다. "
"(Contributed by Emanuel Barry in :issue:`27364`.)"

#: ../../whatsnew/3.6.rst:1956
msgid ""
"When performing a relative import, falling back on ``__name__`` and "
"``__path__`` from the calling module when ``__spec__`` or ``__package__``"
" are not defined now raises an :exc:`ImportWarning`. (Contributed by Rose"
" Ames in :issue:`25791`.)"
msgstr ""
"상대 임포트를 수행할 때, ``__spec__``\\이나 ``__package__``\\가 정의되지 않을 때 호출하는 모듈에서 "
"``__name__``\\과 ``__path__``\\로 폴백하면 이제 :exc:`ImportWarning`\\이 발생합니다. "
"(Contributed by Rose Ames in :issue:`25791`.)"

#: ../../whatsnew/3.6.rst:1963
msgid "Deprecated Python modules, functions and methods"
msgstr "폐지된 파이썬 모듈, 함수 및 메서드"

#: ../../whatsnew/3.6.rst:1966
msgid "asynchat"
msgstr "asynchat"

#: ../../whatsnew/3.6.rst:1968
#, fuzzy
msgid ""
"The :mod:`!asynchat` has been deprecated in favor of :mod:`asyncio`. "
"(Contributed by Mariatta in :issue:`25002`.)"
msgstr ""
":mod:`asynchat`\\은 폐지되었고 :mod:`asyncio`\\로 대체합니다. (Contributed by "
"Mariatta in :issue:`25002`.)"

#: ../../whatsnew/3.6.rst:1973
msgid "asyncore"
msgstr "asyncore"

#: ../../whatsnew/3.6.rst:1975
#, fuzzy
msgid ""
"The :mod:`!asyncore` has been deprecated in favor of :mod:`asyncio`. "
"(Contributed by Mariatta in :issue:`25002`.)"
msgstr ""
":mod:`asyncore`\\는 폐지되었고 :mod:`asyncio`\\로 대체합니다. (Contributed by "
"Mariatta in :issue:`25002`.)"

#: ../../whatsnew/3.6.rst:1980
msgid "dbm"
msgstr "dbm"

#: ../../whatsnew/3.6.rst:1982
msgid ""
"Unlike other :mod:`dbm` implementations, the :mod:`dbm.dumb` module "
"creates databases with the ``'rw'`` mode and allows modifying the "
"database opened with the ``'r'`` mode.  This behavior is now deprecated "
"and will be removed in 3.8. (Contributed by Serhiy Storchaka in "
":issue:`21708`.)"
msgstr ""
"다른 :mod:`dbm` 구현과 달리, :mod:`dbm.dumb` 모듈은 ``'rw'`` 모드로 데이터베이스를 만들고 "
"``'r'`` 모드로 열린 데이터베이스를 수정할 수 있습니다. 이 동작은 이제 폐지되었고 3.8에서 제거됩니다. "
"(Contributed by Serhiy Storchaka in :issue:`21708`.)"

#: ../../whatsnew/3.6.rst:1992
#, fuzzy
msgid ""
"The undocumented ``extra_path`` argument to the "
"``distutils.Distribution`` constructor is now considered deprecated and "
"will raise a warning if set.   Support for this parameter will be removed"
" in a future Python release.  See :issue:`27919` for details."
msgstr ""
":class:`~distutils.Distribution` 생성자에 대한 문서화되지 않은 ``extra_path`` 인자는 이제 "
"폐지된 것으로 간주하며 설정되면 경고가 발생합니다. 이 매개 변수에 대한 지원은 향후 파이썬 릴리스에서 제거됩니다. 자세한 내용은 "
":issue:`27919`\\를 참조하십시오."

#: ../../whatsnew/3.6.rst:1999
msgid "grp"
msgstr "grp"

#: ../../whatsnew/3.6.rst:2001
msgid ""
"The support of non-integer arguments in :func:`~grp.getgrgid` has been "
"deprecated. (Contributed by Serhiy Storchaka in :issue:`26129`.)"
msgstr ""
":func:`~grp.getgrgid`\\에서 정수가 아닌 인자에 대한 지원은 폐지되었습니다. (Contributed by "
"Serhiy Storchaka in :issue:`26129`.)"

#: ../../whatsnew/3.6.rst:2009
msgid ""
"The :meth:`importlib.machinery.SourceFileLoader.load_module` and "
":meth:`importlib.machinery.SourcelessFileLoader.load_module` methods are "
"now deprecated. They were the only remaining implementations of "
":meth:`importlib.abc.Loader.load_module` in :mod:`importlib` that had not"
" been deprecated in previous versions of Python in favour of "
":meth:`importlib.abc.Loader.exec_module`."
msgstr ""
":meth:`importlib.machinery.SourceFileLoader.load_module`\\과 "
":meth:`importlib.machinery.SourcelessFileLoader.load_module` 메서드는 이제 "
"폐지되었습니다. 이들은 :meth:`importlib.abc.Loader.exec_module`\\로 대체하도록 이전 버전의 "
"파이썬에서 폐지되지 않은 :mod:`importlib`\\에 있는 유일한 "
":meth:`importlib.abc.Loader.load_module` 구현입니다."

#: ../../whatsnew/3.6.rst:2016
#, fuzzy
msgid ""
"The :class:`importlib.machinery.WindowsRegistryFinder` class is now "
"deprecated. As of 3.6.0, it is still added to :data:`sys.meta_path` by "
"default (on Windows), but this may change in future releases."
msgstr ""
":class:`importlib.machinery.WindowsRegistryFinder` 클래스는 이제 폐지되었습니다. "
"3.6.0부터, 기본적으로 (윈도우에서) :attr:`sys.meta_path`\\에 계속 추가되지만, 향후 릴리스에서 변경될 수 "
"있습니다."

#: ../../whatsnew/3.6.rst:2023
msgid ""
"Undocumented support of general :term:`bytes-like objects <bytes-like "
"object>` as paths in :mod:`os` functions, :func:`compile` and similar "
"functions is now deprecated. (Contributed by Serhiy Storchaka in "
":issue:`25791` and :issue:`26754`.)"
msgstr ""
":mod:`os` 함수, :func:`compile` 및 유사한 함수에서 경로로 일반 :term:`바이트열류 객체 <bytes-"
"like object>`\\에 대한 문서화되지 않은 지원은 이제 폐지되었습니다. (Contributed by Serhiy "
"Storchaka in :issue:`25791` and :issue:`26754`.)"

#: ../../whatsnew/3.6.rst:2031
msgid ""
"Support for inline flags ``(?letters)`` in the middle of the regular "
"expression has been deprecated and will be removed in a future Python "
"version.  Flags at the start of a regular expression are still allowed. "
"(Contributed by Serhiy Storchaka in :issue:`22493`.)"
msgstr ""
"정규식 중간에 있는 인라인 플래그 ``(?letters)``\\에 대한 지원은 폐지되었고 향후 파이썬 버전에서 제거됩니다. 정규식 "
"시작 부분의 플래그는 계속 허용됩니다. (Contributed by Serhiy Storchaka in "
":issue:`22493`.)"

#: ../../whatsnew/3.6.rst:2039
msgid ""
"OpenSSL 0.9.8, 1.0.0 and 1.0.1 are deprecated and no longer supported. In"
" the future the :mod:`ssl` module will require at least OpenSSL 1.0.2 or "
"1.1.0."
msgstr ""
"OpenSSL 0.9.8, 1.0.0 및 1.0.1은 폐지되었고 더는 지원되지 않습니다. 향후에 :mod:`ssl` 모듈에는 최소한"
" OpenSSL 1.0.2나 1.1.0이 필요합니다."

#: ../../whatsnew/3.6.rst:2043
msgid ""
"SSL-related arguments like ``certfile``, ``keyfile`` and "
"``check_hostname`` in :mod:`ftplib`, :mod:`http.client`, :mod:`imaplib`, "
":mod:`poplib`, and :mod:`smtplib` have been deprecated in favor of "
"``context``. (Contributed by Christian Heimes in :issue:`28022`.)"
msgstr ""
":mod:`ftplib`, :mod:`http.client`, :mod:`imaplib`, :mod:`poplib` 및 "
":mod:`smtplib`\\에서 ``certfile``, ``keyfile`` 및 ``check_hostname``\\과 같은 "
"SSL 관련 인자는 폐지되었고 ``context``\\로 대체합니다. (Contributed by Christian Heimes "
"in :issue:`28022`.)"

#: ../../whatsnew/3.6.rst:2048
msgid ""
"A couple of protocols and functions of the :mod:`ssl` module are now "
"deprecated. Some features will no longer be available in future versions "
"of OpenSSL. Other features are deprecated in favor of a different API. "
"(Contributed by Christian Heimes in :issue:`28022` and :issue:`26470`.)"
msgstr ""
":mod:`ssl` 모듈의 몇 가지 프로토콜과 함수는 이제 폐지되었습니다. 일부 기능은 향후 버전의 OpenSSL에서 더는 사용할 "
"수 없을 것입니다. 다른 기능들이 폐지되었고 다른 API로 대체합니다. (Contributed by Christian Heimes "
"in :issue:`28022` and :issue:`26470`.)"

#: ../../whatsnew/3.6.rst:2056
#, fuzzy
msgid ""
"The :mod:`!tkinter.tix` module is now deprecated.  :mod:`tkinter` users "
"should use :mod:`tkinter.ttk` instead."
msgstr ""
":mod:`tkinter.tix` 모듈은 이제 폐지되었습니다. :mod:`tkinter` 사용자는 대신 "
":mod:`tkinter.ttk`\\를 사용해야합니다."

#: ../../whatsnew/3.6.rst:2064
msgid ""
"The ``pyvenv`` script has been deprecated in favour of ``python3 -m "
"venv``. This prevents confusion as to what Python interpreter ``pyvenv`` "
"is connected to and thus what Python interpreter will be used by the "
"virtual environment.  (Contributed by Brett Cannon in :issue:`25154`.)"
msgstr ""
"``pyvenv`` 스크립트는 폐지되었고 ``python3 -m venv``\\로 대체합니다. 이것은 ``pyvenv``\\가 "
"연결되어있는 파이썬 인터프리터가 무엇이고 따라서 가상 환경에서 어떤 파이썬 인터프리터가 사용될 것인지에 대한 혼동을 방지합니다. "
"(Contributed by Brett Cannon in :issue:`25154`.)"

#: ../../whatsnew/3.6.rst:2071
msgid "xml"
msgstr ""

#: ../../whatsnew/3.6.rst:2073
msgid ""
"As mitigation against DTD and external entity retrieval, the "
":mod:`xml.dom.minidom` and :mod:`xml.sax` modules no longer process "
"external entities by default. (Contributed by Christian Heimes in "
":gh:`61441`.)"
msgstr ""

#: ../../whatsnew/3.6.rst:2080
msgid "Deprecated functions and types of the C API"
msgstr "C API의 폐지된 함수와 형"

#: ../../whatsnew/3.6.rst:2082
#, fuzzy
msgid ""
"Undocumented functions :c:func:`!PyUnicode_AsEncodedObject`, "
":c:func:`!PyUnicode_AsDecodedObject`, "
":c:func:`!PyUnicode_AsEncodedUnicode` and "
":c:func:`!PyUnicode_AsDecodedUnicode` are deprecated now. Use the "
":ref:`generic codec based API <codec-registry>` instead."
msgstr ""
"문서화되지 않은 함수 :c:func:`PyUnicode_AsEncodedObject`, "
":c:func:`PyUnicode_AsDecodedObject`, :c:func:`PyUnicode_AsEncodedUnicode`"
" 및 :c:func:`PyUnicode_AsDecodedUnicode` 는 이제 폐지되었습니다. 대신 :ref:`범용 코덱 기반 "
"API <codec-registry>`\\를 사용하십시오."

#: ../../whatsnew/3.6.rst:2089
msgid "Deprecated Build Options"
msgstr "폐지된 빌드 옵션"

#: ../../whatsnew/3.6.rst:2091
msgid ""
"The ``--with-system-ffi`` configure flag is now on by default on non-"
"macOS UNIX platforms.  It may be disabled by using ``--without-system-"
"ffi``, but using the flag is deprecated and will not be accepted in "
"Python 3.7. macOS is unaffected by this change.  Note that many OS "
"distributors already use the ``--with-system-ffi`` flag when building "
"their system Python."
msgstr ""
"``--with-system-ffi`` 구성 플래그는 이제 비 macOS 유닉스 플랫폼에서 기본적으로 켜집니다. "
"``--without-system-ffi``\\를 사용하여 비활성화 할 수 있지만, 플래그 사용은 폐지되었고 파이썬 3.7에서는 "
"허용되지 않을 것입니다. macOS는 이 변경의 영향을 받지 않습니다. 많은 OS 배포자는 시스템 파이썬을 빌드할 때 이미 "
"``--with-system-ffi`` 플래그를 사용함에 유의하십시오."

#: ../../whatsnew/3.6.rst:2099
msgid "Removed"
msgstr "제거"

#: ../../whatsnew/3.6.rst:2102
msgid "API and Feature Removals"
msgstr "API와 기능 제거"

#: ../../whatsnew/3.6.rst:2104
msgid ""
"Unknown escapes consisting of ``'\\'`` and an ASCII letter in regular "
"expressions will now cause an error.  In replacement templates for "
":func:`re.sub` they are still allowed, but deprecated. The "
":const:`re.LOCALE` flag can now only be used with binary patterns."
msgstr ""
"정규식에서 ``'\\'``\\와 ASCII 문자로 구성된 알 수 없는 이스케이프는 이제 에러를 발생시킵니다. "
":func:`re.sub`\\의 치환 템플릿에서는 여전히 허용되지만, 폐지되었습니다. :const:`re.LOCALE` 플래그는 "
"이제 바이너리 패턴에서만 사용할 수 있습니다."

#: ../../whatsnew/3.6.rst:2109
msgid ""
"``inspect.getmoduleinfo()`` was removed (was deprecated since CPython "
"3.3). :func:`inspect.getmodulename` should be used for obtaining the "
"module name for a given path. (Contributed by Yury Selivanov in "
":issue:`13248`.)"
msgstr ""
"``inspect.getmoduleinfo()``\\가 제거되었습니다 (CPython 3.3부터 폐지되었습니다). "
":func:`inspect.getmodulename`\\은 주어진 경로에 대한 모듈 이름을 얻는 데 사용해야 합니다. "
"(Contributed by Yury Selivanov in :issue:`13248`.)"

#: ../../whatsnew/3.6.rst:2114
msgid ""
"``traceback.Ignore`` class and ``traceback.usage``, "
"``traceback.modname``, ``traceback.fullmodname``, "
"``traceback.find_lines_from_code``, ``traceback.find_lines``, "
"``traceback.find_strings``, ``traceback.find_executable_lines`` methods "
"were removed from the :mod:`traceback` module. They were undocumented "
"methods deprecated since Python 3.2 and equivalent functionality is "
"available from private methods."
msgstr ""
"``traceback.Ignore`` 클래스와 ``traceback.usage``, ``traceback.modname``, "
"``traceback.fullmodname``, ``traceback.find_lines_from_code``, "
"``traceback.find_lines``, ``traceback.find_strings``, "
"``traceback.find_executable_lines`` 메서드가 :mod:`traceback` 모듈에서 제거되었습니다. "
"그것들은 파이썬 3.2 이후 폐지된 문서화되지 않은 메서드였으며 동등한 기능은 비공개 메서드에서 사용할 수 있습니다."

#: ../../whatsnew/3.6.rst:2121
msgid ""
"The ``tk_menuBar()`` and ``tk_bindForTraversal()`` dummy methods in "
":mod:`tkinter` widget classes were removed (corresponding Tk commands "
"were obsolete since Tk 4.0)."
msgstr ""
":mod:`tkinter` 위젯 클래스의 ``tk_menuBar()``\\와 ``tk_bindForTraversal()`` 더미 "
"메서드가 제거되었습니다 (해당 Tk 명령은 Tk 4.0 이후로 사용되지 않습니다)."

#: ../../whatsnew/3.6.rst:2125
msgid ""
"The :meth:`~zipfile.ZipFile.open` method of the :class:`zipfile.ZipFile` "
"class no longer supports the ``'U'`` mode (was deprecated since Python "
"3.4). Use :class:`io.TextIOWrapper` for reading compressed text files in "
":term:`universal newlines` mode."
msgstr ""
":class:`zipfile.ZipFile` 클래스의 :meth:`~zipfile.ZipFile.open` 메서드는 더는 "
"``'U'`` 모드를 지원하지 않습니다 (파이썬 3.4부터 폐지되었습니다). :term:`유니버설 줄 넘김 <universal "
"newlines>` 모드에서 압축된 텍스트 파일을 읽으려면 :class:`io.TextIOWrapper`\\를 사용하십시오."

#: ../../whatsnew/3.6.rst:2130
#, fuzzy
msgid ""
"The undocumented ``IN``, ``CDROM``, ``DLFCN``, ``TYPES``, ``CDIO``, and "
"``STROPTS`` modules have been removed.  They had been available in the "
"platform specific ``Lib/plat-*/`` directories, but were chronically out "
"of date, inconsistently available across platforms, and unmaintained.  "
"The script that created these modules is still available in the source "
"distribution at `Tools/scripts/h2py.py "
"<https://github.com/python/cpython/blob/v3.6.15/Tools/scripts/h2py.py>`_."
msgstr ""
"문서화되지 않은 ``IN``, ``CDROM``, ``DLFCN``, ``TYPES``, ``CDIO`` 및 ``STROPTS`` "
"모듈이 제거되었습니다. 이들은 플랫폼별 ``Lib/plat-*/`` 디렉터리에 있었지만, 만성적으로 구식이었고, 여러 플랫폼에서 "
"일관성 없이 사용할 수 있으며, 유지 관리되지 않았습니다. 이러한 모듈을 만든 스크립트는 소스 배포에서 "
":source:`Tools/scripts/h2py.py`\\로 계속 제공됩니다."

#: ../../whatsnew/3.6.rst:2138
msgid "The deprecated ``asynchat.fifo`` class has been removed."
msgstr "폐지된 ``asynchat.fifo`` 클래스가 제거되었습니다."

#: ../../whatsnew/3.6.rst:2142
msgid "Porting to Python 3.6"
msgstr "파이썬 3.6으로 이식하기"

#: ../../whatsnew/3.6.rst:2144
msgid ""
"This section lists previously described changes and other bugfixes that "
"may require changes to your code."
msgstr "이 섹션에서는 여러분의 코드 변경이 필요할 수 있는 이전에 설명한 변경 사항과 기타 버그 수정을 나열합니다."

#: ../../whatsnew/3.6.rst:2148
msgid "Changes in 'python' Command Behavior"
msgstr "'python' 명령 동작의 변경 사항"

#: ../../whatsnew/3.6.rst:2150
msgid ""
"The output of a special Python build with defined ``COUNT_ALLOCS``, "
"``SHOW_ALLOC_COUNT`` or ``SHOW_TRACK_COUNT`` macros is now off by "
"default.  It can be re-enabled using the ``-X showalloccount`` option. It"
" now outputs to ``stderr`` instead of ``stdout``. (Contributed by Serhiy "
"Storchaka in :issue:`23034`.)"
msgstr ""
"정의된 ``COUNT_ALLOCS``, ``SHOW_ALLOC_COUNT`` 또는 ``SHOW_TRACK_COUNT`` 매크로가 "
"있는 특수 파이썬 빌드의 출력은 이제 기본적으로 꺼져 있습니다. ``-X showalloccount`` 옵션을 사용하여 다시 "
"활성화할 수 있습니다. 이제 ``stdout`` 대신 ``stderr``\\로 출력됩니다. (Contributed by Serhiy"
" Storchaka in :issue:`23034`.)"

#: ../../whatsnew/3.6.rst:2158
msgid "Changes in the Python API"
msgstr "파이썬 API의 변경 사항"

#: ../../whatsnew/3.6.rst:2160
msgid ""
":func:`open() <open>` will no longer allow combining the ``'U'`` mode "
"flag with ``'+'``. (Contributed by Jeff Balogh and John O'Connor in "
":issue:`2091`.)"
msgstr ""
":func:`open() <open>`\\은 더는 ``'U'`` 모드 플래그를 ``'+'``\\와 결합하는 것을 허용하지 않습니다."
" (Contributed by Jeff Balogh and John O'Connor in :issue:`2091`.)"

#: ../../whatsnew/3.6.rst:2164
msgid ""
":mod:`sqlite3` no longer implicitly commits an open transaction before "
"DDL statements."
msgstr ":mod:`sqlite3`\\은 더는 DDL 문 이전에 열린 트랜잭션을 묵시적으로 커밋하지 않습니다."

#: ../../whatsnew/3.6.rst:2167
msgid ""
"On Linux, :func:`os.urandom` now blocks until the system urandom entropy "
"pool is initialized to increase the security."
msgstr ""
"리눅스에서, :func:`os.urandom`\\은 이제 보안을 강화하기 위해 시스템 urandom 엔트로피 풀이 초기화될 때까지 "
"블록합니다."

#: ../../whatsnew/3.6.rst:2170
msgid ""
"When :meth:`importlib.abc.Loader.exec_module` is defined, "
":meth:`importlib.abc.Loader.create_module` must also be defined."
msgstr ""
":meth:`importlib.abc.Loader.exec_module`\\이 정의되면, "
":meth:`importlib.abc.Loader.create_module`\\도 정의되어야 합니다."

#: ../../whatsnew/3.6.rst:2173
msgid ""
":c:func:`PyErr_SetImportError` now sets :exc:`TypeError` when its **msg**"
" argument is not set. Previously only ``NULL`` was returned."
msgstr ""
":c:func:`PyErr_SetImportError`\\는 이제 **msg** 인자가 설정되지 않았을 때 "
":exc:`TypeError`\\를 설정합니다. 이전에는 ``NULL``\\만 반환되었습니다."

#: ../../whatsnew/3.6.rst:2176
#, fuzzy
msgid ""
"The format of the :attr:`~codeobject.co_lnotab` attribute of code objects"
" changed to support a negative line number delta. By default, Python does"
" not emit bytecode with a negative line number delta. Functions using "
":attr:`frame.f_lineno`, ``PyFrame_GetLineNumber()`` or "
"``PyCode_Addr2Line()`` are not affected. Functions directly decoding "
":attr:`!co_lnotab` should be updated to use a signed 8-bit integer type "
"for the line number delta, but this is only required to support "
"applications using a negative line number delta. See "
"``Objects/lnotab_notes.txt`` for the :attr:`!co_lnotab` format and how to"
" decode it, and see the :pep:`511` for the rationale."
msgstr ""
"코드 객체의 ``co_lnotab`` 어트리뷰트 형식이 음수 줄 번호 델타를 지원하도록 변경되었습니다. 기본적으로, 파이썬은 음의 "
"줄 번호 델타가 있는 바이트 코드를 내보내지 않습니다. ``frame.f_lineno``, "
"``PyFrame_GetLineNumber()`` 또는 ``PyCode_Addr2Line()``\\을 사용하는 함수는 영향을 받지 "
"않습니다. ``co_lnotab``\\을 직접 디코딩하는 함수는 줄 번호 델타에 부호 있는 8비트 정수 형을 사용하도록 갱신해야 "
"하지만, 이는 음의 줄 번호 델타를 사용하는 응용 프로그램을 지원하는 데만 필요합니다. ``co_lnotab`` 형식과 디코딩 "
"방법에 대해서는 ``Objects/lnotab_notes.txt``\\를 참조하고, 그 이유는 :pep:`511`\\을 "
"참조하십시오."

#: ../../whatsnew/3.6.rst:2187
msgid ""
"The functions in the :mod:`compileall` module now return booleans instead"
" of ``1`` or ``0`` to represent success or failure, respectively. Thanks "
"to booleans being a subclass of integers, this should only be an issue if"
" you were doing identity checks for ``1`` or ``0``. See :issue:`25768`."
msgstr ""
":mod:`compileall` 모듈의 함수는 이제 ``1``\\이나 ``0`` 대신 불리언을 반환하여 각각 성공이나 실패를 "
"나타냅니다. 불리언은 정수의 서브 클래스이기 때문에, ``1``\\이나 ``0``\\에 대한 아이덴티티 검사를 수행하는 경우에만 "
"문제가 됩니다. :issue:`25768`\\을 참조하십시오."

#: ../../whatsnew/3.6.rst:2192
msgid ""
"Reading the :attr:`~urllib.parse.SplitResult.port` attribute of "
":func:`urllib.parse.urlsplit` and :func:`~urllib.parse.urlparse` results "
"now raises :exc:`ValueError` for out-of-range values, rather than "
"returning :const:`None`.  See :issue:`20059`."
msgstr ""
":func:`urllib.parse.urlsplit`\\과 :func:`~urllib.parse.urlparse` 결과의 "
":attr:`~urllib.parse.SplitResult.port` 어트리뷰트를 읽으면 범위를 벗어난 값에 대해 이제 "
":const:`None`\\을 반환하는 대신 :exc:`ValueError`\\가 발생합니다. :issue:`20059`\\를 "
"참조하십시오."

#: ../../whatsnew/3.6.rst:2197
#, fuzzy
msgid ""
"The :mod:`!imp` module now raises a :exc:`DeprecationWarning` instead of "
":exc:`PendingDeprecationWarning`."
msgstr ""
":mod:`imp` 모듈은 이제 :exc:`PendingDeprecationWarning` 대신 "
":exc:`DeprecationWarning`\\을 발생시킵니다."

#: ../../whatsnew/3.6.rst:2200
#, fuzzy
msgid ""
"The following modules have had missing APIs added to their "
":attr:`__all__` attributes to match the documented APIs: :mod:`calendar`,"
" :mod:`!cgi`, :mod:`csv`, :mod:`~xml.etree.ElementTree`, :mod:`enum`, "
":mod:`fileinput`, :mod:`ftplib`, :mod:`logging`, :mod:`mailbox`, "
":mod:`mimetypes`, :mod:`optparse`, :mod:`plistlib`, :mod:`!smtpd`, "
":mod:`subprocess`, :mod:`tarfile`, :mod:`threading` and :mod:`wave`.  "
"This means they will export new symbols when ``import *`` is used. "
"(Contributed by Joel Taddei and Jacek Kołodziej in :issue:`23883`.)"
msgstr ""
"다음 모듈에는 문서화된 API와 일치하도록 :attr:`__all__` 어트리뷰트에 누락된 API가 추가되었습니다: "
":mod:`calendar`, :mod:`cgi`, :mod:`csv`, :mod:`~xml.etree.ElementTree`, "
":mod:`enum`, :mod:`fileinput`, :mod:`ftplib`, :mod:`logging`, "
":mod:`mailbox`, :mod:`mimetypes`, :mod:`optparse`, :mod:`plistlib`, "
":mod:`smtpd`, :mod:`subprocess`, :mod:`tarfile`, :mod:`threading` 및 "
":mod:`wave`. 이것은 ``import *``\\가 사용될 때 새로운 심볼을 내보낼 것을 의미합니다. (Contributed"
" by Joel Taddei and Jacek Kołodziej in :issue:`23883`.)"

#: ../../whatsnew/3.6.rst:2211
msgid ""
"When performing a relative import, if ``__package__`` does not compare "
"equal to ``__spec__.parent`` then :exc:`ImportWarning` is raised. "
"(Contributed by Brett Cannon in :issue:`25791`.)"
msgstr ""
"상대 임포트를 수행할 때, ``__package__``\\가 ``__spec__.parent``\\와 같다고 비교되지 않으면 "
":exc:`ImportWarning`\\이 발생합니다. (Contributed by Brett Cannon in "
":issue:`25791`.)"

#: ../../whatsnew/3.6.rst:2215
msgid ""
"When a relative import is performed and no parent package is known, then "
":exc:`ImportError` will be raised. Previously, :exc:`SystemError` could "
"be raised. (Contributed by Brett Cannon in :issue:`18018`.)"
msgstr ""
"상대 임포트가 수행되고 부모 패키지가 알려지지 않았으면, :exc:`ImportError`\\가 발생합니다. 이전에는, "
":exc:`SystemError`\\를 발생시킬 수 있었습니다. (Contributed by Brett Cannon in "
":issue:`18018`.)"

#: ../../whatsnew/3.6.rst:2219
msgid ""
"Servers based on the :mod:`socketserver` module, including those defined "
"in :mod:`http.server`, :mod:`xmlrpc.server` and "
":mod:`wsgiref.simple_server`, now only catch exceptions derived from "
":exc:`Exception`. Therefore if a request handler raises an exception like"
" :exc:`SystemExit` or :exc:`KeyboardInterrupt`, "
":meth:`~socketserver.BaseServer.handle_error` is no longer called, and "
"the exception will stop a single-threaded server. (Contributed by Martin "
"Panter in :issue:`23430`.)"
msgstr ""
":mod:`http.server`, :mod:`xmlrpc.server` 및 "
":mod:`wsgiref.simple_server`\\에 정의된 서버를 포함하여, :mod:`socketserver` 모듈을 "
"기반으로 하는 서버는 이제 :exc:`Exception`\\에서 파생된 예외만 포착합니다. 따라서 요청 처리기가 "
":exc:`SystemExit`\\나 :exc:`KeyboardInterrupt`\\와 같은 예외를 발생시키면, "
":meth:`~socketserver.BaseServer.handle_error`\\가 더는 호출되지 않고, 예외로 인해 단일 "
"스레드 서버가 중지됩니다. (Contributed by Martin Panter in :issue:`23430`.)"

#: ../../whatsnew/3.6.rst:2228
#, fuzzy
msgid ""
":func:`!spwd.getspnam` now raises a :exc:`PermissionError` instead of "
":exc:`KeyError` if the user doesn't have privileges."
msgstr ""
":func:`spwd.getspnam`\\은 이제 사용자에게 권한이 없으면 :exc:`KeyError` 대신 "
":exc:`PermissionError`\\를 발생시킵니다."

#: ../../whatsnew/3.6.rst:2231
msgid ""
"The :meth:`socket.socket.close` method now raises an exception if an "
"error (e.g. ``EBADF``) was reported by the underlying system call. "
"(Contributed by Martin Panter in :issue:`26685`.)"
msgstr ""
":meth:`socket.socket.close` 메서드는 하부 시스템 호출에 의해 에러(예를 들어 ``EBADF``)가 보고되면 "
"예외를 발생시킵니다. (Contributed by Martin Panter in :issue:`26685`.)"

#: ../../whatsnew/3.6.rst:2235
#, fuzzy
msgid ""
"The *decode_data* argument for the :class:`!smtpd.SMTPChannel` and "
":class:`!smtpd.SMTPServer` constructors is now ``False`` by default. This"
" means that the argument passed to :meth:`!process_message` is now a "
"bytes object by default, and :meth:`!process_message` will be passed "
"keyword arguments. Code that has already been updated in accordance with "
"the deprecation warning generated by 3.5 will not be affected."
msgstr ""
":class:`smtpd.SMTPChannel`\\과 :class:`smtpd.SMTPServer` 생성자에 대한 "
"*decode_data* 인자는 이제 기본적으로 ``False``\\입니다. 이것은 "
":meth:`~smtpd.SMTPServer.process_message`\\에 전달된 인자가 이제 기본적으로 바이트열 객체이고, "
"``process_message()``\\에 키워드 인자가 전달됨을 의미합니다. 3.5에서 생성된 폐지 경고에 따라 이미 갱신된 "
"코드는 영향을 받지 않습니다."

#: ../../whatsnew/3.6.rst:2243
msgid ""
"All optional arguments of the :func:`~json.dump`, :func:`~json.dumps`, "
":func:`~json.load` and :func:`~json.loads` functions and "
":class:`~json.JSONEncoder` and :class:`~json.JSONDecoder` class "
"constructors in the :mod:`json` module are now :ref:`keyword-only "
"<keyword-only_parameter>`. (Contributed by Serhiy Storchaka in "
":issue:`18726`.)"
msgstr ""
":mod:`json` 모듈의 :func:`~json.dump`, :func:`~json.dumps`, "
":func:`~json.load` 및 :func:`~json.loads` 함수와 "
":class:`~json.JSONEncoder`\\와 :class:`~json.JSONDecoder` 클래스 생성자의 모든 선택적 "
"인자는 이제 :ref:`키워드 전용 <keyword-only_parameter>`\\입니다. (Contributed by "
"Serhiy Storchaka in :issue:`18726`.)"

#: ../../whatsnew/3.6.rst:2250
msgid ""
"Subclasses of :class:`type` which don't override ``type.__new__`` may no "
"longer use the one-argument form to get the type of an object."
msgstr ""
"``type.__new__``\\를 재정의하지 않는 :class:`type`\\의 서브 클래스는 더는 단일 인자 형식을 사용하여 "
"객체 형을 가져올 수 없습니다."

#: ../../whatsnew/3.6.rst:2253
msgid ""
"As part of :pep:`487`, the handling of keyword arguments passed to "
":class:`type` (other than the metaclass hint, ``metaclass``) is now "
"consistently delegated to :meth:`object.__init_subclass__`. This means "
"that :meth:`type.__new__` and :meth:`type.__init__` both now accept "
"arbitrary keyword arguments, but :meth:`object.__init_subclass__` (which "
"is called from :meth:`type.__new__`) will reject them by default. Custom "
"metaclasses accepting additional keyword arguments will need to adjust "
"their calls to :meth:`type.__new__` (whether direct or via "
":class:`super`) accordingly."
msgstr ""
":pep:`487`\\의 일부로, :class:`type`\\에 전달된 키워드 인자 (메타 클래스 힌트 ``metaclass`` "
"제외) 처리가 이제 일관되게 :meth:`object.__init_subclass__`\\에 위임됩니다. 즉, "
":meth:`type.__new__`\\와 :meth:`type.__init__`\\는 이제 임의의 키워드 인자를 받아들이지만, "
":meth:`object.__init_subclass__`\\(:meth:`type.__new__`\\에서 호출됨)는 기본적으로 "
"이를 거부합니다. 추가 키워드 인자를 받아들이는 사용자 정의 메타 클래스는 그에 따라 :meth:`type.__new__`\\에 "
"대한 호출을 조정해야 합니다 (직접 또는 :class:`super`\\를 통해)."

#: ../../whatsnew/3.6.rst:2262
#, fuzzy
msgid ""
"In ``distutils.command.sdist.sdist``, the ``default_format`` attribute "
"has been removed and is no longer honored. Instead, the gzipped tarfile "
"format is the default on all platforms and no platform-specific selection"
" is made. In environments where distributions are built on Windows and "
"zip distributions are required, configure the project with a "
"``setup.cfg`` file containing the following:"
msgstr ""
":class:`distutils.command.sdist.sdist`\\에서, ``default_format`` 어트리뷰트가 "
"제거되었으며 더는 적용되지 않습니다. 대신, gzip 된 tar 파일 형식이 모든 플랫폼에서 기본값이며 플랫폼별 선택이 이루어지지 "
"않습니다. 윈도우에서 배포가 빌드되고 zip 배포가 필요한 환경에서는, 다음을 포함하는 ``setup.cfg`` 파일로 프로젝트를 "
"구성하십시오:"

#: ../../whatsnew/3.6.rst:2270
msgid ""
"[sdist]\n"
"formats=zip"
msgstr ""

#: ../../whatsnew/3.6.rst:2275
msgid ""
"This behavior has also been backported to earlier Python versions by "
"Setuptools 26.0.0."
msgstr "이 동작은 Setuptools 26.0.0에 의해 이전 파이썬 버전으로 역 이식되었습니다."

#: ../../whatsnew/3.6.rst:2278
msgid ""
"In the :mod:`urllib.request` module and the "
":meth:`http.client.HTTPConnection.request` method, if no Content-Length "
"header field has been specified and the request body is a file object, it"
" is now sent with HTTP 1.1 chunked encoding. If a file object has to be "
"sent to a HTTP 1.0 server, the Content-Length value now has to be "
"specified by the caller. (Contributed by Demian Brecht and Rolf Krahl "
"with tweaks from Martin Panter in :issue:`12319`.)"
msgstr ""
":mod:`urllib.request` 모듈과 :meth:`http.client.HTTPConnection.request` "
"메서드에서, Content-Length 헤더 필드가 지정되지 않았고 요청 본문이 파일 객체이면, 이제 HTTP 1.1 청크 "
"인코딩(chunked encoding)으로 전송됩니다. 파일 객체를 HTTP 1.0 서버로 보내야 하면, 이제 호출자가 "
"Content-Length 값을 지정해야 합니다. (Contributed by Demian Brecht and Rolf Krahl "
"with tweaks from Martin Panter in :issue:`12319`.)"

#: ../../whatsnew/3.6.rst:2287
msgid ""
"The :class:`~csv.DictReader` now returns rows of type "
":class:`~collections.OrderedDict`. (Contributed by Steve Holden in "
":issue:`27842`.)"
msgstr ""
":class:`~csv.DictReader`\\는 이제 :class:`~collections.OrderedDict` 형의 행을 "
"반환합니다. (Contributed by Steve Holden in :issue:`27842`.)"

#: ../../whatsnew/3.6.rst:2291
#, fuzzy
msgid ""
"The :const:`!crypt.METHOD_CRYPT` will no longer be added to "
"``crypt.methods`` if unsupported by the platform. (Contributed by Victor "
"Stinner in :issue:`25287`.)"
msgstr ""
"플랫폼에서 지원하지 않으면, :const:`crypt.METHOD_CRYPT`\\는 더는 ``crypt.methods``\\에 "
"추가되지 않습니다. (Contributed by Victor Stinner in :issue:`25287`.)"

#: ../../whatsnew/3.6.rst:2299
msgid ""
"On Linux, :func:`ctypes.util.find_library` now looks in "
"``LD_LIBRARY_PATH`` for shared libraries. (Contributed by Vinay Sajip in "
":issue:`9998`.)"
msgstr ""
"리눅스에서, :func:`ctypes.util.find_library`\\는 이제 ``LD_LIBRARY_PATH``\\에서 공유 "
"라이브러리를 찾습니다. (Contributed by Vinay Sajip in :issue:`9998`.)"

#: ../../whatsnew/3.6.rst:2303
msgid ""
"The :class:`imaplib.IMAP4` class now handles flags containing the ``']'``"
" character in messages sent from the server to improve real-world "
"compatibility. (Contributed by Lita Cho in :issue:`21815`.)"
msgstr ""
":class:`imaplib.IMAP4` 클래스는 이제 서버에서 보낸 메시지의 ``']'`` 문자를 포함하는 플래그를 처리하여 "
"실세계 호환성을 향상합니다. (Contributed by Lita Cho in :issue:`21815`.)"

#: ../../whatsnew/3.6.rst:2308
msgid ""
"The :func:`mmap.write() <mmap.write>` function now returns the number of "
"bytes written like other write methods. (Contributed by Jakub Stasiak in "
":issue:`26335`.)"
msgstr ""
":func:`mmap.write() <mmap.write>` 함수는 이제 다른 쓰기 메서드와 같이 기록된 바이트 수를 반환합니다. "
"(Contributed by Jakub Stasiak in :issue:`26335`.)"

#: ../../whatsnew/3.6.rst:2312
msgid ""
"The :func:`pkgutil.iter_modules` and :func:`pkgutil.walk_packages` "
"functions now return :class:`~pkgutil.ModuleInfo` named tuples. "
"(Contributed by Ramchandra Apte in :issue:`17211`.)"
msgstr ""
":func:`pkgutil.iter_modules`\\와 :func:`pkgutil.walk_packages` 함수는 네임드 튜플 "
":class:`~pkgutil.ModuleInfo`\\를 반환합니다. (Contributed by Ramchandra Apte in"
" :issue:`17211`.)"

#: ../../whatsnew/3.6.rst:2316
msgid ""
":func:`re.sub` now raises an error for invalid numerical group references"
" in replacement templates even if the pattern is not found in the string."
"  The error message for invalid group references now includes the group "
"index and the position of the reference. (Contributed by SilentGhost, "
"Serhiy Storchaka in :issue:`25953`.)"
msgstr ""
":func:`re.sub`\\는 이제 문자열에서 패턴을 찾을 수 없는 경우에도 치환 템플릿에 있는 잘못된 숫자 그룹 참조에 대해 "
"에러를 발생시킵니다. 이제 잘못된 그룹 참조에 대한 에러 메시지에 그룹 인덱스와 참조 위치가 포함됩니다. (Contributed "
"by SilentGhost, Serhiy Storchaka in :issue:`25953`.)"

#: ../../whatsnew/3.6.rst:2322
msgid ""
":class:`zipfile.ZipFile` will now raise :exc:`NotImplementedError` for "
"unrecognized compression values.  Previously a plain :exc:`RuntimeError` "
"was raised.  Additionally, calling :class:`~zipfile.ZipFile` methods on a"
" closed ZipFile or calling the :meth:`~zipfile.ZipFile.write` method on a"
" ZipFile created with mode ``'r'`` will raise a :exc:`ValueError`. "
"Previously, a :exc:`RuntimeError` was raised in those scenarios."
msgstr ""
":class:`zipfile.ZipFile`\\은 이제 인식할 수 없는 압축 값에 대해 "
":exc:`NotImplementedError` 를 발생시킵니다. 이전에는 일반 :exc:`RuntimeError`\\가 "
"발생했습니다. 또한, 닫힌 ZipFile에서 :class:`~zipfile.ZipFile` 메서드를 호출하거나 ``'r'`` 모드로"
" 만든 ZipFile에서 :meth:`~zipfile.ZipFile.write` 메서드를 호출하면 "
":exc:`ValueError`\\가 발생합니다. 이전에는, 이러한 시나리오에서 :exc:`RuntimeError`\\가 "
"발생했습니다."

#: ../../whatsnew/3.6.rst:2329
msgid ""
"when custom metaclasses are combined with zero-argument :func:`super` or "
"direct references from methods to the implicit ``__class__`` closure "
"variable, the implicit ``__classcell__`` namespace entry must now be "
"passed up to ``type.__new__`` for initialisation. Failing to do so will "
"result in a :exc:`DeprecationWarning` in Python 3.6 and a "
":exc:`RuntimeError` in Python 3.8."
msgstr ""
"사용자 정의 메타 클래스가 인자가 없는 :func:`super`\\나 메서드에서 묵시적 ``__class__`` 클로저 변수로의 "
"직접 참조와 결합할 때, 묵시적 ``__classcell__`` 이름 공간 항목은 이제 초기화를 위해 "
"``type.__new__``\\까지 전달되어야 합니다. 그렇게 하지 않으면 파이썬 3.6에서는 "
":exc:`DeprecationWarning`\\이, 파이썬 3.8에서는 :exc:`RuntimeError`\\가 발생합니다."

#: ../../whatsnew/3.6.rst:2336
#, fuzzy
msgid ""
"With the introduction of :exc:`ModuleNotFoundError`, import system "
"consumers may start expecting import system replacements to raise that "
"more specific exception when appropriate, rather than the less-specific "
":exc:`ImportError`. To provide future compatibility with such consumers, "
"implementers of alternative import systems that completely replace "
":func:`__import__` will need to update their implementations to raise the"
" new subclass when a module can't be found at all. Implementers of "
"compliant plugins to the default import system shouldn't need to make any"
" changes, as the default import system will raise the new subclass when "
"appropriate."
msgstr ""
":exc:`ModuleNotFoundError` 의 도입으로, 임포트 시스템 소비자는 임포트 시스템 교체로 인해 적절한 경우 덜 "
"구체적인 :exc:`ImportError`\\가 아닌 더 구체적인 예외가 발생할 것으로 기대할 수 있습니다. 이러한 소비자와의 향후"
" 호환성을 제공하기 위해, :func:`__import__`\\를 완전히 대체하는 대체 임포트 시스템의 구현자는 모듈을 전혀 찾을 "
"수 없을 때 새 서브 클래스를 발생시키도록 구현을 갱신해야 합니다. 기본 임포트 시스템에 대한 호환 플러그인의 구현자는 필요한 경우"
" 기본 임포트 시스템이 새 서브 클래스를 발생시키므로 변경할 필요가 없습니다."

#: ../../whatsnew/3.6.rst:2348
msgid "Changes in the C API"
msgstr "C API의 변경 사항"

#: ../../whatsnew/3.6.rst:2350
msgid ""
"The :c:func:`PyMem_Malloc` allocator family now uses the :ref:`pymalloc "
"allocator <pymalloc>` rather than the system :c:func:`malloc`. "
"Applications calling :c:func:`PyMem_Malloc` without holding the GIL can "
"now crash. Set the :envvar:`PYTHONMALLOC` environment variable to "
"``debug`` to validate the usage of memory allocators in your application."
" See :issue:`26249`."
msgstr ""
":c:func:`PyMem_Malloc` 할당자 패밀리는 이제 시스템 :c:func:`malloc`\\이 아닌 "
":ref:`pymalloc 할당자 <pymalloc>`\\를 사용합니다. 이제 GIL을 보유하지 않고 "
":c:func:`PyMem_Malloc`\\을 호출하는 응용 프로그램이 충돌할 수 있습니다. 응용 프로그램에서 메모리 할당자의 "
"사용을 확인하려면 :envvar:`PYTHONMALLOC` 환경 변수를 ``debug``\\로 설정하십시오. "
":issue:`26249`\\를 참조하십시오."

#: ../../whatsnew/3.6.rst:2356
msgid ""
":c:func:`Py_Exit` (and the main interpreter) now override the exit status"
" with 120 if flushing buffered data failed.  See :issue:`5319`."
msgstr ""
":c:func:`Py_Exit`\\(그리고 메인 인터프리터)는 이제 버퍼링 된 데이터를 플러시 하지 못하면 종료 상태를 120으로 "
"재정의합니다. :issue:`5319`\\를 참조하십시오."

#: ../../whatsnew/3.6.rst:2361
msgid "CPython bytecode changes"
msgstr "CPython 바이트 코드 변경 사항"

#: ../../whatsnew/3.6.rst:2363
msgid ""
"There have been several major changes to the :term:`bytecode` in Python "
"3.6."
msgstr "파이썬 3.6에서 :term:`바이트 코드 <bytecode>`\\에 몇 가지 주요 변경 사항이 있습니다."

#: ../../whatsnew/3.6.rst:2365
msgid ""
"The Python interpreter now uses a 16-bit wordcode instead of bytecode. "
"(Contributed by Demur Rumed with input and reviews from Serhiy Storchaka "
"and Victor Stinner in :issue:`26647` and :issue:`28050`.)"
msgstr ""
"파이썬 인터프리터는 이제 바이트 코드 대신 16비트 워드 코드를 사용합니다. (Contributed by Demur Rumed "
"with input and reviews from Serhiy Storchaka and Victor Stinner in "
":issue:`26647` and :issue:`28050`.)"

#: ../../whatsnew/3.6.rst:2369
#, fuzzy
msgid ""
"The new :opcode:`!FORMAT_VALUE` and :opcode:`BUILD_STRING` opcodes as "
"part of the  :ref:`formatted string literal <whatsnew36-pep498>` "
"implementation. (Contributed by Eric Smith in :issue:`25483` and Serhiy "
"Storchaka in :issue:`27078`.)"
msgstr ""
":ref:`포맷 문자열 리터럴 <whatsnew36-pep498>` 구현의 일부로 새로운 "
":opcode:`FORMAT_VALUE`\\와 :opcode:`BUILD_STRING` 옵코드. (Contributed by "
"Eric Smith in :issue:`25483` and Serhiy Storchaka in :issue:`27078`.)"

#: ../../whatsnew/3.6.rst:2374
msgid ""
"The new :opcode:`BUILD_CONST_KEY_MAP` opcode to optimize the creation of "
"dictionaries with constant keys. (Contributed by Serhiy Storchaka in "
":issue:`27140`.)"
msgstr ""
"상수 키를 갖는 딕셔너리 생성을 최적화하는 새로운 :opcode:`BUILD_CONST_KEY_MAP` 옵코드. "
"(Contributed by Serhiy Storchaka in :issue:`27140`.)"

#: ../../whatsnew/3.6.rst:2378
#, fuzzy
msgid ""
"The function call opcodes have been heavily reworked for better "
"performance and simpler implementation. The :opcode:`MAKE_FUNCTION`, "
":opcode:`!CALL_FUNCTION`, :opcode:`!CALL_FUNCTION_KW` and "
":opcode:`!BUILD_MAP_UNPACK_WITH_CALL` opcodes have been modified, the new"
" :opcode:`CALL_FUNCTION_EX` and :opcode:`!BUILD_TUPLE_UNPACK_WITH_CALL` "
"have been added, and ``CALL_FUNCTION_VAR``, ``CALL_FUNCTION_VAR_KW`` and "
"``MAKE_CLOSURE`` opcodes have been removed. (Contributed by Demur Rumed "
"in :issue:`27095`, and Serhiy Storchaka in :issue:`27213`, "
":issue:`28257`.)"
msgstr ""
"더 나은 성능과 더 간단한 구현을 위해 함수 호출 옵코드들이 크게 다시 작업 되었습니다. "
":opcode:`MAKE_FUNCTION`, :opcode:`CALL_FUNCTION`, "
":opcode:`CALL_FUNCTION_KW` 및 :opcode:`BUILD_MAP_UNPACK_WITH_CALL` 옵코드가 "
"수정되었으며, 새로운 :opcode:`CALL_FUNCTION_EX` 와 "
":opcode:`BUILD_TUPLE_UNPACK_WITH_CALL`\\이 추가되었으며, ``CALL_FUNCTION_VAR``, "
"``CALL_FUNCTION_VAR_KW`` 및 ``MAKE_CLOSURE`` 옵코드가 제거되었습니다. (Contributed by"
" Demur Rumed in :issue:`27095`, and Serhiy Storchaka in :issue:`27213`, "
":issue:`28257`.)"

#: ../../whatsnew/3.6.rst:2389
#, fuzzy
msgid ""
"The new :opcode:`SETUP_ANNOTATIONS` and :opcode:`!STORE_ANNOTATION` "
"opcodes have been added to support the new :term:`variable annotation` "
"syntax. (Contributed by Ivan Levkivskyi in :issue:`27985`.)"
msgstr ""
"새로운 :term:`변수 어노테이션 <variable annotation>` 문법을 지원하기 위해 새로운 "
":opcode:`SETUP_ANNOTATIONS`\\와 :opcode:`STORE_ANNOTATION` 옵코드가 추가되었습니다. "
"(Contributed by Ivan Levkivskyi in :issue:`27985`.)"

#: ../../whatsnew/3.6.rst:2395
msgid "Notable changes in Python 3.6.2"
msgstr "파이썬 3.6.2의 주목할만한 변경 사항"

#: ../../whatsnew/3.6.rst:2398
msgid "New ``make regen-all`` build target"
msgstr "새로운 ``make regen-all`` 빌드 대상"

#: ../../whatsnew/3.6.rst:2400
msgid ""
"To simplify cross-compilation, and to ensure that CPython can reliably be"
" compiled without requiring an existing version of Python to already be "
"available, the autotools-based build system no longer attempts to "
"implicitly recompile generated files based on file modification times."
msgstr ""
"교차 컴파일을 단순화하고, 기존 버전의 파이썬을 이미 사용할 수 있을 필요 없이 CPython을 안정적으로 컴파일 할 수 있도록, "
"autotools 기반 빌드 시스템은 더는 파일 수정 시간을 기반으로 생성된 파일을 묵시적으로 재컴파일하려고 시도하지 않습니다."

#: ../../whatsnew/3.6.rst:2405
msgid ""
"Instead, a new ``make regen-all`` command has been added to force "
"regeneration of these files when desired (e.g. after an initial version "
"of Python has already been built based on the pregenerated versions)."
msgstr ""
"대신, 원할 때 이러한 파일을 강제로 재생성하기 위해 새로운 ``make regen-all`` 명령이 추가되었습니다 (예를 들어 "
"사전 생성된 버전을 기반으로 파이썬의 초기 버전이 이미 빌드된 후)."

#: ../../whatsnew/3.6.rst:2409
msgid ""
"More selective regeneration targets are also defined - see "
":source:`Makefile.pre.in` for details."
msgstr "더 선택적인 재생성 대상도 정의됩니다 - 자세한 내용은 :source:`Makefile.pre.in`\\을 참조하십시오."

#: ../../whatsnew/3.6.rst:2412 ../../whatsnew/3.6.rst:2425
msgid "(Contributed by Victor Stinner in :issue:`23404`.)"
msgstr "(Contributed by Victor Stinner in :issue:`23404`.)"

#: ../../whatsnew/3.6.rst:2418
msgid "Removal of ``make touch`` build target"
msgstr "``make touch`` 빌드 대상 제거"

#: ../../whatsnew/3.6.rst:2420
msgid ""
"The ``make touch`` build target previously used to request implicit "
"regeneration of generated files by updating their modification times has "
"been removed."
msgstr "수정 시간을 갱신하여 생성된 파일의 묵시적 재생성을 요청하는 데 이전에 사용된 ``make touch`` 빌드 대상이 제거되었습니다."

#: ../../whatsnew/3.6.rst:2423
msgid "It has been replaced by the new ``make regen-all`` target."
msgstr "새로운 ``make regen-all`` 대상으로 대체되었습니다."

#: ../../whatsnew/3.6.rst:2431
msgid "Notable changes in Python 3.6.4"
msgstr "파이썬 3.6.4의 주목할만한 변경 사항"

#: ../../whatsnew/3.6.rst:2433
msgid ""
"The ``PyExc_RecursionErrorInst`` singleton that was part of the public "
"API has been removed as its members being never cleared may cause a "
"segfault during finalization of the interpreter. (Contributed by Xavier "
"de Gaye in :issue:`22898` and :issue:`30697`.)"
msgstr ""
"공용 API의 일부였던 ``PyExc_RecursionErrorInst`` 싱글톤은 멤버가 삭제되지 않아서 인터프리터 종료 중에 "
"세그멘테이션 오류가 발생할 수 있어서 제거되었습니다. (Contributed by Xavier de Gaye in "
":issue:`22898` and :issue:`30697`.)"

#: ../../whatsnew/3.6.rst:2440
msgid "Notable changes in Python 3.6.5"
msgstr "파이썬 3.6.5의 주목할만한 변경 사항"

#: ../../whatsnew/3.6.rst:2442
msgid ""
"The :func:`locale.localeconv` function now sets temporarily the "
"``LC_CTYPE`` locale to the ``LC_NUMERIC`` locale in some cases. "
"(Contributed by Victor Stinner in :issue:`31900`.)"
msgstr ""
"이제 :func:`locale.localeconv` 함수는 때에 따라 임시로 ``LC_CTYPE`` 로케일을 "
"``LC_NUMERIC`` 로케일로 설정합니다. (Contributed by Victor Stinner in "
":issue:`31900`.)"

#: ../../whatsnew/3.6.rst:2448
msgid "Notable changes in Python 3.6.7"
msgstr "파이썬 3.6.7의 주목할만한 변경 사항"

#: ../../whatsnew/3.6.rst:2450
msgid ""
":mod:`xml.dom.minidom` and :mod:`xml.sax` modules no longer process "
"external entities by default. See also :gh:`61441`."
msgstr ""

#: ../../whatsnew/3.6.rst:2453
msgid ""
"In 3.6.7 the :mod:`tokenize` module now implicitly emits a ``NEWLINE`` "
"token when provided with input that does not have a trailing new line.  "
"This behavior now matches what the C tokenizer does internally. "
"(Contributed by Ammar Askar in :issue:`33899`.)"
msgstr ""
"3.6.7에서 :mod:`tokenize` 모듈은 이제 후행 줄 넘김이 없는 입력이 제공될 때 묵시적으로 ``NEWLINE`` "
"토큰을 내보냅니다. 이 동작은 이제 C 토크나이저가 내부적으로 수행하는 작업과 일치합니다. (Contributed by Ammar "
"Askar in :issue:`33899`.)"

#: ../../whatsnew/3.6.rst:2459
msgid "Notable changes in Python 3.6.10"
msgstr "파이썬 3.6.10의 주목할만한 변경 사항"

#: ../../whatsnew/3.6.rst:2461
msgid ""
"Due to significant security concerns, the *reuse_address* parameter of "
":meth:`asyncio.loop.create_datagram_endpoint` is no longer supported. "
"This is because of the behavior of the socket option ``SO_REUSEADDR`` in "
"UDP. For more details, see the documentation for "
"``loop.create_datagram_endpoint()``. (Contributed by Kyle Stanley, "
"Antoine Pitrou, and Yury Selivanov in :issue:`37228`.)"
msgstr ""
"심각한 보안 문제로 인해 :meth:`asyncio.loop.create_datagram_endpoint`\\의 "
"*reuse_address* 매개 변수는 더는 지원되지 않습니다. 이는 UDP에서 소켓 옵션 ``SO_REUSEADDR``\\의 "
"동작 때문입니다. 자세한 내용은 ``loop.create_datagram_endpoint()`` 설명서를 참조하십시오. "
"(Contributed by Kyle Stanley, Antoine Pitrou, and Yury Selivanov in "
":issue:`37228`.)"

#: ../../whatsnew/3.6.rst:2469
msgid "Notable changes in Python 3.6.13"
msgstr "파이썬 3.6.13의 주목할만한 변경 사항"

#: ../../whatsnew/3.6.rst:2471
#, fuzzy
msgid ""
"Earlier Python versions allowed using both ``;`` and ``&`` as query "
"parameter separators in :func:`urllib.parse.parse_qs` and "
":func:`urllib.parse.parse_qsl`.  Due to security concerns, and to conform"
" with newer W3C recommendations, this has been changed to allow only a "
"single separator key, with ``&`` as the default.  This change also "
"affects :func:`!cgi.parse` and :func:`!cgi.parse_multipart` as they use "
"the affected functions internally. For more details, please see their "
"respective documentation. (Contributed by Adam Goldschmidt, Senthil "
"Kumaran and Ken Jin in :issue:`42967`.)"
msgstr ""
"이전 파이썬 버전에서는 :func:`urllib.parse.parse_qs`\\와 "
":func:`urllib.parse.parse_qsl`\\에서 쿼리 매개 변수 구분자로 ``;``\\과 ``&``\\를 모두 사용할"
" 수 있었습니다. 보안 문제와 최신 W3C 권장 사항을 준수하기 위해, ``&``\\가 기본값인 단일 구분자 키만 허용하도록 "
"변경되었습니다. 이 변경 사항은 영향을 받는 함수를 내부적으로 사용하므로 :func:`cgi.parse`\\와 "
":func:`cgi.parse_multipart`\\에도 영향을 줍니다. 자세한 내용은 해당 설명서를 참조하십시오. "
"(Contributed by Adam Goldschmidt, Senthil Kumaran and Ken Jin in "
":issue:`42967`.)"

#: ../../whatsnew/3.6.rst:2482
#, fuzzy
msgid "Notable changes in Python 3.6.14"
msgstr "파이썬 3.6.4의 주목할만한 변경 사항"

#: ../../whatsnew/3.6.rst:2484
msgid ""
"A security fix alters the :class:`ftplib.FTP` behavior to not trust the "
"IPv4 address sent from the remote server when setting up a passive data "
"channel.  We reuse the ftp server IP address instead.  For unusual code "
"requiring the old behavior, set a ``trust_server_pasv_ipv4_address`` "
"attribute on your FTP instance to ``True``.  (See :gh:`87451`)"
msgstr ""

#: ../../whatsnew/3.6.rst:2490
msgid ""
"The presence of newline or tab characters in parts of a URL allows for "
"some forms of attacks. Following the WHATWG specification that updates "
"RFC 3986, ASCII newline ``\\n``, ``\\r`` and tab ``\\t`` characters are "
"stripped from the URL by the parser :func:`urllib.parse` preventing such "
"attacks. The removal characters are controlled by a new module level "
"variable ``urllib.parse._UNSAFE_URL_BYTES_TO_REMOVE``. (See :gh:`88048`)"
msgstr ""

