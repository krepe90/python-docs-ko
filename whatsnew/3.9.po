# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2020, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3.9\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-04-17 23:44+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: Dong-gweon Oh <flowdas@gmail.com>\n"
"Language-Team: Korean (https://python.flowdas.com)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.17.0\n"

#: ../../whatsnew/3.9.rst:3
msgid "What's New In Python 3.9"
msgstr "파이썬 3.9의 새로운 기능"

#: ../../whatsnew/3.9.rst
msgid "Editor"
msgstr "편집자"

#: ../../whatsnew/3.9.rst:5
msgid "Łukasz Langa"
msgstr "Łukasz Langa"

#: ../../whatsnew/3.9.rst:45
#, fuzzy
msgid ""
"This article explains the new features in Python 3.9, compared to 3.8. "
"Python 3.9 was released on October 5, 2020. For full details, see the "
":ref:`changelog <changelog>`."
msgstr ""
"이 기사에서는 3.8과 비교하여 파이썬 3.9의 새로운 기능에 관해 설명합니다. 파이썬 3.9는 2020년 10월 5일에 "
"출시되었습니다."

#: ../../whatsnew/3.9.rst:51
msgid ":pep:`596` - Python 3.9 Release Schedule"
msgstr ":pep:`596` - 파이썬 3.9 출시 일정"

#: ../../whatsnew/3.9.rst:55
msgid "Summary -- Release highlights"
msgstr "요약 -- 배포 주요 사항"

#: ../../whatsnew/3.9.rst:60
msgid "New syntax features:"
msgstr "새로운 문법 기능:"

#: ../../whatsnew/3.9.rst:62
msgid ":pep:`584`, union operators added to ``dict``;"
msgstr ":pep:`584`, 병합(union) 연산자가 ``dict``\\에 추가되었습니다."

#: ../../whatsnew/3.9.rst:63
msgid ":pep:`585`, type hinting generics in standard collections;"
msgstr ":pep:`585`, 표준 컬렉션의 형 힌트 제네릭;"

#: ../../whatsnew/3.9.rst:64
msgid ":pep:`614`, relaxed grammar restrictions on decorators."
msgstr ":pep:`614`, 데코레이터에 대한 완화된 문법 제한."

#: ../../whatsnew/3.9.rst:66
msgid "New built-in features:"
msgstr "새로운 내장 기능:"

#: ../../whatsnew/3.9.rst:68
msgid ":pep:`616`, string methods to remove prefixes and suffixes."
msgstr ":pep:`616`, 접두사와 접미사를 제거하는 문자열 메서드."

#: ../../whatsnew/3.9.rst:70
msgid "New features in the standard library:"
msgstr "표준 라이브러리의 새로운 기능:"

#: ../../whatsnew/3.9.rst:72
msgid ":pep:`593`, flexible function and variable annotations;"
msgstr ":pep:`593`, 유연한 함수와 변수 어노테이션;"

#: ../../whatsnew/3.9.rst:73
msgid ""
":func:`os.pidfd_open` added that allows process management without races "
"and signals."
msgstr "경쟁과 시그널 없이 프로세스 관리를 허용하는 :func:`os.pidfd_open`\\이 추가되었습니다."

#: ../../whatsnew/3.9.rst:76
msgid "Interpreter improvements:"
msgstr "인터프리터 개선:"

#: ../../whatsnew/3.9.rst:78
msgid ":pep:`573`, fast access to module state from methods of C extension types;"
msgstr ":pep:`573`, C 확장형의 메서드에서 모듈 상태에 빠르게 액세스하기;"

#: ../../whatsnew/3.9.rst:80
msgid ":pep:`617`, CPython now uses a new parser based on PEG;"
msgstr ":pep:`617`, CPython은 이제 PEG를 기반으로 하는 새로운 구문 분석기를 사용합니다;"

#: ../../whatsnew/3.9.rst:81
msgid ""
"a number of Python builtins (range, tuple, set, frozenset, list, dict) "
"are now sped up using :pep:`590` vectorcall;"
msgstr ""
"많은 파이썬 내장(range, tuple, set, frozenset, list, dict)이 이제 :pep:`590` 벡터콜을 "
"사용하여 빨라졌습니다;"

#: ../../whatsnew/3.9.rst:83
msgid "garbage collection does not block on resurrected objects;"
msgstr "가비지 수거는 부활한 객체에서 블록 되지 않습니다;"

#: ../../whatsnew/3.9.rst:84
#, fuzzy
msgid ""
"a number of Python modules (:mod:`!_abc`, :mod:`!audioop`, :mod:`!_bz2`, "
":mod:`!_codecs`, :mod:`!_contextvars`, :mod:`!_crypt`, "
":mod:`!_functools`, :mod:`!_json`, :mod:`!_locale`, :mod:`math`, "
":mod:`operator`, :mod:`resource`, :mod:`time`, :mod:`!_weakref`) now use "
"multiphase initialization as defined by PEP 489;"
msgstr ""
"많은 파이썬 모듈(:mod:`_abc`, :mod:`audioop`, :mod:`_bz2`, :mod:`_codecs`, "
":mod:`_contextvars`, :mod:`_crypt`, :mod:`_functools`, :mod:`_json`, "
":mod:`_locale`, :mod:`math`, :mod:`operator`, :mod:`resource`, "
":mod:`time`, :mod:`_weakref`)은 이제 PEP 489에 정의된 대로 다단계 초기화를 사용합니다;"

#: ../../whatsnew/3.9.rst:89
#, fuzzy
msgid ""
"a number of standard library modules (:mod:`!audioop`, :mod:`ast`, "
":mod:`grp`, :mod:`!_hashlib`, :mod:`pwd`, :mod:`!_posixsubprocess`, "
":mod:`random`, :mod:`select`, :mod:`struct`, :mod:`termios`, :mod:`zlib`)"
" are now using the stable ABI defined by PEP 384."
msgstr ""
"많은 표준 라이브러리 모듈(:mod:`audioop`, :mod:`ast`, :mod:`grp`, :mod:`_hashlib`, "
":mod:`pwd`, :mod:`_posixsubprocess`, :mod:`random`, :mod:`select`, "
":mod:`struct`, :mod:`termios`, :mod:`zlib`)은 이제 PEP 384에서 정의한 안정(stable) "
"ABI를 사용하고 있습니다."

#: ../../whatsnew/3.9.rst:94
msgid "New library modules:"
msgstr "새로운 라이브러리 모듈:"

#: ../../whatsnew/3.9.rst:96
msgid ""
":pep:`615`, the IANA Time Zone Database is now present in the standard "
"library in the :mod:`zoneinfo` module;"
msgstr ":pep:`615`, IANA 시간대 데이터베이스는 이제 :mod:`zoneinfo` 모듈을 통해 표준 라이브러리에 있습니다;"

#: ../../whatsnew/3.9.rst:98
msgid ""
"an implementation of a topological sort of a graph is now provided in the"
" new :mod:`graphlib` module."
msgstr "이제 새로운 :mod:`graphlib` 모듈에서 그래프의 위상 정렬(topological sort) 구현이 제공됩니다."

#: ../../whatsnew/3.9.rst:101
msgid "Release process changes:"
msgstr "릴리스 프로세스 변경:"

#: ../../whatsnew/3.9.rst:103
msgid ":pep:`602`, CPython adopts an annual release cycle."
msgstr ":pep:`602`, CPython은 연간 릴리스 주기를 채택합니다."

#: ../../whatsnew/3.9.rst:107
msgid "You should check for DeprecationWarning in your code"
msgstr "여러분의 코드에서 DeprecationWarning을 확인해야합니다"

#: ../../whatsnew/3.9.rst:109
msgid ""
"When Python 2.7 was still supported, a lot of functionality in Python 3 "
"was kept for backward compatibility with Python 2.7. With the end of "
"Python 2 support, these backward compatibility layers have been removed, "
"or will be removed soon. Most of them emitted a :exc:`DeprecationWarning`"
" warning for several years. For example, using ``collections.Mapping`` "
"instead of ``collections.abc.Mapping`` emits a :exc:`DeprecationWarning` "
"since Python 3.3, released in 2012."
msgstr ""
"파이썬 2.7이 여전히 지원될 때, 파이썬 2.7과의 과거 호환성을 위해 파이썬 3의 많은 기능이 유지되었습니다. 파이썬 2.7 "
"지원이 종료되면서, 이러한 이전 버전과의 호환성 계층이 제거되었거나, 곧 제거될 예정입니다. 그들 대부분은 몇 년 동안 "
":exc:`DeprecationWarning` 경고를 내보냈습니다. 예를 들어, ``collections.abc.Mapping`` "
"대신 ``collections.Mapping``\\을 사용하면 2012년에 배포된 파이썬 3.3 이후 "
":exc:`DeprecationWarning`\\을 내보냅니다."

#: ../../whatsnew/3.9.rst:117
msgid ""
"Test your application with the :option:`-W` ``default`` command-line "
"option to see :exc:`DeprecationWarning` and "
":exc:`PendingDeprecationWarning`, or even with :option:`-W` ``error`` to "
"treat them as errors. :ref:`Warnings Filter <warning-filter>` can be used"
" to ignore warnings from third-party code."
msgstr ""
":option:`-W` ``default`` 명령 줄 옵션으로 응용 프로그램을 테스트하여 "
":exc:`DeprecationWarning`\\과 :exc:`PendingDeprecationWarning` 을 보십시오. 또는 "
":option:`-W` ``error``\\로 아예 에러로 취급하십시오. :ref:`경고 필터 <warning-filter>`\\를"
" 사용하면 제삼자 코드의 경고를 무시할 수 있습니다."

#: ../../whatsnew/3.9.rst:122
msgid ""
"Python 3.9 is the last version providing those Python 2 backward "
"compatibility layers, to give more time to Python projects maintainers to"
" organize the removal of the Python 2 support and add support for Python "
"3.9."
msgstr ""
"파이썬 3.9는 파이썬 프로젝트 지원 담당자가 파이썬 2 지원 제거를 구성하고 파이썬 3.9에 대한 지원을 추가할 수 있도록 더 "
"많은 시간을 제공하기 위한, 파이썬 2 과거 호환성 계층을 제공하는 마지막 버전입니다."

#: ../../whatsnew/3.9.rst:126
msgid ""
"Aliases to :ref:`Abstract Base Classes <collections-abstract-base-"
"classes>` in the :mod:`collections` module, like ``collections.Mapping`` "
"alias to :class:`collections.abc.Mapping`, are kept for one last release "
"for backward compatibility. They will be removed from Python 3.10."
msgstr ""
":mod:`collections` 모듈의 :ref:`추상 베이스 클래스 <collections-abstract-base-"
"classes>`\\에 대한 별칭(:class:`collections.abc.Mapping`\\에 대한 "
"``collections.Mapping`` 별칭과 같은)은 이전 버전과의 호환성을 위해 마지막 배포 하나에서 유지됩니다. 파이썬 "
"3.10에서 제거됩니다."

#: ../../whatsnew/3.9.rst:131
msgid ""
"More generally, try to run your tests in the :ref:`Python Development "
"Mode <devmode>` which helps to prepare your code to make it compatible "
"with the next Python version."
msgstr ""
"더 일반적으로, :ref:`파이썬 개발 모드 <devmode>`\\에서 테스트를 실행하면 다음 파이썬 버전과 호환되도록 코드를 "
"준비하는 데 도움이 됩니다."

#: ../../whatsnew/3.9.rst:135
msgid ""
"Note: a number of pre-existing deprecations were removed in this version "
"of Python as well. Consult the :ref:`removed-in-python-39` section."
msgstr ""
"참고: 이 버전의 파이썬에서 기존의 많은 폐지가 제거되기도 했습니다. :ref:`removed-in-python-39` 섹션을 "
"참조하십시오."

#: ../../whatsnew/3.9.rst:140 ../../whatsnew/3.9.rst:1271
msgid "New Features"
msgstr "새로운 기능"

#: ../../whatsnew/3.9.rst:143
msgid "Dictionary Merge & Update Operators"
msgstr "딕셔너리 병합과 업데이트 연산자"

#: ../../whatsnew/3.9.rst:145
#, python-brace-format
msgid ""
"Merge (``|``) and update (``|=``) operators have been added to the built-"
"in :class:`dict` class. Those complement the existing ``dict.update`` and"
" ``{**d1, **d2}`` methods of merging dictionaries."
msgstr ""
"내장 :class:`dict` 클래스에 병합(``|``)과 업데이트(``|=``) 연산자가 추가되었습니다. 이들은 딕셔너리 병합의 "
"기존 ``dict.update``\\와 ``{**d1, **d2}`` 메서드를 보완합니다."

#: ../../whatsnew/3.9.rst:149 ../../whatsnew/3.9.rst:282
msgid "Example::"
msgstr "예::"

#: ../../whatsnew/3.9.rst:151
#, python-brace-format
msgid ""
">>> x = {\"key1\": \"value1 from x\", \"key2\": \"value2 from x\"}\n"
">>> y = {\"key2\": \"value2 from y\", \"key3\": \"value3 from y\"}\n"
">>> x | y\n"
"{'key1': 'value1 from x', 'key2': 'value2 from y', 'key3': 'value3 from "
"y'}\n"
">>> y | x\n"
"{'key2': 'value2 from x', 'key3': 'value3 from y', 'key1': 'value1 from "
"x'}"
msgstr ""

#: ../../whatsnew/3.9.rst:158
msgid ""
"See :pep:`584` for a full description. (Contributed by Brandt Bucher in "
":issue:`36144`.)"
msgstr ""
"자세한 설명은 :pep:`584`\\를 참조하십시오. (Contributed by Brandt Bucher in "
":issue:`36144`.)"

#: ../../whatsnew/3.9.rst:162
msgid "New String Methods to Remove Prefixes and Suffixes"
msgstr "접두사와 접미사를 제거하는 새로운 문자열 메서드"

#: ../../whatsnew/3.9.rst:164
msgid ""
":meth:`str.removeprefix(prefix)<str.removeprefix>` and "
":meth:`str.removesuffix(suffix)<str.removesuffix>` have been added to "
"easily remove an unneeded prefix or a suffix from a string. Corresponding"
" ``bytes``, ``bytearray``, and ``collections.UserString`` methods have "
"also been added. See :pep:`616` for a full description. (Contributed by "
"Dennis Sweeney in :issue:`39939`.)"
msgstr ""
"문자열에서 불필요한 접두사나 접미사를 쉽게 제거하기 위해 "
":meth:`str.removeprefix(prefix)<str.removeprefix>`\\와 "
":meth:`str.removesuffix(suffix)<str.removesuffix>`\\가 추가되었습니다. 해당 "
"``bytes``, ``bytearray`` 및 ``collections.UserString`` 메서드도 추가되었습니다. 자세한 "
"설명은 :pep:`616`\\을 참조하십시오. (Contributed by Dennis Sweeney in "
":issue:`39939`.)"

#: ../../whatsnew/3.9.rst:172
msgid "Type Hinting Generics in Standard Collections"
msgstr "표준 컬렉션의 형 힌트 제네릭"

#: ../../whatsnew/3.9.rst:174
msgid ""
"In type annotations you can now use built-in collection types such as "
"``list`` and ``dict`` as generic types instead of importing the "
"corresponding capitalized types (e.g. ``List`` or ``Dict``) from "
"``typing``.  Some other types in the standard library are also now "
"generic, for example ``queue.Queue``."
msgstr ""
"형 어노테이션에서 이제 ``typing``\\에서 해당 대문자 형(예를 들어 ``List``\\나 ``Dict``)을 임포트 하는 "
"대신 ``list``\\와 ``dict``\\와 같은 내장 컬렉션 형을 제네릭 형으로 사용할 수 있습니다. 표준 라이브러리의 일부 "
"다른 형도 이제 제네릭입니다, 예를 들어 ``queue.Queue``."

#: ../../whatsnew/3.9.rst:180 ../../whatsnew/3.9.rst:1159
msgid "Example:"
msgstr "예:"

#: ../../whatsnew/3.9.rst:182
msgid ""
"def greet_all(names: list[str]) -> None:\n"
"    for name in names:\n"
"        print(\"Hello\", name)"
msgstr ""

#: ../../whatsnew/3.9.rst:188
msgid ""
"See :pep:`585` for more details.  (Contributed by Guido van Rossum, Ethan"
" Smith, and Batuhan Taşkaya in :issue:`39481`.)"
msgstr ""
"자세한 내용은 :pep:`585`\\를 참조하십시오. (Contributed by Guido van Rossum, Ethan "
"Smith, and Batuhan Taşkaya in :issue:`39481`.)"

#: ../../whatsnew/3.9.rst:192
msgid "New Parser"
msgstr "새로운 구문 분석기"

#: ../../whatsnew/3.9.rst:194
msgid ""
"Python 3.9 uses a new parser, based on `PEG "
"<https://en.wikipedia.org/wiki/Parsing_expression_grammar>`_ instead of "
"`LL(1) <https://en.wikipedia.org/wiki/LL_parser>`_.  The new parser's "
"performance is roughly comparable to that of the old parser, but the PEG "
"formalism is more flexible than LL(1) when it comes to designing new "
"language features.  We'll start using this flexibility in Python 3.10 and"
" later."
msgstr ""
"파이썬 3.9는 `LL(1) <https://en.wikipedia.org/wiki/LL_parser>`_ 대신 `PEG "
"<https://en.wikipedia.org/wiki/Parsing_expression_grammar>`_\\를 기반으로 하는 "
"새로운 구문 분석기를 사용합니다. 새로운 구문 분석기의 성능은 기존 구문 분석기의 성능과 거의 비슷하지만, PEG 형식은 새로운 "
"언어 기능을 설계할 때 LL(1)보다 더 유연합니다. 파이썬 3.10 이상에서 이 유연성을 사용하기 시작할 것입니다."

#: ../../whatsnew/3.9.rst:202
msgid ""
"The :mod:`ast` module uses the new parser and produces the same AST as "
"the old parser."
msgstr ":mod:`ast` 모듈은 새 구문 분석기를 사용하며 이전 구문 분석기와 같은 AST를 생성합니다."

#: ../../whatsnew/3.9.rst:205
#, fuzzy
msgid ""
"In Python 3.10, the old parser will be deleted and so will all "
"functionality that depends on it (primarily the :mod:`!parser` module, "
"which has long been deprecated).  In Python 3.9 *only*, you can switch "
"back to the LL(1) parser using a command line switch (``-X oldparser``) "
"or an environment variable (``PYTHONOLDPARSER=1``)."
msgstr ""
"파이썬 3.10에서는, 이전 구문 분석기가 삭제되어, 여기에 의존하는 모든 기능도 제거됩니다 (주로 오랜 기간 폐지되었던 "
":mod:`parser` 모듈). 파이썬 3.9에서\\*만*, 명령 줄 스위치(``-X oldparser``)나 환경 "
"변수(``PYTHONOLDPARSER=1``)를 사용하여 LL(1) 구문 분석기로 다시 전환 할 수 있습니다."

#: ../../whatsnew/3.9.rst:211
msgid ""
"See :pep:`617` for more details.  (Contributed by Guido van Rossum, Pablo"
" Galindo and Lysandros Nikolaou in :issue:`40334`.)"
msgstr ""
"자세한 내용은 :pep:`617`\\을 참조하십시오. (Contributed by Guido van Rossum, Pablo "
"Galindo and Lysandros Nikolaou in :issue:`40334`.)"

#: ../../whatsnew/3.9.rst:216
msgid "Other Language Changes"
msgstr "기타 언어 변경"

#: ../../whatsnew/3.9.rst:218
msgid ""
":func:`__import__` now raises :exc:`ImportError` instead of "
":exc:`ValueError`, which used to occur when a relative import went past "
"its top-level package. (Contributed by Ngalim Siregar in :issue:`37444`.)"
msgstr ""
":func:`__import__`\\는 이제 :exc:`ValueError` 대신 :exc:`ImportError`\\를 "
"발생시킵니다. 이는 상대적 임포트가 최상위 수준 패키지를 넘어갈 때 발생했습니다. (Contributed by Ngalim "
"Siregar in :issue:`37444`.)"

#: ../../whatsnew/3.9.rst:223
msgid ""
"Python now gets the absolute path of the script filename specified on the"
" command line (ex: ``python3 script.py``): the ``__file__`` attribute of "
"the :mod:`__main__` module became an absolute path, rather than a "
"relative path. These paths now remain valid after the current directory "
"is changed by :func:`os.chdir`. As a side effect, the traceback also "
"displays the absolute path for :mod:`__main__` module frames in this "
"case. (Contributed by Victor Stinner in :issue:`20443`.)"
msgstr ""
"파이썬은 이제 명령 줄에 지정된 스크립트 파일 이름의 절대 경로를 얻습니다 (예: ``python3 script.py``): "
":mod:`__main__` 모듈의 ``__file__`` 어트리뷰트는 상대 경로 대신 절대 경로가 됩니다. 이 경로는 현재 "
"디렉터리가 :func:`os.chdir`\\에 의해 변경된 후에도 계속 유효합니다. 부작용으로, 이 경우 트레이스백은 "
":mod:`__main__` 모듈 프레임에 대해 절대 경로를 표시합니다. (Contributed by Victor Stinner "
"in :issue:`20443`.)"

#: ../../whatsnew/3.9.rst:231
#, fuzzy
msgid ""
"In the :ref:`Python Development Mode <devmode>` and in :ref:`debug build "
"<debug-build>`, the *encoding* and *errors* arguments are now checked for"
" string encoding and decoding operations. Examples: :func:`open`, "
":meth:`str.encode` and :meth:`bytes.decode`."
msgstr ""
":ref:`파이썬 개발 모드 <devmode>`\\와 디버그 빌드에서, 이제 문자열 인코딩과 디코딩 연산을 위해 "
"*encoding*\\과 *errors* 인자가 검사됩니다. 예: :func:`open`, :meth:`str.encode` 및 "
":meth:`bytes.decode`."

#: ../../whatsnew/3.9.rst:236
msgid ""
"By default, for best performance, the *errors* argument is only checked "
"at the first encoding/decoding error and the *encoding* argument is "
"sometimes ignored for empty strings. (Contributed by Victor Stinner in "
":issue:`37388`.)"
msgstr ""
"기본적으로, 최상의 성능을 위해, *errors* 인자는 첫 번째 인코딩/디코딩 에러에서만 확인되며 빈 문자열에 대해서는 "
"*encoding* 인자가 무시되는 경우가 있습니다. (Contributed by Victor Stinner in "
":issue:`37388`.)"

#: ../../whatsnew/3.9.rst:241
msgid ""
"``\"\".replace(\"\", s, n)`` now returns ``s`` instead of an empty string"
" for all non-zero ``n``.  It is now consistent with ``\"\".replace(\"\", "
"s)``. There are similar changes for :class:`bytes` and :class:`bytearray`"
" objects. (Contributed by Serhiy Storchaka in :issue:`28029`.)"
msgstr ""
"``\"\".replace(\"\", s, n)``\\는 이제 0이 아닌 모든 ``n``\\에 대해 빈 문자열 대신 ``s``\\를"
" 반환합니다. 이제 ``\"\".replace(\"\", s)``\\와 일관성 있습니다. :class:`bytes`\\와 "
":class:`bytearray` 객체에 대해 유사한 변경 사항이 있습니다. (Contributed by Serhiy "
"Storchaka in :issue:`28029`.)"

#: ../../whatsnew/3.9.rst:246
msgid ""
"Any valid expression can now be used as a :term:`decorator`.  Previously,"
" the grammar was much more restrictive.  See :pep:`614` for details. "
"(Contributed by Brandt Bucher in :issue:`39702`.)"
msgstr ""
"이제 모든 유효한 표현식을 :term:`데코레이터 <decorator>`\\로 사용할 수 있습니다. 이전에는, 문법이 훨씬 "
"제한적이었습니다. 자세한 내용은 :pep:`614`\\를 참조하십시오. (Contributed by Brandt Bucher in "
":issue:`39702`.)"

#: ../../whatsnew/3.9.rst:250
msgid ""
"Improved help for the :mod:`typing` module. Docstrings are now shown for "
"all special forms and special generic aliases (like ``Union`` and "
"``List``). Using :func:`help` with generic alias like ``List[int]`` will "
"show the help for the correspondent concrete type (``list`` in this "
"case). (Contributed by Serhiy Storchaka in :issue:`40257`.)"
msgstr ""
":mod:`typing` 모듈에 대한 도움말이 개선되었습니다. 모든 특수 형식과 특수 제네릭 에일리어스(``Union``\\과 "
"``List`` 같은)에 대한 독스트링이 이제 표시됩니다. ``List[int]``\\와 같은 제네릭 에일리어스로 "
":func:`help`\\를 사용하면 해당 구상형(이 경우 ``list``)에 대한 도움말이 표시됩니다. (Contributed "
"by Serhiy Storchaka in :issue:`40257`.)"

#: ../../whatsnew/3.9.rst:256
msgid ""
"Parallel running of :meth:`~agen.aclose` / :meth:`~agen.asend` / "
":meth:`~agen.athrow` is now prohibited, and ``ag_running`` now reflects "
"the actual running status of the async generator. (Contributed by Yury "
"Selivanov in :issue:`30773`.)"
msgstr ""
":meth:`~agen.aclose` / :meth:`~agen.asend` / :meth:`~agen.athrow`\\의 병렬 "
"실행은 이제 금지되며, 이제 ``ag_running``\\은 비동기 제너레이터의 실제 실행 상태를 반영합니다. "
"(Contributed by Yury Selivanov in :issue:`30773`.)"

#: ../../whatsnew/3.9.rst:261
msgid ""
"Unexpected errors in calling the ``__iter__`` method are no longer masked"
" by ``TypeError`` in the :keyword:`in` operator and functions "
":func:`~operator.contains`, :func:`~operator.indexOf` and "
":func:`~operator.countOf` of the :mod:`operator` module. (Contributed by "
"Serhiy Storchaka in :issue:`40824`.)"
msgstr ""
"``__iter__`` 메서드 호출 시 예기치 않은 에러가 더는 :keyword:`in` 연산자와 :mod:`operator` "
"모듈의 :func:`~operator.contains`, :func:`~operator.indexOf` 및 "
":func:`~operator.countOf` 함수에서 ``TypeError``\\에 의해 마스킹 되지 않습니다. "
"(Contributed by Serhiy Storchaka in :issue:`40824`.)"

#: ../../whatsnew/3.9.rst:267
msgid ""
"Unparenthesized lambda expressions can no longer be the expression part "
"in an ``if`` clause in comprehensions and generator expressions. See "
":issue:`41848` and :issue:`43755` for details."
msgstr ""

#: ../../whatsnew/3.9.rst:273
msgid "New Modules"
msgstr "새 모듈"

#: ../../whatsnew/3.9.rst:276
msgid "zoneinfo"
msgstr "zoneinfo"

#: ../../whatsnew/3.9.rst:278
msgid ""
"The :mod:`zoneinfo` module brings support for the IANA time zone database"
" to the standard library. It adds :class:`zoneinfo.ZoneInfo`, a concrete "
":class:`datetime.tzinfo` implementation backed by the system's time zone "
"data."
msgstr ""
":mod:`zoneinfo` 모듈은 IANA 시간대 데이터베이스 지원을 표준 라이브러리에 도입합니다. 시스템의 시간대 데이터로 "
"뒷받침되는 구상 :class:`datetime.tzinfo` 구현인 :class:`zoneinfo.ZoneInfo`\\를 "
"추가합니다."

#: ../../whatsnew/3.9.rst:284
msgid ""
">>> from zoneinfo import ZoneInfo\n"
">>> from datetime import datetime, timedelta\n"
"\n"
">>> # Daylight saving time\n"
">>> dt = datetime(2020, 10, 31, 12, "
"tzinfo=ZoneInfo(\"America/Los_Angeles\"))\n"
">>> print(dt)\n"
"2020-10-31 12:00:00-07:00\n"
">>> dt.tzname()\n"
"'PDT'\n"
"\n"
">>> # Standard time\n"
">>> dt += timedelta(days=7)\n"
">>> print(dt)\n"
"2020-11-07 12:00:00-08:00\n"
">>> print(dt.tzname())\n"
"PST"
msgstr ""

#: ../../whatsnew/3.9.rst:302
#, fuzzy
msgid ""
"As a fall-back source of data for platforms that don't ship the IANA "
"database, the :pypi:`tzdata` module was released as a first-party package"
" -- distributed via PyPI and maintained by the CPython core team."
msgstr ""
"IANA 데이터베이스를 제공하지 않는 플랫폼의 대체 데이터 소스로, |tzdata|_ 모듈이 자사(first-party) 패키지로 "
"출시되었습니다 -- PyPI를 통해 배포되고 CPython 핵심 팀에서 유지 관리합니다."

#: ../../whatsnew/3.9.rst:308
msgid ""
":pep:`615` -- Support for the IANA Time Zone Database in the Standard "
"Library"
msgstr ":pep:`615` -- 표준 라이브러리의 IANA 시간대 데이터베이스에 대한 지원"

#: ../../whatsnew/3.9.rst:309
msgid "PEP written and implemented by Paul Ganssle"
msgstr "Paul Ganssle이 작성하고 구현한 PEP"

#: ../../whatsnew/3.9.rst:313
msgid "graphlib"
msgstr "graphlib"

#: ../../whatsnew/3.9.rst:315
msgid ""
"A new module, :mod:`graphlib`, was added that contains the "
":class:`graphlib.TopologicalSorter` class to offer functionality to "
"perform topological sorting of graphs. (Contributed by Pablo Galindo, Tim"
" Peters and Larry Hastings in :issue:`17005`.)"
msgstr ""
":class:`graphlib.TopologicalSorter` 클래스를 포함하는 :mod:`graphlib`\\를 추가하여 "
"그래프의 위상 정렬을 수행하는 기능을 제공합니다. (Contributed by Pablo Galindo, Tim Peters and"
" Larry Hastings in :issue:`17005`.)"

#: ../../whatsnew/3.9.rst:322
msgid "Improved Modules"
msgstr "개선된 모듈"

#: ../../whatsnew/3.9.rst:325
msgid "ast"
msgstr "ast"

#: ../../whatsnew/3.9.rst:327
msgid ""
"Added the *indent* option to :func:`~ast.dump` which allows it to produce"
" a multiline indented output. (Contributed by Serhiy Storchaka in "
":issue:`37995`.)"
msgstr ""
"*indent* 옵션을 :func:`~ast.dump`\\에 추가하여 여러 줄 들여쓰기 된 출력을 생성할 수 있습니다. "
"(Contributed by Serhiy Storchaka in :issue:`37995`.)"

#: ../../whatsnew/3.9.rst:331
msgid ""
"Added :func:`ast.unparse` as a function in the :mod:`ast` module that can"
" be used to unparse an :class:`ast.AST` object and produce a string with "
"code that would produce an equivalent :class:`ast.AST` object when "
"parsed. (Contributed by Pablo Galindo and Batuhan Taskaya in "
":issue:`38870`.)"
msgstr ""
":class:`ast.AST` 객체를 역 구문 분석하고, 구문 분석할 때 동등한 :class:`ast.AST` 객체를 생성하는 "
"코드가 담긴 문자열을 생성하는 데 사용할 수 있는 :func:`ast.unparse`\\를 :mod:`ast` 모듈의 함수로 "
"추가했습니다. (Contributed by Pablo Galindo and Batuhan Taskaya in "
":issue:`38870`.)"

#: ../../whatsnew/3.9.rst:336
msgid ""
"Added docstrings to AST nodes that contains the ASDL signature used to "
"construct that node. (Contributed by Batuhan Taskaya in :issue:`39638`.)"
msgstr ""
"AST 노드를 생성하는 데 사용된 ASDL 서명이 포함된 독스트링을 AST 노드에 추가했습니다. (Contributed by "
"Batuhan Taskaya in :issue:`39638`.)"

#: ../../whatsnew/3.9.rst:340
msgid "asyncio"
msgstr "asyncio"

#: ../../whatsnew/3.9.rst:342
msgid ""
"Due to significant security concerns, the *reuse_address* parameter of "
":meth:`asyncio.loop.create_datagram_endpoint` is no longer supported. "
"This is because of the behavior of the socket option ``SO_REUSEADDR`` in "
"UDP. For more details, see the documentation for "
"``loop.create_datagram_endpoint()``. (Contributed by Kyle Stanley, "
"Antoine Pitrou, and Yury Selivanov in :issue:`37228`.)"
msgstr ""
"심각한 보안 문제로 인해, :meth:`asyncio.loop.create_datagram_endpoint`\\의 "
"*reuse_address* 매개 변수는 더는 지원되지 않습니다. 이것은 UDP에서 소켓 옵션 ``SO_REUSEADDR``\\의 "
"동작 때문입니다. 자세한 내용은 ``loop.create_datagram_endpoint()`` 설명서를 참조하십시오. "
"(Contributed by Kyle Stanley, Antoine Pitrou, and Yury Selivanov in "
":issue:`37228`.)"

#: ../../whatsnew/3.9.rst:349
msgid ""
"Added a new :term:`coroutine` "
":meth:`~asyncio.loop.shutdown_default_executor` that schedules a shutdown"
" for the default executor that waits on the "
":class:`~concurrent.futures.ThreadPoolExecutor` to finish closing. Also, "
":func:`asyncio.run` has been updated to use the new :term:`coroutine`. "
"(Contributed by Kyle Stanley in :issue:`34037`.)"
msgstr ""
":class:`~concurrent.futures.ThreadPoolExecutor`\\가 닫기를 끝내기를 기다리는 기본 실행기의 "
"종료(shutdown)를 예약하는 새 :term:`코루틴 <coroutine>` "
":meth:`~asyncio.loop.shutdown_default_executor`\\가 추가되었습니다. 또한, "
":func:`asyncio.run`\\은 새로운 :term:`코루틴 <coroutine>`\\을 사용하도록 갱신되었습니다. "
"(Contributed by Kyle Stanley in :issue:`34037`.)"

#: ../../whatsnew/3.9.rst:355
msgid ""
"Added :class:`asyncio.PidfdChildWatcher`, a Linux-specific child watcher "
"implementation that polls process file descriptors. (:issue:`38692`)"
msgstr ""
"프로세스 파일 기술자를 폴링 하는 리눅스 특정 자식 감시자 구현인, "
":class:`asyncio.PidfdChildWatcher`\\를 추가했습니다. (:issue:`38692`)"

#: ../../whatsnew/3.9.rst:358
msgid ""
"Added a new :term:`coroutine` :func:`asyncio.to_thread`. It is mainly "
"used for running IO-bound functions in a separate thread to avoid "
"blocking the event loop, and essentially works as a high-level version of"
" :meth:`~asyncio.loop.run_in_executor` that can directly take keyword "
"arguments. (Contributed by Kyle Stanley and Yury Selivanov in "
":issue:`32309`.)"
msgstr ""
"새로운 :term:`코루틴 <coroutine>` :func:`asyncio.to_thread`\\를 추가했습니다. 주로 이벤트 "
"루프 블록을 피하고자 별도의 스레드에서 IO 병목 함수를 실행하는 데 사용되며, 기본적으로 키워드 인자를 직접 취할 수 있는 "
":meth:`~asyncio.loop.run_in_executor`\\의 고수준 버전으로 작동합니다. (Contributed by "
"Kyle Stanley and Yury Selivanov in :issue:`32309`.)"

#: ../../whatsnew/3.9.rst:364
msgid ""
"When cancelling the task due to a timeout, :meth:`asyncio.wait_for` will "
"now wait until the cancellation is complete also in the case when "
"*timeout* is <= 0, like it does with positive timeouts. (Contributed by "
"Elvis Pranskevichus in :issue:`32751`.)"
msgstr ""
"시간 초과로 인해 태스크를 취소할 때, :meth:`asyncio.wait_for`\\는 이제 양의 timeout과 마찬가지로 "
"*timeout*\\이 <= 0 인 경우에도 취소가 완료될 때까지 기다립니다. (Contributed by Elvis "
"Pranskevichus in :issue:`32751`.)"

#: ../../whatsnew/3.9.rst:369
#, fuzzy
msgid ""
":mod:`asyncio` now raises :exc:`TypeError` when calling incompatible "
"methods with an :class:`ssl.SSLSocket` socket. (Contributed by Ido "
"Michael in :issue:`37404`.)"
msgstr ""
":mod:`asyncio`\\는 이제 :class:`ssl.SSLSocket` 소켓과 호환되지 않는 메서드를 호출할 때 "
":exc:`TyperError`\\를 발생시킵니다. (Contributed by Ido Michael in "
":issue:`37404`.)"

#: ../../whatsnew/3.9.rst:374
msgid "compileall"
msgstr "compileall"

#: ../../whatsnew/3.9.rst:376
msgid ""
"Added new possibility to use hardlinks for duplicated ``.pyc`` files: "
"*hardlink_dupes* parameter and --hardlink-dupes command line option. "
"(Contributed by  Lumír 'Frenzy' Balhar in :issue:`40495`.)"
msgstr ""
"복제된 ``.pyc`` 파일에 대해 하드 링크를 사용하는 새로운 가능성이 추가되었습니다: *hardlink_dupes* 매개 변수와"
" --hardlink-dupes 명령 줄 옵션. (Contributed by  Lumír 'Frenzy' Balhar in "
":issue:`40495`.)"

#: ../../whatsnew/3.9.rst:379
msgid ""
"Added new options for path manipulation in resulting ``.pyc`` files: "
"*stripdir*, *prependdir*, *limit_sl_dest* parameters and -s, -p, -e "
"command line options. Added the possibility to specify the option for an "
"optimization level multiple times. (Contributed by Lumír 'Frenzy' Balhar "
"in :issue:`38112`.)"
msgstr ""
"결과 ``.pyc`` 파일에서 경로 조작을 위한 새로운 옵션을 추가했습니다: *stripdir*, *prependdir*, "
"*limit_sl_dest* 매개 변수와 -s, -p, -e 명령 줄 옵션. 최적화 수준에 대한 옵션을 여러 번 지정할 수 있는 "
"가능성이 추가되었습니다. (Contributed by Lumír 'Frenzy' Balhar in :issue:`38112`.)"

#: ../../whatsnew/3.9.rst:384
msgid "concurrent.futures"
msgstr "concurrent.futures"

#: ../../whatsnew/3.9.rst:386
msgid ""
"Added a new *cancel_futures* parameter to "
":meth:`concurrent.futures.Executor.shutdown` that cancels all pending "
"futures which have not started running, instead of waiting for them to "
"complete before shutting down the executor. (Contributed by Kyle Stanley "
"in :issue:`39349`.)"
msgstr ""
"실행기를 종료하기 전에 완료되기를 기다리는 대신, 실행을 시작하지 않은 모든 계류 중인 퓨처를 취소하는 새 "
"*cancel_futures* 매개 변수를 :meth:`concurrent.futures.Executor.shutdown`\\에 "
"추가했습니다. (Contributed by Kyle Stanley in :issue:`39349`.)"

#: ../../whatsnew/3.9.rst:392
msgid ""
"Removed daemon threads from "
":class:`~concurrent.futures.ThreadPoolExecutor` and "
":class:`~concurrent.futures.ProcessPoolExecutor`. This improves "
"compatibility with subinterpreters and predictability in their shutdown "
"processes. (Contributed by Kyle Stanley in :issue:`39812`.)"
msgstr ""
":class:`~concurrent.futures.ThreadPoolExecutor`\\와 "
":class:`~concurrent.futures.ProcessPoolExecutor` 에서 데몬 스레드를 제거했습니다. 이를 통해"
" 종료 절차에서 서브 인터프리터와의 호환성과 예측성이 향상됩니다. (Contributed by Kyle Stanley in "
":issue:`39812`.)"

#: ../../whatsnew/3.9.rst:397
msgid ""
"Workers in :class:`~concurrent.futures.ProcessPoolExecutor` are now "
"spawned on demand, only when there are no available idle workers to "
"reuse. This optimizes startup overhead and reduces the amount of lost CPU"
" time to idle workers. (Contributed by Kyle Stanley in :issue:`39207`.)"
msgstr ""
"재사용 가능한 유휴 작업자가 없을 때만, :class:`~concurrent.futures.ProcessPoolExecutor` 의"
" 작업자가 요청 시 스폰 됩니다. 이는 시작 오버헤드를 최적화하고 유휴 작업자에게 손실되는 CPU 시간을 줄입니다. "
"(Contributed by Kyle Stanley in :issue:`39207`.)"

#: ../../whatsnew/3.9.rst:403
msgid "curses"
msgstr "curses"

#: ../../whatsnew/3.9.rst:405
msgid ""
"Added :func:`curses.get_escdelay`, :func:`curses.set_escdelay`, "
":func:`curses.get_tabsize`, and :func:`curses.set_tabsize` functions. "
"(Contributed by Anthony Sottile in :issue:`38312`.)"
msgstr ""
":func:`curses.get_escdelay`, :func:`curses.set_escdelay`, "
":func:`curses.get_tabsize` 및 :func:`curses.set_tabsize` 함수를 추가했습니다. "
"(Contributed by Anthony Sottile in :issue:`38312`.)"

#: ../../whatsnew/3.9.rst:410
msgid "datetime"
msgstr "datetime"

#: ../../whatsnew/3.9.rst:411
#, fuzzy
msgid ""
"The :meth:`~datetime.date.isocalendar` of :class:`datetime.date` and "
":meth:`~datetime.datetime.isocalendar` of :class:`datetime.datetime` "
"methods now returns a :func:`~collections.namedtuple` instead of a "
":class:`tuple`. (Contributed by Donghee Na in :issue:`24416`.)"
msgstr ""
":class:`datetime.date`\\의 :meth:`~datetime.date.isocalendar()`\\와 "
":class:`datetime.datetime`\\의 :meth:`~datetime.datetime.isocalendar()` "
"메서드는 이제 :class:`tuple` 대신 :func:`~collections.namedtuple`\\을 반환합니다. "
"(Contributed by Dong-hee Na in :issue:`24416`.)"

#: ../../whatsnew/3.9.rst:417
msgid "distutils"
msgstr "distutils"

#: ../../whatsnew/3.9.rst:419
msgid ""
"The :command:`upload` command now creates SHA2-256 and Blake2b-256 hash "
"digests. It skips MD5 on platforms that block MD5 digest. (Contributed by"
" Christian Heimes in :issue:`40698`.)"
msgstr ""
":command:`upload` 명령은 이제 SHA2-256 및 Blake2b-256 해시 다이제스트를 만듭니다. MD5 "
"다이제스트를 차단하는 플랫폼에서는 MD5를 건너뜁니다. (Contributed by Christian Heimes in "
":issue:`40698`.)"

#: ../../whatsnew/3.9.rst:424
msgid "fcntl"
msgstr "fcntl"

#: ../../whatsnew/3.9.rst:426
#, fuzzy
msgid ""
"Added constants :const:`~fcntl.F_OFD_GETLK`, :const:`~fcntl.F_OFD_SETLK` "
"and :const:`~fcntl.F_OFD_SETLKW`. (Contributed by Donghee Na in "
":issue:`38602`.)"
msgstr ""
"상수 :data:`~fcntl.F_OFD_GETLK`, :data:`~fcntl.F_OFD_SETLK` 및 "
":data:`~fcntl.F_OFD_SETLKW`\\를 추가했습니다. (Contributed by Dong-hee Na in "
":issue:`38602`.)"

#: ../../whatsnew/3.9.rst:431
msgid "ftplib"
msgstr "ftplib"

#: ../../whatsnew/3.9.rst:433
#, fuzzy
msgid ""
":class:`~ftplib.FTP` and :class:`~ftplib.FTP_TLS` now raise a "
":class:`ValueError` if the given timeout for their constructor is zero to"
" prevent the creation of a non-blocking socket. (Contributed by Donghee "
"Na in :issue:`39259`.)"
msgstr ""
"비 블로킹 소켓의 생성을 막기 위해 생성자에 대해 주어진 시간제한이 0이면 :class:`~ftplib.FTP`\\와 "
":class:`~ftplib.FTP_TLS`\\는 이제 :class:`ValueError`\\를 발생시킵니다. "
"(Contributed by Dong-hee Na in :issue:`39259`.)"

#: ../../whatsnew/3.9.rst:438
msgid "gc"
msgstr "gc"

#: ../../whatsnew/3.9.rst:440
msgid ""
"When the garbage collector makes a collection in which some objects "
"resurrect (they are reachable from outside the isolated cycles after the "
"finalizers have been executed), do not block the collection of all "
"objects that are still unreachable. (Contributed by Pablo Galindo and Tim"
" Peters in :issue:`38379`.)"
msgstr ""
"가비지 수거기가 일부 객체를 되살리는 컬렉션을 만들 때 (파이널라이저가 실행된 후 격리된 순환 외부에서 도달할 수 있습니다), "
"여전히 도달할 수 없는 모든 객체의 컬렉션을 차단하지 않습니다. (Contributed by Pablo Galindo and Tim"
" Peters in :issue:`38379`.)"

#: ../../whatsnew/3.9.rst:445
msgid ""
"Added a new function :func:`gc.is_finalized` to check if an object has "
"been finalized by the garbage collector. (Contributed by Pablo Galindo in"
" :issue:`39322`.)"
msgstr ""
"가비지 수거기에서 객체가 파이널라이즈 되었는지 확인하는 새 함수 :func:`gc.is_finalized`\\를 추가했습니다. "
"(Contributed by Pablo Galindo in :issue:`39322`.)"

#: ../../whatsnew/3.9.rst:450
msgid "hashlib"
msgstr "hashlib"

#: ../../whatsnew/3.9.rst:452
msgid ""
"The :mod:`hashlib` module can now use SHA3 hashes and SHAKE XOF from "
"OpenSSL when available. (Contributed by Christian Heimes in "
":issue:`37630`.)"
msgstr ""
":mod:`hashlib` 모듈은 이제 사용할 수 있으면 OpenSSL의 SHA3 해시와 SHAKE XOF를 사용할 수 있습니다. "
"(Contributed by Christian Heimes in :issue:`37630`.)"

#: ../../whatsnew/3.9.rst:456
msgid ""
"Builtin hash modules can now be disabled with ``./configure --without-"
"builtin-hashlib-hashes`` or selectively enabled with e.g. ``./configure "
"--with-builtin-hashlib-hashes=sha3,blake2`` to force use of OpenSSL based"
" implementation. (Contributed by Christian Heimes in :issue:`40479`)"
msgstr ""
"내장 해시 모듈은 이제 ``./configure --without-builtin-hashlib-hashes``\\로 비활성화하거나 "
"``./configure --with-builtin-hashlib-hashes=sha3,blake2``\\로 선택적으로 활성화하여 "
"OpenSSL 기반 구현의 사용을 강제할 수 있습니다. (Contributed by Christian Heimes in "
":issue:`40479`)"

#: ../../whatsnew/3.9.rst:464
msgid "http"
msgstr "http"

#: ../../whatsnew/3.9.rst:466
#, fuzzy
msgid ""
"HTTP status codes ``103 EARLY_HINTS``, ``418 IM_A_TEAPOT`` and ``425 "
"TOO_EARLY`` are added to :class:`http.HTTPStatus`. (Contributed by "
"Donghee Na in :issue:`39509` and Ross Rhodes in :issue:`39507`.)"
msgstr ""
"HTTP 상태 코드 ``103 EARLY_HINTS``, ``418 IM_A_TEAPOT`` 및 ``425 "
"TOO_EARLY``\\가 :class:`http.HTTPStatus`\\에 추가되었습니다. (Contributed by Dong-"
"hee Na in :issue:`39509` and Ross Rhodes in :issue:`39507`.)"

#: ../../whatsnew/3.9.rst:470
msgid "IDLE and idlelib"
msgstr "IDLE과 idlelib"

#: ../../whatsnew/3.9.rst:472
msgid ""
"Added option to toggle cursor blink off.  (Contributed by Zackery Spytz "
"in :issue:`4603`.)"
msgstr "커서 깜박임을 토글하는 옵션이 추가되었습니다. (Contributed by Zackery Spytz in :issue:`4603`.)"

#: ../../whatsnew/3.9.rst:475
msgid ""
"Escape key now closes IDLE completion windows.  (Contributed by Johnny "
"Najera in :issue:`38944`.)"
msgstr ""
"이스케이프 키는 이제 IDLE 완료 창을 닫습니다. (Contributed by Johnny Najera in "
":issue:`38944`.)"

#: ../../whatsnew/3.9.rst:478
msgid ""
"Added keywords to module name completion list.  (Contributed by Terry J. "
"Reedy in :issue:`37765`.)"
msgstr ""
"모듈 이름 완성 리스트에 키워드를 추가했습니다. (Contributed by Terry J. Reedy in "
":issue:`37765`.)"

#: ../../whatsnew/3.9.rst:481
msgid "New in 3.9 maintenance releases"
msgstr ""

#: ../../whatsnew/3.9.rst:483
msgid ""
"Make IDLE invoke :func:`sys.excepthook` (when started without '-n'). User"
" hooks were previously ignored.  (Contributed by Ken Hilton in "
":issue:`43008`.)"
msgstr ""

#: ../../whatsnew/3.9.rst:487
msgid "The changes above have been backported to 3.8 maintenance releases."
msgstr "위의 변경 사항은 3.8 유지 보수 릴리스로 역 이식되었습니다."

#: ../../whatsnew/3.9.rst:489
msgid ""
"Rearrange the settings dialog.  Split the General tab into Windows and "
"Shell/Ed tabs.  Move help sources, which extend the Help menu, to the "
"Extensions tab.  Make space for new options and shorten the dialog. The "
"latter makes the dialog better fit small screens.  (Contributed by Terry "
"Jan Reedy in :issue:`40468`.)  Move the indent space setting from the "
"Font tab to the new Windows tab.  (Contributed by Mark Roseman and Terry "
"Jan Reedy in :issue:`33962`.)"
msgstr ""

#: ../../whatsnew/3.9.rst:497
msgid ""
"Apply syntax highlighting to ``.pyi`` files. (Contributed by Alex Waygood"
" and Terry Jan Reedy in :issue:`45447`.)"
msgstr ""

#: ../../whatsnew/3.9.rst:501
msgid "imaplib"
msgstr "imaplib"

#: ../../whatsnew/3.9.rst:503
#, fuzzy
msgid ""
":class:`~imaplib.IMAP4` and :class:`~imaplib.IMAP4_SSL` now have an "
"optional *timeout* parameter for their constructors. Also, the "
":meth:`~imaplib.IMAP4.open` method now has an optional *timeout* "
"parameter with this change. The overridden methods of "
":class:`~imaplib.IMAP4_SSL` and :class:`~imaplib.IMAP4_stream` were "
"applied to this change. (Contributed by Donghee Na in :issue:`38615`.)"
msgstr ""
":class:`~imaplib.IMAP4`\\와 :class:`~imaplib.IMAP4_SSL`\\에는 이제 생성자에 선택적 "
"*timeout* 매개 변수가 있습니다. 또한 :meth:`~imaplib.IMAP4.open` 메서드에는 이제 이 변경으로 인해 "
"선택적 *timeout* 매개 변수가 있습니다. 재정의된 :class:`~imaplib.IMAP4_SSL`\\과 "
":class:`~imaplib.IMAP4_stream` 메서드에 이 변경이 적용되었습니다. (Contributed by Dong-"
"hee Na in :issue:`38615`.)"

#: ../../whatsnew/3.9.rst:510
#, fuzzy
msgid ""
":meth:`imaplib.IMAP4.unselect` is added. :meth:`imaplib.IMAP4.unselect` "
"frees server's resources associated with the selected mailbox and returns"
" the server to the authenticated state. This command performs the same "
"actions as :meth:`imaplib.IMAP4.close`, except that no messages are "
"permanently removed from the currently selected mailbox. (Contributed by "
"Donghee Na in :issue:`40375`.)"
msgstr ""
":meth:`imaplib.IMAP4.unselect`\\가 추가되었습니다. "
":meth:`imaplib.IMAP4.unselect`\\는 선택한 사서함과 관련된 서버 자원을 해제하고 서버를 인증된 상태로 "
"되돌립니다. 이 명령은 현재 선택된 사서함에서 메시지가 영구적으로 제거되지 않는다는 점을 제외하고 "
":meth:`imaplib.IMAP4.close`\\와 같은 작업을 수행합니다. (Contributed by Dong-hee Na "
"in :issue:`40375`.)"

#: ../../whatsnew/3.9.rst:518
msgid "importlib"
msgstr "importlib"

#: ../../whatsnew/3.9.rst:520
msgid ""
"To improve consistency with import statements, "
":func:`importlib.util.resolve_name` now raises :exc:`ImportError` instead"
" of :exc:`ValueError` for invalid relative import attempts. (Contributed "
"by Ngalim Siregar in :issue:`37444`.)"
msgstr ""
"import 문과의 일관성을 개선하기 위해, :func:`importlib.util.resolve_name`\\은 이제 잘못된 상대"
" 임포트 시도에 대해 :exc:`ValueError` 대신 :exc:`ImportError`\\를 발생시킵니다. "
"(Contributed by Ngalim Siregar in :issue:`37444`.)"

#: ../../whatsnew/3.9.rst:525
msgid ""
"Import loaders which publish immutable module objects can now publish "
"immutable packages in addition to individual modules. (Contributed by "
"Dino Viehland in :issue:`39336`.)"
msgstr ""
"불변 모듈 객체를 게시하는 임포트 로더는 이제 개별 모듈 외에도 불변 패키지를 게시할 수 있습니다. (Contributed by "
"Dino Viehland in :issue:`39336`.)"

#: ../../whatsnew/3.9.rst:529
msgid ""
"Added :func:`importlib.resources.files` function with support for "
"subdirectories in package data, matching backport in "
"``importlib_resources`` version 1.5. (Contributed by Jason R. Coombs in "
":issue:`39791`.)"
msgstr ""
"``importlib_resources`` 버전 1.5의 역 이식과 일치하는 패키지 데이터의 하위 디렉터리를 지원하는 "
":func:`importlib.resources.files` 함수가 추가되었습니다. (Contributed by Jason R. "
"Coombs in :issue:`39791`.)"

#: ../../whatsnew/3.9.rst:534
msgid ""
"Refreshed ``importlib.metadata`` from ``importlib_metadata`` version "
"1.6.1."
msgstr "``importlib_metadata`` 버전 1.6.1로부터 ``importlib.metadata``\\를 새로 고쳤습니다."

#: ../../whatsnew/3.9.rst:537
msgid "inspect"
msgstr "inspect"

#: ../../whatsnew/3.9.rst:539
msgid ""
":attr:`inspect.BoundArguments.arguments` is changed from ``OrderedDict`` "
"to regular dict.  (Contributed by Inada Naoki in :issue:`36350` and "
":issue:`39775`.)"
msgstr ""
":attr:`inspect.BoundArguments.arguments`\\가 ``OrderedDict``\\에서 일반 dict로 "
"변경되었습니다. (Contributed by Inada Naoki in :issue:`36350` and "
":issue:`39775`.)"

#: ../../whatsnew/3.9.rst:543
msgid "ipaddress"
msgstr "ipaddress"

#: ../../whatsnew/3.9.rst:545
msgid ""
":mod:`ipaddress` now supports IPv6 Scoped Addresses (IPv6 address with "
"suffix ``%<scope_id>``)."
msgstr ""
":mod:`ipaddress`\\는 이제 IPv6 스코프 된 주소(접미사 ``%<scope_id>`` 가 있는 IPv6 주소)를 "
"지원합니다."

#: ../../whatsnew/3.9.rst:547
msgid ""
"Scoped IPv6 addresses can be parsed using :class:`ipaddress.IPv6Address`."
" If present, scope zone ID is available through the "
":attr:`~ipaddress.IPv6Address.scope_id` attribute. (Contributed by "
"Oleksandr Pavliuk in :issue:`34788`.)"
msgstr ""
"스코프 된 IPv6 주소는 :class:`ipaddress.IPv6Address`\\를 사용하여 구문 분석할 수 있습니다. "
"존재하면, :attr:`~ipaddress.IPv6Address.scope_id` 어트리뷰트를 통해 스코프 존 ID를 사용할 수 "
"있습니다. (Contributed by Oleksandr Pavliuk in :issue:`34788`.)"

#: ../../whatsnew/3.9.rst:551
msgid ""
"Starting with Python 3.9.5 the :mod:`ipaddress` module no longer accepts "
"any leading zeros in IPv4 address strings. (Contributed by Christian "
"Heimes in :issue:`36384`)."
msgstr ""

#: ../../whatsnew/3.9.rst:556
msgid "math"
msgstr "math"

#: ../../whatsnew/3.9.rst:558
msgid ""
"Expanded the :func:`math.gcd` function to handle multiple arguments. "
"Formerly, it only supported two arguments. (Contributed by Serhiy "
"Storchaka in :issue:`39648`.)"
msgstr ""
"여러 인자를 처리하도록 :func:`math.gcd` 함수를 확장했습니다. 이전에는 두 개의 인자만 지원했습니다. "
"(Contributed by Serhiy Storchaka in :issue:`39648`.)"

#: ../../whatsnew/3.9.rst:562
msgid ""
"Added :func:`math.lcm`: return the least common multiple of specified "
"arguments. (Contributed by Mark Dickinson, Ananthakrishnan and Serhiy "
"Storchaka in :issue:`39479` and :issue:`39648`.)"
msgstr ""
":func:`math.lcm`\\을 추가했습니다: 지정된 인자의 최소 공배수를 반환합니다. (Contributed by Mark "
"Dickinson, Ananthakrishnan and Serhiy Storchaka in :issue:`39479` and "
":issue:`39648`.)"

#: ../../whatsnew/3.9.rst:566
msgid ""
"Added :func:`math.nextafter`: return the next floating-point value after "
"*x* towards *y*. (Contributed by Victor Stinner in :issue:`39288`.)"
msgstr ""
":func:`math.nextafter`\\를 추가했습니다: *y*\\를 향해 *x* 뒤의 다음 부동 소수점 값을 반환합니다. "
"(Contributed by Victor Stinner in :issue:`39288`.)"

#: ../../whatsnew/3.9.rst:570
msgid ""
"Added :func:`math.ulp`: return the value of the least significant bit of "
"a float. (Contributed by Victor Stinner in :issue:`39310`.)"
msgstr ""
":func:`math.ulp`\\를 추가했습니다: 부동 소수점의 최하위 비트 값을 반환합니다. (Contributed by "
"Victor Stinner in :issue:`39310`.)"

#: ../../whatsnew/3.9.rst:575
msgid "multiprocessing"
msgstr "multiprocessing"

#: ../../whatsnew/3.9.rst:577
msgid ""
"The :class:`multiprocessing.SimpleQueue` class has a new "
":meth:`~multiprocessing.SimpleQueue.close` method to explicitly close the"
" queue. (Contributed by Victor Stinner in :issue:`30966`.)"
msgstr ""
":class:`multiprocessing.SimpleQueue` 클래스에는 큐를 명시적으로 닫는 새로운 "
":meth:`~multiprocessing.SimpleQueue.close` 메서드가 있습니다. (Contributed by "
"Victor Stinner in :issue:`30966`.)"

#: ../../whatsnew/3.9.rst:583
msgid "nntplib"
msgstr "nntplib"

#: ../../whatsnew/3.9.rst:585
#, fuzzy
msgid ""
":class:`!NNTP` and :class:`!NNTP_SSL` now raise a :class:`ValueError` if "
"the given timeout for their constructor is zero to prevent the creation "
"of a non-blocking socket. (Contributed by Donghee Na in :issue:`39259`.)"
msgstr ""
"생성자에 대해 주어진 시간제한이 0이면 비 블로킹 소켓을 만드는 것을 막기 위해 :class:`~nntplib.NNTP`\\와 "
":class:`~nntplib.NNTP_SSL`\\은 이제 :class:`ValueError`\\를 발생시킵니다. "
"(Contributed by Dong-hee Na in :issue:`39259`.)"

#: ../../whatsnew/3.9.rst:590
msgid "os"
msgstr "os"

#: ../../whatsnew/3.9.rst:592
#, fuzzy
msgid ""
"Added :const:`~os.CLD_KILLED` and :const:`~os.CLD_STOPPED` for "
":attr:`!si_code`. (Contributed by Donghee Na in :issue:`38493`.)"
msgstr ""
":attr:`si_code`\\에 :data:`~os.CLD_KILLED`\\와 :data:`~os.CLD_STOPPED`\\를 "
"추가했습니다. (Contributed by Dong-hee Na in :issue:`38493`.)"

#: ../../whatsnew/3.9.rst:595
#, fuzzy
msgid ""
"Exposed the Linux-specific :func:`os.pidfd_open` (:issue:`38692`) and "
":const:`os.P_PIDFD` (:issue:`38713`) for process management with file "
"descriptors."
msgstr ""
"파일 기술자를 사용한 프로세스 관리를 위해 리눅스 특정 :func:`os.pidfd_open`\\(:issue:`38692`)과 "
":data:`os.P_PIDFD`\\(:issue:`38713`)를 노출했습니다."

#: ../../whatsnew/3.9.rst:599
msgid ""
"The :func:`os.unsetenv` function is now also available on Windows. "
"(Contributed by Victor Stinner in :issue:`39413`.)"
msgstr ""
":func:`os.unsetenv` 함수는 이제 윈도우에서도 사용할 수 있습니다. (Contributed by Victor "
"Stinner in :issue:`39413`.)"

#: ../../whatsnew/3.9.rst:602
msgid ""
"The :func:`os.putenv` and :func:`os.unsetenv` functions are now always "
"available. (Contributed by Victor Stinner in :issue:`39395`.)"
msgstr ""
":func:`os.putenv`\\와 :func:`os.unsetenv` 함수를 이제 항상 사용할 수 있습니다. "
"(Contributed by Victor Stinner in :issue:`39395`.)"

#: ../../whatsnew/3.9.rst:606
msgid ""
"Added :func:`os.waitstatus_to_exitcode` function: convert a wait status "
"to an exit code. (Contributed by Victor Stinner in :issue:`40094`.)"
msgstr ""
":func:`os.waitstatus_to_exitcode` 함수를 추가했습니다: 대기 상태를 종료 코드로 변환합니다. "
"(Contributed by Victor Stinner in :issue:`40094`.)"

#: ../../whatsnew/3.9.rst:611
msgid "pathlib"
msgstr "pathlib"

#: ../../whatsnew/3.9.rst:613
#, fuzzy
msgid ""
"Added :meth:`pathlib.Path.readlink` which acts similarly to "
":func:`os.readlink`. (Contributed by Girts Folkmanis in :issue:`30618`)"
msgstr ""
":func:`os.readlink`\\와 유사하게 작동하는 :meth:`pathlib.Path.readlink()`\\를 "
"추가했습니다. (Contributed by Girts Folkmanis in :issue:`30618`)"

#: ../../whatsnew/3.9.rst:618
msgid "pdb"
msgstr "pdb"

#: ../../whatsnew/3.9.rst:620
msgid ""
"On Windows now :class:`~pdb.Pdb` supports ``~/.pdbrc``. (Contributed by "
"Tim Hopper and Dan Lidral-Porter in :issue:`20523`.)"
msgstr ""
"이제 윈도우에서 :class:`~pdb.Pdb`\\는 ``~/.pdbrc``\\를 지원합니다. (Contributed by Tim "
"Hopper and Dan Lidral-Porter in :issue:`20523`.)"

#: ../../whatsnew/3.9.rst:624
msgid "poplib"
msgstr "poplib"

#: ../../whatsnew/3.9.rst:626
#, fuzzy
msgid ""
":class:`~poplib.POP3` and :class:`~poplib.POP3_SSL` now raise a "
":class:`ValueError` if the given timeout for their constructor is zero to"
" prevent the creation of a non-blocking socket. (Contributed by Donghee "
"Na in :issue:`39259`.)"
msgstr ""
"생성자에 대해 주어진 시간제한이 0이면 비 블로킹 소켓을 만드는 것을 막기 위해 :class:`~poplib.POP3`\\과 "
":class:`~poplib.POP3_SSL`\\은 이제 :class:`ValueError`\\를 발생시킵니다. "
"(Contributed by Dong-hee Na in :issue:`39259`.)"

#: ../../whatsnew/3.9.rst:631
msgid "pprint"
msgstr "pprint"

#: ../../whatsnew/3.9.rst:633
msgid ""
":mod:`pprint` can now pretty-print :class:`types.SimpleNamespace`. "
"(Contributed by Carl Bordum Hansen in :issue:`37376`.)"
msgstr ""
":mod:`pprint`\\는 이제 :class:`types.SimpleNamespace`\\를 예쁘게 인쇄 할 수 있습니다. "
"(Contributed by Carl Bordum Hansen in :issue:`37376`.)"

#: ../../whatsnew/3.9.rst:637
msgid "pydoc"
msgstr "pydoc"

#: ../../whatsnew/3.9.rst:639
#, fuzzy
msgid ""
"The documentation string is now shown not only for class, function, "
"method etc, but for any object that has its own "
":attr:`~definition.__doc__` attribute. (Contributed by Serhiy Storchaka "
"in :issue:`40257`.)"
msgstr ""
"독스트링은 이제 클래스, 함수, 메서드 등뿐만 아니라 자체 ``__doc__`` 어트리뷰트를 가진 모든 객체에 대해 표시됩니다. "
"(Contributed by Serhiy Storchaka in :issue:`40257`.)"

#: ../../whatsnew/3.9.rst:645
msgid "random"
msgstr "random"

#: ../../whatsnew/3.9.rst:647
msgid ""
"Added a new :attr:`random.Random.randbytes` method: generate random "
"bytes. (Contributed by Victor Stinner in :issue:`40286`.)"
msgstr ""
"새로운 :attr:`random.Random.randbytes` 메서드를 추가했습니다: 무작위 바이트열을 생성합니다. "
"(Contributed by Victor Stinner in :issue:`40286`.)"

#: ../../whatsnew/3.9.rst:651
msgid "signal"
msgstr "signal"

#: ../../whatsnew/3.9.rst:653
msgid ""
"Exposed the Linux-specific :func:`signal.pidfd_send_signal` for sending "
"to signals to a process using a file descriptor instead of a pid. "
"(:issue:`38712`)"
msgstr ""
"pid 대신 파일 기술자를 사용하여 프로세스에 시그널을 보내는 리눅스 특정 "
":func:`signal.pidfd_send_signal`\\을 노출했습니다. (:issue:`38712`)"

#: ../../whatsnew/3.9.rst:657
msgid "smtplib"
msgstr "smtplib"

#: ../../whatsnew/3.9.rst:659
#, fuzzy
msgid ""
":class:`~smtplib.SMTP` and :class:`~smtplib.SMTP_SSL` now raise a "
":class:`ValueError` if the given timeout for their constructor is zero to"
" prevent the creation of a non-blocking socket. (Contributed by Donghee "
"Na in :issue:`39259`.)"
msgstr ""
"생성자에 대해 주어진 시간제한이 0이면 비 블로킹 소켓을 만드는 것을 막기 위해 :class:`~smtplib.SMTP`\\와 "
":class:`~smtplib.SMTP_SSL`\\은 이제 :class:`ValueError`\\를 발생시킵니다. "
"(Contributed by Dong-hee Na in :issue:`39259`.)"

#: ../../whatsnew/3.9.rst:663
#, fuzzy
msgid ""
":class:`~smtplib.LMTP` constructor  now has an optional *timeout* "
"parameter. (Contributed by Donghee Na in :issue:`39329`.)"
msgstr ""
":class:`~smtplib.LMTP` 생성자는 이제 선택적 *timeout* 매개 변수를 갖습니다. (Contributed by"
" Dong-hee Na in :issue:`39329`.)"

#: ../../whatsnew/3.9.rst:667
msgid "socket"
msgstr "socket"

#: ../../whatsnew/3.9.rst:669
#, fuzzy
msgid ""
"The :mod:`socket` module now exports the "
":const:`~socket.CAN_RAW_JOIN_FILTERS` constant on Linux 4.1 and greater. "
"(Contributed by Stefan Tatschner and Zackery Spytz in :issue:`25780`.)"
msgstr ""
":mod:`socket` 모듈은 이제 리눅스 4.1 이상에서 :data:`~socket.CAN_RAW_JOIN_FILTERS` "
"상수를 내보냅니다. (Contributed by Stefan Tatschner and Zackery Spytz in "
":issue:`25780`.)"

#: ../../whatsnew/3.9.rst:673
#, fuzzy
msgid ""
"The socket module now supports the :const:`~socket.CAN_J1939` protocol on"
" platforms that support it.  (Contributed by Karl Ding in "
":issue:`40291`.)"
msgstr ""
"socket 모듈은 이제 :data:`~socket.CAN_J1939` 프로토콜을 지원하는 플랫폼에서 이를 지원합니다. "
"(Contributed by Karl Ding in :issue:`40291`.)"

#: ../../whatsnew/3.9.rst:676
#, fuzzy
msgid ""
"The socket module now has the :func:`socket.send_fds` and "
":func:`socket.recv_fds` functions. (Contributed by Joannah Nanjekye, "
"Shinya Okano and Victor Stinner in :issue:`28724`.)"
msgstr ""
"socket 모듈에는 이제 :func:`socket.send_fds`\\와 :func:`socket.recv.fds` 메서드가 "
"있습니다. (Contributed by Joannah Nanjekye, Shinya Okano and Victor Stinner "
"in :issue:`28724`.)"

#: ../../whatsnew/3.9.rst:682
msgid "time"
msgstr "time"

#: ../../whatsnew/3.9.rst:684
#, fuzzy
msgid ""
"On AIX, :func:`~time.thread_time` is now implemented with "
"``thread_cputime()`` which has nanosecond resolution, rather than "
"``clock_gettime(CLOCK_THREAD_CPUTIME_ID)`` which has a resolution of 10 "
"milliseconds. (Contributed by Batuhan Taskaya in :issue:`40192`)"
msgstr ""
"AIX에서, :func:`~time.thread_time`\\은 이제 10ms 해상도의 "
"``clock_gettime(CLOCK_THREAD_CPUTIME_ID)``\\가 아니라 나노초 해상도의 "
"``thread_cputime()``\\으로 구현됩니다. (Contributed by Batuhan Taskaya in "
":issue:`40192`)"

#: ../../whatsnew/3.9.rst:690
msgid "sys"
msgstr "sys"

#: ../../whatsnew/3.9.rst:692
#, fuzzy
msgid ""
"Added a new :data:`sys.platlibdir` attribute: name of the platform-"
"specific library directory. It is used to build the path of standard "
"library and the paths of installed extension modules. It is equal to "
"``\"lib\"`` on most platforms.  On Fedora and SuSE, it is equal to "
"``\"lib64\"`` on 64-bit platforms. (Contributed by Jan Matějek, Matěj "
"Cepl, Charalampos Stratakis and Victor Stinner in :issue:`1294959`.)"
msgstr ""
"새로운 :attr:`sys.platlibdir` 어트리뷰트를 추가했습니다: 플랫폼별 라이브러리 디렉터리의 이름. 표준 라이브러리의 "
"경로와 설치된 확장 모듈의 경로들을 빌드하는 데 사용됩니다. 대부분 플랫폼에서 ``\"lib\"``\\와 같습니다. Fedora와 "
"SuSE에서는, 64비트 플랫폼에서 ``\"lib64\"``\\와 같습니다. (Contributed by Jan Matějek, "
"Matěj Cepl, Charalampos Stratakis and Victor Stinner in "
":issue:`1294959`.)"

#: ../../whatsnew/3.9.rst:698
#, fuzzy
msgid ""
"Previously, :data:`sys.stderr` was block-buffered when non-interactive. "
"Now ``stderr`` defaults to always being line-buffered. (Contributed by "
"Jendrik Seipp in :issue:`13601`.)"
msgstr ""
"이전에는, 비 대화형일 때 :attr:`sys.stderr`\\가 블록 버퍼링 되었습니다. 이제 ``stderr``\\은 기본적으로"
" 항상 줄 버퍼링 됩니다. (Contributed by Jendrik Seipp in :issue:`13601`.)"

#: ../../whatsnew/3.9.rst:703
msgid "tracemalloc"
msgstr "tracemalloc"

#: ../../whatsnew/3.9.rst:705
msgid ""
"Added :func:`tracemalloc.reset_peak` to set the peak size of traced "
"memory blocks to the current size, to measure the peak of specific pieces"
" of code. (Contributed by Huon Wilson in :issue:`40630`.)"
msgstr ""
"특정 코드 조각의 최대 사용량을 측정하기 위해 추적한 메모리 블록의 최대 크기를 현재 크기로 설정하는 "
":func:`tracemalloc.reset_peak`\\가 추가되었습니다. (Contributed by Huon Wilson in"
" :issue:`40630`.)"

#: ../../whatsnew/3.9.rst:710 ../../whatsnew/3.9.rst:1493
msgid "typing"
msgstr "typing"

#: ../../whatsnew/3.9.rst:712
msgid ""
":pep:`593` introduced an :data:`typing.Annotated` type to decorate "
"existing types with context-specific metadata and new ``include_extras`` "
"parameter to :func:`typing.get_type_hints` to access the metadata at "
"runtime. (Contributed by Till Varoquaux and Konstantin Kashin.)"
msgstr ""
":pep:`593`\\은 문맥 별 메타 데이터로 기존 형을 데코레이트 하는 :data:`typing.Annotated` 형과 실행 "
"시간에 메타 데이터에 액세스하기 위해 :func:`typing.get_type_hints`\\에 새로운 "
"``include_extras`` 매개 변수를 도입했습니다. (Contributed by Till Varoquaux and "
"Konstantin Kashin.)"

#: ../../whatsnew/3.9.rst:718
msgid "unicodedata"
msgstr "unicodedata"

#: ../../whatsnew/3.9.rst:720
msgid "The Unicode database has been updated to version 13.0.0. (:issue:`39926`)."
msgstr "유니코드 데이터베이스가 버전 13.0.0으로 갱신되었습니다. (:issue:`39926`)."

#: ../../whatsnew/3.9.rst:723
msgid "venv"
msgstr "venv"

#: ../../whatsnew/3.9.rst:725
msgid ""
"The activation scripts provided by :mod:`venv` now all specify their "
"prompt customization consistently by always using the value specified by "
"``__VENV_PROMPT__``. Previously some scripts unconditionally used "
"``__VENV_PROMPT__``, others only if it happened to be set (which was the "
"default case), and one used ``__VENV_NAME__`` instead. (Contributed by "
"Brett Cannon in :issue:`37663`.)"
msgstr ""
":mod:`venv`\\가 제공하는 활성화 스크립트는 이제 모두 항상 ``__VENV_PROMPT__``\\로 지정된 값을 사용하여"
" 프롬프트 사용자 정의를 일관되게 지정합니다. 이전에는 일부 스크립트는 ``__VENV_PROMPT__``\\를 무조건 사용했으며,"
" 다른 스크립트는 설정되었을 때만 (이것이 기본입니다) ``__VENV_PROMPT__``\\를 사용했으며 어떤 것은 대신 "
"``__VENV_NAME__``\\을 사용했습니다. (Contributed by Brett Cannon in "
":issue:`37663`.)"

#: ../../whatsnew/3.9.rst:733
msgid "xml"
msgstr "xml"

#: ../../whatsnew/3.9.rst:735
msgid ""
"White space characters within attributes are now preserved when "
"serializing :mod:`xml.etree.ElementTree` to XML file. EOLNs are no longer"
" normalized to \"\\n\". This is the result of discussion about how to "
"interpret section 2.11 of XML spec. (Contributed by Mefistotelis in "
":issue:`39011`.)"
msgstr ""
":mod:`xml.etree.ElementTree`\\를 XML 파일로 직렬화할 때 어트리뷰트 내의 공백 문자가 이제 유지됩니다. "
"EOLN은 더는 \"\\n\"으로 정규화되지 않습니다. 이것은 XML 명세의 2.11 섹션을 해석하는 방법에 대한 논의 결과입니다."
" (Contributed by Mefistotelis in :issue:`39011`.)"

#: ../../whatsnew/3.9.rst:743
msgid "Optimizations"
msgstr "최적화"

#: ../../whatsnew/3.9.rst:745
msgid ""
"Optimized the idiom for assignment a temporary variable in "
"comprehensions. Now ``for y in [expr]`` in comprehensions is as fast as a"
" simple assignment ``y = expr``.  For example:"
msgstr ""
"컴프리헨션에서 임시 변수를 대입하는 관용구를 최적화했습니다. 이제 컴프리헨션에서 ``for y in [expr]``\\는 단순 대입"
" ``y = expr``\\만큼 빠릅니다. 예를 들면:"

#: ../../whatsnew/3.9.rst:749
msgid "sums = [s for s in [0] for x in data for s in [s + x]]"
msgstr "sums = [s for s in [0] for x in data for s in [s + x]]"

#: ../../whatsnew/3.9.rst:751
msgid ""
"Unlike the ``:=`` operator this idiom does not leak a variable to the "
"outer scope."
msgstr "``:=`` 연산자와 달리 이 관용구는 변수를 외부 스코프로 누출하지 않습니다."

#: ../../whatsnew/3.9.rst:754
msgid "(Contributed by Serhiy Storchaka in :issue:`32856`.)"
msgstr "(Contributed by Serhiy Storchaka in :issue:`32856`.)"

#: ../../whatsnew/3.9.rst:756
msgid ""
"Optimized signal handling in multithreaded applications. If a thread "
"different than the main thread gets a signal, the bytecode evaluation "
"loop is no longer interrupted at each bytecode instruction to check for "
"pending signals which cannot be handled. Only the main thread of the main"
" interpreter can handle signals."
msgstr ""
"다중 스레드 응용 프로그램에서 시그널 처리를 최적화했습니다. 메인 스레드와 다른 스레드가 신호를 받으면, 처리할 수 없는 계류 중인"
" 시그널을 확인하기 위해 바이트 코드 평가 루프가 더는 각 바이트 코드 명령에서 중단되지 않습니다. 메인 인터프리터의 메인 스레드만"
" 시그널을 처리할 수 있습니다."

#: ../../whatsnew/3.9.rst:762
msgid ""
"Previously, the bytecode evaluation loop was interrupted at each "
"instruction until the main thread handles signals. (Contributed by Victor"
" Stinner in :issue:`40010`.)"
msgstr ""
"이전에는, 메인 스레드가 시그널을 처리할 때까지 각 명령에서 바이트 코드 평가 루프가 중단되었습니다. (Contributed by "
"Victor Stinner in :issue:`40010`.)"

#: ../../whatsnew/3.9.rst:766
msgid ""
"Optimized the :mod:`subprocess` module on FreeBSD using ``closefrom()``. "
"(Contributed by Ed Maste, Conrad Meyer, Kyle Evans, Kubilay Kocak and "
"Victor Stinner in :issue:`38061`.)"
msgstr ""
"``closefrom()``\\을 사용하여 FreeBSD에서 :mod:`subprocess` 모듈을 최적화했습니다. "
"(Contributed by Ed Maste, Conrad Meyer, Kyle Evans, Kubilay Kocak and "
"Victor Stinner in :issue:`38061`.)"

#: ../../whatsnew/3.9.rst:770
#, fuzzy
msgid ""
":c:func:`PyLong_FromDouble` is now up to 1.87x faster for values that fit"
" into :c:expr:`long`. (Contributed by Sergey Fedoseev in :issue:`37986`.)"
msgstr ""
":c:func:`PyLong_FromDouble`\\은 이제 :c:type:`long`\\에 맞는 값에 대해 최대 1.87배 더 "
"빠릅니다. (Contributed by Sergey Fedoseev in :issue:`37986`.)"

#: ../../whatsnew/3.9.rst:774
#, fuzzy
msgid ""
"A number of Python builtins (:class:`range`, :class:`tuple`, "
":class:`set`, :class:`frozenset`, :class:`list`, :class:`dict`) are now "
"sped up by using :pep:`590` vectorcall protocol. (Contributed by Donghee "
"Na, Mark Shannon, Jeroen Demeyer and Petr Viktorin in :issue:`37207`.)"
msgstr ""
"많은 파이썬 내장(:class:`range`, :class:`tuple`, :class:`set`, "
":class:`frozenset`, :class:`list`, :class:`dict`)은 이제 :pep:`590` 벡터콜 "
"프로토콜을 사용하여 가속됩니다. (Contributed by Dong-hee Na, Mark Shannon, Jeroen "
"Demeyer and Petr Viktorin in :issue:`37207`.)"

#: ../../whatsnew/3.9.rst:779
msgid ""
"Optimized :func:`~set.difference_update` for the case when the other set "
"is much larger than the base set. (Suggested by Evgeny Kapun with code "
"contributed by Michele Orrù in :issue:`8425`.)"
msgstr ""
"다른 집합이 기본 집합보다 훨씬 큰 경우에 최적화된 :func:`~set.difference_update`. (Suggested "
"by Evgeny Kapun with code contributed by Michele Orrù in :issue:`8425`.)"

#: ../../whatsnew/3.9.rst:783
msgid ""
"Python's small object allocator (``obmalloc.c``) now allows (no more "
"than) one empty arena to remain available for immediate reuse, without "
"returning it to the OS.  This prevents thrashing in simple loops where an"
" arena could be created and destroyed anew on each iteration. "
"(Contributed by Tim Peters in :issue:`37257`.)"
msgstr ""
"파이썬의 작은 객체 할당자(``obmalloc.c``)는 이제 하나의 빈 아레나를 OS로 반환하지 않고 즉시 재사용 할 수 있도록 "
"허용합니다. 이렇게 하면 각 이터레이션마다 아레나가 새로 만들어지고 파괴될 수 있도록 하는 간단한 루프에서의 "
"스레싱(thrashing)이 방지됩니다. (Contributed by Tim Peters in :issue:`37257`.)"

#: ../../whatsnew/3.9.rst:789
#, fuzzy
msgid ""
":term:`floor division` of float operation now has a better performance. "
"Also the message of :exc:`ZeroDivisionError` for this operation is "
"updated. (Contributed by Donghee Na in :issue:`39434`.)"
msgstr ""
"이제 부동 소수점 연산의 :term:`정수 나눗셈 <floor division>`\\의 성능이 개선되었습니다. 또한 이 연산에 대한"
" :exc:`ZeroDivisionError`\\의 메시지가 갱신됩니다. (Contributed by Dong-hee Na in "
":issue:`39434`.)"

#: ../../whatsnew/3.9.rst:793
#, python-format
msgid ""
"Decoding short ASCII strings with UTF-8 and ascii codecs is now about 15%"
" faster.  (Contributed by Inada Naoki in :issue:`37348`.)"
msgstr ""
"UTF-8과 ascii 코덱으로 짧은 ASCII 문자열을 디코딩하는 것이 이제 약 15% 더 빨라졌습니다. (Contributed "
"by Inada Naoki in :issue:`37348`.)"

#: ../../whatsnew/3.9.rst:796
msgid ""
"Here's a summary of performance improvements from Python 3.4 through "
"Python 3.9:"
msgstr "다음은 파이썬 3.4에서 파이썬 3.9까지의 성능 향상에 대한 요약입니다:"

#: ../../whatsnew/3.9.rst:798
msgid ""
"Python version                       3.4     3.5     3.6     3.7     3.8"
"    3.9\n"
"--------------                       ---     ---     ---     ---     ---"
"    ---\n"
"\n"
"Variable and attribute read access:\n"
"    read_local                       7.1     7.1     5.4     5.1     3.9"
"    3.9\n"
"    read_nonlocal                    7.1     8.1     5.8     5.4     4.4"
"    4.5\n"
"    read_global                     15.5    19.0    14.3    13.6     7.6"
"    7.8\n"
"    read_builtin                    21.1    21.6    18.5    19.0     7.5"
"    7.8\n"
"    read_classvar_from_class        25.6    26.5    20.7    19.5    18.4"
"   17.9\n"
"    read_classvar_from_instance     22.8    23.5    18.8    17.1    16.4"
"   16.9\n"
"    read_instancevar                32.4    33.1    28.0    26.3    25.4"
"   25.3\n"
"    read_instancevar_slots          27.8    31.3    20.8    20.8    20.2"
"   20.5\n"
"    read_namedtuple                 73.8    57.5    45.0    46.8    18.4"
"   18.7\n"
"    read_boundmethod                37.6    37.9    29.6    26.9    27.7"
"   41.1\n"
"\n"
"Variable and attribute write access:\n"
"    write_local                      8.7     9.3     5.5     5.3     4.3"
"    4.3\n"
"    write_nonlocal                  10.5    11.1     5.6     5.5     4.7"
"    4.8\n"
"    write_global                    19.7    21.2    18.0    18.0    15.8"
"   16.7\n"
"    write_classvar                  92.9    96.0   104.6   102.1    39.2"
"   39.8\n"
"    write_instancevar               44.6    45.8    40.0    38.9    35.5"
"   37.4\n"
"    write_instancevar_slots         35.6    36.1    27.3    26.6    25.7"
"   25.8\n"
"\n"
"Data structure read access:\n"
"    read_list                       24.2    24.5    20.8    20.8    19.0"
"   19.5\n"
"    read_deque                      24.7    25.5    20.2    20.6    19.8"
"   20.2\n"
"    read_dict                       24.3    25.7    22.3    23.0    21.0"
"   22.4\n"
"    read_strdict                    22.6    24.3    19.5    21.2    18.9"
"   21.5\n"
"\n"
"Data structure write access:\n"
"    write_list                      27.1    28.5    22.5    21.6    20.0"
"   20.0\n"
"    write_deque                     28.7    30.1    22.7    21.8    23.5"
"   21.7\n"
"    write_dict                      31.4    33.3    29.3    29.2    24.7"
"   25.4\n"
"    write_strdict                   28.4    29.9    27.5    25.2    23.1"
"   24.5\n"
"\n"
"Stack (or queue) operations:\n"
"    list_append_pop                 93.4   112.7    75.4    74.2    50.8"
"   50.6\n"
"    deque_append_pop                43.5    57.0    49.4    49.2    42.5"
"   44.2\n"
"    deque_append_popleft            43.7    57.3    49.7    49.7    42.8"
"   46.4\n"
"\n"
"Timing loop:\n"
"    loop_overhead                    0.5     0.6     0.4     0.3     0.3"
"    0.3"
msgstr ""

#: ../../whatsnew/3.9.rst:843
#, fuzzy
msgid ""
"These results were generated from the variable access benchmark script "
"at: ``Tools/scripts/var_access_benchmark.py``. The benchmark script "
"displays timings in nanoseconds.  The benchmarks were measured on an "
"`Intel® Core™ i7-4960HQ processor "
"<https://ark.intel.com/content/www/us/en/ark/products/76088/intel-core-i7"
"-4960hq-processor-6m-cache-up-to-3-80-ghz.html>`_ running the macOS "
"64-bit builds found at `python.org "
"<https://www.python.org/downloads/macos/>`_."
msgstr ""
"이 결과는 ``Tools/scripts/var_access_benchmark.py``\\에 있는 변수 액세스 벤치마크 스크립트에서 "
"생성되었습니다. 벤치마크 스크립트는 타이밍을 나노초로 표시합니다. 벤치마크는 `python.org "
"<https://www.python.org/downloads/mac-osx/>`_\\에서 찾을 수 있는 macOS 64비트 빌드를 "
"실행하는 `Intel® Core™ i7-4960HQ processor "
"<https://ark.intel.com/content/www/us/en/ark/products/76088/intel-core-i7"
"-4960hq-processor-6m-cache-up-to-3-80-ghz.html>`_\\에서 측정되었습니다."

#: ../../whatsnew/3.9.rst:853
msgid "Deprecated"
msgstr "폐지"

#: ../../whatsnew/3.9.rst:855
msgid ""
"The distutils ``bdist_msi`` command is now deprecated, use "
"``bdist_wheel`` (wheel packages) instead. (Contributed by Hugo van "
"Kemenade in :issue:`39586`.)"
msgstr ""
"distutils ``bdist_msi`` 명령은 이제 폐지되었습니다, 대신 ``bdist_wheel``\\(휠 패키지)을 "
"사용하십시오. (Contributed by Hugo van Kemenade in :issue:`39586`.)"

#: ../../whatsnew/3.9.rst:859
msgid ""
"Currently :func:`math.factorial` accepts :class:`float` instances with "
"non-negative integer values (like ``5.0``).  It raises a "
":exc:`ValueError` for non-integral and negative floats.  It is now "
"deprecated.  In future Python versions it will raise a :exc:`TypeError` "
"for all floats. (Contributed by Serhiy Storchaka in :issue:`37315`.)"
msgstr ""
"현재 :func:`math.factorial`\\은 음이 아닌 정숫값을 갖는 :class:`float` 인스턴스를 허용합니다 (가령"
" ``5.0``). 정숫값이 아니거나 음수인 float에 대해서는 :exc:`ValueError`\\를 발생시킵니다. 이제 "
"폐지되었습니다. 향후 파이썬 버전에서는 모든 float에 대해 :exc:`TypeError`\\를 발생시킬 것입니다. "
"(Contributed by Serhiy Storchaka in :issue:`37315`.)"

#: ../../whatsnew/3.9.rst:865
#, fuzzy
msgid ""
"The :mod:`!parser` and :mod:`!symbol` modules are deprecated and will be "
"removed in future versions of Python. For the majority of use cases, "
"users can leverage the Abstract Syntax Tree (AST) generation and "
"compilation stage, using the :mod:`ast` module."
msgstr ""
":mod:`parser`\\와 :mod:`symbol` 모듈은 폐지되었고 이후 버전의 파이썬에서 제거될 예정입니다. 대부분의 사용 "
"사례에서 사용자는 :mod:`ast` 모듈을 사용하여 추상 구문 트리(AST) 생성과 컴파일 단계를 활용할 수 있습니다."

#: ../../whatsnew/3.9.rst:870
#, fuzzy
msgid ""
"The Public C API functions :c:func:`!PyParser_SimpleParseStringFlags`, "
":c:func:`!PyParser_SimpleParseStringFlagsFilename`, "
":c:func:`!PyParser_SimpleParseFileFlags` and :c:func:`!PyNode_Compile` "
"are deprecated and will be removed in Python 3.10 together with the old "
"parser."
msgstr ""
"공개 C API 함수 :c:func:`PyParser_SimpleParseStringFlags`, "
":c:func:`PyParser_SimpleParseStringFlagsFilename`, "
":c:func:`PyParser_SimpleParseFileFlags` 및 :c:func:`PyNode_Compile`\\는 "
"폐지되었고 파이썬 3.10에서 이전 구문 분석기와 함께 제거됩니다."

#: ../../whatsnew/3.9.rst:875
msgid ""
"Using :data:`NotImplemented` in a boolean context has been deprecated, as"
" it is almost exclusively the result of incorrect rich comparator "
"implementations. It will be made a :exc:`TypeError` in a future version "
"of Python. (Contributed by Josh Rosenberg in :issue:`35712`.)"
msgstr ""
"불리언 문맥에서 :data:`NotImplemented`\\를 사용하는 것은 거의 확실히 잘못된 풍부한 비교 구현의 결과이므로 "
"폐지되었습니다. 향후 버전의 파이썬에서 :exc:`TypeError`\\가 될 것입니다. (Contributed by Josh "
"Rosenberg in :issue:`35712`.)"

#: ../../whatsnew/3.9.rst:881
msgid ""
"The :mod:`random` module currently accepts any hashable type as a "
"possible seed value.  Unfortunately, some of those types are not "
"guaranteed to have a deterministic hash value.  After Python 3.9, the "
"module will restrict its seeds to :const:`None`, :class:`int`, "
":class:`float`, :class:`str`, :class:`bytes`, and :class:`bytearray`."
msgstr ""
":mod:`random` 모듈은 현재 모든 해시 가능한 형을 시드 값으로 허용합니다. 불행히도, 이러한 형 중 일부는 결정론적 "
"해시값을 보장하지 않습니다. 파이썬 3.9 이후, 이 모듈은 시드를 :const:`None`, :class:`int`, "
":class:`float`, :class:`str`, :class:`bytes` 및 :class:`bytearray`\\로 "
"제한합니다."

#: ../../whatsnew/3.9.rst:887
msgid ""
"Opening the :class:`~gzip.GzipFile` file for writing without specifying "
"the *mode* argument is deprecated.  In future Python versions it will "
"always be opened for reading by default.  Specify the *mode* argument for"
" opening it for writing and silencing a warning. (Contributed by Serhiy "
"Storchaka in :issue:`28286`.)"
msgstr ""
"*mode* 인자를 지정하지 않고 쓰기 위해 :class:`~gzip.GzipFile` 파일을 여는 것은 폐지되었습니다. 향후 "
"파이썬 버전에서는 이때 기본적으로 항상 읽기 위해 열립니다. 쓰기 위해 열면서 경고가 나오지 않도록 하기 위해서는 *mode* "
"인자를 지정하십시오. (Contributed by Serhiy Storchaka in :issue:`28286`.)"

#: ../../whatsnew/3.9.rst:893
#, fuzzy
msgid ""
"Deprecated the ``split()`` method of :class:`!_tkinter.TkappType` in "
"favour of the ``splitlist()`` method which has more consistent and "
"predictable behavior. (Contributed by Serhiy Storchaka in "
":issue:`38371`.)"
msgstr ""
":class:`_tkinter.TkappType`\\의 ``split()`` 메서드를 폐지하고, 더 일관되고 예측 가능한 동작을 "
"갖는 ``splitlist()`` 메서드로 대체합니다. (Contributed by Serhiy Storchaka in "
":issue:`38371`.)"

#: ../../whatsnew/3.9.rst:898
msgid ""
"The explicit passing of coroutine objects to :func:`asyncio.wait` has "
"been deprecated and will be removed in version 3.11. (Contributed by Yury"
" Selivanov and Kyle Stanley in :issue:`34790`.)"
msgstr ""
"코루틴 객체를 :func:`asyncio.wait`\\에 명시적으로 전달하는 것은 폐지되었고 버전 3.11에서 제거됩니다. "
"(Contributed by Yury Selivanov and Kyle Stanley in :issue:`34790`.)"

#: ../../whatsnew/3.9.rst:902
#, fuzzy
msgid ""
"binhex4 and hexbin4 standards are now deprecated. The :mod:`!binhex` "
"module and the following :mod:`binascii` functions are now deprecated:"
msgstr ""
"binhex4 와 hexbin4 표준은 이제 폐지되었습니다. :mod:`binhex` 모듈과 다음 :mod:`binascii` "
"함수는 이제 폐지되었습니다:"

#: ../../whatsnew/3.9.rst:905
#, fuzzy
msgid ":func:`!b2a_hqx`, :func:`!a2b_hqx`"
msgstr ":func:`~binascii.b2a_hqx`, :func:`~binascii.a2b_hqx`"

#: ../../whatsnew/3.9.rst:906
#, fuzzy
msgid ":func:`!rlecode_hqx`, :func:`!rledecode_hqx`"
msgstr ":func:`~binascii.rlecode_hqx`, :func:`~binascii.rledecode_hqx`"

#: ../../whatsnew/3.9.rst:908
msgid "(Contributed by Victor Stinner in :issue:`39353`.)"
msgstr "(Contributed by Victor Stinner in :issue:`39353`.)"

#: ../../whatsnew/3.9.rst:910
msgid ""
":mod:`ast` classes ``slice``, ``Index`` and ``ExtSlice`` are considered "
"deprecated and will be removed in future Python versions.  ``value`` "
"itself should be used instead of ``Index(value)``.  ``Tuple(slices, "
"Load())`` should be used instead of ``ExtSlice(slices)``. (Contributed by"
" Serhiy Storchaka in :issue:`34822`.)"
msgstr ""
":mod:`ast` 클래스 ``slice``, ``Index`` 및 ``ExtSlice``\\는 폐지된 것으로 간주하고 향후 파이썬"
" 버전에서 제거될 예정입니다. ``Index(value)`` 대신 ``value`` 자체를 사용해야 합니다. "
"``ExtSlice(slices)`` 대신 ``Tuple(slices, Load())``\\를 사용해야 합니다. "
"(Contributed by Serhiy Storchaka in :issue:`34822`.)"

#: ../../whatsnew/3.9.rst:916
msgid ""
":mod:`ast` classes ``Suite``, ``Param``, ``AugLoad`` and ``AugStore`` are"
" considered deprecated and will be removed in future Python versions. "
"They were not generated by the parser and not accepted by the code "
"generator in Python 3. (Contributed by Batuhan Taskaya in :issue:`39639` "
"and :issue:`39969` and Serhiy Storchaka in :issue:`39988`.)"
msgstr ""
":mod:`ast` 클래스 ``Suite``, ``Param``, ``AugLoad`` 및 ``AugStore``\\는 폐지된 "
"것으로 간주하고 향후 파이썬 버전에서 제거될 예정입니다. 이것들은 구문 분석기에 의해 생성되지 않았으며 파이썬 3의 코드 생성기에 "
"의해 받아들여지지 않았습니다. (Contributed by Batuhan Taskaya in :issue:`39639` and "
":issue:`39969` and Serhiy Storchaka in :issue:`39988`.)"

#: ../../whatsnew/3.9.rst:923
#, fuzzy
msgid ""
"The :c:func:`!PyEval_InitThreads` and "
":c:func:`!PyEval_ThreadsInitialized` functions are now deprecated and "
"will be removed in Python 3.11. Calling :c:func:`!PyEval_InitThreads` now"
" does nothing. The :term:`GIL` is initialized by :c:func:`Py_Initialize` "
"since Python 3.7. (Contributed by Victor Stinner in :issue:`39877`.)"
msgstr ""
":c:func:`PyEval_InitThreads`\\와 :c:func:`PyEval_ThreadsInitialized` 함수는 "
"이제 폐지되었고 파이썬 3.11에서 제거됩니다. :c:func:`PyEval_InitThreads`\\를 호출해도 이제 아무런 "
"효과가 없습니다. :term:`GIL`\\은 파이썬 3.7부터 :c:func:`Py_Initialize()`\\로 초기화됩니다. "
"(Contributed by Victor Stinner in :issue:`39877`.)"

#: ../../whatsnew/3.9.rst:929
msgid ""
"Passing ``None`` as the first argument to the :func:`shlex.split` "
"function has been deprecated.  (Contributed by Zackery Spytz in "
":issue:`33262`.)"
msgstr ""
":func:`shlex.split` 함수에 첫 번째 인자로 ``None``\\을 전달하는 것은 폐지되었습니다. "
"(Contributed by Zackery Spytz in :issue:`33262`.)"

#: ../../whatsnew/3.9.rst:932
#, fuzzy
msgid ""
":func:`!smtpd.MailmanProxy` is now deprecated as it is unusable without "
"an external module, ``mailman``.  (Contributed by Samuel Colvin in "
":issue:`35800`.)"
msgstr ""
":func:`smtpd.MailmanProxy`\\는 이제 외부 모듈 ``mailman`` 없이는 사용할 수 없어서 폐지되었습니다."
" (Contributed by Samuel Colvin in :issue:`35800`.)"

#: ../../whatsnew/3.9.rst:935
#, fuzzy
msgid ""
"The :mod:`!lib2to3` module now emits a :exc:`PendingDeprecationWarning`. "
"Python 3.9 switched to a PEG parser (see :pep:`617`), and Python 3.10 may"
" include new language syntax that is not parsable by lib2to3's LL(1) "
"parser. The :mod:`!lib2to3` module may be removed from the standard "
"library in a future Python version. Consider third-party alternatives "
"such as `LibCST`_ or `parso`_. (Contributed by Carl Meyer in "
":issue:`40360`.)"
msgstr ""
":mod:`lib2to3` 모듈은 이제 :exc:`PendingDeprecationWarning` 을 방출합니다. 파이썬 3.9는 "
"PEG 구문 분석기로 전환되었으며 (:pep:`617`\\을 참조하십시오), 파이썬 3.10에는 lib2to3의 LL(1) 구문 "
"분석기로 구문 분석할 수 없는 새로운 언어 문법이 포함될 수 있습니다. ``lib2to3`` 모듈은 향후 파이썬 버전의 표준 "
"라이브러리에서 제거될 수 있습니다. `LibCST`_\\나 `parso`_\\와 같은 제삼자 대안을 고려하십시오. "
"(Contributed by Carl Meyer in :issue:`40360`.)"

#: ../../whatsnew/3.9.rst:943
msgid ""
"The *random* parameter of :func:`random.shuffle` has been deprecated. "
"(Contributed by Raymond Hettinger in :issue:`40465`)"
msgstr ""
":func:`random.shuffle`\\의 *random* 매개 변수는 폐지되었습니다. (Contributed by "
"Raymond Hettinger in :issue:`40465`)"

#: ../../whatsnew/3.9.rst:952 ../../whatsnew/3.9.rst:1407
msgid "Removed"
msgstr "제거"

#: ../../whatsnew/3.9.rst:954
#, fuzzy
msgid ""
"The erroneous version at :data:`!unittest.mock.__version__` has been "
"removed."
msgstr ":data:`unittest.mock.__version__`\\의 잘못된 버전이 제거되었습니다."

#: ../../whatsnew/3.9.rst:956
#, fuzzy
msgid ""
":class:`!nntplib.NNTP`: ``xpath()`` and ``xgtitle()`` methods have been "
"removed. These methods are deprecated since Python 3.3. Generally, these "
"extensions are not supported or not enabled by NNTP server "
"administrators. For ``xgtitle()``, please use "
":meth:`!nntplib.NNTP.descriptions` or :meth:`!nntplib.NNTP.description` "
"instead. (Contributed by Donghee Na in :issue:`39366`.)"
msgstr ""
":class:`nntplib.NNTP`: ``xpath()``\\와 ``xgtitle()`` 메서드가 제거되었습니다. 이 메서드는 "
"파이썬 3.3부터 폐지되었습니다. 일반적으로, 이러한 확장은 지원되지 않거나 NNTP 서버 관리자가 활성화하지 않습니다. "
"``xgtitle()``\\의 경우, :meth:`nntplib.NNTP.descriptions`\\나 "
":meth:`nntplib.NNTP.description`\\을 대신 사용하십시오. (Contributed by Dong-hee "
"Na in :issue:`39366`.)"

#: ../../whatsnew/3.9.rst:963
msgid ""
":class:`array.array`: ``tostring()`` and ``fromstring()`` methods have "
"been removed. They were aliases to ``tobytes()`` and ``frombytes()``, "
"deprecated since Python 3.2. (Contributed by Victor Stinner in "
":issue:`38916`.)"
msgstr ""
":class:`array.array`: ``tostring()``\\과 ``fromstring()`` 메서드가 제거되었습니다. "
"이것들은 ``tobytes()``\\와 ``frombytes()``\\의 별칭으로, 파이썬 3.2부터 폐지되었습니다. "
"(Contributed by Victor Stinner in :issue:`38916`.)"

#: ../../whatsnew/3.9.rst:968
msgid ""
"The undocumented ``sys.callstats()`` function has been removed. Since "
"Python 3.7, it was deprecated and always returned :const:`None`. It "
"required a special build option ``CALL_PROFILE`` which was already "
"removed in Python 3.7. (Contributed by Victor Stinner in :issue:`37414`.)"
msgstr ""
"설명되지 않은 ``sys.callstats()`` 함수가 제거되었습니다. 파이썬 3.7부터는, 폐지되었고 항상 "
":const:`None`\\을 반환했습니다. 파이썬 3.7에서 이미 제거된 특수 빌드 옵션 ``CALL_PROFILE``\\이 "
"필요했습니다. (Contributed by Victor Stinner in :issue:`37414`.)"

#: ../../whatsnew/3.9.rst:973
msgid ""
"The ``sys.getcheckinterval()`` and ``sys.setcheckinterval()`` functions "
"have been removed. They were deprecated since Python 3.2. Use "
":func:`sys.getswitchinterval` and :func:`sys.setswitchinterval` instead. "
"(Contributed by Victor Stinner in :issue:`37392`.)"
msgstr ""
"``sys.getcheckinterval()`` 과 ``sys.setcheckinterval()`` 함수가 제거되었습니다. 파이썬 "
"3.2부터 폐지되었습니다. 대신 :func:`sys.getswitchinterval`\\과 "
":func:`sys.setswitchinterval`\\을 사용하십시오. (Contributed by Victor Stinner "
"in :issue:`37392`.)"

#: ../../whatsnew/3.9.rst:978
msgid ""
"The C function ``PyImport_Cleanup()`` has been removed. It was documented"
" as: \"Empty the module table.  For internal use only.\" (Contributed by "
"Victor Stinner in :issue:`36710`.)"
msgstr ""
"C 함수 ``PyImport_Cleanup()``\\이 제거되었습니다. 이렇게 설명되어 있었습니다: \"모듈 테이블을 비웁니다. "
"내부 전용.\" (Contributed by Victor Stinner in :issue:`36710`.)"

#: ../../whatsnew/3.9.rst:982
msgid ""
"``_dummy_thread`` and ``dummy_threading`` modules have been removed. "
"These modules were deprecated since Python 3.7 which requires threading "
"support. (Contributed by Victor Stinner in :issue:`37312`.)"
msgstr ""
"``_dummy_thread``\\와 ``dummy_threading`` 모듈이 제거되었습니다. 이 모듈은 스레드 지원이 필수인 "
"파이썬 3.7부터 폐지되었습니다. (Contributed by Victor Stinner in :issue:`37312`.)"

#: ../../whatsnew/3.9.rst:986
#, fuzzy
msgid ""
"``aifc.openfp()`` alias to ``aifc.open()``, ``sunau.openfp()`` alias to "
"``sunau.open()``, and ``wave.openfp()`` alias to :func:`wave.open` have "
"been removed. They were deprecated since Python 3.7. (Contributed by "
"Victor Stinner in :issue:`37320`.)"
msgstr ""
"``aifc.open()``\\에 대한 ``aifc.openfp()`` 별칭, ``sunau.open()``\\에 대한 "
"``sunau.openfp()`` 별칭, :func:`wave.open()`\\에 대한 ``wave.openfp()`` 별칭이 "
"제거되었습니다. 파이썬 3.7부터 폐지되었습니다. (Contributed by Victor Stinner in "
":issue:`37320`.)"

#: ../../whatsnew/3.9.rst:991
#, fuzzy
msgid ""
"The :meth:`!isAlive` method of :class:`threading.Thread` has been "
"removed. It was deprecated since Python 3.8. Use "
":meth:`~threading.Thread.is_alive` instead. (Contributed by Donghee Na in"
" :issue:`37804`.)"
msgstr ""
":class:`threading.Thread`\\의 :meth:`~threading.Thread.isAlive()` 메서드가 "
"제거되었습니다. 파이썬 3.8부터 폐지되었습니다. 대신 :meth:`~threading.Thread.is_alive()`\\를 "
"사용하십시오. (Contributed by Dong-hee Na in :issue:`37804`.)"

#: ../../whatsnew/3.9.rst:996
msgid ""
"Methods ``getchildren()`` and ``getiterator()`` of classes "
":class:`~xml.etree.ElementTree.ElementTree` and "
":class:`~xml.etree.ElementTree.Element` in the "
":mod:`~xml.etree.ElementTree` module have been removed.  They were "
"deprecated in Python 3.2. Use ``iter(x)`` or ``list(x)`` instead of "
"``x.getchildren()`` and ``x.iter()`` or ``list(x.iter())`` instead of "
"``x.getiterator()``. (Contributed by Serhiy Storchaka in :issue:`36543`.)"
msgstr ""
":mod:`~xml.etree.ElementTree` 모듈에서 클래스 "
":class:`~xml.etree.ElementTree.ElementTree`\\와 "
":class:`~xml.etree.ElementTree.Element`\\의 메서드 ``getchildren()``\\과 "
"``getiterator()``\\가 제거되었습니다. 파이썬 3.2에서 폐지되었습니다. ``x.getchildren()`` 대신 "
"``iter(x)``\\나 ``list(x)``\\를, ``x.getiterator()`` 대신 ``x.iter()``\\나 "
"``list(x.iter())``\\를 사용하십시오. (Contributed by Serhiy Storchaka in "
":issue:`36543`.)"

#: ../../whatsnew/3.9.rst:1004
msgid ""
"The old :mod:`plistlib` API has been removed, it was deprecated since "
"Python 3.4. Use the :func:`~plistlib.load`, :func:`~plistlib.loads`, "
":func:`~plistlib.dump`, and :func:`~plistlib.dumps` functions. "
"Additionally, the *use_builtin_types* parameter was removed, standard "
":class:`bytes` objects are always used instead. (Contributed by Jon "
"Janzen in :issue:`36409`.)"
msgstr ""
"낡은 :mod:`plistlib` API는 제거되었습니다, 파이썬 3.4부터 폐지되었습니다. "
":func:`~plistlib.load`, :func:`~plistlib.loads`, :func:`~plistlib.dump` 및"
" :func:`~plistlib.dumps` 함수를 사용하십시오. 또한, *use_builtin_types* 매개 변수가 "
"제거되었으며, 표준 :class:`bytes` 객체가 항상 대신 사용됩니다. (Contributed by Jon Janzen in "
":issue:`36409`.)"

#: ../../whatsnew/3.9.rst:1010
msgid ""
"The C function ``PyGen_NeedsFinalizing`` has been removed. It was not "
"documented, tested, or used anywhere within CPython after the "
"implementation of :pep:`442`. Patch by Joannah Nanjekye. (Contributed by "
"Joannah Nanjekye in :issue:`15088`)"
msgstr ""
"C 함수 ``PyGen_NeedsFinalizing``\\이 제거되었습니다. :pep:`442`\\를 구현한 후, 설명되지도, "
"테스트 되지도, CPython 내 어디에서건 사용되지도 않았습니다. Joannah Nanjekye의 패치. (Contributed "
"by Joannah Nanjekye in :issue:`15088`)"

#: ../../whatsnew/3.9.rst:1015
msgid ""
"``base64.encodestring()`` and ``base64.decodestring()``, aliases "
"deprecated since Python 3.1, have been removed: use "
":func:`base64.encodebytes` and :func:`base64.decodebytes` instead. "
"(Contributed by Victor Stinner in :issue:`39351`.)"
msgstr ""
"파이썬 3.1부터 폐지된 별칭 ``base64.encodestring()``\\과 "
"``base64.decodestring()``\\은 제거되었습니다: 대신 :func:`base64.encodebytes`\\와 "
":func:`base64.decodebytes`\\를 사용하십시오. (Contributed by Victor Stinner in "
":issue:`39351`.)"

#: ../../whatsnew/3.9.rst:1020
msgid ""
"``fractions.gcd()`` function has been removed, it was deprecated since "
"Python 3.5 (:issue:`22486`): use :func:`math.gcd` instead. (Contributed "
"by Victor Stinner in :issue:`39350`.)"
msgstr ""
"``fractions.gcd()`` 함수가 제거되었습니다, 파이썬 3.5부터 폐지되었습니다 (:issue:`22486`): 대신 "
":func:`math.gcd`\\를 사용하십시오. (Contributed by Victor Stinner in "
":issue:`39350`.)"

#: ../../whatsnew/3.9.rst:1024
msgid ""
"The *buffering* parameter of :class:`bz2.BZ2File` has been removed. Since"
" Python 3.0, it was ignored and using it emitted a "
":exc:`DeprecationWarning`. Pass an open file object to control how the "
"file is opened. (Contributed by Victor Stinner in :issue:`39357`.)"
msgstr ""
":class:`bz2.BZ2File`\\의 *buffering* 매개 변수가 제거되었습니다. 파이썬 3.0부터 무시되었고 사용하면 "
":exc:`DeprecationWarning`\\을 방출했습니다. 파일을 여는 방법을 제어하려면 열린 파일 객체를 전달하십시오. "
"(Contributed by Victor Stinner in :issue:`39357`.)"

#: ../../whatsnew/3.9.rst:1029
msgid ""
"The *encoding* parameter of :func:`json.loads` has been removed. As of "
"Python 3.1, it was deprecated and ignored; using it has emitted a "
":exc:`DeprecationWarning` since Python 3.8. (Contributed by Inada Naoki "
"in :issue:`39377`)"
msgstr ""
":func:`json.loads`\\의 *encoding* 매개 변수가 제거되었습니다. 파이썬 3.1부터 폐지되었고 무시되었습니다;"
" 파이썬 3.8부터 사용하면 :exc:`DeprecationWarning`\\을 방출했습니다. (Contributed by "
"Inada Naoki in :issue:`39377`)"

#: ../../whatsnew/3.9.rst:1034
msgid ""
"``with (await asyncio.lock):`` and ``with (yield from asyncio.lock):`` "
"statements are not longer supported, use ``async with lock`` instead.  "
"The same is correct for ``asyncio.Condition`` and ``asyncio.Semaphore``. "
"(Contributed by Andrew Svetlov in :issue:`34793`.)"
msgstr ""
"``with (await asyncio.lock):``\\와 ``with (yield from asyncio.lock):`` 문은 "
"더는 지원되지 않습니다, 대신 ``async with lock``\\을 사용하십시오. ``asyncio.Condition``\\과 "
"``asyncio.Semaphore``\\도 마찬가지입니다. (Contributed by Andrew Svetlov in "
":issue:`34793`.)"

#: ../../whatsnew/3.9.rst:1039
#, fuzzy
msgid ""
"The :func:`!sys.getcounts` function, the ``-X showalloccount`` command "
"line option and the ``show_alloc_count`` field of the C structure "
":c:type:`PyConfig` have been removed. They required a special Python "
"build by defining ``COUNT_ALLOCS`` macro. (Contributed by Victor Stinner "
"in :issue:`39489`.)"
msgstr ""
":func:`sys.getcounts` 함수, ``-X showalloccount`` 명령 줄 옵션 및 C 구조체 "
":c:type:`PyConfig`\\의 ``show_alloc_count`` 필드가 제거되었습니다. 이들은 "
"``COUNT_ALLOCS`` 매크로를 정의하는 특별한 파이썬 빌드가 필요했습니다. (Contributed by Victor "
"Stinner in :issue:`39489`.)"

#: ../../whatsnew/3.9.rst:1045
msgid ""
"The ``_field_types`` attribute of the :class:`typing.NamedTuple` class "
"has been removed.  It was deprecated since Python 3.8.  Use the "
"``__annotations__`` attribute instead. (Contributed by Serhiy Storchaka "
"in :issue:`40182`.)"
msgstr ""
":class:`typing.NamedTuple` 클래스의 ``_field_types`` 어트리뷰트가 제거되었습니다. 파이썬 "
"3.8부터 폐지되었습니다. 대신 ``__annotations__`` 어트리뷰트를 사용하십시오. (Contributed by "
"Serhiy Storchaka in :issue:`40182`.)"

#: ../../whatsnew/3.9.rst:1050
#, fuzzy
msgid ""
"The :meth:`!symtable.SymbolTable.has_exec` method has been removed. It "
"was deprecated since 2006, and only returning ``False`` when it's called."
" (Contributed by Batuhan Taskaya in :issue:`40208`)"
msgstr ""
":meth:`symtable.SymbolTable.has_exec` 메서드가 제거되었습니다. 2006 년부터 폐지되었으며, 호출되면"
" ``False``\\를 반환하기만 합니다. (Contributed by Batuhan Taskaya in "
":issue:`40208`)"

#: ../../whatsnew/3.9.rst:1054
#, fuzzy
msgid ""
"The :meth:`!asyncio.Task.current_task` and "
":meth:`!asyncio.Task.all_tasks` have been removed. They were deprecated "
"since Python 3.7 and you can use :func:`asyncio.current_task` and "
":func:`asyncio.all_tasks` instead. (Contributed by Rémi Lapeyre in "
":issue:`40967`)"
msgstr ""
":meth:`asyncio.Task.current_task`\\와 :meth:`asyncio.Task.all_tasks`\\가 "
"제거되었습니다. 파이썬 3.7부터 폐지되었고 대신 :func:`asyncio.current_task`\\와 "
":func:`asyncio.all_tasks`\\를 사용할 수 있습니다. (Contributed by Rémi Lapeyre in "
":issue:`40967`)"

#: ../../whatsnew/3.9.rst:1059
msgid ""
"The ``unescape()`` method in the :class:`html.parser.HTMLParser` class "
"has been removed (it was deprecated since Python 3.4).  "
":func:`html.unescape` should be used for converting character references "
"to the corresponding unicode characters."
msgstr ""
":class:`html.parser.HTMLParser` 클래스의 ``unescape()`` 메서드가 제거되었습니다 (파이썬 "
"3.4부터 폐지되었습니다). 문자 참조를 해당 유니코드 문자로 변환하는 데 :func:`html.unescape`\\를 사용해야 "
"합니다."

#: ../../whatsnew/3.9.rst:1066 ../../whatsnew/3.9.rst:1333
msgid "Porting to Python 3.9"
msgstr "파이썬 3.9로 이식하기"

#: ../../whatsnew/3.9.rst:1068
msgid ""
"This section lists previously described changes and other bugfixes that "
"may require changes to your code."
msgstr "이 절에서는 여러분의 코드 수정을 요구할 수도 있는 이전에 설명한 변경 사항과 다른 버그 수정 사항을 나열합니다."

#: ../../whatsnew/3.9.rst:1073
msgid "Changes in the Python API"
msgstr "파이썬 API의 변경"

#: ../../whatsnew/3.9.rst:1075
msgid ""
":func:`__import__` and :func:`importlib.util.resolve_name` now raise "
":exc:`ImportError` where it previously raised :exc:`ValueError`. Callers "
"catching the specific exception type and supporting both Python 3.9 and "
"earlier versions will need to catch both using ``except (ImportError, "
"ValueError):``."
msgstr ""
":func:`__import__`\\와 :func:`importlib.util.resolve_name`\\은 이전에 "
":exc:`ValueError`\\를 발생시키던 곳에서 이제 :exc:`ImportError`\\를 발생시킵니다. 특정 예외 형을 "
"포착하고 파이썬 3.9와 이전 버전을 모두 지원하는 호출자는 ``except (ImportError, "
"ValueError):``\\를 사용하여 둘 다 포착해야 합니다."

#: ../../whatsnew/3.9.rst:1080
msgid ""
"The :mod:`venv` activation scripts no longer special-case when "
"``__VENV_PROMPT__`` is set to ``\"\"``."
msgstr ""
"``__VENV_PROMPT__``\\가 ``\"\"``\\로 설정될 때 :mod:`venv` 활성화 스크립트는 더는 특별한 경우가"
" 아닙니다."

#: ../../whatsnew/3.9.rst:1083
#, fuzzy
msgid ""
"The :meth:`select.epoll.unregister` method no longer ignores the "
":const:`~errno.EBADF` error. (Contributed by Victor Stinner in "
":issue:`39239`.)"
msgstr ""
":meth:`select.epoll.unregister` 메서드는 더는 :data:`~errno.EBADF` 에러를 무시하지 "
"않습니다. (Contributed by Victor Stinner in :issue:`39239`.)"

#: ../../whatsnew/3.9.rst:1087
msgid ""
"The *compresslevel* parameter of :class:`bz2.BZ2File` became keyword-"
"only, since the *buffering* parameter has been removed. (Contributed by "
"Victor Stinner in :issue:`39357`.)"
msgstr ""
"*buffering* 매개 변수가 제거되었기 때문에, :class:`bz2.BZ2File`\\의 *compresslevel* 매개 "
"변수는 키워드 전용이 되었습니다. (Contributed by Victor Stinner in :issue:`39357`.)"

#: ../../whatsnew/3.9.rst:1091
msgid ""
"Simplified AST for subscription. Simple indices will be represented by "
"their value, extended slices will be represented as tuples. "
"``Index(value)`` will return a ``value`` itself, ``ExtSlice(slices)`` "
"will return ``Tuple(slices, Load())``. (Contributed by Serhiy Storchaka "
"in :issue:`34822`.)"
msgstr ""
"서브스크립션이 단순화된 AST. 단순 인덱스는 값으로 표시되고, 확장 슬라이스는 튜플로 표시됩니다. "
"``Index(value)``\\는 ``value`` 자체를 반환하고, ``ExtSlice(slices)``\\는 "
"``Tuple(slices, Load())``\\를 반환합니다. (Contributed by Serhiy Storchaka in "
":issue:`34822`.)"

#: ../../whatsnew/3.9.rst:1097
msgid ""
"The :mod:`importlib` module now ignores the :envvar:`PYTHONCASEOK` "
"environment variable when the :option:`-E` or :option:`-I` command line "
"options are being used."
msgstr ""
":option:`-E`\\나 :option:`-I` 명령 줄 옵션을 사용할 때 :mod:`importlib` 모듈은 이제 "
":envvar:`PYTHONCASEOK` 환경 변수를 무시합니다."

#: ../../whatsnew/3.9.rst:1101
msgid ""
"The *encoding* parameter has been added to the classes "
":class:`ftplib.FTP` and :class:`ftplib.FTP_TLS` as a keyword-only "
"parameter, and the default encoding is changed from Latin-1 to UTF-8 to "
"follow :rfc:`2640`."
msgstr ""
"*encoding* 매개 변수가 클래스 :class:`ftplib.FTP`\\와 :class:`ftplib.FTP_TLS`\\에 "
"키워드 전용 매개 변수로 추가되었으며, 기본 인코딩이 :rfc:`2640`\\을 따르도록 Latin-1에서 UTF-8로 "
"변경되었습니다."

#: ../../whatsnew/3.9.rst:1105
msgid ""
":meth:`asyncio.loop.shutdown_default_executor` has been added to "
":class:`~asyncio.AbstractEventLoop`, meaning alternative event loops that"
" inherit from it should have this method defined. (Contributed by Kyle "
"Stanley in :issue:`34037`.)"
msgstr ""
":meth:`asyncio.loop.shutdown_default_executor`\\가 "
":class:`~asyncio.AbstractEventLoop` 에 추가되어서, 이것을 상속하는 대체 이벤트 루프에 이 메서드가 "
"정의되어 있어야 합니다. (Contributed by Kyle Stanley in :issue:`34037`.)"

#: ../../whatsnew/3.9.rst:1110
msgid ""
"The constant values of future flags in the :mod:`__future__` module is "
"updated in order to prevent collision with compiler flags. Previously "
"``PyCF_ALLOW_TOP_LEVEL_AWAIT`` was clashing with ``CO_FUTURE_DIVISION``. "
"(Contributed by Batuhan Taskaya in :issue:`39562`)"
msgstr ""
"컴파일러 플래그와의 충돌을 방지하기 위해 :mod:`__future__` 모듈에서 퓨처 플래그의 상숫값이 갱신되었습니다. 이전에는 "
"``PyCF_ALLOW_TOP_LEVEL_AWAIT``\\가 ``CO_FUTURE_DIVISION``\\과 충돌했습니다. "
"(Contributed by Batuhan Taskaya in :issue:`39562`)"

#: ../../whatsnew/3.9.rst:1115
#, fuzzy
msgid ""
"``array('u')`` now uses :c:type:`wchar_t` as C type instead of "
"``Py_UNICODE``. This change doesn't affect to its behavior because "
"``Py_UNICODE`` is alias of :c:type:`wchar_t` since Python 3.3. "
"(Contributed by Inada Naoki in :issue:`34538`.)"
msgstr ""
"``array('u')``\\는 이제 ``Py_UNICODE`` 대신 ``wchar_t``\\를 C형으로 사용합니다. "
"``Py_UNICODE``\\는 파이썬 3.3부터 ``wchar_t``\\의 별칭이라서 이 변경은 동작에 영향을 미치지 않습니다. "
"(Contributed by Inada Naoki in :issue:`34538`.)"

#: ../../whatsnew/3.9.rst:1120
msgid ""
"The :func:`logging.getLogger` API now returns the root logger when passed"
" the name ``'root'``, whereas previously it returned a non-root logger "
"named ``'root'``. This could affect cases where user code explicitly "
"wants a non-root logger named ``'root'``, or instantiates a logger using "
"``logging.getLogger(__name__)`` in some top-level module called "
"``'root.py'``. (Contributed by Vinay Sajip in :issue:`37742`.)"
msgstr ""
":func:`logging.getLogger` API는 이제 이름 ``'root'``\\를 전달할 때 루트 로거를 반환합니다. "
"이전에는 ``'root'``\\라는 이름의 비 루트 로거를 반환했습니다. 이것은 사용자 코드가 ``'root'``\\라는 이름의 "
"루트가 아닌 로거를 명시적으로 원하거나, ``'root.py'``\\라는 최상위 모듈에서 "
"``logging.getLogger(__name__)``\\을 사용하여 로거를 인스턴스 화하는 경우에 영향을 미칠 수 있습니다. "
"(Contributed by Vinay Sajip in :issue:`37742`.)"

#: ../../whatsnew/3.9.rst:1127
#, fuzzy
msgid ""
"Division handling of :class:`~pathlib.PurePath` now returns "
":data:`NotImplemented` instead of raising a :exc:`TypeError` when passed "
"something other than an instance of ``str`` or "
":class:`~pathlib.PurePath`.  This allows creating compatible classes that"
" don't inherit from those mentioned types. (Contributed by Roger Aiudi in"
" :issue:`34775`)."
msgstr ""
":class:`~pathlib.PurePath`\\의 나눗셈 처리는 이제 ``str``\\이나 "
":class:`~pathlib.PurePath`\\의 인스턴스가 아닌 다른 것을 전달하면 :exc:`TypeError`\\를 "
"발생시키는 대신 ``NotImplemented``\\를 반환합니다. 이는 언급한 형을 상속하지 않는 호환 가능한 클래스를 만들 수 "
"있도록 합니다. (Contributed by Roger Aiudi in :issue:`34775`)."

#: ../../whatsnew/3.9.rst:1133
msgid ""
"Starting with Python 3.9.5 the :mod:`ipaddress` module no longer accepts "
"any leading zeros in IPv4 address strings. Leading zeros are ambiguous "
"and interpreted as octal notation by some libraries. For example the "
"legacy function :func:`socket.inet_aton` treats leading zeros as octal "
"notatation. glibc implementation of modern :func:`~socket.inet_pton` does"
" not accept any leading zeros. (Contributed by Christian Heimes in "
":issue:`36384`)."
msgstr ""

#: ../../whatsnew/3.9.rst:1141
msgid ""
":func:`codecs.lookup` now normalizes the encoding name the same way as "
":func:`encodings.normalize_encoding`, except that :func:`codecs.lookup` "
"also converts the name to lower case. For example, ``\"latex+latin1\"`` "
"encoding name is now normalized to ``\"latex_latin1\"``. (Contributed by "
"Jordon Xu in :issue:`37751`.)"
msgstr ""

#: ../../whatsnew/3.9.rst:1149
msgid "Changes in the C API"
msgstr "C API의 변경"

#: ../../whatsnew/3.9.rst:1151
#, fuzzy
msgid ""
"Instances of :ref:`heap-allocated types <heap-types>` (such as those "
"created with :c:func:`PyType_FromSpec` and similar APIs) hold a reference"
" to their type object since Python 3.8. As indicated in the \"Changes in "
"the C API\" of Python 3.8, for the vast majority of cases, there should "
"be no side effect but for types that have a custom "
":c:member:`~PyTypeObject.tp_traverse` function, ensure that all custom "
"``tp_traverse`` functions of heap-allocated types visit the object's "
"type."
msgstr ""
"힙 할당 형(가령 :c:func:`PyType_FromSpec` 및 유사한 API로 만들어진 것)의 인스턴스는 파이썬 3.8부터 형"
" 객체에 대한 참조를 보유합니다. 파이썬 3.8의 \"C API의 변경\"에 표시된 대로, 대부분의 경우, 부작용이 없어야 하지만 "
"사용자 정의 :c:member:`~PyTypeObject.tp_traverse` 함수가 있는 형의 경우 힙 할당형의 모든 사용자 "
"정의 ``tp_traverse`` 함수가 객체의 형을 방문하도록 합니다."

#: ../../whatsnew/3.9.rst:1161
#, python-brace-format
msgid ""
"int\n"
"foo_traverse(foo_struct *self, visitproc visit, void *arg) {\n"
"// Rest of the traverse function\n"
"#if PY_VERSION_HEX >= 0x03090000\n"
"    // This was not needed before Python 3.9 (Python issue 35810 and "
"40217)\n"
"    Py_VISIT(Py_TYPE(self));\n"
"#endif\n"
"}"
msgstr ""

#: ../../whatsnew/3.9.rst:1172
#, fuzzy
msgid ""
"If your traverse function delegates to ``tp_traverse`` of its base class "
"(or another type), ensure that ``Py_TYPE(self)`` is visited only once. "
"Note that only :ref:`heap type <heap-types>` are expected to visit the "
"type in ``tp_traverse``."
msgstr ""
"순회 함수가 베이스 클래스 (또는 다른 형)의 ``tp_traverse``\\에 위임하면, ``Py_TYPE(self)``\\를 한"
" 번만 방문해야 합니다. ``tp_traverse``\\에서 힙 형 만 형을 방문하도록 기대된다는 것에 유의하십시오."

#: ../../whatsnew/3.9.rst:1177
msgid "For example, if your ``tp_traverse`` function includes:"
msgstr "예를 들어, ``tp_traverse`` 함수가 다음을 포함하면:"

#: ../../whatsnew/3.9.rst:1179
msgid "base->tp_traverse(self, visit, arg)"
msgstr ""

#: ../../whatsnew/3.9.rst:1183
msgid "then add:"
msgstr "다음을 추가하십시오:"

#: ../../whatsnew/3.9.rst:1185
#, python-brace-format
msgid ""
"#if PY_VERSION_HEX >= 0x03090000\n"
"    // This was not needed before Python 3.9 (bpo-35810 and bpo-40217)\n"
"    if (base->tp_flags & Py_TPFLAGS_HEAPTYPE) {\n"
"        // a heap type's tp_traverse already visited Py_TYPE(self)\n"
"    } else {\n"
"        Py_VISIT(Py_TYPE(self));\n"
"    }\n"
"#else"
msgstr ""

#: ../../whatsnew/3.9.rst:1196
msgid "(See :issue:`35810` and :issue:`40217` for more information.)"
msgstr "(자세한 내용은 :issue:`35810`\\과 :issue:`40217`\\을 참조하십시오.)"

#: ../../whatsnew/3.9.rst:1198
msgid ""
"The functions ``PyEval_CallObject``, ``PyEval_CallFunction``, "
"``PyEval_CallMethod`` and ``PyEval_CallObjectWithKeywords`` are "
"deprecated. Use :c:func:`PyObject_Call` and its variants instead. (See "
"more details in :issue:`29548`.)"
msgstr ""
"``PyEval_CallObject``, ``PyEval_CallFunction``, ``PyEval_CallMethod`` 및 "
"``PyEval_CallObjectWithKeywords`` 함수는 폐지되었습니다. 대신 "
":c:func:`PyObject_Call`\\과 그 변형을 사용하십시오. (자세한 내용은 :issue:`29548`\\을 "
"참조하십시오.)"

#: ../../whatsnew/3.9.rst:1204
msgid "CPython bytecode changes"
msgstr "CPython 바이트 코드 변경"

#: ../../whatsnew/3.9.rst:1206
msgid ""
"The :opcode:`LOAD_ASSERTION_ERROR` opcode was added for handling the "
":keyword:`assert` statement. Previously, the assert statement would not "
"work correctly if the :exc:`AssertionError` exception was being shadowed."
" (Contributed by Zackery Spytz in :issue:`34880`.)"
msgstr ""
":keyword:`assert` 문을 처리하기 위해 :opcode:`LOAD_ASSERTION_ERROR` 옵코드가 추가되었습니다."
" 이전에는, :exc:`AssertionError` 예외를 가리면(shadow) assert 문이 올바르게 작동하지 않았습니다. "
"(Contributed by Zackery Spytz in :issue:`34880`.)"

#: ../../whatsnew/3.9.rst:1211
msgid "The :opcode:`COMPARE_OP` opcode was split into four distinct instructions:"
msgstr ":opcode:`COMPARE_OP` 옵코드는 4개의 개별 명령어로 분할되었습니다:"

#: ../../whatsnew/3.9.rst:1213
msgid "``COMPARE_OP`` for rich comparisons"
msgstr "풍부한 비교를 위한 ``COMPARE_OP``"

#: ../../whatsnew/3.9.rst:1214
msgid "``IS_OP`` for 'is' and 'is not' tests"
msgstr "'is'와 'is not' 테스트를 위한 ``IS_OP``"

#: ../../whatsnew/3.9.rst:1215
msgid "``CONTAINS_OP`` for 'in' and 'not in' tests"
msgstr "'in'과 'not in' 테스트를 위한 ``CONTAINS_OP``"

#: ../../whatsnew/3.9.rst:1216
msgid ""
"``JUMP_IF_NOT_EXC_MATCH`` for checking exceptions in 'try-except' "
"statements."
msgstr "'try-except' 문에서 예외를 확인하기 위한 ``JUMP_IF_NOT_EXC_MATCH``."

#: ../../whatsnew/3.9.rst:1219
msgid "(Contributed by Mark Shannon in :issue:`39156`.)"
msgstr "(Contributed by Mark Shannon in :issue:`39156`.)"

#: ../../whatsnew/3.9.rst:1223
msgid "Build Changes"
msgstr "빌드 변경"

#: ../../whatsnew/3.9.rst:1225
#, fuzzy
msgid ""
"Added ``--with-platlibdir`` option to the ``configure`` script: name of "
"the platform-specific library directory, stored in the new "
":data:`sys.platlibdir` attribute. See :data:`sys.platlibdir` attribute "
"for more information. (Contributed by Jan Matějek, Matěj Cepl, "
"Charalampos Stratakis and Victor Stinner in :issue:`1294959`.)"
msgstr ""
"``configure`` 스크립트에 ``--with-platlibdir`` 옵션을 추가했습니다: 새 "
":attr:`sys.platlibdir` 어트리뷰트에 저장된, 플랫폼별 라이브러리 디렉터리의 이름. 자세한 정보는 "
":attr:`sys.platlibdir` 어트리뷰트를 참조하십시오. (Contributed by Jan Matějek, Matěj "
"Cepl, Charalampos Stratakis and Victor Stinner in :issue:`1294959`.)"

#: ../../whatsnew/3.9.rst:1231
msgid ""
"The ``COUNT_ALLOCS`` special build macro has been removed. (Contributed "
"by Victor Stinner in :issue:`39489`.)"
msgstr ""
"``COUNT_ALLOCS`` 특수 빌드 매크로가 제거되었습니다. (Contributed by Victor Stinner in "
":issue:`39489`.)"

#: ../../whatsnew/3.9.rst:1234
#, fuzzy
msgid ""
"On non-Windows platforms, the :c:func:`!setenv` and :c:func:`!unsetenv` "
"functions are now required to build Python. (Contributed by Victor "
"Stinner in :issue:`39395`.)"
msgstr ""
"윈도우 이외의 플랫폼에서, :c:func:`setenv`\\와 :c:func:`unsetenv` 함수는 이제 파이썬을 빌드하는 데 "
"필요합니다. (Contributed by Victor Stinner in :issue:`39395`.)"

#: ../../whatsnew/3.9.rst:1238
msgid ""
"On non-Windows platforms, creating ``bdist_wininst`` installers is now "
"officially unsupported.  (See :issue:`10945` for more details.)"
msgstr ""
"윈도우가 아닌 플랫폼에서, ``bdist_wininst`` 설치 프로그램 생성은 이제 공식적으로 지원되지 않습니다. (자세한 내용은"
" :issue:`10945`\\를 참조하십시오.)"

#: ../../whatsnew/3.9.rst:1241
#, fuzzy
msgid ""
"When building Python on macOS from source, ``_tkinter`` now links with "
"non-system Tcl and Tk frameworks if they are installed in "
"``/Library/Frameworks``, as had been the case on older releases of macOS."
" If a macOS SDK is explicitly configured, by using :option:`--enable-"
"universalsdk` or ``-isysroot``, only the SDK itself is searched. The "
"default behavior can still be overridden with ``--with-tcltk-includes`` "
"and ``--with-tcltk-libs``. (Contributed by Ned Deily in :issue:`34956`.)"
msgstr ""
"macOS에서 소스로부터 파이썬을 빌드할 때, ``_tkinter``\\는, 이전 macOS 릴리스의 경우와 마찬가지로, "
"``/Library/Frameworks``\\에 설치되었으면 비 시스템 Tcl과 Tk 프레임 워크와 링크됩니다. macOS SDK가"
" 명시적으로 구성되면 (``--enable-universalsdk=``\\나 ``-isysroot``\\를 사용하여), SDK "
"자체만 검색됩니다. 기본 동작은 여전히 ``--with-tcltk-includes``\\와 ``--with-tcltk-"
"libs``\\로 재정의할 수 있습니다. (Contributed by Ned Deily in :issue:`34956`.)"

#: ../../whatsnew/3.9.rst:1250
msgid ""
"Python can now be built for Windows 10 ARM64. (Contributed by Steve Dower"
" in :issue:`33125`.)"
msgstr ""
"이제 윈도우 10 ARM64 용으로 파이썬을 빌드할 수 있습니다. (Contributed by Steve Dower in "
":issue:`33125`.)"

#: ../../whatsnew/3.9.rst:1253
msgid ""
"Some individual tests are now skipped when ``--pgo`` is used.  The tests "
"in question increased the PGO task time significantly and likely didn't "
"help improve optimization of the final executable. This speeds up the "
"task by a factor of about 15x.  Running the full unit test suite is slow."
"  This change may result in a slightly less optimized build since not as "
"many code branches will be executed.  If you are willing to wait for the "
"much slower build, the old behavior can be restored using ``./configure "
"[..] PROFILE_TASK=\"-m test --pgo-extended\"``.  We make no guarantees as"
" to which PGO task set produces a faster build.  Users who care should "
"run their own relevant benchmarks as results can depend on the "
"environment, workload, and compiler tool chain. (See :issue:`36044` and "
":issue:`37707` for more details.)"
msgstr ""
"``--pgo``\\를 사용할 때 이제 일부 개별 테스트를 건너뜁니다. 문제의 테스트는 PGO 작업 시간을 매우 증가시켰으며 최종 "
"실행 파일의 최적화를 개선하는 데 도움이 되지 않았을 가능성이 높습니다. 이렇게 하면 작업 속도가 약 15배 빨라집니다. 전체 단위"
" 테스트 스위트를 실행하는 것은 느립니다. 이 변경으로 인해 많은 코드 분기가 실행되지 않아서 빌드가 약간 덜 최적화 될 수 "
"있습니다. 훨씬 느린 빌드를 기다릴 의사가 있다면, ``./configure [..] PROFILE_TASK=\"-m test "
"--pgo-extended\"``\\를 사용하여 이전 동작을 복원할 수 있습니다. 우리는 어떤 PGO 작업 집합이 더 빠른 빌드를 "
"생성하는지에 대해 보장하지 않습니다. 결과가 환경, 워크로드 및 컴파일러 도구 체인에 따라 달라질 수 있어서, 이를 중요하게 "
"생각하는 사용자는 자신의 관련 벤치마크를 실행해야 합니다. (자세한 내용은 :issue:`36044`\\와 "
":issue:`37707`\\를 참조하십시오.)"

#: ../../whatsnew/3.9.rst:1268
msgid "C API Changes"
msgstr "C API 변경"

#: ../../whatsnew/3.9.rst:1273
#, fuzzy
msgid ""
":pep:`573`: Added :c:func:`PyType_FromModuleAndSpec` to associate a "
"module with a class; :c:func:`PyType_GetModule` and "
":c:func:`PyType_GetModuleState` to retrieve the module and its state; and"
" :c:type:`PyCMethod` and :c:macro:`METH_METHOD` to allow a method to "
"access the class it was defined in. (Contributed by Marcel Plch and Petr "
"Viktorin in :issue:`38787`.)"
msgstr ""
":pep:`573`: 모듈을 클래스와 연결하는 :c:func:`PyType_FromModuleAndSpec`\\를 추가했습니다; "
"모듈과 해당 상태를 가져오는 :c:func:`PyType_GetModule`\\과 "
":c:func:`PyType_GetModuleState`\\를 추가합니다; 메서드가 자신이 정의된 클래스에 액세스할 수 있도록 하는"
" :c:data:`PyCMethod`\\와 :c:data:`METH_METHOD`\\를 추가합니다. (Contributed by "
"Marcel Plch and Petr Viktorin in :issue:`38787`.)"

#: ../../whatsnew/3.9.rst:1280
msgid ""
"Added :c:func:`PyFrame_GetCode` function: get a frame code. Added "
":c:func:`PyFrame_GetBack` function: get the frame next outer frame. "
"(Contributed by Victor Stinner in :issue:`40421`.)"
msgstr ""
":c:func:`PyFrame_GetCode` 함수를 추가했습니다: 프레임 코드를 얻습니다. "
":c:func:`PyFrame_GetBack` 함수를 추가했습니다: 프레임 다음 외부 프레임을 얻습니다. (Contributed "
"by Victor Stinner in :issue:`40421`.)"

#: ../../whatsnew/3.9.rst:1284
msgid ""
"Added :c:func:`PyFrame_GetLineNumber` to the limited C API. (Contributed "
"by Victor Stinner in :issue:`40421`.)"
msgstr ""
"제한된 C API에 :c:func:`PyFrame_GetLineNumber`\\를 추가했습니다. (Contributed by "
"Victor Stinner in :issue:`40421`.)"

#: ../../whatsnew/3.9.rst:1287
msgid ""
"Added :c:func:`PyThreadState_GetInterpreter` and "
":c:func:`PyInterpreterState_Get` functions to get the interpreter. Added "
":c:func:`PyThreadState_GetFrame` function to get the current frame of a "
"Python thread state. Added :c:func:`PyThreadState_GetID` function: get "
"the unique identifier of a Python thread state. (Contributed by Victor "
"Stinner in :issue:`39947`.)"
msgstr ""
"인터프리터를 얻는 :c:func:`PyThreadState_GetInterpreter`\\와 "
":c:func:`PyInterpreterState_Get` 함수를 추가했습니다. 파이썬 스레드 상태의 현재 프레임을 가져오는 "
":c:func:`PyThreadState_GetFrame` 함수를 추가했습니다. "
":c:func:`PyThreadState_GetID` 함수를 추가했습니다: 파이썬 스레드 상태의 고유 식별자를 가져옵니다. "
"(Contributed by Victor Stinner in :issue:`39947`.)"

#: ../../whatsnew/3.9.rst:1295
msgid ""
"Added a new public :c:func:`PyObject_CallNoArgs` function to the C API, "
"which calls a callable Python object without any arguments. It is the "
"most efficient way to call a callable Python object without any argument."
" (Contributed by Victor Stinner in :issue:`37194`.)"
msgstr ""
"인자 없이 콜러블 파이썬 객체를 호출하는 새로운 공용 :c:func:`PyObject_CallNoArgs` 함수를 C API에 "
"추가했습니다. 인자 없이 콜러블 파이썬 객체를 호출하는 가장 효율적인 방법입니다. (Contributed by Victor "
"Stinner in :issue:`37194`.)"

#: ../../whatsnew/3.9.rst:1300 ../../whatsnew/3.9.rst:1418
msgid "Changes in the limited C API (if ``Py_LIMITED_API`` macro is defined):"
msgstr "제한된 C API의 변경 사항 (``Py_LIMITED_API`` 매크로가 정의된 경우):"

#: ../../whatsnew/3.9.rst:1302
msgid ""
"Provide :c:func:`Py_EnterRecursiveCall` and "
":c:func:`Py_LeaveRecursiveCall` as regular functions for the limited API."
" Previously, there were defined as macros, but these macros didn't "
"compile with the limited C API which cannot access "
"``PyThreadState.recursion_depth`` field (the structure is opaque in the "
"limited C API)."
msgstr ""
"제한된 API에 대한 일반 함수로 :c:func:`Py_EnterRecursiveCall` 과 "
":c:func:`Py_LeaveRecursiveCall` 을 제공합니다. 이전에는, 이들이 매크로로 정의되었지만, 이러한 매크로는 "
"``PyThreadState.recursion_depth`` 필드에 액세스할 수 없는 제한된 C API로는 컴파일되지 않았습니다 "
"(이 구조체는 제한된 C API에서 불투명합니다)."

#: ../../whatsnew/3.9.rst:1308
msgid ""
"``PyObject_INIT()`` and ``PyObject_INIT_VAR()`` become regular \"opaque\""
" function to hide implementation details."
msgstr ""
"``PyObject_INIT()``\\와 ``PyObject_INIT_VAR()``\\는 구현 세부 정보를 숨기도록 일반 "
"\"불투명\" 함수가 됩니다."

#: ../../whatsnew/3.9.rst:1311 ../../whatsnew/3.9.rst:1445
msgid "(Contributed by Victor Stinner in :issue:`38644` and :issue:`39542`.)"
msgstr "(Contributed by Victor Stinner in :issue:`38644` and :issue:`39542`.)"

#: ../../whatsnew/3.9.rst:1313
#, fuzzy
msgid ""
"The :c:func:`PyModule_AddType` function is added to help adding a type to"
" a module. (Contributed by Donghee Na in :issue:`40024`.)"
msgstr ""
":c:func:`PyModule_AddType` 함수가 추가되어 모듈에 형을 추가하는 것을 돕습니다. (Contributed by "
"Dong-hee Na in :issue:`40024`.)"

#: ../../whatsnew/3.9.rst:1317
msgid ""
"Added the functions :c:func:`PyObject_GC_IsTracked` and "
":c:func:`PyObject_GC_IsFinalized` to the public API to allow to query if "
"Python objects are being currently tracked or have been already finalized"
" by the garbage collector respectively. (Contributed by Pablo Galindo "
"Salgado in :issue:`40241`.)"
msgstr ""
":c:func:`PyObject_GC_IsTracked`\\와 :c:func:`PyObject_GC_IsFinalized` 함수를 "
"공용 API에 추가하여 파이썬 객체가 현재 추적되고 있거나 가비지 수거기에 의해 이미 파이널라이즈 되었는지 조회할 수 있습니다. "
"(Contributed by Pablo Galindo Salgado in :issue:`40241`.)"

#: ../../whatsnew/3.9.rst:1323
#, fuzzy
msgid ""
"Added :c:func:`!_PyObject_FunctionStr` to get a user-friendly string "
"representation of a function-like object. (Patch by Jeroen Demeyer in "
":issue:`37645`.)"
msgstr ""
"함수 류 객체의 사용자 친화적인 문자열 표현을 얻는 :c:func:`_PyObject_FunctionStr`\\을 추가했습니다. "
"(Patch by Jeroen Demeyer in :issue:`37645`.)"

#: ../../whatsnew/3.9.rst:1327
msgid ""
"Added :c:func:`PyObject_CallOneArg` for calling an object with one "
"positional argument (Patch by Jeroen Demeyer in :issue:`37483`.)"
msgstr ""
"하나의 위치 인자로 객체를 호출하는 :c:func:`PyObject_CallOneArg`\\를 추가했습니다 (Patch by "
"Jeroen Demeyer in :issue:`37483`.)"

#: ../../whatsnew/3.9.rst:1335
msgid ""
"``PyInterpreterState.eval_frame`` (:pep:`523`) now requires a new "
"mandatory *tstate* parameter (``PyThreadState*``). (Contributed by Victor"
" Stinner in :issue:`38500`.)"
msgstr ""
"``PyInterpreterState.eval_frame``\\(:pep:`523`)에는 이제 새로운 필수 *tstate* 매개 "
"변수(``PyThreadState*``)가 필요합니다. (Contributed by Victor Stinner in "
":issue:`38500`.)"

#: ../../whatsnew/3.9.rst:1339
msgid ""
"Extension modules: :c:member:`~PyModuleDef.m_traverse`, "
":c:member:`~PyModuleDef.m_clear` and :c:member:`~PyModuleDef.m_free` "
"functions of :c:type:`PyModuleDef` are no longer called if the module "
"state was requested but is not allocated yet. This is the case "
"immediately after the module is created and before the module is executed"
" (:c:data:`Py_mod_exec` function). More precisely, these functions are "
"not called if :c:member:`~PyModuleDef.m_size` is greater than 0 and the "
"module state (as returned by :c:func:`PyModule_GetState`) is ``NULL``."
msgstr ""
"확장 모듈: 모듈 상태가 요청되었지만, 아직 할당되지 않았으면 :c:type:`PyModuleDef`\\의 "
":c:member:`~PyModuleDef.m_traverse`, :c:member:`~PyModuleDef.m_clear` 및 "
":c:member:`~PyModuleDef.m_free` 함수가 더는 호출되지 않습니다. 이것은 모듈이 만들이진 직후, 모듈이 "
"실행되기 직전의 경우입니다 (:c:data:`Py_mod_exec` 함수). 더 정확하게는, :c:member:`m_size`\\가"
" 0보다 크고 모듈 상태(:c:func:`PyModule_GetState`\\가 반환하는)가 ``NULL``\\이면 이 함수가 "
"호출되지 않습니다."

#: ../../whatsnew/3.9.rst:1348
msgid "Extension modules without module state (``m_size <= 0``) are not affected."
msgstr "모듈 상태가 없는 확장 모듈(``m_size <= 0``)은 영향을 받지 않습니다."

#: ../../whatsnew/3.9.rst:1350
msgid ""
"If :c:func:`Py_AddPendingCall` is called in a subinterpreter, the "
"function is now scheduled to be called from the subinterpreter, rather "
"than being called from the main interpreter. Each subinterpreter now has "
"its own list of scheduled calls. (Contributed by Victor Stinner in "
":issue:`39984`.)"
msgstr ""
"서브 인터프리터에서 :c:func:`Py_AddPendingCall` 이 호출되면, 함수는 이제 메인 인터프리터에서 호출되지 않고 "
"서브 인터프리터에서 호출되도록 예약됩니다. 각 서브 인터프리터는 이제 자체 예약된 호출 목록을 갖습니다. (Contributed "
"by Victor Stinner in :issue:`39984`.)"

#: ../../whatsnew/3.9.rst:1356
msgid ""
"The Windows registry is no longer used to initialize :data:`sys.path` "
"when the ``-E`` option is used (if :c:member:`PyConfig.use_environment` "
"is set to ``0``). This is significant when embedding Python on Windows. "
"(Contributed by Zackery Spytz in :issue:`8901`.)"
msgstr ""
"``-E`` 옵션이 사용될 때 (:c:member:`PyConfig.use_environment`\\가 ``0``\\으로 설정될 "
"때) 윈도우 레지스트리가 더는 :data:`sys.path`\\를 초기화하는 데 사용되지 않습니다. 이것은 윈도우에서 파이썬을 "
"내장할 때 중요합니다. (Contributed by Zackery Spytz in :issue:`8901`.)"

#: ../../whatsnew/3.9.rst:1361
msgid ""
"The global variable :c:data:`PyStructSequence_UnnamedField` is now a "
"constant and refers to a constant string. (Contributed by Serhiy "
"Storchaka in :issue:`38650`.)"
msgstr ""
"전역 변수 :c:data:`PyStructSequence_UnnamedField`\\는 이제 상수이며 상수 문자열을 참조합니다. "
"(Contributed by Serhiy Storchaka in :issue:`38650`.)"

#: ../../whatsnew/3.9.rst:1365
#, fuzzy
msgid ""
"The :c:type:`!PyGC_Head` structure is now opaque. It is only defined in "
"the internal C API (``pycore_gc.h``). (Contributed by Victor Stinner in "
":issue:`40241`.)"
msgstr ""
":c:type:`PyGC_Head` 구조체는 이제 불투명합니다. 내부 C API(``pycore_gc.h``)에서만 정의됩니다. "
"(Contributed by Victor Stinner in :issue:`40241`.)"

#: ../../whatsnew/3.9.rst:1369
#, fuzzy
msgid ""
"The ``Py_UNICODE_COPY``, ``Py_UNICODE_FILL``, ``PyUnicode_WSTR_LENGTH``, "
":c:func:`!PyUnicode_FromUnicode`, :c:func:`!PyUnicode_AsUnicode`, "
"``_PyUnicode_AsUnicode``, and :c:func:`!PyUnicode_AsUnicodeAndSize` are "
"marked as deprecated in C.  They have been deprecated by :pep:`393` since"
" Python 3.3. (Contributed by Inada Naoki in :issue:`36346`.)"
msgstr ""
"``Py_UNICODE_COPY``, ``Py_UNICODE_FILL``, ``PyUnicode_WSTR_LENGTH``, "
":c:func:`PyUnicode_FromUnicode`, :c:func:`PyUnicode_AsUnicode`, "
"``_PyUnicode_AsUnicode`` 및 :c:func:`PyUnicode_AsUnicodeAndSize`\\는 C에서 "
"폐지된 것으로 표시됩니다. 파이썬 3.3 이후 :pep:`393`\\에서 폐지되었습니다. (Contributed by Inada "
"Naoki in :issue:`36346`.)"

#: ../../whatsnew/3.9.rst:1376
msgid ""
"The :c:func:`Py_FatalError` function is replaced with a macro which logs "
"automatically the name of the current function, unless the "
"``Py_LIMITED_API`` macro is defined. (Contributed by Victor Stinner in "
":issue:`39882`.)"
msgstr ""
":c:func:`Py_FatalError` 함수는, ``Py_LIMITED_API`` 매크로가 정의되지 않는 한, 현재 함수의 "
"이름을 자동으로 로그 하는 매크로로 대체됩니다. (Contributed by Victor Stinner in "
":issue:`39882`.)"

#: ../../whatsnew/3.9.rst:1381
msgid ""
"The vectorcall protocol now requires that the caller passes only strings "
"as keyword names. (See :issue:`37540` for more information.)"
msgstr ""
"벡터콜 프로토콜은 이제 호출자가 키워드 이름으로 문자열만 전달하도록 요구합니다. (자세한 내용은 :issue:`37540`\\을 "
"참조하십시오.)"

#: ../../whatsnew/3.9.rst:1384
msgid "Implementation details of a number of macros and functions are now hidden:"
msgstr "이제 여러 매크로와 함수의 구현 세부 사항이 숨겨집니다:"

#: ../../whatsnew/3.9.rst:1386
msgid ":c:func:`PyObject_IS_GC` macro was converted to a function."
msgstr ":c:func:`PyObject_IS_GC` 매크로가 함수로 변환되었습니다."

#: ../../whatsnew/3.9.rst:1388
#, fuzzy
msgid ""
"The :c:func:`!PyObject_NEW` macro becomes an alias to the "
":c:macro:`PyObject_New` macro, and the :c:func:`!PyObject_NEW_VAR` macro "
"becomes an alias to the :c:macro:`PyObject_NewVar` macro. They no longer "
"access directly the :c:member:`PyTypeObject.tp_basicsize` member."
msgstr ""
":c:func:`PyObject_NEW` 매크로는 :c:func:`PyObject_New` 매크로의 별칭이 되고, "
":c:func:`PyObject_NEW_VAR` 매크로는 :c:func:`PyObject_NewVar` 매크로의 별칭이 됩니다. "
"더는 :c:member:`PyTypeObject.tp_basicsize` 멤버에 직접 액세스하지 않습니다."

#: ../../whatsnew/3.9.rst:1393
#, fuzzy
msgid ""
":c:func:`!PyObject_GET_WEAKREFS_LISTPTR` macro was converted to a "
"function: the macro accessed directly the "
":c:member:`PyTypeObject.tp_weaklistoffset` member."
msgstr ""
":c:func:`PyObject_GET_WEAKREFS_LISTPTR` 매크로가 함수로 변환되었습니다: 매크로는 "
":c:member:`PyTypeObject.tp_weaklistoffset` 멤버에 직접 액세스했습니다."

#: ../../whatsnew/3.9.rst:1397
msgid ""
":c:func:`PyObject_CheckBuffer` macro was converted to a function: the "
"macro accessed directly the :c:member:`PyTypeObject.tp_as_buffer` member."
msgstr ""
":c:func:`PyObject_CheckBuffer` 매크로가 함수로 변환되었습니다: 매크로는 "
":c:member:`PyTypeObject.tp_as_buffer` 멤버에 직접 액세스했습니다."

#: ../../whatsnew/3.9.rst:1400
msgid ""
":c:func:`PyIndex_Check` is now always declared as an opaque function to "
"hide implementation details: removed the ``PyIndex_Check()`` macro. The "
"macro accessed directly the :c:member:`PyTypeObject.tp_as_number` member."
msgstr ""
":c:func:`PyIndex_Check`\\는 이제 구현 세부 사항을 숨기기 위해 항상 불투명한 함수로 선언됩니다: "
"``PyIndex_Check()`` 매크로가 제거되었습니다. 매크로는 "
":c:member:`PyTypeObject.tp_as_number` 멤버에 직접 액세스했습니다."

#: ../../whatsnew/3.9.rst:1404
msgid "(See :issue:`40170` for more details.)"
msgstr "(자세한 내용은 :issue:`40170`\\을 참조하십시오.)"

#: ../../whatsnew/3.9.rst:1409
msgid ""
"Excluded ``PyFPE_START_PROTECT()`` and ``PyFPE_END_PROTECT()`` macros of "
"``pyfpe.h`` from the limited C API. (Contributed by Victor Stinner in "
":issue:`38835`.)"
msgstr ""
"제한된 C API에서 ``pyfpe.h``\\의 ``PyFPE_START_PROTECT()``\\와 "
"``PyFPE_END_PROTECT()`` 매크로를 제외했습니다. (Contributed by Victor Stinner in "
":issue:`38835`.)"

#: ../../whatsnew/3.9.rst:1413
msgid ""
"The ``tp_print`` slot of :ref:`PyTypeObject <type-structs>` has been "
"removed. It was used for printing objects to files in Python 2.7 and "
"before. Since Python 3.0, it has been ignored and unused. (Contributed by"
" Jeroen Demeyer in :issue:`36974`.)"
msgstr ""
":ref:`PyTypeObject <type-structs>`\\의 ``tp_print`` 슬롯이 제거되었습니다. 파이썬 2.7과 "
"이전 버전에서 파일로 객체를 인쇄하는 데 사용되었습니다. 파이썬 3.0부터는, 무시되고 사용되지 않았습니다. (Contributed"
" by Jeroen Demeyer in :issue:`36974`.)"

#: ../../whatsnew/3.9.rst:1420
msgid "Excluded the following functions from the limited C API:"
msgstr "제한된 C API에서 다음 함수를 제외했습니다:"

#: ../../whatsnew/3.9.rst:1422
msgid ""
"``PyThreadState_DeleteCurrent()`` (Contributed by Joannah Nanjekye in "
":issue:`37878`.)"
msgstr ""
"``PyThreadState_DeleteCurrent()`` (Contributed by Joannah Nanjekye in "
":issue:`37878`.)"

#: ../../whatsnew/3.9.rst:1424
msgid "``_Py_CheckRecursionLimit``"
msgstr "``_Py_CheckRecursionLimit``"

#: ../../whatsnew/3.9.rst:1425
msgid "``_Py_NewReference()``"
msgstr "``_Py_NewReference()``"

#: ../../whatsnew/3.9.rst:1426
msgid "``_Py_ForgetReference()``"
msgstr "``_Py_ForgetReference()``"

#: ../../whatsnew/3.9.rst:1427
msgid "``_PyTraceMalloc_NewReference()``"
msgstr "``_PyTraceMalloc_NewReference()``"

#: ../../whatsnew/3.9.rst:1428
msgid "``_Py_GetRefTotal()``"
msgstr "``_Py_GetRefTotal()``"

#: ../../whatsnew/3.9.rst:1429
msgid "The trashcan mechanism which never worked in the limited C API."
msgstr "제한된 C API에서 결코 작동하지 않은 휴지통 메커니즘."

#: ../../whatsnew/3.9.rst:1430
msgid "``PyTrash_UNWIND_LEVEL``"
msgstr "``PyTrash_UNWIND_LEVEL``"

#: ../../whatsnew/3.9.rst:1431
msgid "``Py_TRASHCAN_BEGIN_CONDITION``"
msgstr "``Py_TRASHCAN_BEGIN_CONDITION``"

#: ../../whatsnew/3.9.rst:1432
msgid "``Py_TRASHCAN_BEGIN``"
msgstr "``Py_TRASHCAN_BEGIN``"

#: ../../whatsnew/3.9.rst:1433
msgid "``Py_TRASHCAN_END``"
msgstr "``Py_TRASHCAN_END``"

#: ../../whatsnew/3.9.rst:1434
msgid "``Py_TRASHCAN_SAFE_BEGIN``"
msgstr "``Py_TRASHCAN_SAFE_BEGIN``"

#: ../../whatsnew/3.9.rst:1435
msgid "``Py_TRASHCAN_SAFE_END``"
msgstr "``Py_TRASHCAN_SAFE_END``"

#: ../../whatsnew/3.9.rst:1437
msgid "Moved following functions and definitions to the internal C API:"
msgstr "다음 함수와 정의를 내부 C API로 옮겼습니다:"

#: ../../whatsnew/3.9.rst:1439
msgid "``_PyDebug_PrintTotalRefs()``"
msgstr "``_PyDebug_PrintTotalRefs()``"

#: ../../whatsnew/3.9.rst:1440
msgid "``_Py_PrintReferences()``"
msgstr "``_Py_PrintReferences()``"

#: ../../whatsnew/3.9.rst:1441
msgid "``_Py_PrintReferenceAddresses()``"
msgstr "``_Py_PrintReferenceAddresses()``"

#: ../../whatsnew/3.9.rst:1442
msgid "``_Py_tracemalloc_config``"
msgstr "``_Py_tracemalloc_config``"

#: ../../whatsnew/3.9.rst:1443
msgid "``_Py_AddToAllObjects()`` (specific to ``Py_TRACE_REFS`` build)"
msgstr "``_Py_AddToAllObjects()`` (``Py_TRACE_REFS`` 빌드에만 해당)"

#: ../../whatsnew/3.9.rst:1447
msgid ""
"Removed ``_PyRuntime.getframe`` hook and removed "
"``_PyThreadState_GetFrame`` macro which was an alias to "
"``_PyRuntime.getframe``. They were only exposed by the internal C API. "
"Removed also ``PyThreadFrameGetter`` type. (Contributed by Victor Stinner"
" in :issue:`39946`.)"
msgstr ""
"``_PyRuntime.getframe`` 훅을 제거했고 ``_PyRuntime.getframe``\\의 별칭인 "
"``_PyThreadState_GetFrame`` 매크로를 제거했습니다. 이들은 내부 C API에 의해서만 노출되었습니다. "
"``PyThreadFrameGetter`` 형도 제거했습니다. (Contributed by Victor Stinner in "
":issue:`39946`.)"

#: ../../whatsnew/3.9.rst:1452
msgid ""
"Removed the following functions from the C API. Call "
":c:func:`PyGC_Collect` explicitly to clear all free lists. (Contributed "
"by Inada Naoki and Victor Stinner in :issue:`37340`, :issue:`38896` and "
":issue:`40428`.)"
msgstr ""
"C API에서 다음 함수를 제거했습니다. 모든 자유 목록을 지우려면 :c:func:`PyGC_Collect`\\를 명시적으로 "
"호출하십시오. (Contributed by Inada Naoki and Victor Stinner in :issue:`37340`,"
" :issue:`38896` and :issue:`40428`.)"

#: ../../whatsnew/3.9.rst:1457
msgid "``PyAsyncGen_ClearFreeLists()``"
msgstr "``PyAsyncGen_ClearFreeLists()``"

#: ../../whatsnew/3.9.rst:1458
msgid "``PyContext_ClearFreeList()``"
msgstr "``PyContext_ClearFreeList()``"

#: ../../whatsnew/3.9.rst:1459
msgid "``PyDict_ClearFreeList()``"
msgstr "``PyDict_ClearFreeList()``"

#: ../../whatsnew/3.9.rst:1460
msgid "``PyFloat_ClearFreeList()``"
msgstr "``PyFloat_ClearFreeList()``"

#: ../../whatsnew/3.9.rst:1461
msgid "``PyFrame_ClearFreeList()``"
msgstr "``PyFrame_ClearFreeList()``"

#: ../../whatsnew/3.9.rst:1462
msgid "``PyList_ClearFreeList()``"
msgstr "``PyList_ClearFreeList()``"

#: ../../whatsnew/3.9.rst:1463
msgid ""
"``PyMethod_ClearFreeList()`` and ``PyCFunction_ClearFreeList()``: the "
"free lists of bound method objects have been removed."
msgstr ""
"``PyMethod_ClearFreeList()``\\와 ``PyCFunction_ClearFreeList()``: 연결된 메서드 "
"객체의 자유 목록이 제거되었습니다."

#: ../../whatsnew/3.9.rst:1465
msgid ""
"``PySet_ClearFreeList()``: the set free list has been removed in Python "
"3.4."
msgstr "``PySet_ClearFreeList()``: 파이썬 3.4에서 집합 자유 목록이 제거되었습니다."

#: ../../whatsnew/3.9.rst:1467
msgid "``PyTuple_ClearFreeList()``"
msgstr "``PyTuple_ClearFreeList()``"

#: ../../whatsnew/3.9.rst:1468
msgid ""
"``PyUnicode_ClearFreeList()``: the Unicode free list has been removed in "
"Python 3.3."
msgstr "``PyUnicode_ClearFreeList()``: 파이썬 3.3에서 유니코드 자유 목록이 제거되었습니다."

#: ../../whatsnew/3.9.rst:1471
msgid ""
"Removed ``_PyUnicode_ClearStaticStrings()`` function. (Contributed by "
"Victor Stinner in :issue:`39465`.)"
msgstr ""
"``_PyUnicode_ClearStaticStrings()`` 함수를 제거했습니다. (Contributed by Victor "
"Stinner in :issue:`39465`.)"

#: ../../whatsnew/3.9.rst:1474
msgid ""
"Removed ``Py_UNICODE_MATCH``. It has been deprecated by :pep:`393`, and "
"broken since Python 3.3. The :c:func:`PyUnicode_Tailmatch` function can "
"be used instead. (Contributed by Inada Naoki in :issue:`36346`.)"
msgstr ""
"``Py_UNICODE_MATCH``\\를 제거했습니다. :pep:`393`\\에서 폐지되었고, 파이썬 3.3부터 망가졌습니다. "
"대신 :c:func:`PyUnicode_Tailmatch` 함수를 사용할 수 있습니다. (Contributed by Inada "
"Naoki in :issue:`36346`.)"

#: ../../whatsnew/3.9.rst:1479
msgid ""
"Cleaned header files of interfaces defined but with no implementation. "
"The public API symbols being removed are: "
"``_PyBytes_InsertThousandsGroupingLocale``, "
"``_PyBytes_InsertThousandsGrouping``, ``_Py_InitializeFromArgs``, "
"``_Py_InitializeFromWideArgs``, ``_PyFloat_Repr``, ``_PyFloat_Digits``, "
"``_PyFloat_DigitsInit``, ``PyFrame_ExtendStack``, "
"``_PyAIterWrapper_Type``, ``PyNullImporter_Type``, ``PyCmpWrapper_Type``,"
" ``PySortWrapper_Type``, ``PyNoArgsFunction``. (Contributed by Pablo "
"Galindo Salgado in :issue:`39372`.)"
msgstr ""
"정의되었지만 구현이 없는 헤더 파일들을 정리했습니다. 제거되는 공용 API 심볼은: "
"``_PyBytes_InsertThousandsGroupingLocale``, "
"``_PyBytes_InsertThousandsGrouping``, ``_Py_InitializeFromArgs``, "
"``_Py_InitializeFromWideArgs``, ``_PyFloat_Repr``, ``_PyFloat_Digits``, "
"``_PyFloat_DigitsInit``, ``PyFrame_ExtendStack``, "
"``_PyAIterWrapper_Type``, ``PyNullImporter_Type``, ``PyCmpWrapper_Type``,"
" ``PySortWrapper_Type``, ``PyNoArgsFunction``\\입니다. (Contributed by Pablo"
" Galindo Salgado in :issue:`39372`.)"

#: ../../whatsnew/3.9.rst:1490
msgid "Notable changes in Python 3.9.1"
msgstr "파이썬 3.9.1의 주목할만한 변경 사항"

#: ../../whatsnew/3.9.rst:1495
msgid ""
"The behavior of :class:`typing.Literal` was changed to conform with "
":pep:`586` and to match the behavior of static type checkers specified in"
" the PEP."
msgstr ""
":class:`typing.Literal`\\의 동작은 :pep:`586`\\를 따르고 PEP에 지정된 정적 형 검사기의 동작과 "
"일치하도록 변경되었습니다."

#: ../../whatsnew/3.9.rst:1498
msgid "``Literal`` now de-duplicates parameters."
msgstr "``Literal``\\은 이제 매개 변수를 중복 제거합니다."

#: ../../whatsnew/3.9.rst:1499
msgid ""
"Equality comparisons between ``Literal`` objects are now order "
"independent."
msgstr "``Literal`` 객체 간의 동등 비교는 이제 순서에 독립적입니다."

#: ../../whatsnew/3.9.rst:1500
msgid ""
"``Literal`` comparisons now respect types.  For example, ``Literal[0] == "
"Literal[False]`` previously evaluated to ``True``.  It is now ``False``."
"  To support this change, the internally used type cache now supports "
"differentiating types."
msgstr ""
"``Literal`` 비교는 이제 형을 존중합니다. 예를 들어, ``Literal[0] == Literal[False]``\\는 "
"이전에 ``True``\\로 평가되었습니다. 이제 ``False``\\입니다. 이 변경을 지원하기 위해, 내부적으로 사용되는 형 "
"캐시는 이제 형 구분을 지원합니다."

#: ../../whatsnew/3.9.rst:1504
#, fuzzy
msgid ""
"``Literal`` objects will now raise a :exc:`TypeError` exception during "
"equality comparisons if any of their parameters are not :term:`hashable`."
" Note that declaring ``Literal`` with mutable parameters will not throw "
"an error::"
msgstr ""
"``Literal`` 객체는 매개 변수 중 하나가 :term:`불변 <immutable>`\\이 아니면 동등 비교 중에 "
":exc:`TypeError` 예외를 발생시킵니다. 가변 매개 변수로 ``Literal``\\를 선언하는 것은 에러를 발생시키지 "
"않음에 유의하십시오::"

#: ../../whatsnew/3.9.rst:1509
#, python-brace-format
msgid ""
">>> from typing import Literal\n"
">>> Literal[{0}]\n"
">>> Literal[{0}] == Literal[{False}]\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"TypeError: unhashable type: 'set'"
msgstr ""

#: ../../whatsnew/3.9.rst:1516
msgid "(Contributed by Yurii Karabas in :issue:`42345`.)"
msgstr "(Contributed by Yurii Karabas in :issue:`42345`.)"

#: ../../whatsnew/3.9.rst:1519
msgid "macOS 11.0 (Big Sur) and Apple Silicon Mac support"
msgstr "macOS 11.0 (Big Sur) 및 Apple Silicon Mac 지원"

#: ../../whatsnew/3.9.rst:1521
msgid ""
"As of 3.9.1, Python now fully supports building and running on macOS 11.0"
" (Big Sur) and on Apple Silicon Macs (based on the ``ARM64`` "
"architecture). A new universal build variant, ``universal2``, is now "
"available to natively support both ``ARM64`` and ``Intel 64`` in one set "
"of executables. Binaries can also now be built on current versions of "
"macOS to be deployed on a range of older macOS versions (tested to 10.9) "
"while making some newer OS functions and options conditionally available "
"based on the operating system version in use at runtime "
"(\"weaklinking\")."
msgstr ""
"3.9.1부터, 파이썬은 이제 macOS 11.0 (Big Sur)과 Apple Silicon Mac(``ARM64`` 아키텍처 "
"기반)에서 빌드와 실행을 완전히 지원합니다. 이제 새로운 유니버설 빌드 변형인 ``universal2``\\를 사용하여 하나의 실행"
" 파일 집합에서 ``ARM64``\\와 ``Intel 64``\\를 모두 네이티브 하게 지원할 수 있습니다. 바이너리는 이제 현재 "
"버전의 macOS에서 빌드되어 다양한 이전 macOS 버전(10.9까지 테스트 되었습니다)에 배포되는 동시에 실행시간에 사용 중인 "
"운영 체제 버전에 따라 조건부로 사용 가능한 일부 새로운 OS 기능과 옵션을 만들 수 있습니다 (\"약한 "
"링크(weaklinking)\")."

#: ../../whatsnew/3.9.rst:1530
msgid "(Contributed by Ronald Oussoren and Lawrence D'Anna in :issue:`41100`.)"
msgstr "(Contributed by Ronald Oussoren and Lawrence D'Anna in :issue:`41100`.)"

#: ../../whatsnew/3.9.rst:1533
msgid "Notable changes in Python 3.9.2"
msgstr "파이썬 3.9.2의 주목할만한 변경 사항"

#: ../../whatsnew/3.9.rst:1536
msgid "collections.abc"
msgstr "collections.abc"

#: ../../whatsnew/3.9.rst:1538
msgid ""
":class:`collections.abc.Callable` generic now flattens type parameters, "
"similar to what :data:`typing.Callable` currently does.  This means that "
"``collections.abc.Callable[[int, str], str]`` will have ``__args__`` of "
"``(int, str, str)``; previously this was ``([int, str], str)``.  To allow"
" this change, :class:`types.GenericAlias` can now be subclassed, and a "
"subclass will be returned when subscripting the "
":class:`collections.abc.Callable` type. Code which accesses the arguments"
" via :func:`typing.get_args` or ``__args__`` need to account for this "
"change.  A :exc:`DeprecationWarning` may be emitted for invalid forms of "
"parameterizing :class:`collections.abc.Callable` which may have passed "
"silently in Python 3.9.1.  This :exc:`DeprecationWarning` will become a "
":exc:`TypeError` in Python 3.10. (Contributed by Ken Jin in "
":issue:`42195`.)"
msgstr ""
":class:`collections.abc.Callable` 제네릭은 이제 :data:`typing.Callable`\\이 현재 "
"수행하는 것과 유사하게 형 매개 변수를 평활화합니다. 이것은 ``collections.abc.Callable[[int, str], "
"str]``\\의 ``__args__``\\가 ``(int, str, str)``\\임을 의미합니다; 이전에는 ``([int, "
"str], str)``\\였습니다. 이러한 변경을 허용하기 위해, 이제 :class:`types.GenericAlias`\\를 서브"
" 클래싱할 수 있으며, :class:`collections.abc.Callable` 형을 서브스크립팅할 할 때 서브 클래스가 "
"반환됩니다. :func:`typing.get_args`\\나 ``__args__``\\를 통해 인자에 액세스하는 코드는 이 변경 "
"사항을 고려해야 합니다. 파이썬 3.9.1에서 조용히 전달되었을 수 있는 "
":class:`collections.abc.Callable`\\의 유효하지 않은 매개 변수화 형식에 대해 "
":exc:`DeprecationWarning`\\을 방출할 수 있습니다. 이 :exc:`DeprecationWarning`\\은 "
"파이썬 3.10에서 :exc:`TypeError`\\가 됩니다. (Contributed by Ken Jin in "
":issue:`42195`.)"

#: ../../whatsnew/3.9.rst:1552 ../../whatsnew/3.9.rst:1577
msgid "urllib.parse"
msgstr "urllib.parse"

#: ../../whatsnew/3.9.rst:1554
#, fuzzy
msgid ""
"Earlier Python versions allowed using both ``;`` and ``&`` as query "
"parameter separators in :func:`urllib.parse.parse_qs` and "
":func:`urllib.parse.parse_qsl`.  Due to security concerns, and to conform"
" with newer W3C recommendations, this has been changed to allow only a "
"single separator key, with ``&`` as the default.  This change also "
"affects :func:`!cgi.parse` and :func:`!cgi.parse_multipart` as they use "
"the affected functions internally. For more details, please see their "
"respective documentation. (Contributed by Adam Goldschmidt, Senthil "
"Kumaran and Ken Jin in :issue:`42967`.)"
msgstr ""
"이전 파이썬 버전에서는 :func:`urllib.parse.parse_qs`\\와 "
":func:`urllib.parse.parse_qsl`\\에서 쿼리 매개 변수 구분자로 ``;``\\과 ``&``\\를 모두 사용할"
" 수 있었습니다. 보안 문제와 최신 W3C 권장 사항을 준수하기 위해, ``&``\\가 기본값인 단일 구분자 키만 허용하도록 "
"변경되었습니다. 이 변경 사항은 영향을 받는 함수를 내부적으로 사용하므로 :func:`cgi.parse`\\와 "
":func:`cgi.parse_multipart`\\에도 영향을 줍니다. 자세한 내용은 해당 설명서를 참조하십시오. "
"(Contributed by Adam Goldschmidt, Senthil Kumaran and Ken Jin in "
":issue:`42967`.)"

#: ../../whatsnew/3.9.rst:1565
msgid "Notable changes in Python 3.9.3"
msgstr "파이썬 3.9.3의 주목할만한 변경 사항"

#: ../../whatsnew/3.9.rst:1567
#, fuzzy
msgid ""
"A security fix alters the :class:`ftplib.FTP` behavior to not trust the "
"IPv4 address sent from the remote server when setting up a passive data "
"channel.  We reuse the ftp server IP address instead.  For unusual code "
"requiring the old behavior, set a ``trust_server_pasv_ipv4_address`` "
"attribute on your FTP instance to ``True``.  (See :gh:`87451`)"
msgstr ""
"보안 수정은 수동 데이터 채널을 설정할 때 원격 서버에서 보낸 IPv4 주소를 신뢰하지 않도록 :class:`ftplib.FTP` "
"동작을 변경합니다. 대신 ftp 서버 IP 주소를 재사용합니다. 이전 동작이 필요한 특별한 코드의 경우, FTP 인스턴스의 "
"``trust_server_pasv_ipv4_address`` 어트리뷰트를 ``True``\\로 설정하십시오. "
"(:issue:`43285`\\를 참조하십시오)"

#: ../../whatsnew/3.9.rst:1574
#, fuzzy
msgid "Notable changes in Python 3.9.5"
msgstr "파이썬 3.9.3의 주목할만한 변경 사항"

#: ../../whatsnew/3.9.rst:1579
msgid ""
"The presence of newline or tab characters in parts of a URL allows for "
"some forms of attacks. Following the WHATWG specification that updates "
":rfc:`3986`, ASCII newline ``\\n``, ``\\r`` and tab ``\\t`` characters "
"are stripped from the URL by the parser in :mod:`urllib.parse` preventing"
" such attacks. The removal characters are controlled by a new module "
"level variable ``urllib.parse._UNSAFE_URL_BYTES_TO_REMOVE``. (See "
":gh:`88048`)"
msgstr ""

#: ../../whatsnew/3.9.rst:1587
#, fuzzy
msgid "Notable security feature in 3.9.14"
msgstr "파이썬 3.9.1의 주목할만한 변경 사항"

#: ../../whatsnew/3.9.rst:1589
msgid ""
"Converting between :class:`int` and :class:`str` in bases other than 2 "
"(binary), 4, 8 (octal), 16 (hexadecimal), or 32 such as base 10 (decimal)"
" now raises a :exc:`ValueError` if the number of digits in string form is"
" above a limit to avoid potential denial of service attacks due to the "
"algorithmic complexity. This is a mitigation for :cve:`2020-10735`. This "
"limit can be configured or disabled by environment variable, command line"
" flag, or :mod:`sys` APIs. See the :ref:`integer string conversion length"
" limitation <int_max_str_digits>` documentation.  The default limit is "
"4300 digits in string form."
msgstr ""

#: ../../whatsnew/3.9.rst:1600
#, fuzzy
msgid "Notable changes in 3.9.17"
msgstr "파이썬 3.9.1의 주목할만한 변경 사항"

#: ../../whatsnew/3.9.rst:1603
msgid "tarfile"
msgstr ""

#: ../../whatsnew/3.9.rst:1605
msgid ""
"The extraction methods in :mod:`tarfile`, and "
":func:`shutil.unpack_archive`, have a new a *filter* argument that allows"
" limiting tar features than may be surprising or dangerous, such as "
"creating files outside the destination directory. See :ref:`tarfile-"
"extraction-filter` for details. In Python 3.12, use without the *filter* "
"argument will show a :exc:`DeprecationWarning`. In Python 3.14, the "
"default will switch to ``'data'``. (Contributed by Petr Viktorin in "
":pep:`706`.)"
msgstr ""

#~ msgid "Release"
#~ msgstr "배포"

#~ msgid "|release|"
#~ msgstr "|release|"

#~ msgid "Date"
#~ msgstr "날짜"

#~ msgid "|today|"
#~ msgstr "|today|"

#~ msgid "For full details, see the :ref:`changelog <changelog>`."
#~ msgstr "자세한 내용은 :ref:`changelog <changelog>`\\를 참조하십시오."

#~ msgid ""
#~ ":c:func:`PyType_HasFeature` now always calls "
#~ ":c:func:`PyType_GetFlags`. Previously, it accessed"
#~ " directly the :c:member:`PyTypeObject.tp_flags` "
#~ "member when the limited C API was"
#~ " not used."
#~ msgstr ""
#~ ":c:func:`PyType_HasFeature`\\는 이제 항상 "
#~ ":c:func:`PyType_GetFlags`\\를 호출합니다. 이전에는, 제한된 "
#~ "C API를 사용하지 않을 때 "
#~ ":c:member:`PyTypeObject.tp_flags` 멤버에 직접 액세스했습니다."

