# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2019, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-04-17 23:44+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: Dong-gweon Oh <flowdas@gmail.com>\n"
"Language-Team: Korean (https://python.flowdas.com)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.17.0\n"

#: ../../whatsnew/3.8.rst:3
msgid "What's New In Python 3.8"
msgstr "파이썬 3.8의 새로운 기능"

#: ../../whatsnew/3.8.rst
msgid "Editor"
msgstr "편집자"

#: ../../whatsnew/3.8.rst:45
msgid "Raymond Hettinger"
msgstr "Raymond Hettinger"

#: ../../whatsnew/3.8.rst:47
#, fuzzy
msgid ""
"This article explains the new features in Python 3.8, compared to 3.7. "
"Python 3.8 was released on October 14, 2019. For full details, see the "
":ref:`changelog <changelog>`."
msgstr ""
"이 기사에서는 파이썬 3.7과 비교하여 3.8의 새로운 기능에 관해 설명합니다. 자세한 내용은 :ref:`changelog "
"<changelog>`\\를 참조하세요."

#: ../../whatsnew/3.8.rst:61
msgid "Summary -- Release highlights"
msgstr "요약 -- 배포 주요 사항"

#: ../../whatsnew/3.8.rst:72
msgid "New Features"
msgstr "새로운 기능"

#: ../../whatsnew/3.8.rst:75
msgid "Assignment expressions"
msgstr "대입 표현식"

#: ../../whatsnew/3.8.rst:77
msgid ""
"There is new syntax ``:=`` that assigns values to variables as part of a "
"larger expression. It is affectionately known as \"the walrus operator\" "
"due to its resemblance to `the eyes and tusks of a walrus "
"<https://en.wikipedia.org/wiki/Walrus#/media/File:Pacific_Walrus_-_Bull_(8247646168).jpg>`_."
msgstr ""
"더 큰 표현식의 일부로 변수에 값을 대입하는 새로운 문법 ``:=`` 이 있습니다. `바다코끼리의 눈과 엄니 "
"<https://en.wikipedia.org/wiki/Walrus#/media/File:Pacific_Walrus_-_Bull_(8247646168).jpg>`_\\를"
" 닮아서 \"바다코끼리 연산자(the walrus operator)\"\\라고 친근하게 알려져 있습니다."

#: ../../whatsnew/3.8.rst:82
msgid ""
"In this example, the assignment expression helps avoid calling "
":func:`len` twice::"
msgstr "이 예에서, 대입 표현식은 :func:`len`\\을 두 번 호출하지 않도록 합니다::"

#: ../../whatsnew/3.8.rst:85
#, python-brace-format
msgid ""
"if (n := len(a)) > 10:\n"
"    print(f\"List is too long ({n} elements, expected <= 10)\")"
msgstr ""

#: ../../whatsnew/3.8.rst:88
msgid ""
"A similar benefit arises during regular expression matching where match "
"objects are needed twice, once to test whether a match occurred and "
"another to extract a subgroup::"
msgstr ""
"정규식 일치 중에도 비슷한 이점이 있습니다. 일치 객체가 두 번 필요합니다, 일치하는지 검사할 때 한 번, 서브 그룹을 추출할 때 "
"한 번::"

#: ../../whatsnew/3.8.rst:92
#, python-format
msgid ""
"discount = 0.0\n"
"if (mo := re.search(r'(\\d+)% discount', advertisement)):\n"
"    discount = float(mo.group(1)) / 100.0"
msgstr ""

#: ../../whatsnew/3.8.rst:96
msgid ""
"The operator is also useful with while-loops that compute a value to test"
" loop termination and then need that same value again in the body of the "
"loop::"
msgstr "이 연산자는 루프 종료를 검사하기 위해 값을 계산한 다음 루프의 바디에서 그 값이 다시 필요한 while 루프에도 유용합니다::"

#: ../../whatsnew/3.8.rst:100
msgid ""
"# Loop over fixed length blocks\n"
"while (block := f.read(256)) != '':\n"
"    process(block)"
msgstr ""

#: ../../whatsnew/3.8.rst:104
msgid ""
"Another motivating use case arises in list comprehensions where a value "
"computed in a filtering condition is also needed in the expression body::"
msgstr "필터링 조건에서 계산된 값이 표현식 바디에도 필요한 리스트 컴프리헨션에서 또 다른 사용 사례가 생깁니다::"

#: ../../whatsnew/3.8.rst:108
msgid ""
"[clean_name.title() for name in names\n"
" if (clean_name := normalize('NFC', name)) in allowed_names]"
msgstr ""

#: ../../whatsnew/3.8.rst:111
msgid ""
"Try to limit use of the walrus operator to clean cases that reduce "
"complexity and improve readability."
msgstr "복잡성을 줄이고 가독성을 개선하는 명확한 사례로 바다코끼리 연산자 사용을 제한하십시오."

#: ../../whatsnew/3.8.rst:114
msgid "See :pep:`572` for a full description."
msgstr "자세한 설명은 :pep:`572`\\를 참조하십시오."

#: ../../whatsnew/3.8.rst:116
msgid "(Contributed by Emily Morehouse in :issue:`35224`.)"
msgstr "(Contributed by Emily Morehouse in :issue:`35224`.)"

#: ../../whatsnew/3.8.rst:120
msgid "Positional-only parameters"
msgstr "위치 전용 매개 변수"

#: ../../whatsnew/3.8.rst:122
#, fuzzy
msgid ""
"There is a new function parameter syntax ``/`` to indicate that some "
"function parameters must be specified positionally and cannot be used as "
"keyword arguments.  This is the same notation shown by ``help()`` for C "
"functions annotated with Larry Hastings' `Argument Clinic "
"<https://devguide.python.org/development-tools/clinic/>`__ tool."
msgstr ""
"일부 함수 매개 변수를 위치적으로 지정해야만 하고 키워드 인자로 사용할 수 없도록 지시하는 새로운 함수 매개 변수 문법 ``/`` "
"이 있습니다. 이것은 Larry Hastings의 `Argument Clinic <../howto/clinic.html>`_ 도구로"
" 어노테이트된 C 함수들에 대해 ``help()``\\가 보여주는 것과 같은 표기법입니다."

#: ../../whatsnew/3.8.rst:128
msgid ""
"In the following example, parameters *a* and *b* are positional-only, "
"while *c* or *d* can be positional or keyword, and *e* or *f* are "
"required to be keywords::"
msgstr ""
"다음 예에서, 매개 변수 *a*\\와 *b*\\는 위치 전용이며, *c*\\나 *d*\\는 위치나 키워드일 수 있으며, *e*\\나"
" *f*\\는 키워드 전용이어야 합니다::"

#: ../../whatsnew/3.8.rst:132
msgid ""
"def f(a, b, /, c, d, *, e, f):\n"
"    print(a, b, c, d, e, f)"
msgstr ""

#: ../../whatsnew/3.8.rst:135
msgid "The following is a valid call::"
msgstr "다음은 유효한 호출입니다::"

#: ../../whatsnew/3.8.rst:137
msgid "f(10, 20, 30, d=40, e=50, f=60)"
msgstr ""

#: ../../whatsnew/3.8.rst:139
msgid "However, these are invalid calls::"
msgstr "하지만, 다음은 잘못된 호출입니다::"

#: ../../whatsnew/3.8.rst:141
msgid ""
"f(10, b=20, c=30, d=40, e=50, f=60)   # b cannot be a keyword argument\n"
"f(10, 20, 30, 40, 50, f=60)           # e must be a keyword argument"
msgstr ""

#: ../../whatsnew/3.8.rst:144
msgid ""
"One use case for this notation is that it allows pure Python functions to"
" fully emulate behaviors of existing C coded functions.  For example, the"
" built-in :func:`divmod` function does not accept keyword arguments::"
msgstr ""
"이 표기법의 한 가지 사용 사례는 순수 파이썬 함수가 기존 C 코드 함수의 동작을 완전히 흉내 낼 수 있다는 것입니다. 예를 들어,"
" 내장 :func:`divmod` 함수는 키워드 인자를 허용하지 않습니다::"

#: ../../whatsnew/3.8.rst:148
msgid ""
"def divmod(a, b, /):\n"
"    \"Emulate the built in divmod() function\"\n"
"    return (a // b, a % b)"
msgstr ""

#: ../../whatsnew/3.8.rst:152
msgid ""
"Another use case is to preclude keyword arguments when the parameter name"
" is not helpful.  For example, the builtin :func:`len` function has the "
"signature ``len(obj, /)``.  This precludes awkward calls such as::"
msgstr ""
"또 다른 사용 사례는 매개 변수 이름이 도움이 되지 않을 때 키워드 인자를 배제하는 것입니다. 예를 들어, 내장 "
":func:`len` 함수의 서명은 ``len(obj, /)``\\입니다. 이것은 다음과 같은 어색한 호출을 금지합니다::"

#: ../../whatsnew/3.8.rst:156
msgid "len(obj='hello')  # The \"obj\" keyword argument impairs readability"
msgstr ""

#: ../../whatsnew/3.8.rst:158
msgid ""
"A further benefit of marking a parameter as positional-only is that it "
"allows the parameter name to be changed in the future without risk of "
"breaking client code.  For example, in the :mod:`statistics` module, the "
"parameter name *dist* may be changed in the future.  This was made "
"possible with the following function specification::"
msgstr ""
"매개 변수를 위치 전용으로 표시하면 클라이언트 코드를 손상할 위험 없이 매개 변수 이름을 나중에 변경할 수 있다는 추가적인 이점이 "
"있습니다. 예를 들어, :mod:`statistics` 모듈에서, 매개 변수 이름 *dist*\\는 나중에 변경될 수 있습니다. "
"이것은 다음과 같은 함수 명세 때문에 가능해졌습니다::"

#: ../../whatsnew/3.8.rst:164
msgid ""
"def quantiles(dist, /, *, n=4, method='exclusive')\n"
"    ..."
msgstr ""

#: ../../whatsnew/3.8.rst:167
msgid ""
"Since the parameters to the left of ``/`` are not exposed as possible "
"keywords, the parameters names remain available for use in ``**kwargs``::"
msgstr ""
"``/``\\의 왼쪽에 있는 매개 변수는 가능한 키워드로 노출되지 않기 때문에, 매개 변수 이름은 ``**kwargs``\\에서 "
"계속 사용할 수 있습니다::"

#: ../../whatsnew/3.8.rst:170
#, python-brace-format
msgid ""
">>> def f(a, b, /, **kwargs):\n"
"...     print(a, b, kwargs)\n"
"...\n"
">>> f(10, 20, a=1, b=2, c=3)         # a and b are used in two ways\n"
"10 20 {'a': 1, 'b': 2, 'c': 3}"
msgstr ""

#: ../../whatsnew/3.8.rst:176
msgid ""
"This greatly simplifies the implementation of functions and methods that "
"need to accept arbitrary keyword arguments.  For example, here is an "
"excerpt from code in the :mod:`collections` module::"
msgstr ""
"이는 임의의 키워드 인자를 받아들여야 하는 함수와 메서드의 구현을 크게 단순화합니다. 예를 들어, 다음은 "
":mod:`collections` 모듈의 코드에서 뽑아온 것입니다::"

#: ../../whatsnew/3.8.rst:180
msgid ""
"class Counter(dict):\n"
"\n"
"    def __init__(self, iterable=None, /, **kwds):\n"
"        # Note \"iterable\" is a possible keyword argument"
msgstr ""

#: ../../whatsnew/3.8.rst:185
msgid "See :pep:`570` for a full description."
msgstr "자세한 설명은 :pep:`570`\\을 참조하십시오."

#: ../../whatsnew/3.8.rst:187
msgid "(Contributed by Pablo Galindo in :issue:`36540`.)"
msgstr "(Contributed by Pablo Galindo in :issue:`36540`.)"

#: ../../whatsnew/3.8.rst:193
msgid "Parallel filesystem cache for compiled bytecode files"
msgstr "컴파일된 바이트 코드 파일을 위한 병렬 파일 시스템 캐시"

#: ../../whatsnew/3.8.rst:195
msgid ""
"The new :envvar:`PYTHONPYCACHEPREFIX` setting (also available as "
":option:`-X` ``pycache_prefix``) configures the implicit bytecode cache "
"to use a separate parallel filesystem tree, rather than the default "
"``__pycache__`` subdirectories within each source directory."
msgstr ""
"새 :envvar:`PYTHONPYCACHEPREFIX` 설정(:option:`-X` ``pycache_prefix``\\로도 사용"
" 가능합니다)은 각 소스 디렉터리 내의 기본 ``__pycache__`` 하위 디렉터리 대신 별도의 병렬 파일 시스템 트리를 "
"사용하도록 묵시적 바이트 코드 캐시를 구성합니다."

#: ../../whatsnew/3.8.rst:201
msgid ""
"The location of the cache is reported in :data:`sys.pycache_prefix` "
"(:const:`None` indicates the default location in ``__pycache__`` "
"subdirectories)."
msgstr ""
"캐시의 위치는 :data:`sys.pycache_prefix`\\로 보고됩니다 (:const:`None`\\은 "
"``__pycache__`` 하위 디렉터리의 기본 위치를 나타냅니다)."

#: ../../whatsnew/3.8.rst:205
msgid "(Contributed by Carl Meyer in :issue:`33499`.)"
msgstr "(Contributed by Carl Meyer in :issue:`33499`.)"

#: ../../whatsnew/3.8.rst:209
msgid "Debug build uses the same ABI as release build"
msgstr "디버그 빌드는 릴리스 빌드와 같은 ABI를 사용합니다."

#: ../../whatsnew/3.8.rst:211
msgid ""
"Python now uses the same ABI whether it's built in release or debug mode."
" On Unix, when Python is built in debug mode, it is now possible to load "
"C extensions built in release mode and C extensions built using the "
"stable ABI."
msgstr ""
"파이썬은 이제 릴리스나 디버그 모드 중 어느 것으로 빌드되더라도 같은 ABI를 사용합니다. 유닉스에서, 파이썬이 디버그 모드로 "
"빌드될 때, 이제 릴리스 모드로 빌드된 C 확장과 안정(stable) ABI를 사용해서 빌드된 C 확장을 로드할 수 있습니다."

#: ../../whatsnew/3.8.rst:215
#, fuzzy
msgid ""
"Release builds and :ref:`debug builds <debug-build>` are now ABI "
"compatible: defining the ``Py_DEBUG`` macro no longer implies the "
"``Py_TRACE_REFS`` macro, which introduces the only ABI incompatibility. "
"The ``Py_TRACE_REFS`` macro, which adds the :func:`sys.getobjects` "
"function and the :envvar:`PYTHONDUMPREFS` environment variable, can be "
"set using the new :option:`./configure --with-trace-refs <--with-trace-"
"refs>` build option. (Contributed by Victor Stinner in :issue:`36465`.)"
msgstr ""
"릴리스 빌드와 디버그 빌드는 이제 ABI 호환됩니다: ``Py_DEBUG`` 매크로를 정의하는 것은 더는 "
"``Py_TRACE_REFS`` 매크로를 암시하지 않습니다, 이것은 ABI 비 호환성만 도입할 뿐입니다. "
":func:`sys.getobjects` 함수와 :envvar:`PYTHONDUMPREFS` 환경 변수를 추가하는 "
"``Py_TRACE_REFS`` 매크로는 새로운 ``./configure --with-trace-refs`` 빌드 옵션을 사용하여 "
"설정할 수 있습니다. (Contributed by Victor Stinner in :issue:`36465`.)"

#: ../../whatsnew/3.8.rst:223
msgid ""
"On Unix, C extensions are no longer linked to libpython except on Android"
" and Cygwin. It is now possible for a statically linked Python to load a "
"C extension built using a shared library Python. (Contributed by Victor "
"Stinner in :issue:`21536`.)"
msgstr ""
"유닉스에서, C 확장은 안드로이드와 Cygwin을 제외하고는 더는 libpython에 링크되지 않습니다. 이제 정적으로 링크된 "
"파이썬이 공유 라이브러리 파이썬을 사용하여 빌드된 C 확장을 로드할 수 있습니다. (Contributed by Victor "
"Stinner in :issue:`21536`.)"

#: ../../whatsnew/3.8.rst:230
msgid ""
"On Unix, when Python is built in debug mode, import now also looks for C "
"extensions compiled in release mode and for C extensions compiled with "
"the stable ABI. (Contributed by Victor Stinner in :issue:`36722`.)"
msgstr ""
"유닉스에서, 파이썬이 디버그 모드로 빌드될 때, 임포트는 이제 릴리스 모드로 컴파일된 C 확장과 안정(stable) ABI로 "
"컴파일된 C 확장도 찾습니다. (Contributed by Victor Stinner in :issue:`36722`.)"

#: ../../whatsnew/3.8.rst:235
msgid ""
"To embed Python into an application, a new ``--embed`` option must be "
"passed to ``python3-config --libs --embed`` to get ``-lpython3.8`` (link "
"the application to libpython). To support both 3.8 and older, try "
"``python3-config --libs --embed`` first and fallback to ``python3-config "
"--libs`` (without ``--embed``) if the previous command fails."
msgstr ""
"파이썬을 응용 프로그램에 내장하려면, 새로운 ``--embed`` 옵션을 ``python3-config --libs "
"--embed``\\에 전달하여 ``-lpython3.8``\\을 얻어야 합니다 (응용 프로그램을 libpython에 링크합니다)."
" 3.8 이하를 모두 지원하려면, 먼저 ``python3-config --libs --embed``\\를 시도하고, 실패하면 "
"``python3-config --libs``\\(``--embed`` 없이)로 대체하십시오."

#: ../../whatsnew/3.8.rst:241
msgid ""
"Add a pkg-config ``python-3.8-embed`` module to embed Python into an "
"application: ``pkg-config python-3.8-embed --libs`` includes "
"``-lpython3.8``. To support both 3.8 and older, try ``pkg-config "
"python-X.Y-embed --libs`` first and fallback to ``pkg-config python-X.Y "
"--libs`` (without ``--embed``) if the previous command fails (replace "
"``X.Y`` with the Python version)."
msgstr ""
"파이썬을 응용 프로그램에 내장하기 위해, pkg-config ``python-3.8-embed`` 모듈을 추가했습니다: ``pkg-"
"config python-3.8-embed --libs`` 는 ``-lpython3.8``\\을 포함합니다. 3.8 이하를 모두 "
"지원하려면, 먼저 ``pkg-config python-X.Y-embed --libs`` 를 시도하고, 실패하면 ``pkg-"
"config python-X.Y --libs``\\(``--embed`` 없이)로 대체하십시오 (``X.Y``\\를 파이썬 버전으로"
" 교체하십시오)."

#: ../../whatsnew/3.8.rst:247
msgid ""
"On the other hand, ``pkg-config python3.8 --libs`` no longer contains "
"``-lpython3.8``. C extensions must not be linked to libpython (except on "
"Android and Cygwin, whose cases are handled by the script); this change "
"is backward incompatible on purpose. (Contributed by Victor Stinner in "
":issue:`36721`.)"
msgstr ""
"반면에, ``pkg-config python3.8 --libs`` 는 더는 ``-lpython3.8``\\을 포함하지 않습니다. C"
" 확장은 libpython에 링크되어서는 안 됩니다 (안드로이드와 Cygwin은 예외인데, 이들은 스크립트로 처리됩니다); 이 "
"변경은 의도적으로 이전 버전과 호환되지 않습니다. (Contributed by Victor Stinner in "
":issue:`36721`.)"

#: ../../whatsnew/3.8.rst:256
msgid "f-strings support ``=`` for self-documenting expressions and debugging"
msgstr "f-문자열은 스스로 설명하는 표현식과 디버깅을 위해 =\\ 를 지원합니다."

#: ../../whatsnew/3.8.rst:258
#, python-brace-format
msgid ""
"Added an ``=`` specifier to :term:`f-string`\\s. An f-string such as "
"``f'{expr=}'`` will expand to the text of the expression, an equal sign, "
"then the representation of the evaluated expression.  For example:"
msgstr ""
":term:`f-문자열 <f-string>`\\에 ``=`` 지정자를 추가했습니다. ``f'{expr=}'``\\과 같은 "
"f-문자열은 표현식의 텍스트, 등호, 평가된 표현식의 표현(repr)으로 확장됩니다. 예를 들어::"

#: ../../whatsnew/3.8.rst:267
msgid ""
"The usual :ref:`f-string format specifiers <f-strings>` allow more "
"control over how the result of the expression is displayed::"
msgstr ""
"일반적인 :ref:`f-문자열 포맷 지정자 <f-strings>`\\를 사용하면 표현식의 결과가 표시되는 방식을 더 잘 제어할 수 "
"있습니다::"

#: ../../whatsnew/3.8.rst:270
#, python-brace-format
msgid ""
">>> delta = date.today() - member_since\n"
">>> f'{user=!s}  {delta.days=:,d}'\n"
"'user=eric_idle  delta.days=16,075'"
msgstr ""

#: ../../whatsnew/3.8.rst:274
msgid ""
"The ``=`` specifier will display the whole expression so that "
"calculations can be shown::"
msgstr "``=`` 지정자는 계산을 표시할 수 있도록 전체 표현식을 표시합니다::"

#: ../../whatsnew/3.8.rst:277
#, python-brace-format
msgid ""
">>> print(f'{theta=}  {cos(radians(theta))=:.3f}')\n"
"theta=30  cos(radians(theta))=0.866"
msgstr ""

#: ../../whatsnew/3.8.rst:280
msgid "(Contributed by Eric V. Smith and Larry Hastings in :issue:`36817`.)"
msgstr "(Contributed by Eric V. Smith and Larry Hastings in :issue:`36817`.)"

#: ../../whatsnew/3.8.rst:284
msgid "PEP 578: Python Runtime Audit Hooks"
msgstr "PEP 578: 파이썬 런타임 감사 훅"

#: ../../whatsnew/3.8.rst:286
msgid ""
"The PEP adds an Audit Hook and Verified Open Hook. Both are available "
"from Python and native code, allowing applications and frameworks written"
" in pure Python code to take advantage of extra notifications, while also"
" allowing embedders or system administrators to deploy builds of Python "
"where auditing is always enabled."
msgstr ""
"이 PEP는 감사 훅(Audit Hook)과 확인된 열기 훅(Verified Open Hook)을 추가합니다. 둘 다 파이썬과 "
"네이티브 코드에서 사용 가능해서, 순수 파이썬 코드로 작성된 응용 프로그램과 프레임워크가 추가 알림을 활용할 수 있도록 함과 동시에"
" 임베더(embedder)나 시스템 관리자가 감사가 항상 활성화된 파이썬 빌드를 배치할 수 있도록 합니다."

#: ../../whatsnew/3.8.rst:292
msgid "See :pep:`578` for full details."
msgstr "자세한 설명은 :pep:`578`\\을 참조하십시오."

#: ../../whatsnew/3.8.rst:296
msgid "PEP 587: Python Initialization Configuration"
msgstr "PEP 587: 파이썬 초기화 구성"

#: ../../whatsnew/3.8.rst:298
msgid ""
"The :pep:`587` adds a new C API to configure the Python Initialization "
"providing finer control on the whole configuration and better error "
"reporting."
msgstr ""
":pep:`587`\\은 파이썬 초기화를 구성하는 새로운 C API를 추가하여 전체 구성에 대한 세밀한 제어와 개선된 에러 보고를 "
"제공합니다."

#: ../../whatsnew/3.8.rst:301
msgid "New structures:"
msgstr "새로운 구조체:"

#: ../../whatsnew/3.8.rst:303
msgid ":c:type:`PyConfig`"
msgstr ":c:type:`PyConfig`"

#: ../../whatsnew/3.8.rst:304
msgid ":c:type:`PyPreConfig`"
msgstr ":c:type:`PyPreConfig`"

#: ../../whatsnew/3.8.rst:305
msgid ":c:type:`PyStatus`"
msgstr ":c:type:`PyStatus`"

#: ../../whatsnew/3.8.rst:306
msgid ":c:type:`PyWideStringList`"
msgstr ":c:type:`PyWideStringList`"

#: ../../whatsnew/3.8.rst:308
msgid "New functions:"
msgstr "새로운 함수:"

#: ../../whatsnew/3.8.rst:310
msgid ":c:func:`PyConfig_Clear`"
msgstr ":c:func:`PyConfig_Clear`"

#: ../../whatsnew/3.8.rst:311
msgid ":c:func:`PyConfig_InitIsolatedConfig`"
msgstr ":c:func:`PyConfig_InitIsolatedConfig`"

#: ../../whatsnew/3.8.rst:312
msgid ":c:func:`PyConfig_InitPythonConfig`"
msgstr ":c:func:`PyConfig_InitPythonConfig`"

#: ../../whatsnew/3.8.rst:313
msgid ":c:func:`PyConfig_Read`"
msgstr ":c:func:`PyConfig_Read`"

#: ../../whatsnew/3.8.rst:314
msgid ":c:func:`PyConfig_SetArgv`"
msgstr ":c:func:`PyConfig_SetArgv`"

#: ../../whatsnew/3.8.rst:315
msgid ":c:func:`PyConfig_SetBytesArgv`"
msgstr ":c:func:`PyConfig_SetBytesArgv`"

#: ../../whatsnew/3.8.rst:316
msgid ":c:func:`PyConfig_SetBytesString`"
msgstr ":c:func:`PyConfig_SetBytesString`"

#: ../../whatsnew/3.8.rst:317
msgid ":c:func:`PyConfig_SetString`"
msgstr ":c:func:`PyConfig_SetString`"

#: ../../whatsnew/3.8.rst:318
msgid ":c:func:`PyPreConfig_InitIsolatedConfig`"
msgstr ":c:func:`PyPreConfig_InitIsolatedConfig`"

#: ../../whatsnew/3.8.rst:319
msgid ":c:func:`PyPreConfig_InitPythonConfig`"
msgstr ":c:func:`PyPreConfig_InitPythonConfig`"

#: ../../whatsnew/3.8.rst:320
msgid ":c:func:`PyStatus_Error`"
msgstr ":c:func:`PyStatus_Error`"

#: ../../whatsnew/3.8.rst:321
msgid ":c:func:`PyStatus_Exception`"
msgstr ":c:func:`PyStatus_Exception`"

#: ../../whatsnew/3.8.rst:322
msgid ":c:func:`PyStatus_Exit`"
msgstr ":c:func:`PyStatus_Exit`"

#: ../../whatsnew/3.8.rst:323
msgid ":c:func:`PyStatus_IsError`"
msgstr ":c:func:`PyStatus_IsError`"

#: ../../whatsnew/3.8.rst:324
msgid ":c:func:`PyStatus_IsExit`"
msgstr ":c:func:`PyStatus_IsExit`"

#: ../../whatsnew/3.8.rst:325
msgid ":c:func:`PyStatus_NoMemory`"
msgstr ":c:func:`PyStatus_NoMemory`"

#: ../../whatsnew/3.8.rst:326
msgid ":c:func:`PyStatus_Ok`"
msgstr ":c:func:`PyStatus_Ok`"

#: ../../whatsnew/3.8.rst:327
msgid ":c:func:`PyWideStringList_Append`"
msgstr ":c:func:`PyWideStringList_Append`"

#: ../../whatsnew/3.8.rst:328
msgid ":c:func:`PyWideStringList_Insert`"
msgstr ":c:func:`PyWideStringList_Insert`"

#: ../../whatsnew/3.8.rst:329
msgid ":c:func:`Py_BytesMain`"
msgstr ":c:func:`Py_BytesMain`"

#: ../../whatsnew/3.8.rst:330
msgid ":c:func:`Py_ExitStatusException`"
msgstr ":c:func:`Py_ExitStatusException`"

#: ../../whatsnew/3.8.rst:331
msgid ":c:func:`Py_InitializeFromConfig`"
msgstr ":c:func:`Py_InitializeFromConfig`"

#: ../../whatsnew/3.8.rst:332
msgid ":c:func:`Py_PreInitialize`"
msgstr ":c:func:`Py_PreInitialize`"

#: ../../whatsnew/3.8.rst:333
msgid ":c:func:`Py_PreInitializeFromArgs`"
msgstr ":c:func:`Py_PreInitializeFromArgs`"

#: ../../whatsnew/3.8.rst:334
msgid ":c:func:`Py_PreInitializeFromBytesArgs`"
msgstr ":c:func:`Py_PreInitializeFromBytesArgs`"

#: ../../whatsnew/3.8.rst:335
msgid ":c:func:`Py_RunMain`"
msgstr ":c:func:`Py_RunMain`"

#: ../../whatsnew/3.8.rst:337
msgid ""
"This PEP also adds ``_PyRuntimeState.preconfig`` (:c:type:`PyPreConfig` "
"type) and ``PyInterpreterState.config`` (:c:type:`PyConfig` type) fields "
"to these internal structures. ``PyInterpreterState.config`` becomes the "
"new reference configuration, replacing global configuration variables and"
" other private variables."
msgstr ""
"이 PEP는 이러한 내부 구조체에 ``_PyRuntimeState.preconfig``\\(:c:type:`PyPreConfig` "
"형)와 ``PyInterpreterState.config`` (:c:type:`PyConfig` 형) 필드를 추가합니다. "
"``PyInterpreterState.config``\\는 전역 구성 변수와 기타 내부(private) 변수를 대체하는 새로운 참조"
" 구성이 됩니다."

#: ../../whatsnew/3.8.rst:343
msgid ""
"See :ref:`Python Initialization Configuration <init-config>` for the "
"documentation."
msgstr "설명서는 :ref:`파이썬 초기화 구성 <init-config>`\\을 참조하십시오."

#: ../../whatsnew/3.8.rst:346
msgid "See :pep:`587` for a full description."
msgstr "자세한 설명은 :pep:`587`\\을 참조하십시오."

#: ../../whatsnew/3.8.rst:348
msgid "(Contributed by Victor Stinner in :issue:`36763`.)"
msgstr "(Contributed by Victor Stinner in :issue:`36763`.)"

#: ../../whatsnew/3.8.rst:352
msgid "PEP 590: Vectorcall: a fast calling protocol for CPython"
msgstr "PEP 590: 벡터콜: CPython을 위한 빠른 호출 프로토콜"

#: ../../whatsnew/3.8.rst:354
#, fuzzy
msgid ""
":ref:`vectorcall` is added to the Python/C API. It is meant to formalize "
"existing optimizations which were already done for various classes. Any "
":ref:`static type <static-types>` implementing a callable can use this "
"protocol."
msgstr ""
":ref:`vectorcall`\\이 파이썬/C API에 추가되었습니다. 이것은 이미 다양한 클래스에 대해 수행된 기존 최적화를 "
"형식화하기 위한 것입니다. 콜러블을 구현하는 모든 정적인 형은 이 프로토콜을 사용할 수 있습니다."

#: ../../whatsnew/3.8.rst:360
msgid ""
"This is currently provisional. The aim is to make it fully public in "
"Python 3.9."
msgstr "이것은 현재 잠정적(provisional)입니다. 목표는 파이썬 3.9에서 완전히 공개하는 것입니다."

#: ../../whatsnew/3.8.rst:363
msgid "See :pep:`590` for a full description."
msgstr "자세한 설명은 :pep:`590`\\을 참조하십시오."

#: ../../whatsnew/3.8.rst:365
msgid ""
"(Contributed by Jeroen Demeyer, Mark Shannon and Petr Viktorin in "
":issue:`36974`.)"
msgstr ""
"(Contributed by Jeroen Demeyer, Mark Shannon and Petr Viktorin in "
":issue:`36974`.)"

#: ../../whatsnew/3.8.rst:369
msgid "Pickle protocol 5 with out-of-band data buffers"
msgstr "아웃 오브 밴드 데이터 버퍼를 사용하는 피클 프로토콜 5"

#: ../../whatsnew/3.8.rst:371
msgid ""
"When :mod:`pickle` is used to transfer large data between Python "
"processes in order to take advantage of multi-core or multi-machine "
"processing, it is important to optimize the transfer by reducing memory "
"copies, and possibly by applying custom techniques such as data-dependent"
" compression."
msgstr ""
"멀티 코어나 멀티 머신 프로세싱을 활용하기 위해 :mod:`pickle`\\을 사용해서 파이썬 프로세스 간에 큰 데이터를 전송할 "
"때, 메모리 복사를 줄이고 데이터 종속적 압축과 같은 사용자 정의 기술을 적용하여 전송을 최적화하는 것이 중요합니다."

#: ../../whatsnew/3.8.rst:376
msgid ""
"The :mod:`pickle` protocol 5 introduces support for out-of-band buffers "
"where :pep:`3118`-compatible data can be transmitted separately from the "
"main pickle stream, at the discretion of the communication layer."
msgstr ""
":mod:`pickle` 프로토콜 5는 통신 계층의 재량에 따라 :pep:`3118` 호환 데이터가 주 피클 스트림과 별도로 전송될"
" 수 있는 아웃 오브 밴드 버퍼를 지원합니다."

#: ../../whatsnew/3.8.rst:380
msgid "See :pep:`574` for a full description."
msgstr "자세한 설명은 :pep:`574`\\를 참조하십시오."

#: ../../whatsnew/3.8.rst:382
msgid "(Contributed by Antoine Pitrou in :issue:`36785`.)"
msgstr "(Contributed by Antoine Pitrou in :issue:`36785`.)"

#: ../../whatsnew/3.8.rst:386
msgid "Other Language Changes"
msgstr "기타 언어 변경"

#: ../../whatsnew/3.8.rst:388
msgid ""
"A :keyword:`continue` statement was illegal in the :keyword:`finally` "
"clause due to a problem with the implementation.  In Python 3.8 this "
"restriction was lifted. (Contributed by Serhiy Storchaka in "
":issue:`32489`.)"
msgstr ""
":keyword:`continue` 문은 구현 문제로 인해 :keyword:`finally` 절에서 사용할 수 없었습니다. 파이썬 "
"3.8에서는 이 제한이 제거되었습니다. (Contributed by Serhiy Storchaka in "
":issue:`32489`.)"

#: ../../whatsnew/3.8.rst:393
msgid ""
"The :class:`bool`, :class:`int`, and :class:`fractions.Fraction` types "
"now have an :meth:`~int.as_integer_ratio` method like that found in "
":class:`float` and :class:`decimal.Decimal`.  This minor API extension "
"makes it possible to write ``numerator, denominator = "
"x.as_integer_ratio()`` and have it work across multiple numeric types. "
"(Contributed by Lisa Roach in :issue:`33073` and Raymond Hettinger in "
":issue:`37819`.)"
msgstr ""
":class:`bool`, :class:`int` 및 :class:`fractions.Fraction` 형에는 이제 "
":class:`float`\\와 :class:`decimal.Decimal`\\에서 발견되는 것과 유사한 "
":meth:`~int.as_integer_ratio` 메서드가 있습니다. 이 작은 API 확장을 통해 ``numerator, "
"denominator = x.as_integer_ratio()``\\라고 쓰고 여러 숫자 형에서 작동하도록 할 수 있습니다. "
"(Contributed by Lisa Roach in :issue:`33073` and Raymond Hettinger in "
":issue:`37819`.)"

#: ../../whatsnew/3.8.rst:401
msgid ""
"Constructors of :class:`int`, :class:`float` and :class:`complex` will "
"now use the :meth:`~object.__index__` special method, if available and "
"the corresponding method :meth:`~object.__int__`, "
":meth:`~object.__float__` or :meth:`~object.__complex__` is not "
"available. (Contributed by Serhiy Storchaka in :issue:`20092`.)"
msgstr ""
":class:`int`, :class:`float` 및 :class:`complex`\\의 생성자는 이제 해당 메서드 "
":meth:`~object.__int__`, :meth:`~object.__float__` 또는 "
":meth:`~object.__complex__`\\를 사용할 수 없을 때, :meth:`~object.__index__` 특수 "
"메서드가 있으면 사용할 수 있습니다. (Contributed by Serhiy Storchaka in :issue:`20092`.)"

#: ../../whatsnew/3.8.rst:407
#, fuzzy, python-brace-format
msgid ""
"Added support of :samp:`\\\\N\\\\{{name}\\\\}` escapes in :mod:`regular "
"expressions <re>`::"
msgstr ":mod:`정규식 <re>`\\에 ``\\N{name}`` 이스케이프 지원이 추가되었습니다::"

#: ../../whatsnew/3.8.rst:409
#, python-brace-format
msgid ""
">>> notice = 'Copyright © 2019'\n"
">>> copyright_year_pattern = re.compile(r'\\N{copyright "
"sign}\\s*(\\d{4})')\n"
">>> int(copyright_year_pattern.search(notice).group(1))\n"
"2019"
msgstr ""

#: ../../whatsnew/3.8.rst:414
msgid "(Contributed by Jonathan Eunice and Serhiy Storchaka in :issue:`30688`.)"
msgstr "(Contributed by Jonathan Eunice and Serhiy Storchaka in :issue:`30688`.)"

#: ../../whatsnew/3.8.rst:416
msgid ""
"Dict and dictviews are now iterable in reversed insertion order using "
":func:`reversed`. (Contributed by Rémi Lapeyre in :issue:`33462`.)"
msgstr ""
"이제 딕셔너리와 딕셔너리 뷰는 :func:`reversed`\\를 사용하여 삽입 순서의 역순으로 이터레이트 할 수 있습니다. "
"(Contributed by Rémi Lapeyre in :issue:`33462`.)"

#: ../../whatsnew/3.8.rst:419
msgid ""
"The syntax allowed for keyword names in function calls was further "
"restricted. In particular, ``f((keyword)=arg)`` is no longer allowed. It "
"was never intended to permit more than a bare name on the left-hand side "
"of a keyword argument assignment term. (Contributed by Benjamin Peterson "
"in :issue:`34641`.)"
msgstr ""
"함수 호출에서 키워드 이름에 허용된 문법이 더 제한되었습니다. 특히, ``f((keyword)=arg)``\\는 더는 허용되지 "
"않습니다. 키워드 인자 대입 항의 왼쪽에 이름 그대로 이상의 것을 허용하려는 의도는 결코 없었습니다. (Contributed by "
"Benjamin Peterson in :issue:`34641`.)"

#: ../../whatsnew/3.8.rst:425
msgid ""
"Generalized iterable unpacking in :keyword:`yield` and :keyword:`return` "
"statements no longer requires enclosing parentheses. This brings the "
"*yield* and *return* syntax into better agreement with normal assignment "
"syntax::"
msgstr ""
":keyword:`yield`\\와 :keyword:`return` 문에서의 일반화된 이터러블 언 패킹은 더는 둘러싸는 괄호를 "
"요구하지 않습니다. 이는 *yield*\\와 *return* 문법이 일반 대입 문법과 더 잘 일치하도록 만듭니다::"

#: ../../whatsnew/3.8.rst:430
msgid ""
">>> def parse(family):\n"
"        lastname, *members = family.split()\n"
"        return lastname.upper(), *members\n"
"\n"
">>> parse('simpsons homer marge bart lisa maggie')\n"
"('SIMPSONS', 'homer', 'marge', 'bart', 'lisa', 'maggie')"
msgstr ""

#: ../../whatsnew/3.8.rst:437
msgid "(Contributed by David Cuthbert and Jordan Chapman in :issue:`32117`.)"
msgstr "(Contributed by David Cuthbert and Jordan Chapman in :issue:`32117`.)"

#: ../../whatsnew/3.8.rst:439
msgid ""
"When a comma is missed in code such as ``[(10, 20) (30, 40)]``, the "
"compiler displays a :exc:`SyntaxWarning` with a helpful suggestion. This "
"improves on just having a :exc:`TypeError` indicating that the first "
"tuple was not callable.  (Contributed by Serhiy Storchaka in "
":issue:`15248`.)"
msgstr ""
"``[(10, 20) (30, 40)]``\\와 같은 코드에서처럼 쉼표가 빠질 때, 컴파일러는 유용한 제안과 함께 "
":exc:`SyntaxWarning`\\을 표시합니다. 이것은 단지 첫 번째 튜플이 콜러블이 아니라고 알리는 "
":exc:`TypeError`\\를 개선한 것입니다. (Contributed by Serhiy Storchaka in "
":issue:`15248`.)"

#: ../../whatsnew/3.8.rst:445
msgid ""
"Arithmetic operations between subclasses of :class:`datetime.date` or "
":class:`datetime.datetime` and :class:`datetime.timedelta` objects now "
"return an instance of the subclass, rather than the base class. This also"
" affects the return type of operations whose implementation (directly or "
"indirectly) uses :class:`datetime.timedelta` arithmetic, such as "
":meth:`~datetime.datetime.astimezone`. (Contributed by Paul Ganssle in "
":issue:`32417`.)"
msgstr ""
":class:`datetime.date`\\나 :class:`datetime.datetime`\\의 서브 클래스와 "
":class:`datetime.timedelta` 객체 간의 산술 연산은 이제 베이스 클래스가 아닌 서브 클래스의 인스턴스를 "
"반환합니다. 이는 :meth:`~datetime.datetime.astimezone`\\과 같은 "
":class:`datetime.timedelta` 산술을 직접 또는 간접적으로 사용하는 연산의 반환형에도 영향을 줍니다. "
"(Contributed by Paul Ganssle in :issue:`32417`.)"

#: ../../whatsnew/3.8.rst:453
msgid ""
"When the Python interpreter is interrupted by Ctrl-C (SIGINT) and the "
"resulting :exc:`KeyboardInterrupt` exception is not caught, the Python "
"process now exits via a SIGINT signal or with the correct exit code such "
"that the calling process can detect that it died due to a Ctrl-C.  Shells"
" on POSIX and Windows use this to properly terminate scripts in "
"interactive sessions. (Contributed by Google via Gregory P. Smith in "
":issue:`1054041`.)"
msgstr ""
"파이썬 인터프리터가 Ctrl-C(SIGINT)에 의해 인터럽트 되고 그로 인한 :exc:`KeyboardInterrupt` 예외가 "
"잡히지 않으면, 파이썬 프로세스는 이제 Ctrl-C로 인해 죽었다는 것을 호출한 프로세스가 감지할 수 있도록 SIGINT 시그널을 "
"통해서나 올바른 종료 코드를 통해 종료합니다. POSIX와 윈도우의 셸은 대화식 세션에서 스크립트를 올바르게 종료하기 위해 이를 "
"사용합니다. (Contributed by Google via Gregory P. Smith in :issue:`1054041`.)"

#: ../../whatsnew/3.8.rst:460
msgid ""
"Some advanced styles of programming require updating the "
":class:`types.CodeType` object for an existing function.  Since code "
"objects are immutable, a new code object needs to be created, one that is"
" modeled on the existing code object.  With 19 parameters, this was "
"somewhat tedious.  Now, the new ``replace()`` method makes it possible to"
" create a clone with a few altered parameters."
msgstr ""
"일부 고급 프로그래밍 스타일은 기존 함수에 대한 :class:`types.CodeType` 객체를 갱신할 필요가 있습니다. 코드 "
"객체는 불변이므로, 기존 코드 객체에 기반하는 새 코드 객체를 만들어야 합니다. 19개의 매개 변수 때문에, 다소 지루했습니다. "
"이제, 새로운 ``replace()`` 메서드를 사용하면 몇 가지 변경된 매개 변수만으로 복제본을 만들 수 있습니다."

#: ../../whatsnew/3.8.rst:467
msgid ""
"Here's an example that alters the :func:`statistics.mean` function to "
"prevent the *data* parameter from being used as a keyword argument::"
msgstr "다음은 *data* 매개 변수가 키워드 인자로 사용되지 않도록 :func:`statistics.mean` 함수를 변경하는 예입니다::"

#: ../../whatsnew/3.8.rst:470
msgid ""
">>> from statistics import mean\n"
">>> mean(data=[10, 20, 90])\n"
"40\n"
">>> mean.__code__ = mean.__code__.replace(co_posonlyargcount=1)\n"
">>> mean(data=[10, 20, 90])\n"
"Traceback (most recent call last):\n"
"  ...\n"
"TypeError: mean() got some positional-only arguments passed as keyword "
"arguments: 'data'"
msgstr ""

#: ../../whatsnew/3.8.rst:479
msgid "(Contributed by Victor Stinner in :issue:`37032`.)"
msgstr "(Contributed by Victor Stinner in :issue:`37032`.)"

#: ../../whatsnew/3.8.rst:481
msgid ""
"For integers, the three-argument form of the :func:`pow` function now "
"permits the exponent to be negative in the case where the base is "
"relatively prime to the modulus. It then computes a modular inverse to "
"the base when the exponent is ``-1``, and a suitable power of that "
"inverse for other negative exponents.  For example, to compute the "
"`modular multiplicative inverse "
"<https://en.wikipedia.org/wiki/Modular_multiplicative_inverse>`_ of 38 "
"modulo 137, write::"
msgstr ""
"정수의 경우, :func:`pow` 함수의 세 인자 형식은 이제 밑이 모듈러스와 서로소일 때 음수 지수를 허용합니다. 지수가 "
"``-1``\\일 때 밑에 대한 모듈러 역수를 계산하고, 다른 음수 지수에 대해서는 그 역수의 적절한 거듭제곱을 계산합니다. 예를 "
"들어, 모듈로 137에 대한 38의 `모듈러 역수 "
"<https://en.wikipedia.org/wiki/Modular_multiplicative_inverse>`_\\를 "
"계산하려면, 다음과 같이 작성하십시오::"

#: ../../whatsnew/3.8.rst:490
msgid ""
">>> pow(38, -1, 137)\n"
"119\n"
">>> 119 * 38 % 137\n"
"1"
msgstr ""

#: ../../whatsnew/3.8.rst:495
msgid ""
"Modular inverses arise in the solution of `linear Diophantine equations "
"<https://en.wikipedia.org/wiki/Diophantine_equation>`_. For example, to "
"find integer solutions for ``4258𝑥 + 147𝑦 = 369``, first rewrite as "
"``4258𝑥 ≡ 369 (mod 147)`` then solve:"
msgstr ""
"모듈러 역수는 `선형 디오판토스 방정식(linear Diophantine equations) "
"<https://en.wikipedia.org/wiki/Diophantine_equation>`_\\의 해에서 나타납니다. 예를 "
"들어, ``4258𝑥 + 147𝑦 = 369``\\에 대한 정수해를 찾으려면, 먼저 ``4258𝑥 ≡ 369 (mod "
"147)``\\로 다시 쓴 다음 해를 구하십시오:"

#: ../../whatsnew/3.8.rst:505
msgid "(Contributed by Mark Dickinson in :issue:`36027`.)"
msgstr "(Contributed by Mark Dickinson in :issue:`36027`.)"

#: ../../whatsnew/3.8.rst:507
msgid ""
"Dict comprehensions have been synced-up with dict literals so that the "
"key is computed first and the value second::"
msgstr "키가 먼저 계산되고 값이 두 번째로 계산되도록, 딕셔너리 컴프리헨션은 딕셔너리 리터럴과 동기화되었습니다::"

#: ../../whatsnew/3.8.rst:510
#, python-brace-format
msgid ""
">>> # Dict comprehension\n"
">>> cast = {input('role? '): input('actor? ') for i in range(2)}\n"
"role? King Arthur\n"
"actor? Chapman\n"
"role? Black Knight\n"
"actor? Cleese\n"
"\n"
">>> # Dict literal\n"
">>> cast = {input('role? '): input('actor? ')}\n"
"role? Sir Robin\n"
"actor? Eric Idle"
msgstr ""

#: ../../whatsnew/3.8.rst:522
msgid ""
"The guaranteed execution order is helpful with assignment expressions "
"because variables assigned in the key expression will be available in the"
" value expression::"
msgstr "키 표현식에서 대입된 변수를 값 표현식에서 사용할 수 있기 때문에, 보장된 실행 순서는 대입 표현식에 유용합니다::"

#: ../../whatsnew/3.8.rst:526
#, python-brace-format
msgid ""
">>> names = ['Martin von Löwis', 'Łukasz Langa', 'Walter Dörwald']\n"
">>> {(n := normalize('NFC', name)).casefold() : n for name in names}\n"
"{'martin von löwis': 'Martin von Löwis',\n"
" 'łukasz langa': 'Łukasz Langa',\n"
" 'walter dörwald': 'Walter Dörwald'}"
msgstr ""

#: ../../whatsnew/3.8.rst:532
msgid "(Contributed by Jörn Heissler in :issue:`35224`.)"
msgstr "(Contributed by Jörn Heissler in :issue:`35224`.)"

#: ../../whatsnew/3.8.rst:534
msgid ""
"The :meth:`object.__reduce__` method can now return a tuple from two to "
"six elements long. Formerly, five was the limit.  The new, optional sixth"
" element is a callable with a ``(obj, state)`` signature.  This allows "
"the direct control over the state-updating behavior of a specific object."
"  If not *None*, this callable will have priority over the object's "
":meth:`~__setstate__` method. (Contributed by Pierre Glaser and Olivier "
"Grisel in :issue:`35900`.)"
msgstr ""
":meth:`object.__reduce__` 메서드는 이제 2개에서 6개 요소 길이의 튜플을 반환할 수 있습니다. 이전에는 5가 "
"한계였습니다. 새로운 선택적 여섯 번째 요소는 ``(obj, state)`` 서명을 갖는 콜러블입니다. 이를 통해 특정 객체의 상태"
" 갱신 동작을 직접 제어할 수 있습니다. *None*\\이 아니면, 이 콜러블은 객체의 :meth:`~__setstate__` "
"메서드보다 우선합니다. (Contributed by Pierre Glaser and Olivier Grisel in "
":issue:`35900`.)"

#: ../../whatsnew/3.8.rst:543
msgid "New Modules"
msgstr "새 모듈"

#: ../../whatsnew/3.8.rst:545
msgid ""
"The new :mod:`importlib.metadata` module provides (provisional) support "
"for reading metadata from third-party packages.  For example, it can "
"extract an installed package's version number, list of entry points, and "
"more::"
msgstr ""
"새로운 :mod:`importlib.metadata` 모듈은 제삼자 패키지에서 메타 데이터를 읽을 수 있도록 (잠정적으로) "
"지원합니다. 예를 들어, 설치된 패키지의 버전 번호, 진입점 목록 등을 추출 할 수 있습니다::"

#: ../../whatsnew/3.8.rst:549
msgid ""
">>> # Note following example requires that the popular \"requests\"\n"
">>> # package has been installed.\n"
">>>\n"
">>> from importlib.metadata import version, requires, files\n"
">>> version('requests')\n"
"'2.22.0'\n"
">>> list(requires('requests'))\n"
"['chardet (<3.1.0,>=3.0.2)']\n"
">>> list(files('requests'))[:5]\n"
"[PackagePath('requests-2.22.0.dist-info/INSTALLER'),\n"
" PackagePath('requests-2.22.0.dist-info/LICENSE'),\n"
" PackagePath('requests-2.22.0.dist-info/METADATA'),\n"
" PackagePath('requests-2.22.0.dist-info/RECORD'),\n"
" PackagePath('requests-2.22.0.dist-info/WHEEL')]"
msgstr ""

#: ../../whatsnew/3.8.rst:564
msgid "(Contributed by Barry Warsaw and Jason R. Coombs in :issue:`34632`.)"
msgstr "(Contributed by Barry Warsaw and Jason R. Coombs in :issue:`34632`.)"

#: ../../whatsnew/3.8.rst:568
msgid "Improved Modules"
msgstr "개선된 모듈"

#: ../../whatsnew/3.8.rst:571
msgid "ast"
msgstr "ast"

#: ../../whatsnew/3.8.rst:573
msgid ""
"AST nodes now have ``end_lineno`` and ``end_col_offset`` attributes, "
"which give the precise location of the end of the node.  (This only "
"applies to nodes that have ``lineno`` and ``col_offset`` attributes.)"
msgstr ""
"이제 AST 노드는 노드 끝의 정확한 위치를 제공하는 ``end_lineno``\\와 ``end_col_offset`` 어트리뷰트를"
" 가집니다. (이것은 ``lineno``\\와 ``col_offset`` 어트리뷰트가 있는 노드에만 적용됩니다.)"

#: ../../whatsnew/3.8.rst:577
msgid ""
"New function :func:`ast.get_source_segment` returns the source code for a"
" specific AST node."
msgstr "새 함수 :func:`ast.get_source_segment`\\는 특정 AST 노드의 소스 코드를 반환합니다."

#: ../../whatsnew/3.8.rst:580
msgid "(Contributed by Ivan Levkivskyi in :issue:`33416`.)"
msgstr "(Contributed by Ivan Levkivskyi in :issue:`33416`.)"

#: ../../whatsnew/3.8.rst:582
msgid "The :func:`ast.parse` function has some new flags:"
msgstr ":func:`ast.parse` 함수에는 몇 가지 새로운 플래그가 있습니다:"

#: ../../whatsnew/3.8.rst:584
msgid ""
"``type_comments=True`` causes it to return the text of :pep:`484` and "
":pep:`526` type comments associated with certain AST nodes;"
msgstr ""
"``type_comments=True``\\는 특정 AST 노드와 연관된 :pep:`484`\\와 :pep:`526` 형 주석의 "
"텍스트를 반환하도록 합니다;"

#: ../../whatsnew/3.8.rst:587
msgid ""
"``mode='func_type'`` can be used to parse :pep:`484` \"signature type "
"comments\" (returned for function definition AST nodes);"
msgstr ""
"``mode='func_type'``\\은 :pep:`484` \"서명 형 주석\"(함수 정의 AST 노드에 대해 반환됩니다)을 "
"구문 분석하는 데 사용될 수 있습니다;"

#: ../../whatsnew/3.8.rst:590
msgid ""
"``feature_version=(3, N)`` allows specifying an earlier Python 3 version."
"  For example, ``feature_version=(3, 4)`` will treat :keyword:`async` and"
" :keyword:`await` as non-reserved words."
msgstr ""
"``feature_version=(3, N)``\\은 이전 버전의 파이썬 3을 지정할 수 있게 합니다. 예를 들어, "
"``feature_version=(3, 4)``\\는 :keyword:`async`\\와 :keyword:`await`\\를 "
"예약어가 아닌 단어로 취급합니다."

#: ../../whatsnew/3.8.rst:594
msgid "(Contributed by Guido van Rossum in :issue:`35766`.)"
msgstr "(Contributed by Guido van Rossum in :issue:`35766`.)"

#: ../../whatsnew/3.8.rst:598
msgid "asyncio"
msgstr "asyncio"

#: ../../whatsnew/3.8.rst:600
msgid ""
":func:`asyncio.run` has graduated from the provisional to stable API. "
"This function can be used to execute a :term:`coroutine` and return the "
"result while automatically managing the event loop. For example::"
msgstr ""
":func:`asyncio.run`\\은 임시 API를 졸업하고 안정 API가 되었습니다. 이 함수는 이벤트 루프를 자동으로 "
"관리하면서 :term:`코루틴 <coroutine>`\\을 실행하고 결과를 반환하는 데 사용할 수 있습니다. 예를 들면::"

#: ../../whatsnew/3.8.rst:604
msgid ""
"import asyncio\n"
"\n"
"async def main():\n"
"    await asyncio.sleep(0)\n"
"    return 42\n"
"\n"
"asyncio.run(main())"
msgstr ""

#: ../../whatsnew/3.8.rst:612
msgid "This is *roughly* equivalent to::"
msgstr "이것은 *대략* 다음과 동등합니다::"

#: ../../whatsnew/3.8.rst:614
msgid ""
"import asyncio\n"
"\n"
"async def main():\n"
"    await asyncio.sleep(0)\n"
"    return 42\n"
"\n"
"loop = asyncio.new_event_loop()\n"
"asyncio.set_event_loop(loop)\n"
"try:\n"
"    loop.run_until_complete(main())\n"
"finally:\n"
"    asyncio.set_event_loop(None)\n"
"    loop.close()"
msgstr ""

#: ../../whatsnew/3.8.rst:629
msgid ""
"The actual implementation is significantly more complex. Thus, "
":func:`asyncio.run` should be the preferred way of running asyncio "
"programs."
msgstr ""
"실제 구현은 훨씬 더 복잡합니다. 따라서, :func:`asyncio.run`\\은 asyncio 프로그램을 실행하는 데 선호되는 "
"방법이어야 합니다."

#: ../../whatsnew/3.8.rst:632
msgid "(Contributed by Yury Selivanov in :issue:`32314`.)"
msgstr "(Contributed by Yury Selivanov in :issue:`32314`.)"

#: ../../whatsnew/3.8.rst:634
msgid ""
"Running ``python -m asyncio`` launches a natively async REPL.  This "
"allows rapid experimentation with code that has a top-level "
":keyword:`await`.  There is no longer a need to directly call "
"``asyncio.run()`` which would spawn a new event loop on every invocation:"
msgstr ""
"``python -m asyncio``\\를 실행하면 네이티브 하게 비동기 REPL을 시작합니다. 이를 통해 최상위 "
":keyword:`await`\\가 있는 코드를 빠르게 실험할 수 있습니다. 더는 호출할 때마다 새로운 이벤트 루프를 만드는 "
"``asyncio.run()``\\을 직접 호출할 필요가 없습니다:"

#: ../../whatsnew/3.8.rst:639
msgid ""
"$ python -m asyncio\n"
"asyncio REPL 3.8.0\n"
"Use \"await\" directly instead of \"asyncio.run()\".\n"
"Type \"help\", \"copyright\", \"credits\" or \"license\" for more "
"information.\n"
">>> import asyncio\n"
">>> await asyncio.sleep(10, result='hello')\n"
"hello"
msgstr ""

#: ../../whatsnew/3.8.rst:649
msgid "(Contributed by Yury Selivanov in :issue:`37028`.)"
msgstr "(Contributed by Yury Selivanov in :issue:`37028`.)"

#: ../../whatsnew/3.8.rst:651 ../../whatsnew/3.8.rst:1970
msgid ""
"The exception :class:`asyncio.CancelledError` now inherits from "
":class:`BaseException` rather than :class:`Exception` and no longer "
"inherits from :class:`concurrent.futures.CancelledError`. (Contributed by"
" Yury Selivanov in :issue:`32528`.)"
msgstr ""
":class:`asyncio.CancelledError` 예외는 이제 :class:`Exception`\\이 아닌 "
":class:`BaseException`\\을 상속하고, 더는 "
":class:`concurrent.futures.CancelledError`\\를 상속하지 않습니다. (Contributed by "
"Yury Selivanov in :issue:`32528`.)"

#: ../../whatsnew/3.8.rst:656
msgid ""
"On Windows, the default event loop is now "
":class:`~asyncio.ProactorEventLoop`. (Contributed by Victor Stinner in "
":issue:`34687`.)"
msgstr ""
"윈도우에서, 기본 이벤트 루프는 이제 :class:`~asyncio.ProactorEventLoop` 입니다. "
"(Contributed by Victor Stinner in :issue:`34687`.)"

#: ../../whatsnew/3.8.rst:659
msgid ""
":class:`~asyncio.ProactorEventLoop` now also supports UDP. (Contributed "
"by Adam Meily and Andrew Svetlov in :issue:`29883`.)"
msgstr ""
":class:`~asyncio.ProactorEventLoop`\\는 이제 UDP도 지원합니다. (Contributed by "
"Adam Meily and Andrew Svetlov in :issue:`29883`.)"

#: ../../whatsnew/3.8.rst:662
msgid ""
":class:`~asyncio.ProactorEventLoop` can now be interrupted by "
":exc:`KeyboardInterrupt` (\"CTRL+C\"). (Contributed by Vladimir Matveev "
"in :issue:`23057`.)"
msgstr ""
"이제 :class:`~asyncio.ProactorEventLoop`\\가 "
":exc:`KeyboardInterrupt`\\(\"CTRL+C\")에 의해 인터럽트 될 수 있습니다. (Contributed by"
" Vladimir Matveev in :issue:`23057`.)"

#: ../../whatsnew/3.8.rst:666
msgid ""
"Added :meth:`asyncio.Task.get_coro` for getting the wrapped coroutine "
"within an :class:`asyncio.Task`. (Contributed by Alex Grönholm in "
":issue:`36999`.)"
msgstr ""
":class:`asyncio.Task` 내에 래핑 된 코루틴을 얻기 위한 :meth:`asyncio.Task.get_coro`\\를"
" 추가했습니다. (Contributed by Alex Grönholm in :issue:`36999`.)"

#: ../../whatsnew/3.8.rst:670
msgid ""
"Asyncio tasks can now be named, either by passing the ``name`` keyword "
"argument to :func:`asyncio.create_task` or the "
":meth:`~asyncio.loop.create_task` event loop method, or by calling the "
":meth:`~asyncio.Task.set_name` method on the task object. The task name "
"is visible in the ``repr()`` output of :class:`asyncio.Task` and can also"
" be retrieved using the :meth:`~asyncio.Task.get_name` method. "
"(Contributed by Alex Grönholm in :issue:`34270`.)"
msgstr ""
"이제 ``name`` 키워드 인자를 :func:`asyncio.create_task`\\나 "
":meth:`~asyncio.loop.create_task` 이벤트 루프 메서드에 전달하거나, 태스크 객체의 "
":meth:`~asyncio.Task.set_name` 메서드를 호출하여 asyncio 태스크의 이름을 지정할 수 있습니다. 태스크"
" 이름은 :class:`asyncio.Task`\\의 ``repr()`` 출력에 표시되며 "
":meth:`~asyncio.Task.get_name` 메서드를 사용하여 조회할 수도 있습니다. (Contributed by "
"Alex Grönholm in :issue:`34270`.)"

#: ../../whatsnew/3.8.rst:678
msgid ""
"Added support for `Happy Eyeballs "
"<https://en.wikipedia.org/wiki/Happy_Eyeballs>`_ to "
":func:`asyncio.loop.create_connection`. To specify the behavior, two new "
"parameters have been added: *happy_eyeballs_delay* and *interleave*. The "
"Happy Eyeballs algorithm improves responsiveness in applications that "
"support IPv4 and IPv6 by attempting to simultaneously connect using both."
" (Contributed by twisteroid ambassador in :issue:`33530`.)"
msgstr ""
":func:`asyncio.loop.create_connection`\\에 `Happy Eyeballs "
"<https://en.wikipedia.org/wiki/Happy_Eyeballs>`_\\에 대한 지원이 추가되었습니다. 동작을 "
"지정하기 위해, 두 개의 매개변수가 추가되었습니다: *happy_eyeballs_delay*\\와 *interleave*. "
"Happy Eyeballs 알고리즘은 IPv4와 IPv6을 지원하는 응용 프로그램에서 둘 모두를 사용하여 동시에 연결을 시도하여 "
"응답성을 향상합니다. (Contributed by twisteroid ambassador in :issue:`33530`.)"

#: ../../whatsnew/3.8.rst:688
msgid "builtins"
msgstr "builtins"

#: ../../whatsnew/3.8.rst:690
msgid ""
"The :func:`compile` built-in has been improved to accept the "
"``ast.PyCF_ALLOW_TOP_LEVEL_AWAIT`` flag. With this new flag passed, "
":func:`compile` will allow top-level ``await``, ``async for`` and ``async"
" with`` constructs that are usually considered invalid syntax. "
"Asynchronous code object marked with the ``CO_COROUTINE`` flag may then "
"be returned. (Contributed by Matthias Bussonnier in :issue:`34616`)"
msgstr ""
"내장 :func:`compile`\\이 ``ast.PyCF_ALLOW_TOP_LEVEL_AWAIT`` 플래그를 받아들이도록 "
"개선되었습니다. 이 새 플래그가 전달되면, :func:`compile`\\은 일반적으로 유효하지 문법으로 간주하는 최상위 수준 "
"``await``, ``async for`` 및 ``async with`` 구문을 허용합니다. 그러면 ``CO_COROUTINE``"
" 플래그로 표시된 비동기 코드 객체가 반환될 수 있습니다. (Contributed by Matthias Bussonnier in "
":issue:`34616`)"

#: ../../whatsnew/3.8.rst:699
msgid "collections"
msgstr "collections"

#: ../../whatsnew/3.8.rst:701
msgid ""
"The :meth:`~collections.somenamedtuple._asdict` method for "
":func:`collections.namedtuple` now returns a :class:`dict` instead of a "
":class:`collections.OrderedDict`. This works because regular dicts have "
"guaranteed ordering since Python 3.7. If the extra features of "
":class:`OrderedDict` are required, the suggested remediation is to cast "
"the result to the desired type: ``OrderedDict(nt._asdict())``. "
"(Contributed by Raymond Hettinger in :issue:`35864`.)"
msgstr ""
"이제 :func:`collections.namedtuple`\\의 "
":meth:`~collections.somenamedtuple._asdict` 메서드는 "
":class:`collections.OrderedDict` 대신 :class:`dict`\\를 반환합니다. 파이썬 3.7부터 일반 "
"딕셔너리가 순서를 보장하기 때문에 이것이 가능합니다. :class:`OrderedDict`\\의 추가 기능이 필요하면, 제안된 해결"
" 방법은 원하는 형으로 결과를 캐스팅하는 것입니다: ``OrderedDict(nt._asdict())``. (Contributed "
"by Raymond Hettinger in :issue:`35864`.)"

#: ../../whatsnew/3.8.rst:711
msgid "cProfile"
msgstr "cProfile"

#: ../../whatsnew/3.8.rst:713
msgid ""
"The :class:`cProfile.Profile <profile.Profile>` class can now be used as "
"a context manager. Profile a block of code by running::"
msgstr ""
":class:`cProfile.Profile <profile.Profile>` 클래스는 이제 컨텍스트 관리자로 사용할 수 있습니다."
" 다음처럼 코드 블록을 프로파일 하십시오::"

#: ../../whatsnew/3.8.rst:716
msgid ""
"import cProfile\n"
"\n"
"with cProfile.Profile() as profiler:\n"
"      # code to be profiled\n"
"      ..."
msgstr ""

#: ../../whatsnew/3.8.rst:722
msgid "(Contributed by Scott Sanderson in :issue:`29235`.)"
msgstr "(Contributed by Scott Sanderson in :issue:`29235`.)"

#: ../../whatsnew/3.8.rst:726
msgid "csv"
msgstr "csv"

#: ../../whatsnew/3.8.rst:728
msgid ""
"The :class:`csv.DictReader` now returns instances of :class:`dict` "
"instead of a :class:`collections.OrderedDict`.  The tool is now faster "
"and uses less memory while still preserving the field order. (Contributed"
" by Michael Selik in :issue:`34003`.)"
msgstr ""
":class:`csv.DictReader`\\는 이제 :class:`collections.OrderedDict` 대신 "
":class:`dict`\\의 인스턴스를 반환합니다. 이 도구는 이제 여전히 필드 순서를 유지하면서 더 빠르고 메모리를 덜 "
"사용합니다. (Contributed by Michael Selik in :issue:`34003`.)"

#: ../../whatsnew/3.8.rst:735
msgid "curses"
msgstr "curses"

#: ../../whatsnew/3.8.rst:737
msgid ""
"Added a new variable holding structured version information for the "
"underlying ncurses library: :data:`~curses.ncurses_version`. (Contributed"
" by Serhiy Storchaka in :issue:`31680`.)"
msgstr ""
"하부 ncurses 라이브러리에 대한 구조화된 버전 정보를 담는 새로운 변수를 추가했습니다: "
":data:`~curses.ncurses_version`. (Contributed by Serhiy Storchaka in "
":issue:`31680`.)"

#: ../../whatsnew/3.8.rst:743
msgid "ctypes"
msgstr "ctypes"

#: ../../whatsnew/3.8.rst:745
msgid ""
"On Windows, :class:`~ctypes.CDLL` and subclasses now accept a *winmode* "
"parameter to specify flags for the underlying ``LoadLibraryEx`` call. The"
" default flags are set to only load DLL dependencies from trusted "
"locations, including the path where the DLL is stored (if a full or "
"partial path is used to load the initial DLL) and paths added by "
":func:`~os.add_dll_directory`. (Contributed by Steve Dower in "
":issue:`36085`.)"
msgstr ""
"윈도우에서, :class:`~ctypes.CDLL` 및 서브 클래스는 이제 하부 ``LoadLibraryEx`` 호출에 대한 "
"플래그를 지정하는 *winmode* 매개 변수를 받아들입니다. 기본 플래그는 DLL이 저장된 경로(전체나 부분 경로가 초기 DLL을"
" 로드하는 데 사용되었다면)와 :func:`~os.add_dll_directory`\\로 추가된 경로를 포함하여 신뢰할 수 있는 "
"위치에서만 DLL 종속성을 로드하도록 설정됩니다. (Contributed by Steve Dower in "
":issue:`36085`.)"

#: ../../whatsnew/3.8.rst:754
msgid "datetime"
msgstr "datetime"

#: ../../whatsnew/3.8.rst:756
#, fuzzy
msgid ""
"Added new alternate constructors :meth:`datetime.date.fromisocalendar` "
"and :meth:`datetime.datetime.fromisocalendar`, which construct "
":class:`~datetime.date` and :class:`~datetime.datetime` objects "
"respectively from ISO year, week number, and weekday; these are the "
"inverse of each class's ``isocalendar`` method. (Contributed by Paul "
"Ganssle in :issue:`36004`.)"
msgstr ""
"ISO 년, 주 번호 및 요일로 :class:`date`\\와 :class:`datetime` 객체를 각각 생성하는, 새로운 대체 "
"생성자 :meth:`datetime.date.fromisocalendar` 와 "
":meth:`datetime.datetime.fromisocalendar`\\를 추가했습니다; 이것들은 각 클래스의 "
"``isocalendar`` 메서드의 역입니다. (Contributed by Paul Ganssle in "
":issue:`36004`.)"

#: ../../whatsnew/3.8.rst:764
msgid "functools"
msgstr "functools"

#: ../../whatsnew/3.8.rst:766
msgid ""
":func:`functools.lru_cache` can now be used as a straight decorator "
"rather than as a function returning a decorator.  So both of these are "
"now supported::"
msgstr ""
"이제 :func:`functools.lru_cache`\\는 데코레이터를 반환하는 함수가 아닌 직접적인 데코레이터로 사용할 수 "
"있습니다. 그래서 이 두 가지가 모두 지원됩니다::"

#: ../../whatsnew/3.8.rst:769
msgid ""
"@lru_cache\n"
"def f(x):\n"
"    ...\n"
"\n"
"@lru_cache(maxsize=256)\n"
"def f(x):\n"
"    ..."
msgstr ""

#: ../../whatsnew/3.8.rst:777
msgid "(Contributed by Raymond Hettinger in :issue:`36772`.)"
msgstr "(Contributed by Raymond Hettinger in :issue:`36772`.)"

#: ../../whatsnew/3.8.rst:779
msgid ""
"Added a new :func:`functools.cached_property` decorator, for computed "
"properties cached for the life of the instance. ::"
msgstr ""
"인스턴스 수명 동안 캐시 된 계산된 속성을 위한 새로운 :func:`functools.cached_property` 데코레이터를 "
"추가했습니다. ::"

#: ../../whatsnew/3.8.rst:782
msgid ""
"import functools\n"
"import statistics\n"
"\n"
"class Dataset:\n"
"   def __init__(self, sequence_of_numbers):\n"
"      self.data = sequence_of_numbers\n"
"\n"
"   @functools.cached_property\n"
"   def variance(self):\n"
"      return statistics.variance(self.data)"
msgstr ""

#: ../../whatsnew/3.8.rst:793
msgid "(Contributed by Carl Meyer in :issue:`21145`)"
msgstr "(Contributed by Carl Meyer in :issue:`21145`)"

#: ../../whatsnew/3.8.rst:796
msgid ""
"Added a new :func:`functools.singledispatchmethod` decorator that "
"converts methods into :term:`generic functions <generic function>` using "
":term:`single dispatch`::"
msgstr ""
":term:`싱글 디스패치 <single dispatch>`\\를 사용하여 메서드를 :term:`제네릭 함수 <generic "
"function>`\\로 변환하는 새로운 :func:`functools.singledispatchmethod` 데코레이터를 "
"추가했습니다::"

#: ../../whatsnew/3.8.rst:800
msgid ""
"from functools import singledispatchmethod\n"
"from contextlib import suppress\n"
"\n"
"class TaskManager:\n"
"\n"
"    def __init__(self, tasks):\n"
"        self.tasks = list(tasks)\n"
"\n"
"    @singledispatchmethod\n"
"    def discard(self, value):\n"
"        with suppress(ValueError):\n"
"            self.tasks.remove(value)\n"
"\n"
"    @discard.register(list)\n"
"    def _(self, tasks):\n"
"        targets = set(tasks)\n"
"        self.tasks = [x for x in self.tasks if x not in targets]"
msgstr ""

#: ../../whatsnew/3.8.rst:818
msgid "(Contributed by Ethan Smith in :issue:`32380`)"
msgstr "(Contributed by Ethan Smith in :issue:`32380`)"

#: ../../whatsnew/3.8.rst:821
msgid "gc"
msgstr "gc"

#: ../../whatsnew/3.8.rst:823
msgid ""
":func:`~gc.get_objects` can now receive an optional *generation* "
"parameter indicating a generation to get objects from. (Contributed by "
"Pablo Galindo in :issue:`36016`.)"
msgstr ""
"이제 :func:`~gc.get_objects`\\는 객체를 가져올 세대(generation)를 나타내는 선택적 "
"*generation* 매개 변수를 받을 수 있습니다. (Contributed by Pablo Galindo in "
":issue:`36016`.)"

#: ../../whatsnew/3.8.rst:829
msgid "gettext"
msgstr "gettext"

#: ../../whatsnew/3.8.rst:831
msgid ""
"Added :func:`~gettext.pgettext` and its variants. (Contributed by Franz "
"Glasner, Éric Araujo, and Cheryl Sabella in :issue:`2504`.)"
msgstr ""
":func:`~gettext.pgettext`\\와 그 변형을 추가했습니다. (Contributed by Franz Glasner,"
" Éric Araujo, and Cheryl Sabella in :issue:`2504`.)"

#: ../../whatsnew/3.8.rst:836
msgid "gzip"
msgstr "gzip"

#: ../../whatsnew/3.8.rst:838
msgid ""
"Added the *mtime* parameter to :func:`gzip.compress` for reproducible "
"output. (Contributed by Guo Ci Teo in :issue:`34898`.)"
msgstr ""
"재현성 있는 출력을 위해 :func:`gzip.compress`\\에 *mtime* 매개 변수를 추가했습니다. "
"(Contributed by Guo Ci Teo in :issue:`34898`.)"

#: ../../whatsnew/3.8.rst:841
msgid ""
"A :exc:`~gzip.BadGzipFile` exception is now raised instead of "
":exc:`OSError` for certain types of invalid or corrupt gzip files. "
"(Contributed by Filip Gruszczyński, Michele Orrù, and Zackery Spytz in "
":issue:`6584`.)"
msgstr ""
"특정 유형의 유효하지 않거나 손상된 gzip 파일의 경우 이제 :exc:`OSError` 대신 "
":exc:`~gzip.BadGzipFile` 예외가 발생합니다. (Contributed by Filip Gruszczyński, "
"Michele Orrù, and Zackery Spytz in :issue:`6584`.)"

#: ../../whatsnew/3.8.rst:848
msgid "IDLE and idlelib"
msgstr "IDLE과 idlelib"

#: ../../whatsnew/3.8.rst:850
msgid ""
"Output over N lines (50 by default) is squeezed down to a button. N can "
"be changed in the PyShell section of the General page of the Settings "
"dialog.  Fewer, but possibly extra long, lines can be squeezed by right "
"clicking on the output.  Squeezed output can be expanded in place by "
"double-clicking the button or into the clipboard or a separate window by "
"right-clicking the button.  (Contributed by Tal Einat in "
":issue:`1529353`.)"
msgstr ""
"N 줄(기본적으로 50)을 초과하는 출력은 버튼으로 축소됩니다. N은 설정 대화 상자의 General 페이지의 PyShell "
"섹션에서 변경할 수 있습니다. 그보다 작은, 하지만 아주 길 수도 있는, 줄은 출력을 마우스 오른쪽 버튼으로 클릭하면 압착할 수 "
"있습니다. 압착된 출력은 버튼을 더블 클릭해서 제자리에서 확장하거나, 버튼을 마우스 오른쪽 단추로 클릭하여 클립 보드나 별도의 "
"창으로 확장할 수 있습니다. (Contributed by Tal Einat in :issue:`1529353`.)"

#: ../../whatsnew/3.8.rst:857
msgid ""
"Add \"Run Customized\" to the Run menu to run a module with customized "
"settings. Any command line arguments entered are added to sys.argv. They "
"also re-appear in the box for the next customized run.  One can also "
"suppress the normal Shell main module restart.  (Contributed by Cheryl "
"Sabella, Terry Jan Reedy, and others in :issue:`5680` and "
":issue:`37627`.)"
msgstr ""
"사용자 정의 설정으로 모듈을 실행하기 위해 Run 메뉴에 \"Run Customized\"를 추가합니다. 입력한 모든 명령 줄 "
"인자는 sys.argv에 추가됩니다. 또한 다음 사용자 정의 실행을 위해 상자에 다시 나타납니다. 일반적인 셸 메인 모듈 재시작을 "
"억제할 수도 있습니다. (Contributed by Cheryl Sabella, Terry Jan Reedy, and others "
"in :issue:`5680` and :issue:`37627`.)"

#: ../../whatsnew/3.8.rst:863
msgid ""
"Added optional line numbers for IDLE editor windows. Windows open without"
" line numbers unless set otherwise in the General tab of the "
"configuration dialog.  Line numbers for an existing window are shown and "
"hidden in the Options menu. (Contributed by Tal Einat and Saimadhav "
"Heblikar in :issue:`17535`.)"
msgstr ""
"IDLE 편집기 창에 선택적인 줄 번호를 추가했습니다. 창은 구성 대화 상자의 General 탭에서 설정하지 않는 한 줄 번호 없이"
" 열립니다. 기존 창의 줄 번호는 옵션 메뉴에서 표시되거나 숨겨집니다. (Contributed by Tal Einat and "
"Saimadhav Heblikar in :issue:`17535`.)"

#: ../../whatsnew/3.8.rst:869
msgid ""
"OS native encoding is now used for converting between Python strings and "
"Tcl objects. This allows IDLE to work with emoji and other non-BMP "
"characters. These characters can be displayed or copied and pasted to or "
"from the clipboard.  Converting strings from Tcl to Python and back now "
"never fails. (Many people worked on this for eight years but the problem "
"was finally solved by Serhiy Storchaka in :issue:`13153`.)"
msgstr ""
"OS 네이티브 인코딩은 이제 파이썬 문자열과 Tcl 객체 간 변환에 사용됩니다. 이를 통해 IDLE은 그림 이모티콘과 기타 BMP가"
" 아닌 문자를 사용할 수 있습니다. 이러한 문자는 표시하거나 클립 보드에 복사하고 클립보드에서 붙여넣을 수 있습니다. 문자열을 "
"Tcl에서 파이썬으로 변환했다가 되돌리는 것은 이제 실패하지 않습니다. (많은 사람이 8년 동안 이 작업을 했지만, 마침내 "
"Serhiy Storchaka가 이 문제를 :issue:`13153`\\에서 해결했습니다.)"

#: ../../whatsnew/3.8.rst:876
msgid "New in 3.8.1:"
msgstr "3.8.1의 새로운 기능:"

#: ../../whatsnew/3.8.rst:878
msgid ""
"Add option to toggle cursor blink off.  (Contributed by Zackery Spytz in "
":issue:`4603`.)"
msgstr "커서 깜박임을 토글하는 옵션을 추가합니다. (Contributed by Zackery Spytz in :issue:`4603`.)"

#: ../../whatsnew/3.8.rst:881
msgid ""
"Escape key now closes IDLE completion windows.  (Contributed by Johnny "
"Najera in :issue:`38944`.)"
msgstr ""
"이스케이프 키는 이제 IDLE 완성(completion) 창을 닫습니다. (Contributed by Johnny Najera in"
" :issue:`38944`.)"

#: ../../whatsnew/3.8.rst:884
msgid "The changes above have been backported to 3.7 maintenance releases."
msgstr "위의 변경 사항은 3.7 유지 보수 릴리스로 역 이식되었습니다."

#: ../../whatsnew/3.8.rst:886
msgid ""
"Add keywords to module name completion list.  (Contributed by Terry J. "
"Reedy in :issue:`37765`.)"
msgstr ""
"모듈 이름 완성 리스트에 키워드를 추가합니다. (Contributed by Terry J. Reedy in "
":issue:`37765`.)"

#: ../../whatsnew/3.8.rst:890
msgid "inspect"
msgstr "inspect"

#: ../../whatsnew/3.8.rst:892
msgid ""
"The :func:`inspect.getdoc` function can now find docstrings for "
"``__slots__`` if that attribute is a :class:`dict` where the values are "
"docstrings. This provides documentation options similar to what we "
"already have for :func:`property`, :func:`classmethod`, and "
":func:`staticmethod`::"
msgstr ""
":func:`inspect.getdoc` 함수는 이제 ``__slots__`` 어트리뷰트가 값이 독스트링인 "
":class:`dict`\\면 독스트링을 찾을 수 있습니다. 이것은 :func:`property`, "
":func:`classmethod` 및 :func:`staticmethod`\\에 대해 이미 가지고 있는 것과 유사한 문서화 옵션을"
" 제공합니다::"

#: ../../whatsnew/3.8.rst:897
#, python-brace-format
msgid ""
"class AudioClip:\n"
"    __slots__ = {'bit_rate': 'expressed in kilohertz to one decimal "
"place',\n"
"                 'duration': 'in seconds, rounded up to an integer'}\n"
"    def __init__(self, bit_rate, duration):\n"
"        self.bit_rate = round(bit_rate / 1000.0, 1)\n"
"        self.duration = ceil(duration)"
msgstr ""

#: ../../whatsnew/3.8.rst:904
msgid "(Contributed by Raymond Hettinger in :issue:`36326`.)"
msgstr "(Contributed by Raymond Hettinger in :issue:`36326`.)"

#: ../../whatsnew/3.8.rst:908
msgid "io"
msgstr "io"

#: ../../whatsnew/3.8.rst:910
#, fuzzy
msgid ""
"In development mode (:option:`-X` ``env``) and in :ref:`debug build "
"<debug-build>`, the :class:`io.IOBase` finalizer now logs the exception "
"if the ``close()`` method fails. The exception is ignored silently by "
"default in release build. (Contributed by Victor Stinner in "
":issue:`18748`.)"
msgstr ""
"개발 모드(:option:`-X` ``env``)와 디버그 빌드에서, ``close()`` 메서드가 실패하면 "
":class:`io.IOBase` 파이널라이저가 이제 예외를 로그 합니다. 릴리스 빌드에서는 기본적으로 예외가 조용히 무시됩니다. "
"(Contributed by Victor Stinner in :issue:`18748`.)"

#: ../../whatsnew/3.8.rst:917
msgid "itertools"
msgstr "itertools"

#: ../../whatsnew/3.8.rst:919
msgid ""
"The :func:`itertools.accumulate` function added an option *initial* "
"keyword argument to specify an initial value::"
msgstr ""
":func:`itertools.accumulate` 함수는 초깃값을 지정하기 위한 옵션 *initial* 키워드 인자를 "
"추가했습니다::"

#: ../../whatsnew/3.8.rst:922
msgid ""
">>> from itertools import accumulate\n"
">>> list(accumulate([10, 5, 30, 15], initial=1000))\n"
"[1000, 1010, 1015, 1045, 1060]"
msgstr ""

#: ../../whatsnew/3.8.rst:926
msgid "(Contributed by Lisa Roach in :issue:`34659`.)"
msgstr "(Contributed by Lisa Roach in :issue:`34659`.)"

#: ../../whatsnew/3.8.rst:930
msgid "json.tool"
msgstr "json.tool"

#: ../../whatsnew/3.8.rst:932
msgid ""
"Add option ``--json-lines`` to parse every input line as a separate JSON "
"object. (Contributed by Weipeng Hong in :issue:`31553`.)"
msgstr ""
"모든 입력 행을 별도의 JSON 객체로 구문 분석하는 ``--json-lines`` 옵션을 추가했습니다. (Contributed "
"by Weipeng Hong in :issue:`31553`.)"

#: ../../whatsnew/3.8.rst:937
msgid "logging"
msgstr "logging"

#: ../../whatsnew/3.8.rst:939
#, fuzzy
msgid ""
"Added a *force* keyword argument to :func:`logging.basicConfig`. When set"
" to true, any existing handlers attached to the root logger are removed "
"and closed before carrying out the configuration specified by the other "
"arguments."
msgstr ""
":func:`logging.basicConfig()`\\에 *force* 키워드 인자를 추가했습니다. 참으로 설정하면, 루트 로거에"
" 연결된 기존 처리기는 다른 인자로 지정된 구성을 수행하기 전에 제거되고 닫힙니다."

#: ../../whatsnew/3.8.rst:944
msgid ""
"This solves a long-standing problem.  Once a logger or *basicConfig()* "
"had been called, subsequent calls to *basicConfig()* were silently "
"ignored. This made it difficult to update, experiment with, or teach the "
"various logging configuration options using the interactive prompt or a "
"Jupyter notebook."
msgstr ""
"이것은 오랜 문제를 해결합니다. 일단 로거나 *basicConfig()*\\가 호출되면, *basicConfig()*\\에 대한 "
"후속 호출은 조용히 무시되었습니다. 이로 인해 대화식 프롬프트나 Jupyter 노트북을 사용하여 다양한 로깅 구성 옵션을 갱신, "
"실험 또는 가르치기가 어려웠습니다."

#: ../../whatsnew/3.8.rst:950
#, fuzzy
msgid ""
"(Suggested by Raymond Hettinger, implemented by Donghee Na, and reviewed "
"by Vinay Sajip in :issue:`33897`.)"
msgstr ""
"(Suggested by Raymond Hettinger, implemented by Dong-hee Na, and reviewed"
" by Vinay Sajip in :issue:`33897`.)"

#: ../../whatsnew/3.8.rst:955
msgid "math"
msgstr "math"

#: ../../whatsnew/3.8.rst:957
msgid ""
"Added new function :func:`math.dist` for computing Euclidean distance "
"between two points.  (Contributed by Raymond Hettinger in "
":issue:`33089`.)"
msgstr ""
"두 점 사이의 유클리드 거리를 계산하기 위한 새로운 함수 :func:`math.dist`\\가 추가되었습니다. "
"(Contributed by Raymond Hettinger in :issue:`33089`.)"

#: ../../whatsnew/3.8.rst:960
msgid ""
"Expanded the :func:`math.hypot` function to handle multiple dimensions. "
"Formerly, it only supported the 2-D case. (Contributed by Raymond "
"Hettinger in :issue:`33089`.)"
msgstr ""
"다중 차원을 처리하도록 :func:`math.hypot` 함수를 확장했습니다. 이전에는, 2-D 케이스 만 지원했습니다. "
"(Contributed by Raymond Hettinger in :issue:`33089`.)"

#: ../../whatsnew/3.8.rst:964
msgid ""
"Added new function, :func:`math.prod`, as analogous function to "
":func:`sum` that returns the product of a 'start' value (default: 1) "
"times an iterable of numbers::"
msgstr ""
"'start' 값(기본값: 1)과 숫자의 이터러블의 곱을 반환하는 :func:`sum`\\의 대응 물인 새 함수 "
":func:`math.prod`\\를 추가했습니다::"

#: ../../whatsnew/3.8.rst:968
msgid ""
">>> prior = 0.8\n"
">>> likelihoods = [0.625, 0.84, 0.30]\n"
">>> math.prod(likelihoods, start=prior)\n"
"0.126"
msgstr ""

#: ../../whatsnew/3.8.rst:973
msgid "(Contributed by Pablo Galindo in :issue:`35606`.)"
msgstr "(Contributed by Pablo Galindo in :issue:`35606`.)"

#: ../../whatsnew/3.8.rst:975
msgid ""
"Added two new combinatoric functions :func:`math.perm` and "
":func:`math.comb`::"
msgstr ""
"새로운 조합 함수(combinatoric functions) :func:`math.perm`\\와 "
":func:`math.comb`\\가 추가되었습니다::"

#: ../../whatsnew/3.8.rst:977
msgid ""
">>> math.perm(10, 3)    # Permutations of 10 things taken 3 at a time\n"
"720\n"
">>> math.comb(10, 3)    # Combinations of 10 things taken 3 at a time\n"
"120"
msgstr ""

#: ../../whatsnew/3.8.rst:982
msgid ""
"(Contributed by Yash Aggarwal, Keller Fuchs, Serhiy Storchaka, and "
"Raymond Hettinger in :issue:`37128`, :issue:`37178`, and :issue:`35431`.)"
msgstr ""
"(Contributed by Yash Aggarwal, Keller Fuchs, Serhiy Storchaka, and "
"Raymond Hettinger in :issue:`37128`, :issue:`37178`, and :issue:`35431`.)"

#: ../../whatsnew/3.8.rst:985
msgid ""
"Added a new function :func:`math.isqrt` for computing accurate integer "
"square roots without conversion to floating point.  The new function "
"supports arbitrarily large integers.  It is faster than "
"``floor(sqrt(n))`` but slower than :func:`math.sqrt`::"
msgstr ""
"정수 제곱근을 부동 소수점으로 변환하지 않고 정확하게 계산하기 위한 새로운 함수 :func:`math.isqrt`\\를 "
"추가했습니다. 새 함수는 제한 없이 큰 정수를 지원합니다. ``floor(sqrt(n))`` 보다 빠르지만 "
":func:`math.sqrt` 보다 느립니다::"

#: ../../whatsnew/3.8.rst:990
msgid ""
">>> r = 650320427\n"
">>> s = r ** 2\n"
">>> isqrt(s - 1)         # correct\n"
"650320426\n"
">>> floor(sqrt(s - 1))   # incorrect\n"
"650320427"
msgstr ""

#: ../../whatsnew/3.8.rst:997
msgid "(Contributed by Mark Dickinson in :issue:`36887`.)"
msgstr "(Contributed by Mark Dickinson in :issue:`36887`.)"

#: ../../whatsnew/3.8.rst:999
msgid ""
"The function :func:`math.factorial` no longer accepts arguments that are "
"not int-like. (Contributed by Pablo Galindo in :issue:`33083`.)"
msgstr ""
"함수 :func:`math.factorial`\\은 더는 int-류가 아닌 인자를 받아들이지 않습니다. (Contributed by"
" Pablo Galindo in :issue:`33083`.)"

#: ../../whatsnew/3.8.rst:1004
msgid "mmap"
msgstr "mmap"

#: ../../whatsnew/3.8.rst:1006
msgid ""
"The :class:`mmap.mmap` class now has an :meth:`~mmap.mmap.madvise` method"
" to access the ``madvise()`` system call. (Contributed by Zackery Spytz "
"in :issue:`32941`.)"
msgstr ""
":class:`mmap.mmap` 클래스에는 이제 ``madvise()`` 시스템 호출에 액세스하는 "
":meth:`~mmap.mmap.madvise` 메서드가 있습니다. (Contributed by Zackery Spytz in "
":issue:`32941`.)"

#: ../../whatsnew/3.8.rst:1012
msgid "multiprocessing"
msgstr "multiprocessing"

#: ../../whatsnew/3.8.rst:1014
msgid ""
"Added new :mod:`multiprocessing.shared_memory` module. (Contributed by "
"Davin Potts in :issue:`35813`.)"
msgstr ""
"새로운 :mod:`multiprocessing.shared_memory` 모듈을 추가했습니다. (Contributed by "
"Davin Potts in :issue:`35813`.)"

#: ../../whatsnew/3.8.rst:1017
msgid ""
"On macOS, the *spawn* start method is now used by default. (Contributed "
"by Victor Stinner in :issue:`33725`.)"
msgstr ""
"macOS에서, 이제 기본적으로 *spawn* 시작 방법이 사용됩니다. (Contributed by Victor Stinner in"
" :issue:`33725`.)"

#: ../../whatsnew/3.8.rst:1022
msgid "os"
msgstr "os"

#: ../../whatsnew/3.8.rst:1024
msgid ""
"Added new function :func:`~os.add_dll_directory` on Windows for providing"
" additional search paths for native dependencies when importing extension"
" modules or loading DLLs using :mod:`ctypes`. (Contributed by Steve Dower"
" in :issue:`36085`.)"
msgstr ""
"확장 모듈을 임포트 하거나 :mod:`ctypes`\\를 사용하여 DLL을 로드할 때 네이티브 종속성에 대한 추가 검색 경로를 "
"제공하기 위해 윈도우에서 새로운 함수 :func:`~os.add_dll_directory`\\가 추가되었습니다. "
"(Contributed by Steve Dower in :issue:`36085`.)"

#: ../../whatsnew/3.8.rst:1029
msgid ""
"A new :func:`os.memfd_create` function was added to wrap the "
"``memfd_create()`` syscall. (Contributed by Zackery Spytz and Christian "
"Heimes in :issue:`26836`.)"
msgstr ""
"새로운 :func:`os.memfd_create` 함수가 추가되어 ``memfd_create()`` 시스템 호출을 감쌉니다. "
"(Contributed by Zackery Spytz and Christian Heimes in :issue:`26836`.)"

#: ../../whatsnew/3.8.rst:1033
msgid ""
"On Windows, much of the manual logic for handling reparse points "
"(including symlinks and directory junctions) has been delegated to the "
"operating system. Specifically, :func:`os.stat` will now traverse "
"anything supported by the operating system, while :func:`os.lstat` will "
"only open reparse points that identify as \"name surrogates\" while "
"others are opened as for :func:`os.stat`. In all cases, "
":attr:`stat_result.st_mode` will only have ``S_IFLNK`` set for symbolic "
"links and not other kinds of reparse points. To identify other kinds of "
"reparse point, check the new :attr:`stat_result.st_reparse_tag` "
"attribute."
msgstr ""
"윈도우에서 재해석 지점(reparse points - 심볼릭 링크와 디렉터리 정션(directory junction)을 "
"포함합니다)을 처리하기 위한 많은 수동 논리가 운영 체제로 위임되었습니다. 특히, :func:`os.stat`\\은 이제 운영 "
"체제에서 지원하는 모든 것을 탐색하지만, :func:`os.lstat`\\은 \"이름 서로게이트(name surrogates)\"로"
" 식별되는 재해석 지점만 열고 다른 이름은 :func:`os.stat`\\처럼 엽니다. 모든 경우에, "
":attr:`stat_result.st_mode`\\는 심볼릭 링크에만 ``S_IFLNK``\\를 설정하고 다른 유형의 재해석 "
"지점에는 설정하지 않습니다. 다른 유형의 재해석 지점을 식별하려면, 새 "
":attr:`stat_result.st_reparse_tag` 어트리뷰트를 확인하십시오."

#: ../../whatsnew/3.8.rst:1042
msgid ""
"On Windows, :func:`os.readlink` is now able to read directory junctions. "
"Note that :func:`~os.path.islink` will return ``False`` for directory "
"junctions, and so code that checks ``islink`` first will continue to "
"treat junctions as directories, while code that handles errors from "
":func:`os.readlink` may now treat junctions as links."
msgstr ""
"윈도우에서, :func:`os.readlink`\\는 이제 디렉터리 정션을 읽을 수 있습니다. "
":func:`~os.path.islink`\\는 디렉터리 정션에 대해 ``False``\\를 반환함에 유의하십시오. 따라서 "
"``islink``\\를 먼저 확인하는 코드는 정션을 계속 디렉터리로 처리하지만, :func:`os.readlink`\\의 에러를 "
"처리하는 코드는 정션을 이제 링크로 처리할 수 있습니다."

#: ../../whatsnew/3.8.rst:1048 ../../whatsnew/3.8.rst:1073
msgid "(Contributed by Steve Dower in :issue:`37834`.)"
msgstr "(Contributed by Steve Dower in :issue:`37834`.)"

#: ../../whatsnew/3.8.rst:1052
msgid "os.path"
msgstr "os.path"

#: ../../whatsnew/3.8.rst:1054
msgid ""
":mod:`os.path` functions that return a boolean result like "
":func:`~os.path.exists`, :func:`~os.path.lexists`, "
":func:`~os.path.isdir`, :func:`~os.path.isfile`, :func:`~os.path.islink`,"
" and :func:`~os.path.ismount` now return ``False`` instead of raising "
":exc:`ValueError` or its subclasses :exc:`UnicodeEncodeError` and "
":exc:`UnicodeDecodeError` for paths that contain characters or bytes "
"unrepresentable at the OS level. (Contributed by Serhiy Storchaka in "
":issue:`33721`.)"
msgstr ""
":func:`~os.path.exists`, :func:`~os.path.lexists`, "
":func:`~os.path.isdir`, :func:`~os.path.isfile`, :func:`~os.path.islink` "
"및 :func:`~os.path.ismount`\\와 같은 불리언 결과를 반환하는 :mod:`os.path` 함수는 이제 OS "
"수준에서 표현할 수 없는 문자나 바이트를 포함하는 경로에 대해 :exc:`ValueError`\\나 그것의 서브 클래스 "
":exc:`UnicodeEncodeError` 와 :exc:`UnicodeDecodeError` 를 발생시키는 대신 "
"``False``\\를 반환합니다. (Contributed by Serhiy Storchaka in :issue:`33721`.)."

#: ../../whatsnew/3.8.rst:1062 ../../whatsnew/3.8.rst:1965
msgid ""
":func:`~os.path.expanduser` on Windows now prefers the "
":envvar:`USERPROFILE` environment variable and does not use "
":envvar:`HOME`, which is not normally set for regular user accounts. "
"(Contributed by Anthony Sottile in :issue:`36264`.)"
msgstr ""
"윈도우에서 :func:`~os.path.expanduser`\\는 이제 :envvar:`USERPROFILE` 환경 변수를 선호하며"
" 일반적으로 일반 사용자 계정에 설정되지 않는 :envvar:`HOME`\\을 사용하지 않습니다. (Contributed by "
"Anthony Sottile in :issue:`36264`.)"

#: ../../whatsnew/3.8.rst:1067
msgid ""
":func:`~os.path.isdir` on Windows no longer returns ``True`` for a link "
"to a non-existent directory."
msgstr ""
"윈도우에서 :func:`~os.path.isdir`\\은 존재하지 않는 디렉터리에 대한 링크에 대해 더는 ``True``\\를 "
"반환하지 않습니다."

#: ../../whatsnew/3.8.rst:1070
msgid ""
":func:`~os.path.realpath` on Windows now resolves reparse points, "
"including symlinks and directory junctions."
msgstr ""
"윈도우에서 :func:`~os.path.realpath`\\는 이제 심볼릭 링크와 디렉터리 정션을 포함하는 재해석 지점을 "
"결정(resolve)합니다."

#: ../../whatsnew/3.8.rst:1077
msgid "pathlib"
msgstr "pathlib"

#: ../../whatsnew/3.8.rst:1079
#, fuzzy
msgid ""
":mod:`pathlib.Path` methods that return a boolean result like "
":meth:`~pathlib.Path.exists`, :meth:`~pathlib.Path.is_dir`, "
":meth:`~pathlib.Path.is_file`, :meth:`~pathlib.Path.is_mount`, "
":meth:`~pathlib.Path.is_symlink`, :meth:`~pathlib.Path.is_block_device`, "
":meth:`~pathlib.Path.is_char_device`, :meth:`~pathlib.Path.is_fifo`, "
":meth:`~pathlib.Path.is_socket` now return ``False`` instead of raising "
":exc:`ValueError` or its subclass :exc:`UnicodeEncodeError` for paths "
"that contain characters unrepresentable at the OS level. (Contributed by "
"Serhiy Storchaka in :issue:`33721`.)"
msgstr ""
":meth:`~pathlib.Path.exists()`, :meth:`~pathlib.Path.is_dir()`, "
":meth:`~pathlib.Path.is_file()`, :meth:`~pathlib.Path.is_mount()`, "
":meth:`~pathlib.Path.is_symlink()`, "
":meth:`~pathlib.Path.is_block_device()`, "
":meth:`~pathlib.Path.is_char_device()`, :meth:`~pathlib.Path.is_fifo()`, "
":meth:`~pathlib.Path.is_socket()`\\과 같은 불리언 결과를 반환하는 :mod:`pathlib.Path` "
"메서드는 OS 수준에서 표현할 수 없는 문자가 포함된 경로에 대해 :exc:`ValueError`\\나 그것의 서브 클래스 "
":exc:`UnicodeEncodeError` 를 발생시키는 대신 ``False``\\를 반환합니다. (Contributed by "
"Serhiy Storchaka in :issue:`33721`.)"

#: ../../whatsnew/3.8.rst:1089
msgid ""
"Added :meth:`!pathlib.Path.link_to` which creates a hard link pointing to"
" a path. (Contributed by Joannah Nanjekye in :issue:`26978`) Note that "
"``link_to`` was deprecated in 3.10 and removed in 3.12 in favor of a "
"``hardlink_to`` method added in 3.10 which matches the semantics of the "
"existing ``symlink_to`` method."
msgstr ""

#: ../../whatsnew/3.8.rst:1098
msgid "pickle"
msgstr "pickle"

#: ../../whatsnew/3.8.rst:1100
msgid ""
":mod:`pickle` extensions subclassing the C-optimized "
":class:`~pickle.Pickler` can now override the pickling logic of functions"
" and classes by defining the special "
":meth:`~pickle.Pickler.reducer_override` method. (Contributed by Pierre "
"Glaser and Olivier Grisel in :issue:`35900`.)"
msgstr ""
"C 최적화된 :class:`~pickle.Pickler`\\를 서브 클래싱하는 :mod:`pickle` 확장은 이제 특수 "
":meth:`~pickle.Pickler.reducer_override` 메서드를 정의하여 함수와 클래스의 피클링 로직을 재정의할 "
"수 있습니다. (Contributed by Pierre Glaser and Olivier Grisel in "
":issue:`35900`.)"

#: ../../whatsnew/3.8.rst:1107
msgid "plistlib"
msgstr "plistlib"

#: ../../whatsnew/3.8.rst:1109
msgid ""
"Added new :class:`plistlib.UID` and enabled support for reading and "
"writing NSKeyedArchiver-encoded binary plists. (Contributed by Jon Janzen"
" in :issue:`26707`.)"
msgstr ""
"새로운 :class:`plistlib.UID`\\가 추가되었으며 NSKeyedArchiver 인코딩된 바이너리 plist를 읽고 "
"쓰는 지원을 활성화했습니다. (Contributed by Jon Janzen in :issue:`26707`.)"

#: ../../whatsnew/3.8.rst:1115
msgid "pprint"
msgstr "pprint"

#: ../../whatsnew/3.8.rst:1117
msgid ""
"The :mod:`pprint` module added a *sort_dicts* parameter to several "
"functions. By default, those functions continue to sort dictionaries "
"before rendering or printing.  However, if *sort_dicts* is set to false, "
"the dictionaries retain the order that keys were inserted.  This can be "
"useful for comparison to JSON inputs during debugging."
msgstr ""
":mod:`pprint` 모듈은 여러 함수에 *sort_dicts* 매개 변수를 추가했습니다. 기본적으로, 이러한 함수는 렌더링이나"
" 인쇄 전에 딕셔너리를 계속 정렬합니다. 그러나, *sort_dicts*\\가 거짓으로 설정되면, 딕셔너리는 키가 삽입된 순서를 "
"유지합니다. 디버깅하는 동안 JSON 입력과 비교하는 데 유용 할 수 있습니다."

#: ../../whatsnew/3.8.rst:1123
msgid ""
"In addition, there is a convenience new function, :func:`pprint.pp` that "
"is like :func:`pprint.pprint` but with *sort_dicts* defaulting to "
"``False``::"
msgstr ""
"또한, :func:`pprint.pprint`\\와 유사하지만 *sort_dicts*\\가 ``False``\\로 기본 설정된 "
"새로운 편의 함수 :func:`pprint.pp`\\가 있습니다::"

#: ../../whatsnew/3.8.rst:1126
#, python-brace-format
msgid ""
">>> from pprint import pprint, pp\n"
">>> d = dict(source='input.txt', operation='filter', "
"destination='output.txt')\n"
">>> pp(d, width=40)                  # Original order\n"
"{'source': 'input.txt',\n"
" 'operation': 'filter',\n"
" 'destination': 'output.txt'}\n"
">>> pprint(d, width=40)              # Keys sorted alphabetically\n"
"{'destination': 'output.txt',\n"
" 'operation': 'filter',\n"
" 'source': 'input.txt'}"
msgstr ""

#: ../../whatsnew/3.8.rst:1137
msgid "(Contributed by Rémi Lapeyre in :issue:`30670`.)"
msgstr "(Contributed by Rémi Lapeyre in :issue:`30670`.)"

#: ../../whatsnew/3.8.rst:1141
msgid "py_compile"
msgstr "py_compile"

#: ../../whatsnew/3.8.rst:1143
msgid ""
":func:`py_compile.compile` now supports silent mode. (Contributed by "
"Joannah Nanjekye in :issue:`22640`.)"
msgstr ""
":func:`py_compile.compile`\\은 이제 조용한 모드를 지원합니다. (Contributed by Joannah "
"Nanjekye in :issue:`22640`.)"

#: ../../whatsnew/3.8.rst:1148
msgid "shlex"
msgstr "shlex"

#: ../../whatsnew/3.8.rst:1150
msgid ""
"The new :func:`shlex.join` function acts as the inverse of "
":func:`shlex.split`. (Contributed by Bo Bayles in :issue:`32102`.)"
msgstr ""
"새 :func:`shlex.join` 함수는 :func:`shlex.split`\\의 역함수로 작동합니다. (Contributed "
"by Bo Bayles in :issue:`32102`.)"

#: ../../whatsnew/3.8.rst:1155
msgid "shutil"
msgstr "shutil"

#: ../../whatsnew/3.8.rst:1157
msgid ""
":func:`shutil.copytree` now accepts a new ``dirs_exist_ok`` keyword "
"argument. (Contributed by Josh Bronson in :issue:`20849`.)"
msgstr ""
":func:`shutil.copytree`\\는 이제 새로운 ``dirs_exist_ok`` 키워드 인자를 받아들입니다. "
"(Contributed by Josh Bronson in :issue:`20849`.)"

#: ../../whatsnew/3.8.rst:1160
msgid ""
":func:`shutil.make_archive` now defaults to the modern pax (POSIX.1-2001)"
" format for new archives to improve portability and standards "
"conformance, inherited from the corresponding change to the "
":mod:`tarfile` module. (Contributed by C.A.M. Gerlach in :issue:`30661`.)"
msgstr ""
":func:`shutil.make_archive`\\는 이제 이식성과 표준 적합성을 향상하기 위해 새로운 아카이브에 최신 pax "
"(POSIX.1-2001) 형식을 기본으로 합니다, :mod:`tarfile` 모듈에 대한 해당 변경 사항을 상속했습니다. "
"(Contributed by C.A.M. Gerlach in :issue:`30661`.)"

#: ../../whatsnew/3.8.rst:1165
msgid ""
":func:`shutil.rmtree` on Windows now removes directory junctions without "
"recursively removing their contents first. (Contributed by Steve Dower in"
" :issue:`37834`.)"
msgstr ""
"윈도우에서 :func:`shutil.rmtree`\\는 이제 그 내용을 먼저 재귀적으로 삭제하지 않고 디렉터리 정션을 삭제합니다. "
"(Contributed by Steve Dower in :issue:`37834`.)"

#: ../../whatsnew/3.8.rst:1171
msgid "socket"
msgstr "socket"

#: ../../whatsnew/3.8.rst:1173
#, fuzzy
msgid ""
"Added :meth:`~socket.create_server` and "
":meth:`~socket.has_dualstack_ipv6` convenience functions to automate the "
"necessary tasks usually involved when creating a server socket, including"
" accepting both IPv4 and IPv6 connections on the same socket.  "
"(Contributed by Giampaolo Rodolà in :issue:`17561`.)"
msgstr ""
"같은 소켓에서 IPv4와 IPv6 연결을 모두 받아들이는 것을 포함하여 일반적으로 서버 소켓을 만들 때 필요한 작업을 자동화하는 "
":meth:`~socket.create_server()`\\와 :meth:`~socket.has_dualstack_ipv6()` "
"편리 함수가 추가되었습니다. (Contributed by Giampaolo Rodolà in :issue:`17561`.)"

#: ../../whatsnew/3.8.rst:1178
#, fuzzy
msgid ""
"The :func:`socket.if_nameindex`, :func:`socket.if_nametoindex`, and "
":func:`socket.if_indextoname` functions have been implemented on Windows."
" (Contributed by Zackery Spytz in :issue:`37007`.)"
msgstr ""
":func:`socket.if_nameindex()`, :func:`socket.if_nametoindex()` 및 "
":func:`socket.if_indextoname()` 함수가 윈도우에서 구현되었습니다. (Contributed by "
"Zackery Spytz in :issue:`37007`.)"

#: ../../whatsnew/3.8.rst:1184
msgid "ssl"
msgstr "ssl"

#: ../../whatsnew/3.8.rst:1186
msgid ""
"Added :attr:`~ssl.SSLContext.post_handshake_auth` to enable and "
":meth:`~ssl.SSLSocket.verify_client_post_handshake` to initiate TLS 1.3 "
"post-handshake authentication. (Contributed by Christian Heimes in "
":issue:`34670`.)"
msgstr ""
"TLS 1.3 포스트 핸드 셰이크 인증을 활성화하는 "
":attr:`~ssl.SSLContext.post_handshake_auth`\\와 시작하는 "
":meth:`~ssl.SSLSocket.verify_client_post_handshake`\\를 추가했습니다. "
"(Contributed by Christian Heimes in :issue:`34670`.)"

#: ../../whatsnew/3.8.rst:1193
msgid "statistics"
msgstr "statistics"

#: ../../whatsnew/3.8.rst:1195
#, fuzzy
msgid ""
"Added :func:`statistics.fmean` as a faster, floating-point variant of "
":func:`statistics.mean`.  (Contributed by Raymond Hettinger and Steven "
"D'Aprano in :issue:`35904`.)"
msgstr ""
":func:`statistics.mean()`\\의 더 빠른 부동 소수점 변형으로 :func:`statistics.fmean`\\을"
" 추가했습니다. (Contributed by Raymond Hettinger and Steven D'Aprano in "
":issue:`35904`.)"

#: ../../whatsnew/3.8.rst:1199
#, fuzzy
msgid ""
"Added :func:`statistics.geometric_mean` (Contributed by Raymond Hettinger"
" in :issue:`27181`.)"
msgstr ""
":func:`statistics.geometric_mean()`\\을 추가했습니다 (Contributed by Raymond "
"Hettinger in :issue:`27181`.)"

#: ../../whatsnew/3.8.rst:1202
msgid ""
"Added :func:`statistics.multimode` that returns a list of the most common"
" values. (Contributed by Raymond Hettinger in :issue:`35892`.)"
msgstr ""
"가장 빈번한 값의 리스트를 반환하는 :func:`statistics.multimode`\\가 추가되었습니다. (Contributed"
" by Raymond Hettinger in :issue:`35892`.)"

#: ../../whatsnew/3.8.rst:1205
msgid ""
"Added :func:`statistics.quantiles` that divides data or a distribution in"
" to equiprobable intervals (e.g. quartiles, deciles, or percentiles). "
"(Contributed by Raymond Hettinger in :issue:`36546`.)"
msgstr ""
"데이터나 분포를 등분위 간격(equiprobable intervals)(예를 들어, 4분위 수(quattiles), 십분위 "
"수(deciles) 또는 백분위 수(percentiles))으로 나누는 :func:`statistics.quantiles`\\를 "
"추가했습니다. (Contributed by Raymond Hettinger in :issue:`36546`.)"

#: ../../whatsnew/3.8.rst:1209
msgid ""
"Added :class:`statistics.NormalDist`, a tool for creating and "
"manipulating normal distributions of a random variable. (Contributed by "
"Raymond Hettinger in :issue:`36018`.)"
msgstr ""
"무작위 변수의 정규 분포를 만들고 조작하기 위한 도구인 :class:`statistics.NormalDist`\\를 추가했습니다. "
"(Contributed by Raymond Hettinger in :issue:`36018`.)"

#: ../../whatsnew/3.8.rst:1215
msgid ""
">>> temperature_feb = NormalDist.from_samples([4, 12, -3, 2, 7, 14])\n"
">>> temperature_feb.mean\n"
"6.0\n"
">>> temperature_feb.stdev\n"
"6.356099432828281\n"
"\n"
">>> temperature_feb.cdf(3)            # Chance of being under 3 degrees\n"
"0.3184678262814532\n"
">>> # Relative chance of being 7 degrees versus 10 degrees\n"
">>> temperature_feb.pdf(7) / temperature_feb.pdf(10)\n"
"1.2039930378537762\n"
"\n"
">>> el_niño = NormalDist(4, 2.5)\n"
">>> temperature_feb += el_niño        # Add in a climate effect\n"
">>> temperature_feb\n"
"NormalDist(mu=10.0, sigma=6.830080526611674)\n"
"\n"
">>> temperature_feb * (9/5) + 32      # Convert to Fahrenheit\n"
"NormalDist(mu=50.0, sigma=12.294144947901014)\n"
">>> temperature_feb.samples(3)        # Generate random samples\n"
"[7.672102882379219, 12.000027119750287, 4.647488369766392]"
msgstr ""

#: ../../whatsnew/3.8.rst:1239
msgid "sys"
msgstr "sys"

#: ../../whatsnew/3.8.rst:1241
msgid ""
"Add new :func:`sys.unraisablehook` function which can be overridden to "
"control how \"unraisable exceptions\" are handled. It is called when an "
"exception has occurred but there is no way for Python to handle it. For "
"example, when a destructor raises an exception or during garbage "
"collection (:func:`gc.collect`). (Contributed by Victor Stinner in "
":issue:`36829`.)"
msgstr ""
"\"발생시킬 수 없는 예외(unraisable exceptions)\" 처리 방법을 제어하기 위해 재정의할 수 있는 새로운 "
":func:`sys.unraisablehook` 함수를 추가했습니다. 예외가 발생했지만, 파이썬에서 처리할 방법이 없을 때 "
"호출됩니다. 예를 들어, 파괴자(destructor)가 예외를 발생시키거나 가비지 수집(:func:`gc.collect`) 중에. "
"(Contributed by Victor Stinner in :issue:`36829`.)"

#: ../../whatsnew/3.8.rst:1250 ../../whatsnew/3.8.rst:2350
msgid "tarfile"
msgstr "tarfile"

#: ../../whatsnew/3.8.rst:1252
msgid ""
"The :mod:`tarfile` module now defaults to the modern pax (POSIX.1-2001) "
"format for new archives, instead of the previous GNU-specific one. This "
"improves cross-platform portability with a consistent encoding (UTF-8) in"
" a standardized and extensible format, and offers several other benefits."
" (Contributed by C.A.M. Gerlach in :issue:`36268`.)"
msgstr ""
":mod:`tarfile` 모듈은 새로운 아카이브를 만들 때 이제 이전의 GNU 전용이 아닌 최신 pax (POSIX.1-2001)"
" 형식을 기본값으로 사용합니다. 이것은 표준화되고 확장 가능한 형식으로 일관된 인코딩(UTF-8)을 사용하여 플랫폼 간 이식성을 "
"개선하고, 몇 가지 다른 이점을 제공합니다. (Contributed by C.A.M. Gerlach in "
":issue:`36268`.)"

#: ../../whatsnew/3.8.rst:1260
msgid "threading"
msgstr "threading"

#: ../../whatsnew/3.8.rst:1262
msgid ""
"Add a new :func:`threading.excepthook` function which handles uncaught "
":meth:`threading.Thread.run` exception. It can be overridden to control "
"how uncaught :meth:`threading.Thread.run` exceptions are handled. "
"(Contributed by Victor Stinner in :issue:`1230540`.)"
msgstr ""
"잡히지 않은 :meth:`threading.Thread.run` 예외를 처리하는 새로운 "
":func:`threading.excepthook` 함수를 추가했습니다. 잡히지 않은 "
":meth:`threading.Thread.run` 예외가 처리되는 방식을 제어하기 위해 재정의될 수 있습니다. "
"(Contributed by Victor Stinner in :issue:`1230540`.)"

#: ../../whatsnew/3.8.rst:1267
msgid ""
"Add a new :func:`threading.get_native_id` function and a "
":data:`~threading.Thread.native_id` attribute to the "
":class:`threading.Thread` class. These return the native integral Thread "
"ID of the current thread assigned by the kernel. This feature is only "
"available on certain platforms, see :func:`get_native_id "
"<threading.get_native_id>` for more information. (Contributed by Jake "
"Tesler in :issue:`36084`.)"
msgstr ""
"새로운 :func:`threading.get_native_id` 함수와 "
":data:`~threading.Thread.native_id` 어트리뷰트를 :class:`threading.Thread` 클래스에"
" 추가합니다. 이것들은 커널이 할당한 현재 스레드의 네이티브 정수 스레드 ID를 반환합니다. 이 기능은 특정 플랫폼에서만 사용할 수"
" 있습니다, 자세한 내용은 :func:`get_native_id <threading.get_native_id>`\\를 참조하십시오."
" (Contributed by Jake Tesler in :issue:`36084`.)"

#: ../../whatsnew/3.8.rst:1277
msgid "tokenize"
msgstr "tokenize"

#: ../../whatsnew/3.8.rst:1279
msgid ""
"The :mod:`tokenize` module now implicitly emits a ``NEWLINE`` token when "
"provided with input that does not have a trailing new line.  This "
"behavior now matches what the C tokenizer does internally. (Contributed "
"by Ammar Askar in :issue:`33899`.)"
msgstr ""
":mod:`tokenize` 모듈은 이제 후행 줄 넘김이 없는 입력을 제공할 때 묵시적으로 ``NEWLINE`` 토큰을 출력합니다."
" 이 동작은 이제 C 토크나이저가 내부적으로 수행하는 것과 일치합니다. (Contributed by Ammar Askar in "
":issue:`33899`.)"

#: ../../whatsnew/3.8.rst:1286
msgid "tkinter"
msgstr "tkinter"

#: ../../whatsnew/3.8.rst:1288
msgid ""
"Added methods :meth:`~tkinter.Spinbox.selection_from`, "
":meth:`~tkinter.Spinbox.selection_present`, "
":meth:`~tkinter.Spinbox.selection_range` and "
":meth:`~tkinter.Spinbox.selection_to` in the :class:`tkinter.Spinbox` "
"class. (Contributed by Juliette Monsel in :issue:`34829`.)"
msgstr ""
":class:`tkinter.Spinbox` 클래스에 :meth:`~tkinter.Spinbox.selection_from`, "
":meth:`~tkinter.Spinbox.selection_present`, "
":meth:`~tkinter.Spinbox.selection_range` 및 "
":meth:`~tkinter.Spinbox.selection_to` 메서드를 추가했습니다. (Contributed by "
"Juliette Monsel in :issue:`34829`.)"

#: ../../whatsnew/3.8.rst:1295
msgid ""
"Added method :meth:`~tkinter.Canvas.moveto` in the "
":class:`tkinter.Canvas` class. (Contributed by Juliette Monsel in "
":issue:`23831`.)"
msgstr ""
":class:`tkinter.Canvas` 클래스에 :meth:`~tkinter.Canvas.moveto` 메서드를 추가했습니다. "
"(Contributed by Juliette Monsel in :issue:`23831`.)"

#: ../../whatsnew/3.8.rst:1299
msgid ""
"The :class:`tkinter.PhotoImage` class now has "
":meth:`~tkinter.PhotoImage.transparency_get` and "
":meth:`~tkinter.PhotoImage.transparency_set` methods.  (Contributed by "
"Zackery Spytz in :issue:`25451`.)"
msgstr ""
":class:`tkinter.PhotoImage` 클래스는 이제 "
":meth:`~tkinter.PhotoImage.transparency_get`\\과 "
":meth:`~tkinter.PhotoImage.transparency_set` 메서드를 갖습니다. (Contributed by "
"Zackery Spytz in :issue:`25451`.)"

#: ../../whatsnew/3.8.rst:1306
msgid "time"
msgstr "time"

#: ../../whatsnew/3.8.rst:1308
#, fuzzy
msgid ""
"Added new clock :const:`~time.CLOCK_UPTIME_RAW` for macOS 10.12. "
"(Contributed by Joannah Nanjekye in :issue:`35702`.)"
msgstr ""
"macOS 10.12를 위한 새로운 시계 :data:`~time.CLOCK_UPTIME_RAW`\\가 추가되었습니다. "
"(Contributed by Joannah Nanjekye in :issue:`35702`.)"

#: ../../whatsnew/3.8.rst:1313
msgid "typing"
msgstr "typing"

#: ../../whatsnew/3.8.rst:1315
msgid "The :mod:`typing` module incorporates several new features:"
msgstr ":mod:`typing` 모듈은 몇 가지 새로운 기능을 통합했습니다:"

#: ../../whatsnew/3.8.rst:1317
msgid ""
"A dictionary type with per-key types.  See :pep:`589` and "
":class:`typing.TypedDict`. TypedDict uses only string keys.  By default, "
"every key is required to be present. Specify \"total=False\" to allow "
"keys to be optional::"
msgstr ""
"키별 형이 있는 딕셔너리 형. :pep:`589`\\와 :class:`typing.TypedDict`\\를 참조하십시오. "
"TypedDict는 문자열 키만 사용합니다. 기본적으로, 모든 키가 있어야 합니다. 키를 선택적으로 만들려면 "
"\"total=False\"를 지정하십시오::"

#: ../../whatsnew/3.8.rst:1322
msgid ""
"class Location(TypedDict, total=False):\n"
"    lat_long: tuple\n"
"    grid_square: str\n"
"    xy_coordinate: tuple"
msgstr ""

#: ../../whatsnew/3.8.rst:1327
msgid ""
"Literal types.  See :pep:`586` and :class:`typing.Literal`. Literal types"
" indicate that a parameter or return value is constrained to one or more "
"specific literal values::"
msgstr ""
"리터럴 형. :pep:`586`\\과 :class:`typing.Literal`\\을 참조하십시오. Literal 형은 매개 변수나"
" 반환 값이 하나 이상의 특정 리터럴 값으로 제한됨을 나타냅니다::"

#: ../../whatsnew/3.8.rst:1331
msgid ""
"def get_status(port: int) -> Literal['connected', 'disconnected']:\n"
"    ..."
msgstr ""

#: ../../whatsnew/3.8.rst:1334
msgid ""
"\"Final\" variables, functions, methods and classes.  See :pep:`591`, "
":class:`typing.Final` and :func:`typing.final`. The final qualifier "
"instructs a static type checker to restrict subclassing, overriding, or "
"reassignment::"
msgstr ""
"\"최종(final)\" 변수, 함수, 메서드 및 클래스. :pep:`591`, :class:`typing.Final` 및 "
":func:`typing.final`\\을 참조하십시오. final 한정자는 정적 형 검사기에 서브 클래싱, 재정의 또는 재대입을 "
"제한하도록 지시합니다::"

#: ../../whatsnew/3.8.rst:1339
msgid "pi: Final[float] = 3.1415926536"
msgstr ""

#: ../../whatsnew/3.8.rst:1341
msgid ""
"Protocol definitions.  See :pep:`544`, :class:`typing.Protocol` and "
":func:`typing.runtime_checkable`.  Simple ABCs like "
":class:`typing.SupportsInt` are now ``Protocol`` subclasses."
msgstr ""
"프로토콜 정의. :pep:`544`, :class:`typing.Protocol` 및 "
":func:`typing.runtime_checkable`\\을 참조하십시오. "
":class:`typing.SupportsInt`\\와 같은 간단한 ABC는 이제 ``Protocol`` 서브 클래스입니다."

#: ../../whatsnew/3.8.rst:1345
msgid "New protocol class :class:`typing.SupportsIndex`."
msgstr "새 프로토콜 클래스 :class:`typing.SupportsIndex`."

#: ../../whatsnew/3.8.rst:1347
msgid "New functions :func:`typing.get_origin` and :func:`typing.get_args`."
msgstr "새 함수 :func:`typing.get_origin`\\과 :func:`typing.get_args`."

#: ../../whatsnew/3.8.rst:1351
msgid "unicodedata"
msgstr "unicodedata"

#: ../../whatsnew/3.8.rst:1353
#, fuzzy
msgid ""
"The :mod:`unicodedata` module has been upgraded to use the `Unicode "
"12.1.0 <https://blog.unicode.org/2019/05/unicode-12-1-en.html>`_ release."
msgstr ""
":mod:`unicodedata` 모듈은 `유니코드 12.1.0 "
"<http://blog.unicode.org/2019/05/unicode-12-1-en.html>`_ 릴리스를 사용하도록 "
"업그레이드되었습니다."

#: ../../whatsnew/3.8.rst:1356
msgid ""
"New function :func:`~unicodedata.is_normalized` can be used to verify a "
"string is in a specific normal form, often much faster than by actually "
"normalizing the string.  (Contributed by Max Belanger, David Euresti, and"
" Greg Price in :issue:`32285` and :issue:`37966`)."
msgstr ""
"새 함수 :func:`~unicodedata.is_normalized`\\를 문자열이 특정 정규화 형식인지 확인하는 데 사용할 수 "
"있습니다. 종종 실제로 문자열을 정규화하는 것보다 훨씬 빠릅니다. (Contributed by Max Belanger, David "
"Euresti, and Greg Price in :issue:`32285` and :issue:`37966`)."

#: ../../whatsnew/3.8.rst:1363
msgid "unittest"
msgstr "unittest"

#: ../../whatsnew/3.8.rst:1365
msgid ""
"Added :class:`~unittest.mock.AsyncMock` to support an asynchronous "
"version of :class:`~unittest.mock.Mock`.  Appropriate new assert "
"functions for testing have been added as well. (Contributed by Lisa Roach"
" in :issue:`26467`)."
msgstr ""
":class:`~unittest.mock.Mock`\\의 비동기 버전을 지원하는 "
":class:`~unittest.mock.AsyncMock`\\이 추가되었습니다. 테스트를 위해 적절한 새로운 assert 함수들이"
" 추가되었습니다. (Contributed by Lisa Roach in :issue:`26467`)."

#: ../../whatsnew/3.8.rst:1370
#, fuzzy
msgid ""
"Added :func:`~unittest.addModuleCleanup` and "
":meth:`~unittest.TestCase.addClassCleanup` to unittest to support "
"cleanups for :func:`~unittest.setUpModule` and "
":meth:`~unittest.TestCase.setUpClass`. (Contributed by Lisa Roach in "
":issue:`24412`.)"
msgstr ""
":func:`~unittest.setUpModule()`\\과 "
":meth:`~unittest.TestCase.setUpClass()`\\에 대한 정리를 지원하기 위해 unittest에 "
":func:`~unittest.addModuleCleanup()` 과 "
":meth:`~unittest.TestCase.addClassCleanup()`\\를 추가했습니다. (Contributed by "
"Lisa Roach in :issue:`24412`.)"

#: ../../whatsnew/3.8.rst:1376
msgid ""
"Several mock assert functions now also print a list of actual calls upon "
"failure. (Contributed by Petter Strandmark in :issue:`35047`.)"
msgstr ""
"여러 mock assert 함수는 이제 실패 시 실제 호출의 리스트도 인쇄합니다. (Contributed by Petter "
"Strandmark in :issue:`35047`.)"

#: ../../whatsnew/3.8.rst:1379
msgid ""
":mod:`unittest` module gained support for coroutines to be used as test "
"cases with :class:`unittest.IsolatedAsyncioTestCase`. (Contributed by "
"Andrew Svetlov in :issue:`32972`.)"
msgstr ""
":mod:`unittest` 모듈은 :class:`unittest.IsolatedAsyncioTestCase`\\를 통해 코루틴을 "
"테스트 케이스로 사용하는 지원을 얻었습니다. (Contributed by Andrew Svetlov in "
":issue:`32972`.)"

#: ../../whatsnew/3.8.rst:1383
msgid "Example::"
msgstr "예::"

#: ../../whatsnew/3.8.rst:1385
msgid ""
"import unittest\n"
"\n"
"\n"
"class TestRequest(unittest.IsolatedAsyncioTestCase):\n"
"\n"
"    async def asyncSetUp(self):\n"
"        self.connection = await AsyncConnection()\n"
"\n"
"    async def test_get(self):\n"
"        response = await self.connection.get(\"https://example.com\")\n"
"        self.assertEqual(response.status_code, 200)\n"
"\n"
"    async def asyncTearDown(self):\n"
"        await self.connection.close()\n"
"\n"
"\n"
"if __name__ == \"__main__\":\n"
"    unittest.main()"
msgstr ""

#: ../../whatsnew/3.8.rst:1406
msgid "venv"
msgstr "venv"

#: ../../whatsnew/3.8.rst:1408
msgid ""
":mod:`venv` now includes an ``Activate.ps1`` script on all platforms for "
"activating virtual environments under PowerShell Core 6.1. (Contributed "
"by Brett Cannon in :issue:`32718`.)"
msgstr ""
":mod:`venv`\\는 이제 PowerShell Core 6.1에서 가상 환경을 활성화하기 위한 모든 플랫폼에 "
"``Activate.ps1`` 스크립트를 포함합니다. (Contributed by Brett Cannon in "
":issue:`32718`.)"

#: ../../whatsnew/3.8.rst:1414
msgid "weakref"
msgstr "weakref"

#: ../../whatsnew/3.8.rst:1416
msgid ""
"The proxy objects returned by :func:`weakref.proxy` now support the "
"matrix multiplication operators ``@`` and ``@=`` in addition to the other"
" numeric operators. (Contributed by Mark Dickinson in :issue:`36669`.)"
msgstr ""
":func:`weakref.proxy`\\에 의해 반환된 프락시 객체는 이제 다른 숫자 연산자에 더해 행렬 곱셈 연산자 "
"``@``\\와 ``@=``\\을 지원합니다. (Contributed by Mark Dickinson in "
":issue:`36669`.)"

#: ../../whatsnew/3.8.rst:1422
msgid "xml"
msgstr "xml"

#: ../../whatsnew/3.8.rst:1424
msgid ""
"As mitigation against DTD and external entity retrieval, the "
":mod:`xml.dom.minidom` and :mod:`xml.sax` modules no longer process "
"external entities by default. (Contributed by Christian Heimes in "
":issue:`17239`.)"
msgstr ""
"DTD 및 외부 엔티티 조회에 대한 완화로서, :mod:`xml.dom.minidom`\\과 :mod:`xml.sax` 모듈은 "
"기본적으로 더는 외부 엔티티를 처리하지 않습니다. (Contributed by Christian Heimes in "
":issue:`17239`.)"

#: ../../whatsnew/3.8.rst:1429
#, python-brace-format
msgid ""
"The ``.find*()`` methods in the :mod:`xml.etree.ElementTree` module "
"support wildcard searches like ``{*}tag`` which ignores the namespace and"
" ``{namespace}*`` which returns all tags in the given namespace. "
"(Contributed by Stefan Behnel in :issue:`28238`.)"
msgstr ""
":mod:`xml.etree.ElementTree` 모듈의 ``.find*()`` 메서드는 이름 공간을 무시하는 "
"``{*}tag``\\와 지정된 이름 공간의 모든 태그를 반환하는 ``{namespace}*``\\와 같은 와일드카드 검색을 "
"지원합니다. (Contributed by Stefan Behnel in :issue:`28238`.)"

#: ../../whatsnew/3.8.rst:1434
#, fuzzy
msgid ""
"The :mod:`xml.etree.ElementTree` module provides a new function "
":func:`–xml.etree.ElementTree.canonicalize` that implements C14N 2.0. "
"(Contributed by Stefan Behnel in :issue:`13611`.)"
msgstr ""
":mod:`xml.etree.ElementTree` 모듈은 C14N 2.0을 구현하는 새로운 함수 "
":func:`–xml.etree.ElementTree.canonicalize()`\\를 제공합니다. (Contributed by "
"Stefan Behnel in :issue:`13611`.)"

#: ../../whatsnew/3.8.rst:1438
msgid ""
"The target object of :class:`xml.etree.ElementTree.XMLParser` can receive"
" namespace declaration events through the new callback methods "
"``start_ns()`` and ``end_ns()``.  Additionally, the "
":class:`xml.etree.ElementTree.TreeBuilder` target can be configured to "
"process events about comments and processing instructions to include them"
" in the generated tree. (Contributed by Stefan Behnel in :issue:`36676` "
"and :issue:`36673`.)"
msgstr ""
":class:`xml.etree.ElementTree.XMLParser`\\의 대상 객체는 새 콜백 메서드 "
"``start_ns()``\\와 ``end_ns()``\\를 통해 이름 공간 선언 이벤트를 수신할 수 있습니다. 또한, "
":class:`xml.etree.ElementTree.TreeBuilder` 대상은 주석과 처리 명령어에 대한 이벤트를 처리하여 "
"생성된 트리에 포함하도록 구성할 수 있습니다. (Contributed by Stefan Behnel in :issue:`36676`"
" and :issue:`36673`.)"

#: ../../whatsnew/3.8.rst:1448
msgid "xmlrpc"
msgstr "xmlrpc"

#: ../../whatsnew/3.8.rst:1450
msgid ""
":class:`xmlrpc.client.ServerProxy` now supports an optional *headers* "
"keyword argument for a sequence of HTTP headers to be sent with each "
"request.  Among other things, this makes it possible to upgrade from "
"default basic authentication to faster session authentication. "
"(Contributed by Cédric Krier in :issue:`35153`.)"
msgstr ""
":class:`xmlrpc.client.ServerProxy`\\는 이제 각 요청과 함께 보낼 HTTP 헤더의 시퀀스를 위한 선택적"
" *headers* 키워드 인자를 지원합니다. 무엇보다도, 기본 베이식 인증(basic authentication)에서 더 빠른 "
"세션 인증(session authentication)으로 업그레이드 할 수 있도록 합니다. (Contributed by Cédric"
" Krier in :issue:`35153`.)"

#: ../../whatsnew/3.8.rst:1458
msgid "Optimizations"
msgstr "최적화"

#: ../../whatsnew/3.8.rst:1460
msgid ""
"The :mod:`subprocess` module can now use the :func:`os.posix_spawn` "
"function in some cases for better performance. Currently, it is only used"
" on macOS and Linux (using glibc 2.24 or newer) if all these conditions "
"are met:"
msgstr ""
":mod:`subprocess` 모듈은 이제 성능 향상을 위해 몇몇 경우 :func:`os.posix_spawn` 함수를 사용할 수"
" 있습니다. 현재, 다음과 같은 조건이 모두 충족될 때 macOS와 리눅스(glibc 2.24 이상 사용)에서만 사용됩니다:"

#: ../../whatsnew/3.8.rst:1464
msgid "*close_fds* is false;"
msgstr "*close_fds*\\가 거짓입니다."

#: ../../whatsnew/3.8.rst:1465
msgid ""
"*preexec_fn*, *pass_fds*, *cwd* and *start_new_session* parameters are "
"not set;"
msgstr "*preexec_fn*, *pass_fds*, *cwd* 및 *start_new_session* 매개 변수가 설정되지 않았습니다."

#: ../../whatsnew/3.8.rst:1467
msgid "the *executable* path contains a directory."
msgstr "*executable* 경로가 디렉터리를 포함합니다."

#: ../../whatsnew/3.8.rst:1469
msgid "(Contributed by Joannah Nanjekye and Victor Stinner in :issue:`35537`.)"
msgstr "(Contributed by Joannah Nanjekye and Victor Stinner in :issue:`35537`.)"

#: ../../whatsnew/3.8.rst:1471
#, python-format
msgid ""
":func:`shutil.copyfile`, :func:`shutil.copy`, :func:`shutil.copy2`, "
":func:`shutil.copytree` and :func:`shutil.move` use platform-specific "
"\"fast-copy\" syscalls on Linux and macOS in order to copy the file more "
"efficiently. \"fast-copy\" means that the copying operation occurs within"
" the kernel, avoiding the use of userspace buffers in Python as in "
"\"``outfd.write(infd.read())``\". On Windows :func:`shutil.copyfile` uses"
" a bigger default buffer size (1 MiB instead of 16 KiB) and a "
":func:`memoryview`-based variant of :func:`shutil.copyfileobj` is used. "
"The speedup for copying a 512 MiB file within the same partition is about"
" +26% on Linux, +50% on macOS and +40% on Windows. Also, much less CPU "
"cycles are consumed. See :ref:`shutil-platform-dependent-efficient-copy-"
"operations` section. (Contributed by Giampaolo Rodolà in :issue:`33671`.)"
msgstr ""
":func:`shutil.copyfile`, :func:`shutil.copy`, :func:`shutil.copy2`, "
":func:`shutil.copytree` 및 :func:`shutil.move`\\는 파일을 보다 효율적으로 복사하기 위해 "
"리눅스와 macOS에서 플랫폼별 \"빠른 복사(fast-copy)\" 시스템 호출을 사용합니다. \"빠른 복사\"는 복사 작업이 "
"커널 내에서 발생하여 \"``outfd.write(infd.read())``\"처럼 파이썬에서 사용자 공간(userspace) "
"버퍼를 사용하지 않도록 합니다. 윈도우에서  :func:`shutil.copyfile`\\은 더 큰 기본 버퍼 크기(16 KiB "
"대신 1 MiB)를 사용하고 :func:`shutil.copyfileobj`\\의 :func:`memoryview` 기반 변형이 "
"사용됩니다. 같은 파티션 내에서 512 MiB 파일을 복사할 때 속도 개선은 리눅스에서는 약 +26%, macOS에서는 +50%, "
"윈도우에서는 +40%입니다. 또한, 훨씬 적은 CPU 사이클이 소모됩니다. :ref:`shutil-platform-"
"dependent-efficient-copy-operations` 절을 참조하십시오. (Contributed by Giampaolo"
" Rodolà in :issue:`33671`.)"

#: ../../whatsnew/3.8.rst:1487
#, python-format
msgid ""
":func:`shutil.copytree` uses :func:`os.scandir` function and all copy "
"functions depending from it use cached :func:`os.stat` values. The "
"speedup for copying a directory with 8000 files is around +9% on Linux, "
"+20% on Windows and +30% on a Windows SMB share. Also the number of "
":func:`os.stat` syscalls is reduced by 38% making :func:`shutil.copytree`"
" especially faster on network filesystems. (Contributed by Giampaolo "
"Rodolà in :issue:`33695`.)"
msgstr ""
":func:`shutil.copytree`\\는 :func:`os.scandir` 함수를 사용하고 이것에 의존하는 모든 복사 함수는"
" 캐시 된 :func:`os.stat` 값을 사용합니다. 8000개의 파일이 있는 디렉터리를 복사할 때 속도 개선은 리눅스에서는 "
"+9%, 윈도우에서는 +20%, 윈도우 SMB 공유에서는 +30%입니다. 또한, :func:`os.stat` 시스템 호출 수가 "
"38% 감소하여 특히 :func:`shutil.copytree`\\가 네트워크 파일 시스템에서 더 빠릅니다. (Contributed"
" by Giampaolo Rodolà in :issue:`33695`.)"

#: ../../whatsnew/3.8.rst:1494
msgid ""
"The default protocol in the :mod:`pickle` module is now Protocol 4, first"
" introduced in Python 3.4.  It offers better performance and smaller size"
" compared to Protocol 3 available since Python 3.0."
msgstr ""
":mod:`pickle` 모듈의 기본 프로토콜은 이제 파이썬 3.4에서 처음 소개된 프로토콜 4입니다. 파이썬 3.0부터 사용 "
"가능한 프로토콜 3보다 성능이 우수하고 크기가 작습니다."

#: ../../whatsnew/3.8.rst:1498
#, fuzzy
msgid ""
"Removed one :c:type:`Py_ssize_t` member from ``PyGC_Head``.  All GC "
"tracked objects (e.g. tuple, list, dict) size is reduced 4 or 8 bytes. "
"(Contributed by Inada Naoki in :issue:`33597`.)"
msgstr ""
"``PyGC_Head``\\에서 ``Py_ssize_t`` 멤버 하나를 삭제했습니다. 모든 GC 추적 객체(예를 들어, 튜플, "
"리스트, 딕셔너리)의 크기는 4 또는 8바이트 줄어듭니다. (Contributed by Inada Naoki in "
":issue:`33597`.)"

#: ../../whatsnew/3.8.rst:1502
msgid ""
":class:`uuid.UUID` now uses ``__slots__`` to reduce its memory footprint."
" (Contributed by Wouter Bolsterlee and Tal Einat in :issue:`30977`)"
msgstr ""
":class:`uuid.UUID`\\는 이제 ``__slots__``\\를 사용하여 메모리 사용량을 줄입니다. "
"(Contributed by Wouter Bolsterlee and Tal Einat in :issue:`30977`)"

#: ../../whatsnew/3.8.rst:1505
msgid ""
"Improved performance of :func:`operator.itemgetter` by 33%.  Optimized "
"argument handling and added a fast path for the common case of a single "
"non-negative integer index into a tuple (which is the typical use case in"
" the standard library).  (Contributed by Raymond Hettinger in "
":issue:`35664`.)"
msgstr ""
":func:`operator.itemgetter`\\의 33% 성능 향상. 인자 처리를 최적화하고 튜플에 대한 하나의 음수가 아닌 "
"정수 인덱스의 흔한 경우에 대한 빠른 경로를 추가했습니다 (표준 라이브러리의 일반적인 사용 사례입니다). (Contributed "
"by Raymond Hettinger in :issue:`35664`.)"

#: ../../whatsnew/3.8.rst:1511
msgid ""
"Sped-up field lookups in :func:`collections.namedtuple`.  They are now "
"more than two times faster, making them the fastest form of instance "
"variable lookup in Python. (Contributed by Raymond Hettinger, Pablo "
"Galindo, and Joe Jevnik, Serhiy Storchaka in :issue:`32492`.)"
msgstr ""
":func:`collections.namedtuple`\\에서의 필드 조회 속도 향상. 이제 두 배 이상 빨라져, 파이썬에서 가장 "
"빠른 인스턴스 변수 조회 형식이 되었습니다. (Contributed by Raymond Hettinger, Pablo "
"Galindo, and Joe Jevnik, Serhiy Storchaka in :issue:`32492`.)"

#: ../../whatsnew/3.8.rst:1516
#, python-format
msgid ""
"The :class:`list` constructor does not overallocate the internal item "
"buffer if the input iterable has a known length (the input implements "
"``__len__``). This makes the created list 12% smaller on average. "
"(Contributed by Raymond Hettinger and Pablo Galindo in :issue:`33234`.)"
msgstr ""
":class:`list` 생성자는 입력 이터러블의 길이를 알 수 있으면 (입력이 ``__len__``\\을 구현하면) 내부 항목 "
"버퍼를 초과 할당하지 않습니다. 이것은 생성된 리스트가 평균 12% 작게 만듭니다. (Contributed by Raymond "
"Hettinger and Pablo Galindo in :issue:`33234`.)"

#: ../../whatsnew/3.8.rst:1521
msgid ""
"Doubled the speed of class variable writes.  When a non-dunder attribute "
"was updated, there was an unnecessary call to update slots. (Contributed "
"by Stefan Behnel, Pablo Galindo Salgado, Raymond Hettinger, Neil "
"Schemenauer, and Serhiy Storchaka in :issue:`36012`.)"
msgstr ""
"클래스 변수 쓰기 속도 두 배 향상. 특수하지 않은(non-dunder) 어트리뷰트가 갱신되었을 때, 슬롯 갱신을 위한 불필요한 "
"호출이 있었습니다. (Contributed by Stefan Behnel, Pablo Galindo Salgado, Raymond "
"Hettinger, Neil Schemenauer, and Serhiy Storchaka in :issue:`36012`.)"

#: ../../whatsnew/3.8.rst:1526
msgid ""
"Reduced an overhead of converting arguments passed to many builtin "
"functions and methods.  This sped up calling some simple builtin "
"functions and methods up to 20--50%.  (Contributed by Serhiy Storchaka in"
" :issue:`23867`, :issue:`35582` and :issue:`36127`.)"
msgstr ""
"많은 내장 함수와 메서드에 전달된 인자를 변환하는 오버헤드 감소. 이것은 몇몇 간단한 내장 함수와 메서드 호출을 20--50%까지 "
"가속합니다. (Contributed by Serhiy Storchaka in :issue:`23867`, :issue:`35582`"
" and :issue:`36127`.)"

#: ../../whatsnew/3.8.rst:1531
#, python-format
msgid ""
"``LOAD_GLOBAL`` instruction now uses new \"per opcode cache\" mechanism. "
"It is about 40% faster now.  (Contributed by Yury Selivanov and Inada "
"Naoki in :issue:`26219`.)"
msgstr ""
"``LOAD_GLOBAL`` 명령어는 이제 새로운 \"옵코드(opcode) 단위 캐시\" 메커니즘을 사용합니다. 이제 약 40% "
"빨라졌습니다. (Contributed by Yury Selivanov and Inada Naoki in "
":issue:`26219`.)"

#: ../../whatsnew/3.8.rst:1537
msgid "Build and C API Changes"
msgstr "빌드와 C API 변경"

#: ../../whatsnew/3.8.rst:1539
msgid ""
"Default :data:`sys.abiflags` became an empty string: the ``m`` flag for "
"pymalloc became useless (builds with and without pymalloc are ABI "
"compatible) and so has been removed. (Contributed by Victor Stinner in "
":issue:`36707`.)"
msgstr ""
"기본 :data:`sys.abiflags`\\는 빈 문자열이 되었습니다: pymalloc을 위한 ``m`` 플래그가 쓸모없게 "
"되었으므로 (pymalloc을 포함하거나 포함하지 않는 빌드는 ABI 호환입니다) 제거되었습니다. (Contributed by "
"Victor Stinner in :issue:`36707`.)"

#: ../../whatsnew/3.8.rst:1543
msgid "Example of changes:"
msgstr "변경의 예:"

#: ../../whatsnew/3.8.rst:1545
msgid "Only ``python3.8`` program is installed, ``python3.8m`` program is gone."
msgstr "``python3.8`` 프로그램만 설치되고, ``python3.8m`` 프로그램은 사라졌습니다."

#: ../../whatsnew/3.8.rst:1546
msgid ""
"Only ``python3.8-config`` script is installed, ``python3.8m-config`` "
"script is gone."
msgstr "``python3.8-config`` 스크립트만 설치되고, ``python3.8m-config`` 스크립트는 사라졌습니다."

#: ../../whatsnew/3.8.rst:1548
msgid ""
"The ``m`` flag has been removed from the suffix of dynamic library "
"filenames: extension modules in the standard library as well as those "
"produced and installed by third-party packages, like those downloaded "
"from PyPI. On Linux, for example, the Python 3.7 suffix ``.cpython-"
"37m-x86_64-linux-gnu.so`` became ``.cpython-38-x86_64-linux-gnu.so`` in "
"Python 3.8."
msgstr ""
"``m`` 플래그는 동적 라이브러리 파일명의 접미사에서 제거되었습니다: 표준 라이브러리는 물론 PyPI에서 다운로드 한 것과 같은 "
"제삼자 패키지에서 생성되고 설치된 확장 모듈. 예를 들어, 리눅스에서 파이썬 3.7 접미사 ``.cpython-37m-x86_64"
"-linux-gnu.so``\\는 파이썬 3.8에서 ``.cpython-38-x86_64-linux-gnu.so``\\가 "
"되었습니다."

#: ../../whatsnew/3.8.rst:1555
msgid ""
"The header files have been reorganized to better separate the different "
"kinds of APIs:"
msgstr "여러 종류의 API를 더 잘 구분할 수 있도록 헤더 파일이 재구성되었습니다:"

#: ../../whatsnew/3.8.rst:1558
msgid "``Include/*.h`` should be the portable public stable C API."
msgstr "``Include/*.h``\\는 이식성 있는 공용 안정 C API 여야 합니다."

#: ../../whatsnew/3.8.rst:1559
msgid ""
"``Include/cpython/*.h`` should be the unstable C API specific to CPython;"
" public API, with some private API prefixed by ``_Py`` or ``_PY``."
msgstr ""
"``Include/cpython/*.h``\\는 CPython에 고유한 불안정한 C API 여야 합니다; ``_Py``\\나 "
"``_PY``\\로 시작하는 일부 비공개 API가 포함된 공개 API."

#: ../../whatsnew/3.8.rst:1561
msgid ""
"``Include/internal/*.h`` is the private internal C API very specific to "
"CPython. This API comes with no backward compatibility warranty and "
"should not be used outside CPython. It is only exposed for very specific "
"needs like debuggers and profiles which has to access to CPython "
"internals without calling functions. This API is now installed by ``make "
"install``."
msgstr ""
"``Include/internal/*.h``\\는 아주 CPython에 특정한 비공개 내부 C API입니다. 이 API는 과거 "
"호환성 보증이 없어서, CPython 외부에서 사용해서는 안 됩니다. 이것은 함수를 호출하지 않고 CPython 내부에 액세스해야 "
"하는 디버거나 프로파일과 같이 매우 구체적인 요구 사항을 위해서만 노출됩니다. 이 API는 이제 ``make install``\\에"
" 의해 설치됩니다."

#: ../../whatsnew/3.8.rst:1567
msgid ""
"(Contributed by Victor Stinner in :issue:`35134` and :issue:`35081`, work"
" initiated by Eric Snow in Python 3.7.)"
msgstr ""
"(Contributed by Victor Stinner in :issue:`35134` and :issue:`35081`, Eric"
" Snow가 파이썬 3.7에서 시작한 작업.)"

#: ../../whatsnew/3.8.rst:1570
msgid ""
"Some macros have been converted to static inline functions: parameter "
"types and return type are well defined, they don't have issues specific "
"to macros, variables have a local scopes. Examples:"
msgstr ""
"일부 매크로는 정적 인라인 함수로 변환되었습니다: 매개 변수 형과 반환형이 잘 정의되며, 매크로에 특정한 문제가 없으며, 변수는 "
"지역 스코프를 갖습니다. 예:"

#: ../../whatsnew/3.8.rst:1574
msgid ":c:func:`Py_INCREF`, :c:func:`Py_DECREF`"
msgstr ":c:func:`Py_INCREF`, :c:func:`Py_DECREF`"

#: ../../whatsnew/3.8.rst:1575
msgid ":c:func:`Py_XINCREF`, :c:func:`Py_XDECREF`"
msgstr ":c:func:`Py_XINCREF`, :c:func:`Py_XDECREF`"

#: ../../whatsnew/3.8.rst:1576
msgid ":c:func:`PyObject_INIT`, :c:func:`PyObject_INIT_VAR`"
msgstr ":c:func:`PyObject_INIT`, :c:func:`PyObject_INIT_VAR`"

#: ../../whatsnew/3.8.rst:1577
#, fuzzy
msgid ""
"Private functions: :c:func:`!_PyObject_GC_TRACK`, "
":c:func:`!_PyObject_GC_UNTRACK`, :c:func:`!_Py_Dealloc`"
msgstr ""
"비공개 함수: :c:func:`_PyObject_GC_TRACK`, :c:func:`_PyObject_GC_UNTRACK`, "
":c:func:`_Py_Dealloc`"

#: ../../whatsnew/3.8.rst:1580
msgid "(Contributed by Victor Stinner in :issue:`35059`.)"
msgstr "(Contributed by Victor Stinner in :issue:`35059`.)"

#: ../../whatsnew/3.8.rst:1582
#, fuzzy
msgid ""
"The :c:func:`!PyByteArray_Init` and :c:func:`!PyByteArray_Fini` functions"
" have been removed. They did nothing since Python 2.7.4 and Python 3.2.0,"
" were excluded from the limited API (stable ABI), and were not "
"documented. (Contributed by Victor Stinner in :issue:`35713`.)"
msgstr ""
":c:func:`PyByteArray_Init`\\와 :c:func:`PyByteArray_Fini` 함수가 제거되었습니다. 파이썬"
" 2.7.4와 파이썬 3.2.0부터 아무것도 하지 않고, 제한된 API(안정 ABI)에서 제외되었으며 문서로 만들어지지 않았습니다."
" (Contributed by Victor Stinner in :issue:`35713`.)"

#: ../../whatsnew/3.8.rst:1587
msgid ""
"The result of :c:func:`PyExceptionClass_Name` is now of type ``const char"
" *`` rather of ``char *``. (Contributed by Serhiy Storchaka in "
":issue:`33818`.)"
msgstr ""
":c:func:`PyExceptionClass_Name`\\의 결과는 이제 ``char *`` 대신 ``const char *`` "
"형입니다. (Contributed by Serhiy Storchaka in :issue:`33818`.)"

#: ../../whatsnew/3.8.rst:1591
msgid ""
"The duality of ``Modules/Setup.dist`` and ``Modules/Setup`` has been "
"removed.  Previously, when updating the CPython source tree, one had to "
"manually copy ``Modules/Setup.dist`` (inside the source tree) to "
"``Modules/Setup`` (inside the build tree) in order to reflect any changes"
" upstream.  This was of a small benefit to packagers at the expense of a "
"frequent annoyance to developers following CPython development, as "
"forgetting to copy the file could produce build failures."
msgstr ""
"``Modules/Setup.dist``\\와 ``Modules/Setup``\\의 이중성이 제거되었습니다. 이전에는, "
"CPython 소스 트리를 갱신할 때, 업스트림 변경 사항을 반영하기 위해 ``Modules/Setup.dist``\\(소스 트리 "
"내부)를 ``Modules/Setup``\\(빌드 트리 내부)으로 수동으로 복사해야 했습니다. 이는 패키지 작성자에게는 작은 이점을"
" 제공했지만, 파일 복사를 잊어버리면 빌드가 실패할 수 있어서 CPython 개발자들을 자주 귀찮게 만들었습니다."

#: ../../whatsnew/3.8.rst:1599
msgid ""
"Now the build system always reads from ``Modules/Setup`` inside the "
"source tree.  People who want to customize that file are encouraged to "
"maintain their changes in a git fork of CPython or as patch files, as "
"they would do for any other change to the source tree."
msgstr ""
"이제 빌드 시스템은 항상 소스 트리 안의 ``Modules/Setup``\\에서 읽습니다. 그 파일을 사용자 정의하고 싶은 사람들은"
" 소스 트리에 대한 다른 변경과 마찬가지로 CPython의 git 포크나 패치 파일로 변경 사항을 유지하는 것이 좋습니다."

#: ../../whatsnew/3.8.rst:1604
msgid "(Contributed by Antoine Pitrou in :issue:`32430`.)"
msgstr "(Contributed by Antoine Pitrou in :issue:`32430`.)"

#: ../../whatsnew/3.8.rst:1606
msgid ""
"Functions that convert Python number to C integer like "
":c:func:`PyLong_AsLong` and argument parsing functions like "
":c:func:`PyArg_ParseTuple` with integer converting format units like "
"``'i'`` will now use the :meth:`~object.__index__` special method instead"
" of :meth:`~object.__int__`, if available.  The deprecation warning will "
"be emitted for objects with the ``__int__()`` method but without the "
"``__index__()`` method (like :class:`~decimal.Decimal` and "
":class:`~fractions.Fraction`).  :c:func:`PyNumber_Check` will now return "
"``1`` for objects implementing ``__index__()``. :c:func:`PyNumber_Long`, "
":c:func:`PyNumber_Float` and :c:func:`PyFloat_AsDouble` also now use the "
"``__index__()`` method if available. (Contributed by Serhiy Storchaka in "
":issue:`36048` and :issue:`20092`.)"
msgstr ""
":c:func:`PyLong_AsLong`\\과 같은 파이썬 숫자를 C 정수로 변환하는 함수와, "
":c:func:`PyArg_ParseTuple`\\처럼 ``'i'``\\와 같은 정수 변환 포맷 단위로 인자를 구문 분석하는 "
"함수는, 이제 사용할 수 있다면 :meth:`~object.__int__` 대신 :meth:`~object.__index__` 특수"
" 메서드를 사용합니다. ``__int__()`` 메서드가 있지만 ``__index__()`` 메서드가 없는 "
"객체(:class:`~decimal.Decimal`\\과 :class:`~fractions.Fraction` 같은)에 대해서 폐지 "
"경고가 발생합니다. :c:func:`PyNumber_Check`\\는 이제 ``__index__()``\\를 구현하는 객체에 대해 "
"``1``\\을 반환합니다. :c:func:`PyNumber_Long`, :c:func:`PyNumber_Float` 및 "
":c:func:`PyFloat_AsDouble`\\은 이제 사용할 수 있으면 ``__index__()`` 메서드를 사용합니다. "
"(Contributed by Serhiy Storchaka in :issue:`36048` and :issue:`20092`.)"

#: ../../whatsnew/3.8.rst:1620
msgid ""
"Heap-allocated type objects will now increase their reference count in "
":c:func:`PyObject_Init` (and its parallel macro ``PyObject_INIT``) "
"instead of in :c:func:`PyType_GenericAlloc`. Types that modify instance "
"allocation or deallocation may need to be adjusted. (Contributed by Eddie"
" Elizondo in :issue:`35810`.)"
msgstr ""
"힙에 할당된 형 객체는 이제 :c:func:`PyType_GenericAlloc`\\이 아닌 "
":c:func:`PyObject_Init`\\(그리고 이것과 평행한 매크로 ``PyObject_INIT``)에서 참조 횟수를 "
"증가시킵니다. 인스턴스 할당이나 할당 해제를 수정하는 형은 조정이 필요할 수 있습니다. (Contributed by Eddie "
"Elizondo in :issue:`35810`.)"

#: ../../whatsnew/3.8.rst:1626
#, fuzzy
msgid ""
"The new function :c:func:`!PyCode_NewWithPosOnlyArgs` allows to create "
"code objects like :c:func:`!PyCode_New`, but with an extra "
"*posonlyargcount* parameter for indicating the number of positional-only "
"arguments. (Contributed by Pablo Galindo in :issue:`37221`.)"
msgstr ""
"새 함수 :c:func:`PyCode_NewWithPosOnlyArgs`\\는 :c:func:`PyCode_New`\\처럼 코드 "
"객체를 만들 수 있지만, 위치 전용 인자의 개수를 나타내는 *posonlyargcount* 매개 변수가 추가로 있습니다. "
"(Contributed by Pablo Galindo in :issue:`37221`.)"

#: ../../whatsnew/3.8.rst:1631
#, fuzzy
msgid ""
":c:func:`!Py_SetPath` now sets :data:`sys.executable` to the program full"
" path (:c:func:`Py_GetProgramFullPath`) rather than to the program name "
"(:c:func:`Py_GetProgramName`). (Contributed by Victor Stinner in "
":issue:`38234`.)"
msgstr ""
":c:func:`Py_SetPath`\\는 이제 :data:`sys.executable`\\을 프로그램 "
"이름(:c:func:`Py_GetProgramName`) 대신 프로그램 전체 "
"경로(:c:func:`Py_GetProgramFullPath`)로 설정합니다. (Contributed by Victor "
"Stinner in :issue:`38234`.)"

#: ../../whatsnew/3.8.rst:1638
msgid "Deprecated"
msgstr "폐지"

#: ../../whatsnew/3.8.rst:1640
msgid ""
"The distutils ``bdist_wininst`` command is now deprecated, use "
"``bdist_wheel`` (wheel packages) instead. (Contributed by Victor Stinner "
"in :issue:`37481`.)"
msgstr ""
"distutils ``bdist_wininst`` 명령은 이제 폐지되었습니다, 대신 ``bdist_wheel``\\(wheel "
"패키지)을 사용하십시오. (Contributed by Victor Stinner in :issue:`37481`.)"

#: ../../whatsnew/3.8.rst:1644
msgid ""
"Deprecated methods ``getchildren()`` and ``getiterator()`` in the "
":mod:`~xml.etree.ElementTree` module now emit a :exc:`DeprecationWarning`"
" instead of :exc:`PendingDeprecationWarning`. They will be removed in "
"Python 3.9. (Contributed by Serhiy Storchaka in :issue:`29209`.)"
msgstr ""
":mod:`~xml.etree.ElementTree` 모듈의 폐지된 메서드 ``getchildren()``\\과 "
"``getiterator()``\\는 이제 :exc:`PendingDeprecationWarning` 대신 "
":exc:`DeprecationWarning`\\을 발생시킵니다. 이것들은 파이썬 3.9에서 제거될 것입니다. "
"(Contributed by Serhiy Storchaka in :issue:`29209`.)"

#: ../../whatsnew/3.8.rst:1650
msgid ""
"Passing an object that is not an instance of "
":class:`concurrent.futures.ThreadPoolExecutor` to "
":meth:`loop.set_default_executor() <asyncio.loop.set_default_executor>` "
"is deprecated and will be prohibited in Python 3.9. (Contributed by Elvis"
" Pranskevichus in :issue:`34075`.)"
msgstr ""
":class:`concurrent.futures.ThreadPoolExecutor`\\의 인스턴스가 아닌 객체를 "
":meth:`loop.set_default_executor() "
"<asyncio.loop.set_default_executor>`\\로 전달하는 것은 폐지되었고 파이썬 3.9에서 금지될 것입니다."
" (Contributed by Elvis Pranskevichus in :issue:`34075`.)"

#: ../../whatsnew/3.8.rst:1656
#, fuzzy
msgid ""
"The :meth:`~object.__getitem__` methods of "
":class:`xml.dom.pulldom.DOMEventStream`, "
":class:`wsgiref.util.FileWrapper` and :class:`fileinput.FileInput` have "
"been deprecated."
msgstr ""
":class:`xml.dom.pulldom.DOMEventStream`, "
":class:`wsgiref.util.FileWrapper` 및 :class:`fileinput.FileInput`\\의 "
":meth:`__getitem__` 메서드는 폐지되었습니다."

#: ../../whatsnew/3.8.rst:1660
msgid ""
"Implementations of these methods have been ignoring their *index* "
"parameter, and returning the next item instead. (Contributed by Berker "
"Peksag in :issue:`9372`.)"
msgstr ""
"이 메서드의 구현은 *index* 매개 변수를 무시하고 대신 다음 항목을 반환했습니다. (Contributed by Berker "
"Peksag in :issue:`9372`.)"

#: ../../whatsnew/3.8.rst:1664
msgid ""
"The :class:`typing.NamedTuple` class has deprecated the ``_field_types`` "
"attribute in favor of the ``__annotations__`` attribute which has the "
"same information. (Contributed by Raymond Hettinger in :issue:`36320`.)"
msgstr ""
":class:`typing.NamedTuple` 클래스는 ``_field_types`` 어트리뷰트를 폐지했고, 같은 정보를 갖는 "
"``__annotations__`` 어트리뷰트로 대신합니다. (Contributed by Raymond Hettinger in "
":issue:`36320`.)"

#: ../../whatsnew/3.8.rst:1668
msgid ""
":mod:`ast` classes ``Num``, ``Str``, ``Bytes``, ``NameConstant`` and "
"``Ellipsis`` are considered deprecated and will be removed in future "
"Python versions. :class:`~ast.Constant` should be used instead. "
"(Contributed by Serhiy Storchaka in :issue:`32892`.)"
msgstr ""
":mod:`ast` 클래스 ``Num``, ``Str``, ``Bytes``, ``NameConstant`` 및 "
"``Ellipsis``\\는 폐지된 것으로 간주하고 향후 파이썬 버전에서 제거될 예정입니다. 대신 "
":class:`~ast.Constant`\\를 사용해야 합니다. (Contributed by Serhiy Storchaka in "
":issue:`32892`.)"

#: ../../whatsnew/3.8.rst:1673
msgid ""
":class:`ast.NodeVisitor` methods ``visit_Num()``, ``visit_Str()``, "
"``visit_Bytes()``, ``visit_NameConstant()`` and ``visit_Ellipsis()`` are "
"deprecated now and will not be called in future Python versions. Add the "
":meth:`~ast.NodeVisitor.visit_Constant` method to handle all constant "
"nodes. (Contributed by Serhiy Storchaka in :issue:`36917`.)"
msgstr ""
":class:`ast.NodeVisitor` 메서드 ``visit_Num()``, ``visit_Str()``, "
"``visit_Bytes()``, ``visit_NameConstant()`` 및 ``visit_Ellipsis()``\\는 이제 "
"폐지되었으며 향후 파이썬 버전에서는 호출되지 않을 것입니다. 모든 상수 노드를 처리하기 위해서는 "
":meth:`~ast.NodeVisitor.visit_Constant` 메서드를 추가하십시오. (Contributed by "
"Serhiy Storchaka in :issue:`36917`.)"

#: ../../whatsnew/3.8.rst:1680
msgid ""
"The :func:`asyncio.coroutine` :term:`decorator` is deprecated and will be"
" removed in version 3.10.  Instead of ``@asyncio.coroutine``, use "
":keyword:`async def` instead. (Contributed by Andrew Svetlov in "
":issue:`36921`.)"
msgstr ""
":func:`asyncio.coroutine` :term:`데코레이터 <decorator>`\\는 폐지되었고 버전 3.10에서 "
"제거됩니다. ``@asyncio.coroutine`` 대신, :keyword:`async def`\\를 사용하십시오. "
"(Contributed by Andrew Svetlov in :issue:`36921`.)"

#: ../../whatsnew/3.8.rst:1685
msgid ""
"In :mod:`asyncio`, the explicit passing of a *loop* argument has been "
"deprecated and will be removed in version 3.10 for the following: "
":func:`asyncio.sleep`, :func:`asyncio.gather`, :func:`asyncio.shield`, "
":func:`asyncio.wait_for`, :func:`asyncio.wait`, "
":func:`asyncio.as_completed`, :class:`asyncio.Task`, "
":class:`asyncio.Lock`, :class:`asyncio.Event`, "
":class:`asyncio.Condition`, :class:`asyncio.Semaphore`, "
":class:`asyncio.BoundedSemaphore`, :class:`asyncio.Queue`, "
":func:`asyncio.create_subprocess_exec`, and "
":func:`asyncio.create_subprocess_shell`."
msgstr ""
":mod:`asyncio`\\에서, 다음에 대해 *loop* 인자의 명시적 전달은 폐지되었고 버전 3.10에서 제거됩니다: "
":func:`asyncio.sleep`, :func:`asyncio.gather`, :func:`asyncio.shield`, "
":func:`asyncio.wait_for`, :func:`asyncio.wait`, "
":func:`asyncio.as_completed`, :class:`asyncio.Task`, "
":class:`asyncio.Lock`, :class:`asyncio.Event`, "
":class:`asyncio.Condition`, :class:`asyncio.Semaphore`, "
":class:`asyncio.BoundedSemaphore`, :class:`asyncio.Queue`, "
":func:`asyncio.create_subprocess_exec` 및 "
":func:`asyncio.create_subprocess_shell`."

#: ../../whatsnew/3.8.rst:1695
msgid ""
"The explicit passing of coroutine objects to :func:`asyncio.wait` has "
"been deprecated and will be removed in version 3.11. (Contributed by Yury"
" Selivanov in :issue:`34790`.)"
msgstr ""
"코루틴 객체를 :func:`asyncio.wait`\\에 명시적으로 전달하는 것은 폐지되었고 버전 3.11에서 제거됩니다. "
"(Contributed by Yury Selivanov in :issue:`34790`.)"

#: ../../whatsnew/3.8.rst:1699
msgid ""
"The following functions and methods are deprecated in the :mod:`gettext` "
"module: :func:`~gettext.lgettext`, :func:`~gettext.ldgettext`, "
":func:`~gettext.lngettext` and :func:`~gettext.ldngettext`. They return "
"encoded bytes, and it's possible that you will get unexpected Unicode-"
"related exceptions if there are encoding problems with the translated "
"strings. It's much better to use alternatives which return Unicode "
"strings in Python 3. These functions have been broken for a long time."
msgstr ""
":mod:`gettext` 모듈에서는 다음 함수와 메서드가 폐지되었습니다: :func:`~gettext.lgettext`, "
":func:`~gettext.ldgettext`, :func:`~gettext.lngettext` 및 "
":func:`~gettext.ldngettext`. 이들은 인코딩된 바이트열을 반환하며, 번역된 문자열에 인코딩 문제가 있을 때 "
"예기치 않은 유니코드 관련 예외가 발생할 수 있습니다. 파이썬 3에서 유니코드 문자열을 반환하는 대안을 사용하는 것이 훨씬 "
"낫습니다. 이 함수들은 오랫동안 망가져 있었습니다."

#: ../../whatsnew/3.8.rst:1707
msgid ""
"Function :func:`~gettext.bind_textdomain_codeset`, methods "
":meth:`~gettext.NullTranslations.output_charset` and "
":meth:`~gettext.NullTranslations.set_output_charset`, and the *codeset* "
"parameter of functions :func:`~gettext.translation` and "
":func:`~gettext.install` are also deprecated, since they are only used "
"for the ``l*gettext()`` functions. (Contributed by Serhiy Storchaka in "
":issue:`33710`.)"
msgstr ""
"함수 :func:`~gettext.bind_textdomain_codeset`, 메서드 "
":meth:`~gettext.NullTranslations.output_charset`\\과 "
":meth:`~gettext.NullTranslations.set_output_charset`, 함수 "
":func:`~gettext.translation`\\과 :func:`~gettext.install`\\의 *codeset* 매개 "
"변수도 폐지되었습니다, ``l*gettext()`` 함수에서만 사용되기 때문입니다. (Contributed by Serhiy "
"Storchaka in :issue:`33710`.)"

#: ../../whatsnew/3.8.rst:1715
#, fuzzy
msgid ""
"The :meth:`~threading.Thread.isAlive` method of :class:`threading.Thread`"
" has been deprecated. (Contributed by Donghee Na in :issue:`35283`.)"
msgstr ""
":class:`threading.Thread`\\의 :meth:`~threading.Thread.isAlive()` 메서드가 "
"폐지되었습니다. (Contributed by Dong-hee Na in :issue:`35283`.)"

#: ../../whatsnew/3.8.rst:1719
msgid ""
"Many builtin and extension functions that take integer arguments will now"
" emit a deprecation warning for :class:`~decimal.Decimal`\\ s, "
":class:`~fractions.Fraction`\\ s and any other objects that can be "
"converted to integers only with a loss (e.g. that have the "
":meth:`~object.__int__` method but do not have the "
":meth:`~object.__index__` method).  In future version they will be "
"errors. (Contributed by Serhiy Storchaka in :issue:`36048`.)"
msgstr ""
"정수 인자를 받아들이는 많은 내장과 확장 함수는 이제 :class:`~decimal.Decimal`\\ 들, "
":class:`~fractions.Fraction`\\ 들 및 정수로 변환될 때 손실을 수반하는 다른 객체들(예를 들어, "
":meth:`~object.__int__` 메서드는 있지만 :meth:`~object.__index__` 메서드는 없는 것들)에 "
"대해 폐지 경고를 발생시킵니다. 이후 버전에서는 에러가 될 것입니다. (Contributed by Serhiy Storchaka "
"in :issue:`36048`.)"

#: ../../whatsnew/3.8.rst:1727
msgid "Deprecated passing the following arguments as keyword arguments:"
msgstr "다음 인자들을 키워드 인자로 전달하는 것이 폐지되었습니다:"

#: ../../whatsnew/3.8.rst:1729
msgid ""
"*func* in :func:`functools.partialmethod`, :func:`weakref.finalize`, "
":meth:`profile.Profile.runcall`, :meth:`cProfile.Profile.runcall`, "
":meth:`bdb.Bdb.runcall`, :meth:`trace.Trace.runfunc` and "
":func:`curses.wrapper`."
msgstr ""
":func:`functools.partialmethod`, :func:`weakref.finalize`, "
":meth:`profile.Profile.runcall`, :meth:`cProfile.Profile.runcall`, "
":meth:`bdb.Bdb.runcall`, :meth:`trace.Trace.runfunc` 및 "
":func:`curses.wrapper`\\의 *func*."

#: ../../whatsnew/3.8.rst:1733
msgid "*function* in :meth:`unittest.TestCase.addCleanup`."
msgstr ":meth:`unittest.TestCase.addCleanup`\\의 *function*."

#: ../../whatsnew/3.8.rst:1734
msgid ""
"*fn* in the :meth:`~concurrent.futures.Executor.submit` method of "
":class:`concurrent.futures.ThreadPoolExecutor` and "
":class:`concurrent.futures.ProcessPoolExecutor`."
msgstr ""
":class:`concurrent.futures.ThreadPoolExecutor`\\과 "
":class:`concurrent.futures.ProcessPoolExecutor`\\의 "
":meth:`~concurrent.futures.Executor.submit` 메서드의 *fn*."

#: ../../whatsnew/3.8.rst:1737
msgid ""
"*callback* in :meth:`contextlib.ExitStack.callback`, "
":meth:`contextlib.AsyncExitStack.callback` and "
":meth:`contextlib.AsyncExitStack.push_async_callback`."
msgstr ""
":meth:`contextlib.ExitStack.callback`, "
":meth:`contextlib.AsyncExitStack.callback` 및 "
":meth:`contextlib.AsyncExitStack.push_async_callback`\\의 *callback*"

#: ../../whatsnew/3.8.rst:1740
msgid ""
"*c* and *typeid* in the :meth:`~multiprocessing.managers.Server.create` "
"method of :class:`multiprocessing.managers.Server` and "
":class:`multiprocessing.managers.SharedMemoryServer`."
msgstr ""
":class:`multiprocessing.managers.Server`\\와 "
":class:`multiprocessing.managers.SharedMemoryServer`\\의 "
":meth:`~multiprocessing.managers.Server.create` 메서드의 *c*\\와 *typeid*."

#: ../../whatsnew/3.8.rst:1743
msgid "*obj* in :func:`weakref.finalize`."
msgstr ":func:`weakref.finalize`\\의 *obj*."

#: ../../whatsnew/3.8.rst:1745
msgid ""
"In future releases of Python, they will be :ref:`positional-only "
"<positional-only_parameter>`. (Contributed by Serhiy Storchaka in "
":issue:`36492`.)"
msgstr ""
"파이썬의 향후 배포에서, 이것들은 :ref:`위치 전용 <positional-only_parameter>`\\이 될 것입니다. "
"(Contributed by Serhiy Storchaka in :issue:`36492`.)"

#: ../../whatsnew/3.8.rst:1751
msgid "API and Feature Removals"
msgstr "API 및 기능 제거"

#: ../../whatsnew/3.8.rst:1753
msgid "The following features and APIs have been removed from Python 3.8:"
msgstr "다음 기능과 API는 파이썬 3.8에서 제거되었습니다.:"

#: ../../whatsnew/3.8.rst:1755
#, fuzzy
msgid ""
"Starting with Python 3.3, importing ABCs from :mod:`collections` was "
"deprecated, and importing should be done from :mod:`collections.abc`. "
"Being able to import from collections was marked for removal in 3.8, but "
"has been delayed to 3.9. (See :gh:`81134`.)"
msgstr ""
"파이썬 3.3부터, :mod:`collections`\\에서 ABC를 임포트 하는 것은 폐지되었고, "
":mod:`collections.abc`\\에서 임포트를 수행해야 합니다. collections에서 임포트할 수 있는 것은 "
"3.8에서 제거될 것으로 표시되었지만 3.9로 지연되었습니다. (:issue:`36952` 참조)"

#: ../../whatsnew/3.8.rst:1760
msgid ""
"The :mod:`macpath` module, deprecated in Python 3.7, has been removed. "
"(Contributed by Victor Stinner in :issue:`35471`.)"
msgstr ""
"파이썬 3.7에서 폐지된, :mod:`macpath` 모듈이 제거되었습니다. (Contributed by Victor Stinner"
" in :issue:`35471`.)"

#: ../../whatsnew/3.8.rst:1763 ../../whatsnew/3.8.rst:1882
msgid ""
"The function :func:`platform.popen` has been removed, after having been "
"deprecated since Python 3.3: use :func:`os.popen` instead. (Contributed "
"by Victor Stinner in :issue:`35345`.)"
msgstr ""
"파이썬 3.3부터 폐지된 이후로, :func:`platform.popen` 함수는 제거되었습니다: 대신 "
":func:`os.popen`\\을 사용하십시오. (Contributed by Victor Stinner in "
":issue:`35345`.)"

#: ../../whatsnew/3.8.rst:1767
msgid ""
"The function :func:`time.clock` has been removed, after having been "
"deprecated since Python 3.3: use :func:`time.perf_counter` or "
":func:`time.process_time` instead, depending on your requirements, to "
"have well-defined behavior. (Contributed by Matthias Bussonnier in "
":issue:`36895`.)"
msgstr ""
"파이썬 3.3부터 폐지된 이후로, :func:`time.clock` 함수는 제거되었습니다: 잘 정의된 동작을 위해, 요구 사항에 "
"따라 :func:`time.perf_counter`\\나 :func:`time.process_time`\\을 대신 사용하십시오. "
"(Contributed by Matthias Bussonnier in :issue:`36895`.)"

#: ../../whatsnew/3.8.rst:1773
msgid ""
"The ``pyvenv`` script has been removed in favor of ``python3.8 -m venv`` "
"to help eliminate confusion as to what Python interpreter the ``pyvenv`` "
"script is tied to. (Contributed by Brett Cannon in :issue:`25427`.)"
msgstr ""
"``pyvenv`` 스크립트를 제거하고 ``python3.8 -m venv``\\로 대체하여, 어떤 파이썬 인터프리터가 "
"``pyvenv`` 스크립트와 연결되어 있는지에 대한 혼란을 없애줍니다. (Contributed by Brett Cannon in "
":issue:`25427`.)"

#: ../../whatsnew/3.8.rst:1777
#, fuzzy
msgid ""
"``parse_qs``, ``parse_qsl``, and ``escape`` are removed from the "
":mod:`!cgi` module.  They are deprecated in Python 3.2 or older. They "
"should be imported from the ``urllib.parse`` and ``html`` modules "
"instead."
msgstr ""
":mod:`cgi` 모듈에서 ``parse_qs``, ``parse_qsl`` 및 ``escape``\\가 제거되었습니다. 파이썬 "
"3.2 이하에서 폐지되었습니다. 대신 ``urllib.parse``\\와 ``html`` 모듈에서 임포트 해야 합니다."

#: ../../whatsnew/3.8.rst:1781
msgid ""
"``filemode`` function is removed from the :mod:`tarfile` module. It is "
"not documented and deprecated since Python 3.3."
msgstr ""
"``filemode`` 함수가 :mod:`tarfile` 모듈에서 제거되었습니다. 문서로 만들어지지 않았고, 파이썬 3.3부터 "
"폐지되었습니다."

#: ../../whatsnew/3.8.rst:1784
msgid ""
"The :class:`~xml.etree.ElementTree.XMLParser` constructor no longer "
"accepts the *html* argument.  It never had an effect and was deprecated "
"in Python 3.4. All other parameters are now :ref:`keyword-only <keyword-"
"only_parameter>`. (Contributed by Serhiy Storchaka in :issue:`29209`.)"
msgstr ""
":class:`~xml.etree.ElementTree.XMLParser` 생성자는 더는 *html* 인자를 받아들이지 않습니다. "
"효과가 있었던 적이 없고 3.4에서 폐지되었습니다. 다른 모든 매개 변수는 이제 :ref:`키워드 전용 <keyword-"
"only_parameter>`\\입니다. (Contributed by Serhiy Storchaka in "
":issue:`29209`.)"

#: ../../whatsnew/3.8.rst:1789
msgid ""
"Removed the ``doctype()`` method of "
":class:`~xml.etree.ElementTree.XMLParser`. (Contributed by Serhiy "
"Storchaka in :issue:`29209`.)"
msgstr ""
":class:`~xml.etree.ElementTree.XMLParser`\\의 ``doctype()`` 메서드를 제거했습니다. "
"(Contributed by Serhiy Storchaka in :issue:`29209`.)"

#: ../../whatsnew/3.8.rst:1792
msgid ""
"\"unicode_internal\" codec is removed. (Contributed by Inada Naoki in "
":issue:`36297`.)"
msgstr ""
"\"unicode_internal\" 코덱이 제거되었습니다. (Contributed by Inada Naoki in "
":issue:`36297`.)"

#: ../../whatsnew/3.8.rst:1795
msgid ""
"The ``Cache`` and ``Statement`` objects of the :mod:`sqlite3` module are "
"not exposed to the user. (Contributed by Aviv Palivoda in "
":issue:`30262`.)"
msgstr ""
":mod:`sqlite3` 모듈의 ``Cache``\\와 ``Statement`` 객체는 사용자에게 노출되지 않습니다. "
"(Contributed by Aviv Palivoda in :issue:`30262`.)"

#: ../../whatsnew/3.8.rst:1799
msgid ""
"The ``bufsize`` keyword argument of :func:`fileinput.input` and "
":func:`fileinput.FileInput` which was ignored and deprecated since Python"
" 3.6 has been removed. :issue:`36952` (Contributed by Matthias "
"Bussonnier.)"
msgstr ""
":func:`fileinput.input`\\과 :func:`fileinput.FileInput`\\의 ``bufsize`` 키워드"
" 인자는 무시 되었고 파이썬 3.6부터 폐지되었으며, 이제 제거되었습니다. :issue:`36952` (Contributed by "
"Matthias Bussonnier.)"

#: ../../whatsnew/3.8.rst:1803
msgid ""
"The functions :func:`sys.set_coroutine_wrapper` and "
":func:`sys.get_coroutine_wrapper` deprecated in Python 3.7 have been "
"removed; :issue:`36933` (Contributed by Matthias Bussonnier.)"
msgstr ""
"파이썬 3.7에서 폐지된 :func:`sys.set_coroutine_wrapper`\\와 "
":func:`sys.get_coroutine_wrapper` 함수는 제거되었습니다; :issue:`36933` "
"(Contributed by Matthias Bussonnier.)"

#: ../../whatsnew/3.8.rst:1809
msgid "Porting to Python 3.8"
msgstr "파이썬 3.8로 이식하기"

#: ../../whatsnew/3.8.rst:1811
msgid ""
"This section lists previously described changes and other bugfixes that "
"may require changes to your code."
msgstr "이 절에서는 여러분의 코드 수정을 요구할 수도 있는 이전에 설명한 변경 사항과 다른 버그 수정 사항을 나열합니다."

#: ../../whatsnew/3.8.rst:1816
msgid "Changes in Python behavior"
msgstr "파이썬 동작의 변경"

#: ../../whatsnew/3.8.rst:1818
msgid ""
"Yield expressions (both ``yield`` and ``yield from`` clauses) are now "
"disallowed in comprehensions and generator expressions (aside from the "
"iterable expression in the leftmost :keyword:`!for` clause). (Contributed"
" by Serhiy Storchaka in :issue:`10544`.)"
msgstr ""
"일드 표현식(``yield``\\와 ``yield from`` 절 모두)은 이제 컴프리헨션과 제너레이터 표현식에서 허용되지 않습니다"
" (가장 왼쪽 :keyword:`!for` 절의 이터러블 표현식 제외). (Contributed by Serhiy Storchaka"
" in :issue:`10544`.)"

#: ../../whatsnew/3.8.rst:1823
msgid ""
"The compiler now produces a :exc:`SyntaxWarning` when identity checks "
"(``is`` and ``is not``) are used with certain types of literals (e.g. "
"strings, numbers).  These can often work by accident in CPython, but are "
"not guaranteed by the language spec.  The warning advises users to use "
"equality tests (``==`` and ``!=``) instead. (Contributed by Serhiy "
"Storchaka in :issue:`34850`.)"
msgstr ""
"아이덴티티 검사(``is``\\와 ``is not``)가 특정 형의 리터럴(예를 들어, 문자열, 숫자)과 함께 사용될 때 컴파일러는"
" 이제 :exc:`SyntaxWarning`\\을 생성합니다. 이들은 종종 CPython에서 우연히 작동할 수 있지만, 언어 명세에"
" 의해 보장되지는 않습니다. 이 경고는 사용자가 동등 검사(``==``\\와 ``!=``)를 대신 사용하도록 권장합니다. "
"(Contributed by Serhiy Storchaka in :issue:`34850`.)"

#: ../../whatsnew/3.8.rst:1830
msgid ""
"The CPython interpreter can swallow exceptions in some circumstances. In "
"Python 3.8 this happens in fewer cases.  In particular, exceptions raised"
" when getting the attribute from the type dictionary are no longer "
"ignored. (Contributed by Serhiy Storchaka in :issue:`35459`.)"
msgstr ""
"CPython 인터프리터는 때에 따라 예외를 삼킬 수 있습니다. 파이썬 3.8에서는 이런 경우가 덜 발생합니다. 특히, 형 "
"딕셔너리에서 어트리뷰트를 가져올 때 발생하는 예외는 더는 무시되지 않습니다. (Contributed by Serhiy "
"Storchaka in :issue:`35459`.)"

#: ../../whatsnew/3.8.rst:1835
msgid ""
"Removed ``__str__`` implementations from builtin types :class:`bool`, "
":class:`int`, :class:`float`, :class:`complex` and few classes from the "
"standard library.  They now inherit ``__str__()`` from :class:`object`. "
"As result, defining the ``__repr__()`` method in the subclass of these "
"classes will affect their string representation. (Contributed by Serhiy "
"Storchaka in :issue:`36793`.)"
msgstr ""
"내장형 :class:`bool`, :class:`int`, :class:`float`, :class:`complex` 및 표준 "
"라이브러리의 일부 클래스에서 ``__str__`` 구현을 제거했습니다. 이제 이들은 :class:`object`\\에서 "
"``__str__()``\\을 상속합니다. 결과적으로, 이러한 클래스의 서브 클래스에서 ``__repr__()`` 메서드를 정의하면"
" 문자열 표현에 영향을 줍니다. (Contributed by Serhiy Storchaka in :issue:`36793`.)"

#: ../../whatsnew/3.8.rst:1842
#, fuzzy
msgid ""
"On AIX, :data:`sys.platform` doesn't contain the major version anymore. "
"It is always ``'aix'``, instead of ``'aix3'`` .. ``'aix7'``.  Since older"
" Python versions include the version number, so it is recommended to "
"always use ``sys.platform.startswith('aix')``. (Contributed by M. Felt in"
" :issue:`36588`.)"
msgstr ""
"AIX에서, :attr:`sys.platform`\\은 더는 주(major) 버전을 포함하지 않습니다. ``'aix3'`` .. "
"``'aix7'`` 대신 항상 ``'aix'``\\입니다. 이전 버전의 파이썬에서는 버전 번호가 포함되어 있기 때문에, 항상 "
"``sys.platform.startswith('aix')``\\를 사용하는 것이 좋습니다. (Contributed by M. "
"Felt in :issue:`36588`.)"

#: ../../whatsnew/3.8.rst:1848
#, fuzzy
msgid ""
":c:func:`!PyEval_AcquireLock` and :c:func:`!PyEval_AcquireThread` now "
"terminate the current thread if called while the interpreter is "
"finalizing, making them consistent with :c:func:`PyEval_RestoreThread`, "
":c:func:`Py_END_ALLOW_THREADS`, and :c:func:`PyGILState_Ensure`. If this "
"behavior is not desired, guard the call by checking "
":c:func:`!_Py_IsFinalizing` or :func:`sys.is_finalizing`. (Contributed by"
" Joannah Nanjekye in :issue:`36475`.)"
msgstr ""
":c:func:`PyEval_AcquireLock`\\과 :c:func:`PyEval_AcquireThread`\\는 인터프리터가 "
"파이널라이즈하는 동안 호출되면 현재 스레드를 종료하여, :c:func:`PyEval_RestoreThread`, "
":c:func:`Py_END_ALLOW_THREADS` 및 :c:func:`PyGILState_Ensure`\\와 일관되게 "
"만듭니다. 이 동작을 원하지 않으면, :c:func:`_Py_IsFinalizing`\\이나 "
":c:func:`sys.is_finalizing`\\을 확인하여 호출을 보호하십시오. (Contributed by Joannah "
"Nanjekye in :issue:`36475`.)"

#: ../../whatsnew/3.8.rst:1858 ../../whatsnew/3.8.rst:2321
msgid "Changes in the Python API"
msgstr "파이썬 API의 변경"

#: ../../whatsnew/3.8.rst:1860
msgid ""
"The :func:`os.getcwdb` function now uses the UTF-8 encoding on Windows, "
"rather than the ANSI code page: see :pep:`529` for the rationale. The "
"function is no longer deprecated on Windows. (Contributed by Victor "
"Stinner in :issue:`37412`.)"
msgstr ""
":func:`os.getcwdb` 함수는 이제 윈도우에서 ANSI 코드 페이지가 아닌 UTF-8 인코딩을 사용합니다. 이유는 "
":pep:`529`\\를 참조하십시오. 이 함수는 윈도우에서 더는 폐지되지 않았습니다. (Contributed by Victor "
"Stinner in :issue:`37412`.)"

#: ../../whatsnew/3.8.rst:1865
msgid ""
":class:`subprocess.Popen` can now use :func:`os.posix_spawn` in some "
"cases for better performance. On Windows Subsystem for Linux and QEMU "
"User Emulation, the :class:`Popen` constructor using "
":func:`os.posix_spawn` no longer raises an exception on errors like "
"\"missing program\".  Instead the child process fails with a non-zero "
":attr:`~Popen.returncode`. (Contributed by Joannah Nanjekye and Victor "
"Stinner in :issue:`35537`.)"
msgstr ""
":class:`subprocess.Popen`\\은 이제 어떤 경우에 더 나은 성능을 위해 "
":func:`os.posix_spawn`\\을 사용할 수 있습니다. 리눅스용 윈도우 하위 시스템과 QEMU 사용자 에뮬레이션에서, "
":func:`os.posix_spawn`\\을 사용하는 :class:`Popen` 생성자는 더는 \"프로그램 누락\"과 같은 에러에"
" 예외를 발생시키지 않습니다. 대신 자식 프로세스는 0이 아닌 :attr:`~Popen.returncode`\\로 실패합니다. "
"(Contributed by Joannah Nanjekye and Victor Stinner in :issue:`35537`.)"

#: ../../whatsnew/3.8.rst:1872
msgid ""
"The *preexec_fn* argument of * :class:`subprocess.Popen` is no longer "
"compatible with subinterpreters. The use of the parameter in a "
"subinterpreter now raises :exc:`RuntimeError`. (Contributed by Eric Snow "
"in :issue:`34651`, modified by Christian Heimes in :issue:`37951`.)"
msgstr ""
":class:`subprocess.Popen`\\의 *preexec_fn* 인자는 더는 서브 인터프리터와 호환되지 않습니다. 서브 "
"인터프리터에서 매개 변수를 사용하면 :exc:`RuntimeError`\\가 발생합니다. (Contributed by Eric "
"Snow in :issue:`34651`, modified by Christian Heimes in :issue:`37951`.)"

#: ../../whatsnew/3.8.rst:1878
msgid ""
"The :meth:`imap.IMAP4.logout` method no longer silently ignores arbitrary"
" exceptions. (Contributed by Victor Stinner in :issue:`36348`.)"
msgstr ""
":meth:`imap.IMAP4.logout` 메서드는 더는 조용히 임의의 예외를 무시하지 않습니다. (Contributed by "
"Victor Stinner in :issue:`36348`.)"

#: ../../whatsnew/3.8.rst:1886
msgid ""
"The :func:`statistics.mode` function no longer raises an exception when "
"given multimodal data.  Instead, it returns the first mode encountered in"
" the input data.  (Contributed by Raymond Hettinger in :issue:`35892`.)"
msgstr ""
":func:`statistics.mode` 함수는 다중 모드(multimodal) 데이터가 주어질 때 더는 예외를 발생시키지 "
"않습니다. 대신, 입력 데이터에서 만나는 첫 번째 모드를 반환합니다. (Contributed by Raymond Hettinger "
"in :issue:`35892`.)"

#: ../../whatsnew/3.8.rst:1891
msgid ""
"The :meth:`~tkinter.ttk.Treeview.selection` method of the "
":class:`tkinter.ttk.Treeview` class no longer takes arguments.  Using it "
"with arguments for changing the selection was deprecated in Python 3.6.  "
"Use specialized methods like :meth:`~tkinter.ttk.Treeview.selection_set` "
"for changing the selection.  (Contributed by Serhiy Storchaka in "
":issue:`31508`.)"
msgstr ""
":class:`tkinter.ttk.Treeview` 클래스의 "
":meth:`~tkinter.ttk.Treeview.selection` 메서드는 더는 인자를 받아들이지 않습니다. 선택을 변경하기 "
"위해 인자와 함께 사용하는 것은 파이썬 3.6에서 폐지되었습니다. 선택을 변경하려면 "
":meth:`~tkinter.ttk.Treeview.selection_set`\\과 같은 특화된 메서드를 사용하십시오. "
"(Contributed by Serhiy Storchaka in :issue:`31508`.)"

#: ../../whatsnew/3.8.rst:1897
msgid ""
"The :meth:`writexml`, :meth:`toxml` and :meth:`toprettyxml` methods of "
":mod:`xml.dom.minidom`, and the :meth:`write` method of :mod:`xml.etree`,"
" now preserve the attribute order specified by the user. (Contributed by "
"Diego Rojas and Raymond Hettinger in :issue:`34160`.)"
msgstr ""
":mod:`xml.dom.minidom` 모듈의 :meth:`writexml`, :meth:`toxml` 및 "
":meth:`toprettyxml` 메서드와 :mod:`xml.etree`\\의 :meth:`write` 메서드는 이제 사용자가 "
"지정한 어트리뷰트 순서를 보존합니다. (Contributed by Diego Rojas and Raymond Hettinger in"
" :issue:`34160`.)"

#: ../../whatsnew/3.8.rst:1902
msgid ""
"A :mod:`dbm.dumb` database opened with flags ``'r'`` is now read-only. "
":func:`dbm.dumb.open` with flags ``'r'`` and ``'w'`` no longer creates a "
"database if it does not exist. (Contributed by Serhiy Storchaka in "
":issue:`32749`.)"
msgstr ""
"플래그 ``'r'``\\로 열린 :mod:`dbm.dumb` 데이터베이스는 이제 읽기 전용입니다. ``'r'``\\과 ``'w'``"
" 플래그로 :func:`dbm.dumb.open`\\하면 더는 데이터베이스가 없을 때 만들지 않습니다. (Contributed by"
" Serhiy Storchaka in :issue:`32749`.)"

#: ../../whatsnew/3.8.rst:1907
msgid ""
"The ``doctype()`` method defined in a subclass of "
":class:`~xml.etree.ElementTree.XMLParser` will no longer be called and "
"will emit a :exc:`RuntimeWarning` instead of a :exc:`DeprecationWarning`."
" Define the :meth:`doctype() <xml.etree.ElementTree.TreeBuilder.doctype>`"
" method on a target for handling an XML doctype declaration. (Contributed"
" by Serhiy Storchaka in :issue:`29209`.)"
msgstr ""
":class:`~xml.etree.ElementTree.XMLParser`\\의 서브 클래스에 정의된 ``doctype()`` "
"메서드는 더는 호출되지 않으며 :exc:`DeprecationWarning` 대신 :exc:`RuntimeWarning`\\을 "
"방출합니다. XML doctype 선언을 처리하려면 대상에 :meth:`doctype() "
"<xml.etree.ElementTree.TreeBuilder.doctype>` 메서드를 정의하십시오. (Contributed by"
" Serhiy Storchaka in :issue:`29209`.)"

#: ../../whatsnew/3.8.rst:1914
msgid ""
"A :exc:`RuntimeError` is now raised when the custom metaclass doesn't "
"provide the ``__classcell__`` entry in the namespace passed to "
"``type.__new__``.  A :exc:`DeprecationWarning` was emitted in Python 3.6"
"--3.7.  (Contributed by Serhiy Storchaka in :issue:`23722`.)"
msgstr ""
"사용자 지정 메타 클래스가 ``type.__new__``\\에 전달된 이름 공간에 ``__classcell__`` 항목을 제공하지 "
"않으면 이제 :exc:`RuntimeError`\\가 발생합니다. 파이썬 3.6--3.7에서는 "
":exc:`DeprecationWarning`\\이 방출되었습니다. (Contributed by Serhiy Storchaka in"
" :issue:`23722`.)"

#: ../../whatsnew/3.8.rst:1919
msgid ""
"The :class:`cProfile.Profile` class can now be used as a context manager."
" (Contributed by Scott Sanderson in :issue:`29235`.)"
msgstr ""
":class:`cProfile.Profile` 클래스는 이제 컨텍스트 관리자로 사용할 수 있습니다. (Contributed by "
"Scott Sanderson in :issue:`29235`.)"

#: ../../whatsnew/3.8.rst:1922
msgid ""
":func:`shutil.copyfile`, :func:`shutil.copy`, :func:`shutil.copy2`, "
":func:`shutil.copytree` and :func:`shutil.move` use platform-specific "
"\"fast-copy\" syscalls (see :ref:`shutil-platform-dependent-efficient-"
"copy-operations` section)."
msgstr ""
":func:`shutil.copyfile`, :func:`shutil.copy`, :func:`shutil.copy2`, "
":func:`shutil.copytree` 및 :func:`shutil.move`\\는 플랫폼 특정 \"고속 복사(fast-"
"copy)\" 시스템 호출을 사용합니다 (:ref:`shutil-platform-dependent-efficient-copy-"
"operations` 절을 참조하십시오)."

#: ../../whatsnew/3.8.rst:1927
msgid ""
":func:`shutil.copyfile` default buffer size on Windows was changed from "
"16 KiB to 1 MiB."
msgstr "윈도우에서 :func:`shutil.copyfile` 기본 버퍼 크기가 16 KiB에서 1 MiB로 변경되었습니다."

#: ../../whatsnew/3.8.rst:1930
msgid ""
"The ``PyGC_Head`` struct has changed completely.  All code that touched "
"the struct member should be rewritten.  (See :issue:`33597`.)"
msgstr ""
"``PyGC_Head`` 구조체가 완전히 변경되었습니다. 구조체 멤버를 건드리는 모든 코드는 다시 작성해야 합니다. "
"(:issue:`33597` 참조.)"

#: ../../whatsnew/3.8.rst:1933
msgid ""
"The :c:type:`PyInterpreterState` struct has been moved into the "
"\"internal\" header files (specifically "
"Include/internal/pycore_pystate.h).  An opaque ``PyInterpreterState`` is "
"still available as part of the public API (and stable ABI).  The docs "
"indicate that none of the struct's fields are public, so we hope no one "
"has been using them.  However, if you do rely on one or more of those "
"private fields and have no alternative then please open a BPO issue.  "
"We'll work on helping you adjust (possibly including adding accessor "
"functions to the public API).  (See :issue:`35886`.)"
msgstr ""
":c:type:`PyInterpreterState` 구조체는 \"내부\" 헤더 파일(구체적으로 "
"Include/internal/pycore_pystate.h)로 이동했습니다. 불투명한 "
"``PyInterpreterState``\\는 공용 API(와 안정 ABI)의 일부로 계속 사용할 수 있습니다. 설명서는 구조체의 "
"필드가 공용이 아니라고 말하고 있으니, 아무도 해당 필드를 사용하지 않기를 바랍니다. 그러나, 하나 이상의 내부 필드에 의지하고 "
"대안이 없으면 BPO 이슈를 여십시오. 조정을 돕기 위해 노력할 것입니다 (공용 API에 접근 함수를 추가하는 것도 가능합니다). "
"(:issue:`35886`\\을 참조하십시오.)"

#: ../../whatsnew/3.8.rst:1943
msgid ""
"The :meth:`mmap.flush() <mmap.mmap.flush>` method now returns ``None`` on"
" success and raises an exception on error under all platforms.  "
"Previously, its behavior was platform-dependent: a nonzero value was "
"returned on success; zero was returned on error under Windows.  A zero "
"value was returned on success; an exception was raised on error under "
"Unix. (Contributed by Berker Peksag in :issue:`2122`.)"
msgstr ""
":meth:`mmap.flush() <mmap.mmap.flush>` 메서드는 이제 모든 플랫폼에서 성공 시 ``None``\\을 "
"반환하고 에러 시 예외를 발생시킵니다. 이전에는, 그 동작이 플랫폼에 따라 달랐습니다: 윈도우에서 성공 시 0이 아닌 값이 "
"반환되었습니다; 에러 시 0이 반환되었습니다. 유닉스에서 성공 시 0 값이 반환되었습니다; 에러 시 예외가 발생했습니다. "
"(Contributed by Berker Peksag in :issue:`2122`.)"

#: ../../whatsnew/3.8.rst:1950
msgid ""
":mod:`xml.dom.minidom` and :mod:`xml.sax` modules no longer process "
"external entities by default. (Contributed by Christian Heimes in "
":issue:`17239`.)"
msgstr ""
":mod:`xml.dom.minidom`\\과 :mod:`xml.sax` 모듈은 기본적으로 더는 외부 엔티티를 처리하지 않습니다. "
"(Contributed by Christian Heimes in :issue:`17239`.)"

#: ../../whatsnew/3.8.rst:1954
msgid ""
"Deleting a key from a read-only :mod:`dbm` database (:mod:`dbm.dumb`, "
":mod:`dbm.gnu` or :mod:`dbm.ndbm`) raises :attr:`error` "
"(:exc:`dbm.dumb.error`, :exc:`dbm.gnu.error` or :exc:`dbm.ndbm.error`) "
"instead of :exc:`KeyError`. (Contributed by Xiang Zhang in "
":issue:`33106`.)"
msgstr ""
"읽기 전용 :mod:`dbm` 데이터베이스(:mod:`dbm.dumb`, :mod:`dbm.gnu` 또는 "
":mod:`dbm.ndbm`)에서 키를 삭제하면 :exc:`KeyError` 대신 "
":attr:`error`\\(:exc:`dbm.dumb.error`, :exc:`dbm.gnu.error` 또는 "
":exc:`dbm.ndbm.error`)를 발생시킵니다. (Contributed by Xiang Zhang in "
":issue:`33106`.)"

#: ../../whatsnew/3.8.rst:1959
msgid ""
"Simplified AST for literals.  All constants will be represented as "
":class:`ast.Constant` instances.  Instantiating old classes ``Num``, "
"``Str``, ``Bytes``, ``NameConstant`` and ``Ellipsis`` will return an "
"instance of ``Constant``. (Contributed by Serhiy Storchaka in "
":issue:`32892`.)"
msgstr ""
"리터럴을 위해 단순화된 AST. 모든 상수는 :class:`ast.Constant` 인스턴스로 표시됩니다. 이전 클래스 "
"``Num``, ``Str``, ``Bytes``, ``NameConstant`` 및 ``Ellipsis``\\를 인스턴스 화하면 "
"``Constant`` 인스턴스가 반환됩니다. (Contributed by Serhiy Storchaka in "
":issue:`32892`.)"

#: ../../whatsnew/3.8.rst:1975
msgid ""
"The function :func:`asyncio.wait_for` now correctly waits for "
"cancellation when using an instance of :class:`asyncio.Task`. Previously,"
" upon reaching *timeout*, it was cancelled and immediately returned. "
"(Contributed by Elvis Pranskevichus in :issue:`32751`.)"
msgstr ""
":func:`asyncio.wait_for` 함수는 이제 :class:`asyncio.Task` 인스턴스를 사용할 때 취소를 "
"올바르게 기다립니다. 이전에는, *timeout*\\에 도달하면 취소되어 즉시 반환되었습니다. (Contributed by "
"Elvis Pranskevichus in :issue:`32751`.)"

#: ../../whatsnew/3.8.rst:1980
msgid ""
"The function :func:`asyncio.BaseTransport.get_extra_info` now returns a "
"safe to use socket object when 'socket' is passed to the *name* "
"parameter. (Contributed by Yury Selivanov in :issue:`37027`.)"
msgstr ""
":func:`asyncio.BaseTransport.get_extra_info` 함수는 이제 'socket'이 *name* 매개 "
"변수로 전달될 때 안전하게 사용할 수 있는 소켓 객체를 반환합니다. (Contributed by Yury Selivanov in "
":issue:`37027`.)"

#: ../../whatsnew/3.8.rst:1984
msgid ":class:`asyncio.BufferedProtocol` has graduated to the stable API."
msgstr ":class:`asyncio.BufferedProtocol`\\는 졸업해서 안정 API가 되었습니다."

#: ../../whatsnew/3.8.rst:1988
msgid ""
"DLL dependencies for extension modules and DLLs loaded with :mod:`ctypes`"
" on Windows are now resolved more securely. Only the system paths, the "
"directory containing the DLL or PYD file, and directories added with "
":func:`~os.add_dll_directory` are searched for load-time dependencies. "
"Specifically, :envvar:`PATH` and the current working directory are no "
"longer used, and modifications to these will no longer have any effect on"
" normal DLL resolution. If your application relies on these mechanisms, "
"you should check for :func:`~os.add_dll_directory` and if it exists, use "
"it to add your DLLs directory while loading your library. Note that "
"Windows 7 users will need to ensure that Windows Update KB2533623 has "
"been installed (this is also verified by the installer). (Contributed by "
"Steve Dower in :issue:`36085`.)"
msgstr ""
"윈도우에서 :mod:`ctypes`\\로 로드된 확장 모듈과 DLL에 대한 DLL 종속성이 이제 더 안전하게 처리됩니다. 시스템 "
"경로, DLL이나 PYD 파일이 들어 있는 디렉터리 및 :func:`~os.add_dll_directory`\\로 추가된 디렉터리만"
" 로드 시간 종속성을 위해 검색합니다. 특히, :envvar:`PATH`\\와 현재 작업 디렉터리는 더는 사용되지 않으며, 이러한 "
"것들에 대한 수정은 더는 일반 DLL 결정(resolution)에 영향을 주지 않습니다. 여러분의 응용 프로그램이 이러한 메커니즘에"
" 의존한다면, :func:`~os.add_dll_directory`\\가 있는지 확인하고, 있다면 이를 사용하여 라이브러리를 "
"로드하는 동안 DLL 디렉터리를 추가하십시오. 윈도우 7 사용자는 윈도우 업데이트 KB2533623이 설치되었는지 확인해야 합니다 "
"(이는 설치 프로그램에서도 확인합니다). (Contributed by Steve Dower in :issue:`36085`.)"

#: ../../whatsnew/3.8.rst:2001
msgid ""
"The header files and functions related to pgen have been removed after "
"its replacement by a pure Python implementation. (Contributed by Pablo "
"Galindo in :issue:`36623`.)"
msgstr ""
"pgen과 관련된 헤더 파일과 함수는 순수 파이썬 구현으로 대체 된 후에 제거되었습니다. (Contributed by Pablo "
"Galindo in :issue:`36623`.)"

#: ../../whatsnew/3.8.rst:2005
msgid ""
":class:`types.CodeType` has a new parameter in the second position of the"
" constructor (*posonlyargcount*) to support positional-only arguments "
"defined in :pep:`570`. The first argument (*argcount*) now represents the"
" total number of positional arguments (including positional-only "
"arguments). The new ``replace()`` method of :class:`types.CodeType` can "
"be used to make the code future-proof."
msgstr ""
":class:`types.CodeType`\\은 :pep:`570`\\에 정의된 위치 전용 인자를 지원하기 위해 생성자의 두 번째 "
"위치에 새 매개 변수(*posonlyargcount*)를 갖습니다. 첫 번째 인자(*argcount*)는 이제 위치 인자의 "
"총수(위치 전용 인자 포함)를 나타냅니다. :class:`types.CodeType`\\의 새로운 ``replace()`` 메서드를"
" 사용하면 코드가 미래에도 안전하게 만들 수 있습니다."

#: ../../whatsnew/3.8.rst:2012
msgid ""
"The parameter ``digestmod`` for :func:`hmac.new` no longer uses the MD5 "
"digest by default."
msgstr ""

#: ../../whatsnew/3.8.rst:2016
msgid "Changes in the C API"
msgstr "C API의 변경"

#: ../../whatsnew/3.8.rst:2018
#, fuzzy
msgid ""
"The :c:struct:`PyCompilerFlags` structure got a new *cf_feature_version* "
"field. It should be initialized to ``PY_MINOR_VERSION``. The field is "
"ignored by default, and is used if and only if ``PyCF_ONLY_AST`` flag is "
"set in *cf_flags*. (Contributed by Guido van Rossum in :issue:`35766`.)"
msgstr ""
":c:type:`PyCompilerFlags` 구조체에 새로운 *cf_feature_version* 필드가 생겼습니다. "
"``PY_MINOR_VERSION``\\으로 초기화해야합니다. 이 필드는 기본적으로 무시되며, ``PyCF_ONLY_AST`` "
"플래그가 *cf_flags*\\에 설정되었을 때, 또 그때만 사용됩니다. (Contributed by Guido van Rossum"
" in :issue:`35766`.)"

#: ../../whatsnew/3.8.rst:2024
#, fuzzy
msgid ""
"The :c:func:`!PyEval_ReInitThreads` function has been removed from the C "
"API. It should not be called explicitly: use "
":c:func:`PyOS_AfterFork_Child` instead. (Contributed by Victor Stinner in"
" :issue:`36728`.)"
msgstr ""
":c:func:`PyEval_ReInitThreads` 함수가 C API에서 제거되었습니다. 명시적으로 호출하면 안 됩니다: 대신 "
":c:func:`PyOS_AfterFork_Child`\\를 사용하십시오. (Contributed by Victor Stinner "
"in :issue:`36728`.)"

#: ../../whatsnew/3.8.rst:2029
msgid ""
"On Unix, C extensions are no longer linked to libpython except on Android"
" and Cygwin. When Python is embedded, ``libpython`` must not be loaded "
"with ``RTLD_LOCAL``, but ``RTLD_GLOBAL`` instead. Previously, using "
"``RTLD_LOCAL``, it was already not possible to load C extensions which "
"were not linked to ``libpython``, like C extensions of the standard "
"library built by the ``*shared*`` section of ``Modules/Setup``. "
"(Contributed by Victor Stinner in :issue:`21536`.)"
msgstr ""
"유닉스에서, C 확장은 더는 안드로이드와 Cygwin을 제외하고는 libpython에 링크되지 않습니다. 파이썬이 내장될 때, "
"``libpython``\\은 ``RTLD_LOCAL``\\이 아니라 ``RTLD_GLOBAL``\\로 로드되어야 합니다. "
"이전에는, ``RTLD_LOCAL``\\을 사용하여, ``Modules/Setup``\\의 ``*shared*`` 섹션에 의해 "
"빌드된 표준 라이브러리의 C 확장과 같이 ``libpython``\\에 링크되지 않은 C 확장을 로드할 수 없었습니다. "
"(Contributed by Victor Stinner in :issue:`21536`.)"

#: ../../whatsnew/3.8.rst:2037
msgid ""
"Use of ``#`` variants of formats in parsing or building value (e.g. "
":c:func:`PyArg_ParseTuple`, :c:func:`Py_BuildValue`, "
":c:func:`PyObject_CallFunction`, etc.) without ``PY_SSIZE_T_CLEAN`` "
"defined raises ``DeprecationWarning`` now. It will be removed in 3.10 or "
"4.0.  Read :ref:`arg-parsing` for detail. (Contributed by Inada Naoki in "
":issue:`36381`.)"
msgstr ""
"``PY_SSIZE_T_CLEAN``\\이 정의되지 않은 상태에서 값을 구문 분석하거나 빌드할 때(예를 들어, "
":c:func:`PyArg_ParseTuple`, :c:func:`Py_BuildValue`, "
":c:func:`PyObject_CallFunction` 등) 포맷의 ``#`` 변형을 사용하면 "
"``DeprecationWarning``\\이 발생합니다. 3.10이나 4.0에서 제거됩니다. 자세한 내용은 :ref:`arg-"
"parsing`\\를 참조하십시오. (Contributed by Inada Naoki in :issue:`36381`.)"

#: ../../whatsnew/3.8.rst:2043
msgid ""
"Instances of heap-allocated types (such as those created with "
":c:func:`PyType_FromSpec`) hold a reference to their type object. "
"Increasing the reference count of these type objects has been moved from "
":c:func:`PyType_GenericAlloc` to the more low-level functions, "
":c:func:`PyObject_Init` and :c:func:`PyObject_INIT`. This makes types "
"created through :c:func:`PyType_FromSpec` behave like other classes in "
"managed code."
msgstr ""
"힙에 할당된 형(가령 :c:func:`PyType_FromSpec`\\으로 만들어진 것들)의 인스턴스는 해당 형 객체에 대한 참조를"
" 보유합니다. 이러한 형 객체의 참조 횟수를 늘리는 것이 :c:func:`PyType_GenericAlloc`\\에서 더 저수준 "
"함수 :c:func:`PyObject_Init`\\와 :c:func:`PyObject_INIT`\\로 옮겨졌습니다. 이렇게 하면 "
":c:func:`PyType_FromSpec`\\을 통해 만들어진 형이, 관리되는 코드의 다른 클래스처럼 작동합니다."

#: ../../whatsnew/3.8.rst:2051
#, fuzzy
msgid ":ref:`Statically allocated types <static-types>` are not affected."
msgstr "정적으로 할당된 형은 영향을 받지 않습니다."

#: ../../whatsnew/3.8.rst:2053
msgid ""
"For the vast majority of cases, there should be no side effect. However, "
"types that manually increase the reference count after allocating an "
"instance (perhaps to work around the bug) may now become immortal. To "
"avoid this, these classes need to call Py_DECREF on the type object "
"during instance deallocation."
msgstr ""
"대다수의 경우, 부작용이 없어야 합니다. 그러나, 인스턴스를 할당한 후 수동으로 참조 횟수를 늘리는 형(아마도 버그를 회피하기 "
"위해)이 이제 불멸이 될 수 있습니다. 이를 피하고자, 이런 클래스는 인스턴스 할당 해제 중에 형 객체에 Py_DECREF를 호출할"
" 필요가 있습니다."

#: ../../whatsnew/3.8.rst:2059
msgid ""
"To correctly port these types into 3.8, please apply the following "
"changes:"
msgstr "이러한 형들을 3.8로 올바르게 이식하려면, 다음 변경 사항을 적용하십시오:"

#: ../../whatsnew/3.8.rst:2062
#, fuzzy
msgid ""
"Remove :c:macro:`Py_INCREF` on the type object after allocating an "
"instance - if any. This may happen after calling :c:macro:`PyObject_New`,"
" :c:macro:`PyObject_NewVar`, :c:func:`PyObject_GC_New`, "
":c:func:`PyObject_GC_NewVar`, or any other custom allocator that uses "
":c:func:`PyObject_Init` or :c:func:`PyObject_INIT`."
msgstr ""
"인스턴스를 할당한 후 형 객체에 대한 :c:macro:`Py_INCREF`\\를 제거하십시오 - 있다면. 이것은 "
":c:func:`PyObject_New`, :c:func:`PyObject_NewVar`, "
":c:func:`PyObject_GC_New`, :c:func:`PyObject_GC_NewVar` 또는 "
":c:func:`PyObject_Init`\\나 :c:func:`PyObject_INIT`\\를 사용하는 다른 사용자 정의 할당자를"
" 호출한 후에 발생할 수 있습니다."

#: ../../whatsnew/3.8.rst:2069 ../../whatsnew/3.8.rst:2088
#: ../../whatsnew/3.8.rst:2107
msgid "Example:"
msgstr "예::"

#: ../../whatsnew/3.8.rst:2071
#, python-brace-format
msgid ""
"static foo_struct *\n"
"foo_new(PyObject *type) {\n"
"    foo_struct *foo = PyObject_GC_New(foo_struct, (PyTypeObject *) type);"
"\n"
"    if (foo == NULL)\n"
"        return NULL;\n"
"#if PY_VERSION_HEX < 0x03080000\n"
"    // Workaround for Python issue 35810; no longer necessary in Python "
"3.8\n"
"    PY_INCREF(type)\n"
"#endif\n"
"    return foo;\n"
"}"
msgstr ""

#: ../../whatsnew/3.8.rst:2085
msgid ""
"Ensure that all custom ``tp_dealloc`` functions of heap-allocated types "
"decrease the type's reference count."
msgstr "힙에 할당되는 형의 모든 사용자 정의 ``tp_dealloc`` 함수가 형의 참조 횟수를 감소시키도록 하십시오."

#: ../../whatsnew/3.8.rst:2090
#, python-brace-format
msgid ""
"static void\n"
"foo_dealloc(foo_struct *instance) {\n"
"    PyObject *type = Py_TYPE(instance);\n"
"    PyObject_GC_Del(instance);\n"
"#if PY_VERSION_HEX >= 0x03080000\n"
"    // This was not needed before Python 3.8 (Python issue 35810)\n"
"    Py_DECREF(type);\n"
"#endif\n"
"}"
msgstr ""

#: ../../whatsnew/3.8.rst:2102
msgid "(Contributed by Eddie Elizondo in :issue:`35810`.)"
msgstr "(Contributed by Eddie Elizondo in :issue:`35810`.)"

#: ../../whatsnew/3.8.rst:2104
msgid ""
"The :c:macro:`Py_DEPRECATED()` macro has been implemented for MSVC. The "
"macro now must be placed before the symbol name."
msgstr ""
":c:macro:`Py_DEPRECATED()` 매크로는 MSVC 용으로 구현되었습니다. 매크로는 이제 기호 이름 앞에 놓여야 "
"합니다."

#: ../../whatsnew/3.8.rst:2109
msgid "Py_DEPRECATED(3.8) PyAPI_FUNC(int) Py_OldFunction(void);"
msgstr ""

#: ../../whatsnew/3.8.rst:2113
msgid "(Contributed by Zackery Spytz in :issue:`33407`.)"
msgstr "(Contributed by Zackery Spytz in :issue:`33407`.)"

#: ../../whatsnew/3.8.rst:2115
#, fuzzy
msgid ""
"The interpreter does not pretend to support binary compatibility of "
"extension types across feature releases, anymore.  A "
":c:type:`PyTypeObject` exported by a third-party extension module is "
"supposed to have all the slots expected in the current Python version, "
"including :c:member:`~PyTypeObject.tp_finalize` "
"(:c:macro:`Py_TPFLAGS_HAVE_FINALIZE` is not checked anymore before "
"reading :c:member:`~PyTypeObject.tp_finalize`)."
msgstr ""
"인터프리터는 더는 기능 배포에서 확장형의 바이너리 호환성을 지원하지 않습니다. 제삼자 확장 모듈에서 내보낸 "
":c:type:`PyTypeObject`\\는 :c:member:`~PyTypeObject.tp_finalize` "
"(:const:`Py_TPFLAGS_HAVE_FINALIZE`\\는 "
":c:member:`~PyTypeObject.tp_finalize`\\를 읽기 전에 더는 확인되지 않습니다)를 포함하여 현재 파이썬"
" 버전이 기대하는 모든 슬롯을 가지고 있다고 가정합니다."

#: ../../whatsnew/3.8.rst:2122
msgid "(Contributed by Antoine Pitrou in :issue:`32388`.)"
msgstr "(Contributed by Antoine Pitrou in :issue:`32388`.)"

#: ../../whatsnew/3.8.rst:2124
#, fuzzy
msgid ""
"The functions :c:func:`!PyNode_AddChild` and :c:func:`!PyParser_AddToken`"
" now accept two additional ``int`` arguments *end_lineno* and "
"*end_col_offset*."
msgstr ""
"함수 :c:func:`PyNode_AddChild`\\와 :c:func:`PyParser_AddToken`\\는 이제 두 개의 추가"
" ``int`` 인자 *end_lineno*\\와 *end_col_offset*\\을 받아들입니다."

#: ../../whatsnew/3.8.rst:2127
msgid ""
"The :file:`libpython38.a` file to allow MinGW tools to link directly "
"against :file:`python38.dll` is no longer included in the regular Windows"
" distribution. If you require this file, it may be generated with the "
"``gendef`` and ``dlltool`` tools, which are part of the MinGW binutils "
"package:"
msgstr ""
"MinGW 도구가 :file:`python38.dll`\\에 대해 직접 링크할 수 있도록 허용하는 "
":file:`libpython38.a` 파일은 더는 일반 윈도우 배포에 포함되지 않습니다. 이 파일이 필요하면, MinGW "
"binutils 패키지의 일부인 ``gendef``\\와 ``dlltool`` 도구로 생성할 수 있습니다:"

#: ../../whatsnew/3.8.rst:2132
msgid ""
"gendef - python38.dll > tmp.def\n"
"dlltool --dllname python38.dll --def tmp.def --output-lib libpython38.a"
msgstr ""

#: ../../whatsnew/3.8.rst:2137
msgid ""
"The location of an installed :file:`pythonXY.dll` will depend on the "
"installation options and the version and language of Windows. See :ref"
":`using-on-windows` for more information. The resulting library should be"
" placed in the same directory as :file:`pythonXY.lib`, which is generally"
" the :file:`libs` directory under your Python installation."
msgstr ""
"설치된 :file:`pythonXY.dll`\\의 위치는 윈도우의 설치 옵션과 버전 및 언어에 따라 다릅니다. 자세한 내용은 "
":ref:`using-on-windows`\\를 참조하십시오. 결과 라이브러리는 :file:`pythonXY.lib`\\(일반적으로"
" 파이썬 설치 환경의 :file:`libs` 디렉터리입니다)와 같은 디렉터리에 위치해야 합니다."

#: ../../whatsnew/3.8.rst:2143
msgid "(Contributed by Steve Dower in :issue:`37351`.)"
msgstr "(Contributed by Steve Dower in :issue:`37351`.)"

#: ../../whatsnew/3.8.rst:2147
msgid "CPython bytecode changes"
msgstr "CPython 바이트 코드 변경"

#: ../../whatsnew/3.8.rst:2149
msgid ""
"The interpreter loop  has been simplified by moving the logic of "
"unrolling the stack of blocks into the compiler.  The compiler emits now "
"explicit instructions for adjusting the stack of values and calling the "
"cleaning-up code for :keyword:`break`, :keyword:`continue` and "
":keyword:`return`."
msgstr ""
"인터프리터 루프는 블록 스택을 언 롤링하는 로직을 컴파일러로 이동시킴으로써 단순화되었습니다. 컴파일러는 이제 값 스택을 조정하고 "
":keyword:`break`, :keyword:`continue` 및 :keyword:`return`\\에 대한 정리 코드를 "
"호출하는 명시적인 명령을 출력합니다."

#: ../../whatsnew/3.8.rst:2155
#, fuzzy
msgid ""
"Removed opcodes :opcode:`!BREAK_LOOP`, :opcode:`!CONTINUE_LOOP`, "
":opcode:`!SETUP_LOOP` and :opcode:`!SETUP_EXCEPT`.  Added new opcodes "
":opcode:`!ROT_FOUR`, :opcode:`!BEGIN_FINALLY`, :opcode:`!CALL_FINALLY` "
"and :opcode:`!POP_FINALLY`.  Changed the behavior of "
":opcode:`!END_FINALLY` and :opcode:`!WITH_CLEANUP_START`."
msgstr ""
"옵코드 :opcode:`BREAK_LOOP`, :opcode:`CONTINUE_LOOP`, :opcode:`SETUP_LOOP` 및"
" :opcode:`SETUP_EXCEPT`\\를 제거했습니다. 새로운 옵코드 :opcode:`ROT_FOUR`, "
":opcode:`BEGIN_FINALLY`, :opcode:`CALL_FINALLY` 및 "
":opcode:`POP_FINALLY`\\가 추가되었습니다. :opcode:`END_FINALLY`\\와 "
":opcode:`WITH_CLEANUP_START`\\의 동작이 변경되었습니다."

#: ../../whatsnew/3.8.rst:2161
msgid ""
"(Contributed by Mark Shannon, Antoine Pitrou and Serhiy Storchaka in "
":issue:`17611`.)"
msgstr ""
"(Contributed by Mark Shannon, Antoine Pitrou and Serhiy Storchaka in "
":issue:`17611`.)"

#: ../../whatsnew/3.8.rst:2164
msgid ""
"Added new opcode :opcode:`END_ASYNC_FOR` for handling exceptions raised "
"when awaiting a next item in an :keyword:`async for` loop. (Contributed "
"by Serhiy Storchaka in :issue:`33041`.)"
msgstr ""
":keyword:`async for` 루프에서 다음 항목을 await 할 때 발생하는 예외를 처리하기 위한 새로운 옵코드 "
":opcode:`END_ASYNC_FOR`\\가 추가되었습니다. (Contributed by Serhiy Storchaka in "
":issue:`33041`.)"

#: ../../whatsnew/3.8.rst:2168
msgid ""
"The :opcode:`MAP_ADD` now expects the value as the first element in the "
"stack and the key as the second element. This change was made so the key "
"is always evaluated before the value in dictionary comprehensions, as "
"proposed by :pep:`572`. (Contributed by Jörn Heissler in :issue:`35224`.)"
msgstr ""
":opcode:`MAP_ADD`\\는 이제 값을 스택의 첫 번째 요소로, 키를 두 번째 요소로 기대합니다. 이 변경은 "
":pep:`572`\\의 제안에 따라, 딕셔너리 컴프리헨션에서 키가 값보다 항상 먼저 평가되도록 하기 위해 만들어졌습니다. "
"(Contributed by Jörn Heissler in :issue:`35224`.)"

#: ../../whatsnew/3.8.rst:2175
msgid "Demos and Tools"
msgstr "데모와 도구"

#: ../../whatsnew/3.8.rst:2177
msgid ""
"Added a benchmark script for timing various ways to access variables: "
"``Tools/scripts/var_access_benchmark.py``. (Contributed by Raymond "
"Hettinger in :issue:`35884`.)"
msgstr ""
"변수를 액세스하는 다양한 방법의 시간을 측정하기 위한 벤치마크 스크립트를 추가했습니다: "
"``Tools/scripts/var_access_benchmark.py``. (Contributed by Raymond "
"Hettinger in :issue:`35884`.)"

#: ../../whatsnew/3.8.rst:2181
msgid "Here's a summary of performance improvements since Python 3.3:"
msgstr "다음은 파이썬 3.3 이후의 성능 향상에 대한 요약입니다:"

#: ../../whatsnew/3.8.rst:2183
msgid ""
"Python version                       3.3     3.4     3.5     3.6     3.7"
"     3.8\n"
"--------------                       ---     ---     ---     ---     ---"
"     ---\n"
"\n"
"Variable and attribute read access:\n"
"    read_local                       4.0     7.1     7.1     5.4     5.1"
"     3.9\n"
"    read_nonlocal                    5.3     7.1     8.1     5.8     5.4"
"     4.4\n"
"    read_global                     13.3    15.5    19.0    14.3    13.6"
"     7.6\n"
"    read_builtin                    20.0    21.1    21.6    18.5    19.0"
"     7.5\n"
"    read_classvar_from_class        20.5    25.6    26.5    20.7    19.5"
"    18.4\n"
"    read_classvar_from_instance     18.5    22.8    23.5    18.8    17.1"
"    16.4\n"
"    read_instancevar                26.8    32.4    33.1    28.0    26.3"
"    25.4\n"
"    read_instancevar_slots          23.7    27.8    31.3    20.8    20.8"
"    20.2\n"
"    read_namedtuple                 68.5    73.8    57.5    45.0    46.8"
"    18.4\n"
"    read_boundmethod                29.8    37.6    37.9    29.6    26.9"
"    27.7\n"
"\n"
"Variable and attribute write access:\n"
"    write_local                      4.6     8.7     9.3     5.5     5.3"
"     4.3\n"
"    write_nonlocal                   7.3    10.5    11.1     5.6     5.5"
"     4.7\n"
"    write_global                    15.9    19.7    21.2    18.0    18.0"
"    15.8\n"
"    write_classvar                  81.9    92.9    96.0   104.6   102.1"
"    39.2\n"
"    write_instancevar               36.4    44.6    45.8    40.0    38.9"
"    35.5\n"
"    write_instancevar_slots         28.7    35.6    36.1    27.3    26.6"
"    25.7\n"
"\n"
"Data structure read access:\n"
"    read_list                       19.2    24.2    24.5    20.8    20.8"
"    19.0\n"
"    read_deque                      19.9    24.7    25.5    20.2    20.6"
"    19.8\n"
"    read_dict                       19.7    24.3    25.7    22.3    23.0"
"    21.0\n"
"    read_strdict                    17.9    22.6    24.3    19.5    21.2"
"    18.9\n"
"\n"
"Data structure write access:\n"
"    write_list                      21.2    27.1    28.5    22.5    21.6"
"    20.0\n"
"    write_deque                     23.8    28.7    30.1    22.7    21.8"
"    23.5\n"
"    write_dict                      25.9    31.4    33.3    29.3    29.2"
"    24.7\n"
"    write_strdict                   22.9    28.4    29.9    27.5    25.2"
"    23.1\n"
"\n"
"Stack (or queue) operations:\n"
"    list_append_pop                144.2    93.4   112.7    75.4    74.2"
"    50.8\n"
"    deque_append_pop                30.4    43.5    57.0    49.4    49.2"
"    42.5\n"
"    deque_append_popleft            30.8    43.7    57.3    49.7    49.7"
"    42.8\n"
"\n"
"Timing loop:\n"
"    loop_overhead                    0.3     0.5     0.6     0.4     0.3"
"     0.3"
msgstr ""

#: ../../whatsnew/3.8.rst:2228
#, fuzzy
msgid ""
"The benchmarks were measured on an `Intel® Core™ i7-4960HQ processor "
"<https://ark.intel.com/content/www/us/en/ark/products/76088/intel-core-i7"
"-4960hq-processor-6m-cache-up-to-3-80-ghz.html>`_ running the macOS "
"64-bit builds found at `python.org "
"<https://www.python.org/downloads/macos/>`_. The benchmark script "
"displays timings in nanoseconds."
msgstr ""
"벤치마크는 `python.org <https://www.python.org/downloads/mac-osx/>`_\\에서 찾을 수 "
"있는 macOS 64비트 빌드를 실행하는 `Intel® Core™ i7-4960HQ processor "
"<https://ark.intel.com/content/www/us/en/ark/products/76088/intel-core-i7"
"-4960hq-processor-6m-cache-up-to-3-80-ghz.html>`_\\에서 측정되었습니다. 벤치마크 스크립트는"
" 타이밍을 나노초로 표시합니다."

#: ../../whatsnew/3.8.rst:2237
msgid "Notable changes in Python 3.8.1"
msgstr "파이썬 3.8.1의 주목할만한 변경 사항"

#: ../../whatsnew/3.8.rst:2239
msgid ""
"Due to significant security concerns, the *reuse_address* parameter of "
":meth:`asyncio.loop.create_datagram_endpoint` is no longer supported. "
"This is because of the behavior of the socket option ``SO_REUSEADDR`` in "
"UDP. For more details, see the documentation for "
"``loop.create_datagram_endpoint()``. (Contributed by Kyle Stanley, "
"Antoine Pitrou, and Yury Selivanov in :issue:`37228`.)"
msgstr ""
"심각한 보안 문제로 인해, :meth:`asyncio.loop.create_datagram_endpoint`\\의 "
"*reuse_address* 매개 변수는 더는 지원되지 않습니다. 이것은 UDP에서 소켓 옵션 ``SO_REUSEADDR``\\의 "
"동작 때문입니다. 자세한 내용은 ``loop.create_datagram_endpoint()`` 설명서를 참조하십시오. "
"(Contributed by Kyle Stanley, Antoine Pitrou, and Yury Selivanov in "
":issue:`37228`.)"

#: ../../whatsnew/3.8.rst:2247
#, fuzzy
msgid "Notable changes in Python 3.8.2"
msgstr "파이썬 3.8.8의 주목할만한 변경 사항"

#: ../../whatsnew/3.8.rst:2249
msgid ""
"Fixed a regression with the ``ignore`` callback of "
":func:`shutil.copytree`. The argument types are now str and List[str] "
"again. (Contributed by Manuel Barkhau and Giampaolo Rodola in "
":gh:`83571`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:2254
#, fuzzy
msgid "Notable changes in Python 3.8.3"
msgstr "파이썬 3.8.8의 주목할만한 변경 사항"

#: ../../whatsnew/3.8.rst:2256
msgid ""
"The constant values of future flags in the :mod:`__future__` module are "
"updated in order to prevent collision with compiler flags. Previously "
"``PyCF_ALLOW_TOP_LEVEL_AWAIT`` was clashing with ``CO_FUTURE_DIVISION``. "
"(Contributed by Batuhan Taskaya in :gh:`83743`)"
msgstr ""

#: ../../whatsnew/3.8.rst:2262
msgid "Notable changes in Python 3.8.8"
msgstr "파이썬 3.8.8의 주목할만한 변경 사항"

#: ../../whatsnew/3.8.rst:2264
#, fuzzy
msgid ""
"Earlier Python versions allowed using both ``;`` and ``&`` as query "
"parameter separators in :func:`urllib.parse.parse_qs` and "
":func:`urllib.parse.parse_qsl`.  Due to security concerns, and to conform"
" with newer W3C recommendations, this has been changed to allow only a "
"single separator key, with ``&`` as the default.  This change also "
"affects :func:`!cgi.parse` and :func:`!cgi.parse_multipart` as they use "
"the affected functions internally. For more details, please see their "
"respective documentation. (Contributed by Adam Goldschmidt, Senthil "
"Kumaran and Ken Jin in :issue:`42967`.)"
msgstr ""
"이전 파이썬 버전에서는 :func:`urllib.parse.parse_qs`\\와 "
":func:`urllib.parse.parse_qsl`\\에서 쿼리 매개 변수 구분자로 ``;``\\과 ``&``\\를 모두 사용할"
" 수 있었습니다. 보안 문제와 최신 W3C 권장 사항을 준수하기 위해, ``&``\\가 기본값인 단일 구분자 키만 허용하도록 "
"변경되었습니다. 이 변경 사항은 영향을 받는 함수를 내부적으로 사용하므로 :func:`cgi.parse`\\와 "
":func:`cgi.parse_multipart`\\에도 영향을 줍니다. 자세한 내용은 해당 설명서를 참조하십시오. "
"(Contributed by Adam Goldschmidt, Senthil Kumaran and Ken Jin in "
":issue:`42967`.)"

#: ../../whatsnew/3.8.rst:2275
#, fuzzy
msgid "Notable changes in Python 3.8.9"
msgstr "파이썬 3.8.8의 주목할만한 변경 사항"

#: ../../whatsnew/3.8.rst:2277
msgid ""
"A security fix alters the :class:`ftplib.FTP` behavior to not trust the "
"IPv4 address sent from the remote server when setting up a passive data "
"channel.  We reuse the ftp server IP address instead.  For unusual code "
"requiring the old behavior, set a ``trust_server_pasv_ipv4_address`` "
"attribute on your FTP instance to ``True``.  (See :gh:`87451`)"
msgstr ""

#: ../../whatsnew/3.8.rst:2284 ../../whatsnew/3.8.rst:2304
#, fuzzy
msgid "Notable changes in Python 3.8.10"
msgstr "파이썬 3.8.1의 주목할만한 변경 사항"

#: ../../whatsnew/3.8.rst:2287
msgid "macOS 11.0 (Big Sur) and Apple Silicon Mac support"
msgstr ""

#: ../../whatsnew/3.8.rst:2289
msgid ""
"As of 3.8.10, Python now supports building and running on macOS 11 (Big "
"Sur) and on Apple Silicon Macs (based on the ``ARM64`` architecture). A "
"new universal build variant, ``universal2``, is now available to natively"
" support both ``ARM64`` and ``Intel 64`` in one set of executables. Note "
"that support for \"weaklinking\", building binaries targeted for newer "
"versions of macOS that will also run correctly on older versions by "
"testing at runtime for missing features, is not included in this backport"
" from Python 3.9; to support a range of macOS versions, continue to "
"target for and build on the oldest version in the range."
msgstr ""

#: ../../whatsnew/3.8.rst:2299
msgid ""
"(Originally contributed by Ronald Oussoren and Lawrence D'Anna in "
":gh:`85272`, with fixes by FX Coudert and Eli Rykoff, and backported to "
"3.8 by Maxime Bélanger and Ned Deily)"
msgstr ""

#: ../../whatsnew/3.8.rst:2307
msgid "urllib.parse"
msgstr ""

#: ../../whatsnew/3.8.rst:2309
msgid ""
"The presence of newline or tab characters in parts of a URL allows for "
"some forms of attacks. Following the WHATWG specification that updates "
":rfc:`3986`, ASCII newline ``\\n``, ``\\r`` and tab ``\\t`` characters "
"are stripped from the URL by the parser in :mod:`urllib.parse` preventing"
" such attacks. The removal characters are controlled by a new module "
"level variable ``urllib.parse._UNSAFE_URL_BYTES_TO_REMOVE``. (See "
":issue:`43882`)"
msgstr ""

#: ../../whatsnew/3.8.rst:2318
#, fuzzy
msgid "Notable changes in Python 3.8.12"
msgstr "파이썬 3.8.1의 주목할만한 변경 사항"

#: ../../whatsnew/3.8.rst:2323
msgid ""
"Starting with Python 3.8.12 the :mod:`ipaddress` module no longer accepts"
" any leading zeros in IPv4 address strings. Leading zeros are ambiguous "
"and interpreted as octal notation by some libraries. For example the "
"legacy function :func:`socket.inet_aton` treats leading zeros as octal "
"notation. glibc implementation of modern :func:`~socket.inet_pton` does "
"not accept any leading zeros."
msgstr ""

#: ../../whatsnew/3.8.rst:2330
msgid ""
"(Originally contributed by Christian Heimes in :issue:`36384`, and "
"backported to 3.8 by Achraf Merzouki.)"
msgstr ""

#: ../../whatsnew/3.8.rst:2334
#, fuzzy
msgid "Notable security feature in 3.8.14"
msgstr "파이썬 3.8.1의 주목할만한 변경 사항"

#: ../../whatsnew/3.8.rst:2336
msgid ""
"Converting between :class:`int` and :class:`str` in bases other than 2 "
"(binary), 4, 8 (octal), 16 (hexadecimal), or 32 such as base 10 (decimal)"
" now raises a :exc:`ValueError` if the number of digits in string form is"
" above a limit to avoid potential denial of service attacks due to the "
"algorithmic complexity. This is a mitigation for :cve:`2020-10735`. This "
"limit can be configured or disabled by environment variable, command line"
" flag, or :mod:`sys` APIs. See the :ref:`integer string conversion length"
" limitation <int_max_str_digits>` documentation.  The default limit is "
"4300 digits in string form."
msgstr ""

#: ../../whatsnew/3.8.rst:2347
#, fuzzy
msgid "Notable changes in 3.8.17"
msgstr "파이썬 3.8.1의 주목할만한 변경 사항"

#: ../../whatsnew/3.8.rst:2352
msgid ""
"The extraction methods in :mod:`tarfile`, and "
":func:`shutil.unpack_archive`, have a new a *filter* argument that allows"
" limiting tar features than may be surprising or dangerous, such as "
"creating files outside the destination directory. See :ref:`tarfile-"
"extraction-filter` for details. In Python 3.12, use without the *filter* "
"argument will show a :exc:`DeprecationWarning`. In Python 3.14, the "
"default will switch to ``'data'``. (Contributed by Petr Viktorin in "
":pep:`706`.)"
msgstr ""

#~ msgid ""
#~ "Added :meth:`pathlib.Path.link_to()` which creates"
#~ " a hard link pointing to a "
#~ "path. (Contributed by Joannah Nanjekye "
#~ "in :issue:`26978`)"
#~ msgstr ""
#~ "경로를 가리키는 하드 링크를 만드는 "
#~ ":meth:`pathlib.Path.link_to()`\\를 추가했습니다. (Contributed "
#~ "by Joannah Nanjekye in :issue:`26978`)"

