# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2017, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-04-17 23:44+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: Dong-gweon Oh <flowdas@gmail.com>\n"
"Language-Team: Korean (https://python.flowdas.com)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.17.0\n"

#: ../../whatsnew/3.5.rst:3
msgid "What's New In Python 3.5"
msgstr "파이썬 3.5의 새로운 기능"

#: ../../whatsnew/3.5.rst
msgid "Editors"
msgstr "편집자"

#: ../../whatsnew/3.5.rst:5
msgid "Elvis Pranskevichus <elvis@magic.io>, Yury Selivanov <yury@magic.io>"
msgstr "Elvis Pranskevichus <elvis@magic.io>, Yury Selivanov <yury@magic.io>"

#: ../../whatsnew/3.5.rst:47
msgid ""
"This article explains the new features in Python 3.5, compared to 3.4. "
"Python 3.5 was released on September 13, 2015.  See the `changelog "
"<https://docs.python.org/3.5/whatsnew/changelog.html>`_ for a full list "
"of changes."
msgstr ""
"이 기사에서는 3.4과 비교하여 파이썬 3.5의 새로운 기능에 관해 설명합니다. 파이썬 3.5는 2015년 9월 13일에 "
"출시되었습니다. 전체 변경 사항 목록은 `changelog "
"<https://docs.python.org/3.5/whatsnew/changelog.html>`_\\를 참조하십시오."

#: ../../whatsnew/3.5.rst:54
msgid ":pep:`478` - Python 3.5 Release Schedule"
msgstr ":pep:`478` - 파이썬 3.5 출시 일정"

#: ../../whatsnew/3.5.rst:58
msgid "Summary -- Release highlights"
msgstr "요약 -- 배포 주요 사항"

#: ../../whatsnew/3.5.rst:60
msgid "New syntax features:"
msgstr "새로운 문법 기능:"

#: ../../whatsnew/3.5.rst:62
msgid ":ref:`PEP 492 <whatsnew-pep-492>`, coroutines with async and await syntax."
msgstr ":ref:`PEP 492 <whatsnew-pep-492>`, async와 await 구문을 사용하는 코루틴."

#: ../../whatsnew/3.5.rst:63
msgid ""
":ref:`PEP 465 <whatsnew-pep-465>`, a new matrix multiplication operator: "
"``a @ b``."
msgstr ":ref:`PEP 465 <whatsnew-pep-465>`, 새로운 행렬 곱셈 연산자: ``a @ b``."

#: ../../whatsnew/3.5.rst:64
msgid ":ref:`PEP 448 <whatsnew-pep-448>`, additional unpacking generalizations."
msgstr ":ref:`PEP 448 <whatsnew-pep-448>`, 추가적인 언 패킹 일반화."

#: ../../whatsnew/3.5.rst:67
msgid "New library modules:"
msgstr "새로운 라이브러리 모듈:"

#: ../../whatsnew/3.5.rst:69
msgid ":mod:`typing`: :ref:`PEP 484 -- Type Hints <whatsnew-pep-484>`."
msgstr ":mod:`typing`: :ref:`PEP 484 -- 형 힌트 <whatsnew-pep-484>`."

#: ../../whatsnew/3.5.rst:70
msgid ""
":mod:`zipapp`: :ref:`PEP 441 Improving Python ZIP Application Support "
"<whatsnew-zipapp>`."
msgstr ":mod:`zipapp`: :ref:`PEP 441 파이썬 ZIP 응용 프로그램 지원 개선 <whatsnew-zipapp>`."

#: ../../whatsnew/3.5.rst:74
msgid "New built-in features:"
msgstr "새로운 내장 기능:"

#: ../../whatsnew/3.5.rst:76
msgid ""
"``bytes % args``, ``bytearray % args``: :ref:`PEP 461 <whatsnew-pep-461>`"
" -- Adding ``%`` formatting to bytes and bytearray."
msgstr ""
"``bytes % args``, ``bytearray % args`` : :ref:`PEP 461 <whatsnew-"
"pep-461>` -- bytes와 bytearray에 ``%`` 포매팅 추가."

#: ../../whatsnew/3.5.rst:79
msgid ""
"New :meth:`bytes.hex`, :meth:`bytearray.hex` and :meth:`memoryview.hex` "
"methods. (Contributed by Arnon Yaari in :issue:`9951`.)"
msgstr ""
"새로운 :meth:`bytes.hex`, :meth:`bytearray.hex` 및 :meth:`memoryview.hex` "
"메서드. (Contributed by Arnon Yaari in :issue:`9951`.)"

#: ../../whatsnew/3.5.rst:82
msgid ""
":class:`memoryview` now supports tuple indexing (including multi-"
"dimensional). (Contributed by Antoine Pitrou in :issue:`23632`.)"
msgstr ""
":class:`memoryview`\\는 이제 튜플 인덱싱(다차원 포함)을 지원합니다. (Contributed by Antoine "
"Pitrou in :issue:`23632`.)"

#: ../../whatsnew/3.5.rst:85
msgid ""
"Generators have a new ``gi_yieldfrom`` attribute, which returns the "
"object being iterated by ``yield from`` expressions. (Contributed by "
"Benno Leslie and Yury Selivanov in :issue:`24450`.)"
msgstr ""
"제너레이터에는 ``yield from`` 표현식에 의해 이터레이션 중인 객체를 반환하는 새로운 ``gi_yieldfrom`` "
"어트리뷰트가 있습니다. (Contributed by Benno Leslie and Yury Selivanov in "
":issue:`24450`.)"

#: ../../whatsnew/3.5.rst:89
msgid ""
"A new :exc:`RecursionError` exception is now raised when maximum "
"recursion depth is reached.  (Contributed by Georg Brandl in "
":issue:`19235`.)"
msgstr ""
"이제 최대 재귀 깊이에 도달하면 새로운 :exc:`RecursionError` 예외가 발생합니다. (Contributed by "
"Georg Brandl in :issue:`19235`.)"

#: ../../whatsnew/3.5.rst:94
msgid "CPython implementation improvements:"
msgstr "CPython 구현 개선:"

#: ../../whatsnew/3.5.rst:96
msgid ""
"When the ``LC_TYPE`` locale is the POSIX locale (``C`` locale), "
":py:data:`sys.stdin` and :py:data:`sys.stdout` now use the "
"``surrogateescape`` error handler, instead of the ``strict`` error "
"handler. (Contributed by Victor Stinner in :issue:`19977`.)"
msgstr ""
"``LC_TYPE`` 로케일이 POSIX 로케일(``C`` 로케일)일 때, :py:data:`sys.stdin`\\과 "
":py:data:`sys.stdout`\\은 이제 ``strict`` 에러 처리기 대신 ``surrogateescape`` 에러 "
"처리기를 사용합니다. (Contributed by Victor Stinner in :issue:`19977`.)"

#: ../../whatsnew/3.5.rst:101
msgid ""
"``.pyo`` files are no longer used and have been replaced by a more "
"flexible scheme that includes the optimization level explicitly in "
"``.pyc`` name. (See :ref:`PEP 488 overview <whatsnew-pep-488>`.)"
msgstr ""
"``.pyo`` 파일은 더는 사용되지 않으며 ``.pyc`` 이름에 명시적으로 최적화 수준을 포함하는 더 유연한 체계로 "
"대체되었습니다. (:ref:`PEP 488 개요 <whatsnew-pep-488>`\\를 참조하십시오.)"

#: ../../whatsnew/3.5.rst:105
msgid ""
"Builtin and extension modules are now initialized in a multi-phase "
"process, which is similar to how Python modules are loaded. (See "
":ref:`PEP 489 overview <whatsnew-pep-489>`.)"
msgstr ""
"내장과 확장 모듈은 이제 파이썬 모듈이 로드되는 방식과 유사한 다단계 절차로 초기화됩니다. (:ref:`PEP 489 개요 "
"<whatsnew-pep-489>`\\를 참조하십시오.)"

#: ../../whatsnew/3.5.rst:110
msgid "Significant improvements in the standard library:"
msgstr "표준 라이브러리의 현저한 개선:"

#: ../../whatsnew/3.5.rst:112
msgid ""
":class:`collections.OrderedDict` is now :ref:`implemented in C <whatsnew-"
"ordereddict>`, which makes it 4 to 100 times faster."
msgstr ""
":class:`collections.OrderedDict`\\는 이제 :ref:`C로 구현 <whatsnew-"
"ordereddict>`\\되어서 4 에서 100배 더 빠릅니다."

#: ../../whatsnew/3.5.rst:116
msgid ""
"The :mod:`ssl` module gained :ref:`support for Memory BIO <whatsnew-"
"sslmemorybio>`, which decouples SSL protocol handling from network IO."
msgstr ""
":mod:`ssl` 모듈은 네트워크 IO에서 SSL 프로토콜 처리를 분리하는 :ref:`메모리 BIO 지원 <whatsnew-"
"sslmemorybio>`\\을 얻었습니다."

#: ../../whatsnew/3.5.rst:120
msgid ""
"The new :func:`os.scandir` function provides a :ref:`better and "
"significantly faster way <whatsnew-pep-471>` of directory traversal."
msgstr ""
"새로운 :func:`os.scandir` 함수는 디렉터리 순회의 :ref:`더 좋고 훨씬 더 빠른 방법 <whatsnew-"
"pep-471>`\\을 제공합니다."

#: ../../whatsnew/3.5.rst:124
msgid ""
":func:`functools.lru_cache` has been mostly :ref:`reimplemented in C "
"<whatsnew-lrucache>`, yielding much better performance."
msgstr ""
":func:`functools.lru_cache`\\는 대부분 :ref:`C로 재구현되어서 <whatsnew-lrucache>` "
"훨씬 더 나은 성능을 제공합니다."

#: ../../whatsnew/3.5.rst:128
msgid ""
"The new :func:`subprocess.run` function provides a :ref:`streamlined way "
"to run subprocesses <whatsnew-subprocess>`."
msgstr ""
"새로운 :func:`subprocess.run` 함수는 :ref:`서브 프로세스를 실행하는 간소화된 방법 <whatsnew-"
"subprocess>`\\을 제공합니다."

#: ../../whatsnew/3.5.rst:131
msgid ""
"The :mod:`traceback` module has been significantly :ref:`enhanced "
"<whatsnew-traceback>` for improved performance and developer convenience."
msgstr ""
":mod:`traceback` 모듈은 향상된 성능과 개발자 편의를 위해 크게 :ref:`개선 <whatsnew-"
"traceback>`\\되었습니다."

#: ../../whatsnew/3.5.rst:136
msgid "Security improvements:"
msgstr "보안 향상:"

#: ../../whatsnew/3.5.rst:138
msgid ""
"SSLv3 is now disabled throughout the standard library. It can still be "
"enabled by instantiating a :class:`ssl.SSLContext` manually.  (See "
":issue:`22638` for more details; this change was backported to CPython "
"3.4 and 2.7.)"
msgstr ""
"SSLv3은 이제 표준 라이브러리 전체에서 비활성화됩니다. :class:`ssl.SSLContext`\\를 수동으로 인스턴스 화하여"
" 여전히 활성화 할 수 있습니다. (자세한 내용은 :issue:`22638`\\을 참조하십시오; 이 변경 사항은 CPython "
"3.4와 2.7로 역 이식되었습니다.)"

#: ../../whatsnew/3.5.rst:143
msgid ""
"HTTP cookie parsing is now stricter, in order to protect against "
"potential injection attacks. (Contributed by Antoine Pitrou in "
":issue:`22796`.)"
msgstr ""
"HTTP 쿠키 구문 분석은 이제 잠재적인 주입 공격으로부터 보호하기 위해 더 엄격해졌습니다. (Contributed by "
"Antoine Pitrou in :issue:`22796`.)"

#: ../../whatsnew/3.5.rst:148
msgid "Windows improvements:"
msgstr "윈도우 개선:"

#: ../../whatsnew/3.5.rst:150
msgid ""
"A new installer for Windows has replaced the old MSI. See :ref:`using-on-"
"windows` for more information."
msgstr ""
"윈도우 용 새 설치 프로그램이 이전 MSI를 대체했습니다. 자세한 정보는 :ref:`using-on-windows`\\를 "
"참조하십시오."

#: ../../whatsnew/3.5.rst:153
msgid ""
"Windows builds now use Microsoft Visual C++ 14.0, and extension modules "
"should use the same."
msgstr "윈도우 빌드는 이제 Microsoft Visual C++ 14.0을 사용하고, 확장 모듈은 같은 것을 사용해야 합니다."

#: ../../whatsnew/3.5.rst:157
msgid ""
"Please read on for a comprehensive list of user-facing changes, including"
" many other smaller improvements, CPython optimizations, deprecations, "
"and potential porting issues."
msgstr ""
"다른 많은 소규모 개선 사항, CPython 최적화, 폐지 및 잠재적 이식 문제를 포함하여, 사용자가 직면하는 변경 사항의 포괄적인"
" 목록을 읽으십시오."

#: ../../whatsnew/3.5.rst:163
msgid "New Features"
msgstr "새로운 기능"

#: ../../whatsnew/3.5.rst:168
msgid "PEP 492 - Coroutines with async and await syntax"
msgstr "PEP 492 - async와 await 구문을 사용하는 코루틴"

#: ../../whatsnew/3.5.rst:170
msgid ""
":pep:`492` greatly improves support for asynchronous programming in "
"Python by adding :term:`awaitable objects <awaitable>`, :term:`coroutine "
"functions <coroutine function>`, :term:`asynchronous iteration "
"<asynchronous iterable>`, and :term:`asynchronous context managers "
"<asynchronous context manager>`."
msgstr ""
":pep:`492`\\는 :term:`어웨이터블 객체 <awaitable>`, :term:`코루틴 함수 <coroutine "
"function>`, :term:`비동기 이터레이션 <asynchronous iterable>` 및 :term:`비동기 컨텍스트 "
"관리자 <asynchronous context manager>`\\를 추가하여 파이썬에서 비동기 프로그래밍에 대한 지원을 크게 "
"향상합니다."

#: ../../whatsnew/3.5.rst:176
msgid ""
"Coroutine functions are declared using the new :keyword:`async def` "
"syntax::"
msgstr "코루틴 함수는 새로운 :keyword:`async def` 구문을 사용하여 선언됩니다::"

#: ../../whatsnew/3.5.rst:178
msgid ""
">>> async def coro():\n"
"...     return 'spam'"
msgstr ""

#: ../../whatsnew/3.5.rst:181
msgid ""
"Inside a coroutine function, the new :keyword:`await` expression can be "
"used to suspend coroutine execution until the result is available.  Any "
"object can be *awaited*, as long as it implements the :term:`awaitable` "
"protocol by defining the :meth:`__await__` method."
msgstr ""
"코루틴 함수 내에서 새로운 :keyword:`await` 표현식을 사용하여 결과를 사용할 수 있을 때까지 코루틴 실행을 중단 할 수"
" 있습니다. :meth:`__await__` 메서드를 정의하여 :term:`어웨이터블 <awaitable>` 프로토콜을 구현하는 한"
" 모든 객체는 *await* 될 수 있습니다."

#: ../../whatsnew/3.5.rst:186
msgid ""
"PEP 492 also adds :keyword:`async for` statement for convenient iteration"
" over asynchronous iterables."
msgstr "PEP 492는 또한 비동기 이터러블에 대한 편리한 이터레이션을 위해 :keyword:`async for` 문을 추가합니다."

#: ../../whatsnew/3.5.rst:189
msgid "An example of a rudimentary HTTP client written using the new syntax::"
msgstr "새로운 구문을 사용하여 작성된 기본 HTTP 클라이언트의 예::"

#: ../../whatsnew/3.5.rst:191
#, python-format
msgid ""
"import asyncio\n"
"\n"
"async def http_get(domain):\n"
"    reader, writer = await asyncio.open_connection(domain, 80)\n"
"\n"
"    writer.write(b'\\r\\n'.join([\n"
"        b'GET / HTTP/1.1',\n"
"        b'Host: %b' % domain.encode('latin-1'),\n"
"        b'Connection: close',\n"
"        b'', b''\n"
"    ]))\n"
"\n"
"    async for line in reader:\n"
"        print('>>>', line)\n"
"\n"
"    writer.close()\n"
"\n"
"loop = asyncio.get_event_loop()\n"
"try:\n"
"    loop.run_until_complete(http_get('example.com'))\n"
"finally:\n"
"    loop.close()"
msgstr ""

#: ../../whatsnew/3.5.rst:215
msgid ""
"Similarly to asynchronous iteration, there is a new syntax for "
"asynchronous context managers.  The following script::"
msgstr "비동기 이터레이션과 마찬가지로, 비동기 컨텍스트 관리자를 위한 새로운 구문이 있습니다. 다음 스크립트::"

#: ../../whatsnew/3.5.rst:218
#, python-brace-format
msgid ""
"import asyncio\n"
"\n"
"async def coro(name, lock):\n"
"    print('coro {}: waiting for lock'.format(name))\n"
"    async with lock:\n"
"        print('coro {}: holding the lock'.format(name))\n"
"        await asyncio.sleep(1)\n"
"        print('coro {}: releasing the lock'.format(name))\n"
"\n"
"loop = asyncio.get_event_loop()\n"
"lock = asyncio.Lock()\n"
"coros = asyncio.gather(coro(1, lock), coro(2, lock))\n"
"try:\n"
"    loop.run_until_complete(coros)\n"
"finally:\n"
"    loop.close()"
msgstr ""

#: ../../whatsnew/3.5.rst:235
msgid "will output::"
msgstr "는 다음을 출력합니다::"

#: ../../whatsnew/3.5.rst:237
msgid ""
"coro 2: waiting for lock\n"
"coro 2: holding the lock\n"
"coro 1: waiting for lock\n"
"coro 2: releasing the lock\n"
"coro 1: holding the lock\n"
"coro 1: releasing the lock"
msgstr ""

#: ../../whatsnew/3.5.rst:244
msgid ""
"Note that both :keyword:`async for` and :keyword:`async with` can only be"
" used inside a coroutine function declared with :keyword:`async def`."
msgstr ""
":keyword:`async for`\\와 :keyword:`async with`\\는 모두 :keyword:`async "
"def`\\로 선언된 코루틴 함수 내에서만 사용할 수 있음에 유의하십시오."

#: ../../whatsnew/3.5.rst:247
msgid ""
"Coroutine functions are intended to be run inside a compatible event "
"loop, such as the :ref:`asyncio loop <asyncio-event-loop>`."
msgstr ""
"코루틴 함수는 :ref:`asyncio loop <asyncio-event-loop>`\\와 같은 호환 가능한 이벤트 루프 내에서 "
"실행되도록 설계되었습니다."

#: ../../whatsnew/3.5.rst:253
msgid ""
"Starting with CPython 3.5.2, ``__aiter__`` can directly return "
":term:`asynchronous iterators <asynchronous iterator>`.  Returning an "
":term:`awaitable` object will result in a "
":exc:`PendingDeprecationWarning`."
msgstr ""
"CPython 3.5.2부터 ``__aiter__``\\는 :term:`비동기 이터레이터 <asynchronous "
"iterator>`\\를 직접 반환 할 수 있습니다. :term:`어웨이터블 <awaitable>` 객체를 반환하면 "
":exc:`PendingDeprecationWarning` 이 발생합니다."

#: ../../whatsnew/3.5.rst:259
msgid "See more details in the :ref:`async-iterators` documentation section."
msgstr ":ref:`async-iterators` 설명서 섹션에서 자세한 내용을 참조하십시오."

#: ../../whatsnew/3.5.rst:265
msgid ":pep:`492` -- Coroutines with async and await syntax"
msgstr ":pep:`492` -- async와 await 구문을 사용하는 코루틴"

#: ../../whatsnew/3.5.rst:266
msgid "PEP written and implemented by Yury Selivanov."
msgstr "Yury Selivanov가 작성하고 구현한 PEP."

#: ../../whatsnew/3.5.rst:272
msgid "PEP 465 - A dedicated infix operator for matrix multiplication"
msgstr "PEP 465 - 행렬 곱셈을 위한 전용 중위(infix) 연산자"

#: ../../whatsnew/3.5.rst:274
msgid ""
":pep:`465` adds the ``@`` infix operator for matrix multiplication. "
"Currently, no builtin Python types implement the new operator, however, "
"it can be implemented by defining :meth:`__matmul__`, "
":meth:`__rmatmul__`, and :meth:`__imatmul__` for regular, reflected, and "
"in-place matrix multiplication.  The semantics of these methods is "
"similar to that of methods defining other infix arithmetic operators."
msgstr ""
":pep:`465`\\는 행렬 곱셈을 위한 ``@`` 중위(infix) 연산자를 추가합니다. 현재, 내장 파이썬 형은 어느 것도 새"
" 연산자를 구현하지 않지만, 일반, 뒤집힌 및 증분 행렬 곱셈에 대해 :meth:`__matmul__`, "
":meth:`__rmatmul__` 및 :meth:`__imatmul__`\\를 정의하여 구현할 수 있습니다. 이러한 메서드의 "
"의미는 다른 중위 산술 연산자를 정의하는 메서드의 의미와 유사합니다."

#: ../../whatsnew/3.5.rst:281
msgid ""
"Matrix multiplication is a notably common operation in many fields of "
"mathematics, science, engineering, and the addition of ``@`` allows "
"writing cleaner code::"
msgstr ""
"행렬 곱셈은 수학, 과학, 공학의 많은 분야에서 매우 일반적인 연산이며, ``@``\\를 추가하면 더 깨끗한 코드를 작성할 수 "
"있습니다::"

#: ../../whatsnew/3.5.rst:285
msgid "S = (H @ beta - r).T @ inv(H @ V @ H.T) @ (H @ beta - r)"
msgstr ""

#: ../../whatsnew/3.5.rst:287
msgid "instead of::"
msgstr "이렇게 작성하는 대신에::"

#: ../../whatsnew/3.5.rst:289
msgid ""
"S = dot((dot(H, beta) - r).T,\n"
"        dot(inv(dot(dot(H, V), H.T)), dot(H, beta) - r))"
msgstr ""

#: ../../whatsnew/3.5.rst:292
msgid "NumPy 1.10 has support for the new operator::"
msgstr "NumPy 1.10은 새 연산자를 지원합니다::"

#: ../../whatsnew/3.5.rst:294
msgid ""
">>> import numpy\n"
"\n"
">>> x = numpy.ones(3)\n"
">>> x\n"
"array([ 1., 1., 1.])\n"
"\n"
">>> m = numpy.eye(3)\n"
">>> m\n"
"array([[ 1., 0., 0.],\n"
"       [ 0., 1., 0.],\n"
"       [ 0., 0., 1.]])\n"
"\n"
">>> x @ m\n"
"array([ 1., 1., 1.])"
msgstr ""

#: ../../whatsnew/3.5.rst:312
msgid ":pep:`465` -- A dedicated infix operator for matrix multiplication"
msgstr ":pep:`465` -- 행렬 곱셈을 위한 전용 중위(infix) 연산자"

#: ../../whatsnew/3.5.rst:313
msgid "PEP written by Nathaniel J. Smith; implemented by Benjamin Peterson."
msgstr "Nathaniel J. Smith가 작성한 PEP; Benjamin Peterson이 구현했습니다."

#: ../../whatsnew/3.5.rst:319
msgid "PEP 448 - Additional Unpacking Generalizations"
msgstr "PEP 448 - 추가적인 언 패킹 일반화"

#: ../../whatsnew/3.5.rst:321
msgid ""
":pep:`448` extends the allowed uses of the ``*`` iterable unpacking "
"operator and ``**`` dictionary unpacking operator.  It is now possible to"
" use an arbitrary number of unpackings in :ref:`function calls <calls>`::"
msgstr ""
":pep:`448`\\은 ``*`` 이터러블 언 패킹 연산자와 ``**`` 딕셔너리 언 패킹 연산자의 허용된 사용을 확장합니다. "
"이제 :ref:`함수 호출 <calls>`\\에서 임의의 수의 언 패킹을 사용할 수 있습니다::"

#: ../../whatsnew/3.5.rst:325
#, python-brace-format
msgid ""
">>> print(*[1], *[2], 3, *[4, 5])\n"
"1 2 3 4 5\n"
"\n"
">>> def fn(a, b, c, d):\n"
"...     print(a, b, c, d)\n"
"...\n"
"\n"
">>> fn(**{'a': 1, 'c': 3}, **{'b': 2, 'd': 4})\n"
"1 2 3 4"
msgstr ""

#: ../../whatsnew/3.5.rst:335
msgid ""
"Similarly, tuple, list, set, and dictionary displays allow multiple "
"unpackings (see :ref:`exprlists` and :ref:`dict`)::"
msgstr ""
"마찬가지로, 튜플, 리스트, 집합 및 딕셔너리 디스플레이는 여러 번의 언 패킹을 허용합니다 (:ref:`exprlists`\\과 "
":ref:`dict`\\를 참조하십시오)::"

#: ../../whatsnew/3.5.rst:338
#, python-brace-format
msgid ""
">>> *range(4), 4\n"
"(0, 1, 2, 3, 4)\n"
"\n"
">>> [*range(4), 4]\n"
"[0, 1, 2, 3, 4]\n"
"\n"
">>> {*range(4), 4, *(5, 6, 7)}\n"
"{0, 1, 2, 3, 4, 5, 6, 7}\n"
"\n"
">>> {'x': 1, **{'y': 2}}\n"
"{'x': 1, 'y': 2}"
msgstr ""

#: ../../whatsnew/3.5.rst:352
msgid ":pep:`448` -- Additional Unpacking Generalizations"
msgstr ":pep:`448` -- 추가적인 언 패킹 일반화"

#: ../../whatsnew/3.5.rst:353
msgid ""
"PEP written by Joshua Landau; implemented by Neil Girdhar, Thomas "
"Wouters, and Joshua Landau."
msgstr ""
"Joshua Landau가 작성한 PEP; Neil Girdhar, Thomas Wouters 및 Joshua Landau가 "
"구현했습니다."

#: ../../whatsnew/3.5.rst:360
msgid "PEP 461 - percent formatting support for bytes and bytearray"
msgstr "PEP 461 - bytes와 bytearray를 위한 퍼센트 포매팅 지원"

#: ../../whatsnew/3.5.rst:362
msgid ""
":pep:`461` adds support for the ``%`` :ref:`interpolation operator "
"<bytes-formatting>` to :class:`bytes` and :class:`bytearray`."
msgstr ""
":pep:`461`\\은 :class:`bytes`\\와 :class:`bytearray`\\에 ``%`` :ref:`보간 연산자 "
"<bytes-formatting>`\\에 대한 지원을 추가합니다."

#: ../../whatsnew/3.5.rst:366
msgid ""
"While interpolation is usually thought of as a string operation, there "
"are cases where interpolation on ``bytes`` or ``bytearrays`` makes sense,"
" and the work needed to make up for this missing functionality detracts "
"from the overall readability of the code.  This issue is particularly "
"important when dealing with wire format protocols, which are often a "
"mixture of binary and ASCII compatible text."
msgstr ""
"보간은 일반적으로 문자열 연산으로 간주하지만, ``bytes``\\나 ``bytearrays``\\에 대한 보간이 적절한 경우가 "
"있고, 이 누락 된 기능을 보완하는 데 필요한 작업이 코드의 전반적인 가독성을 떨어뜨립니다. 이 문제는 종종 바이너리와 ASCII "
"호환 텍스트가 혼합된 전송 형식(wire format) 프로토콜을 다룰 때 특히 중요합니다."

#: ../../whatsnew/3.5.rst:373 ../../whatsnew/3.5.rst:1848
msgid "Examples::"
msgstr "예::"

#: ../../whatsnew/3.5.rst:375
#, python-format
msgid ""
">>> b'Hello %b!' % b'World'\n"
"b'Hello World!'\n"
"\n"
">>> b'x=%i y=%f' % (1, 2.5)\n"
"b'x=1 y=2.500000'"
msgstr ""

#: ../../whatsnew/3.5.rst:381
msgid ""
"Unicode is not allowed for ``%b``, but it is accepted by ``%a`` "
"(equivalent of ``repr(obj).encode('ascii', 'backslashreplace')``)::"
msgstr ""
"유니코드는 ``%b``\\에 허용되지 않지만, ``%a``\\에서 허용됩니다 (``repr(obj).encode('ascii', "
"'backslashreplace')``\\와 동등합니다)::"

#: ../../whatsnew/3.5.rst:384
msgid ""
">>> b'Hello %b!' % 'World'\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"TypeError: %b requires bytes, or an object that implements __bytes__, not"
" 'str'\n"
"\n"
">>> b'price: %a' % '10€'\n"
"b\"price: '10\\\\u20ac'\""
msgstr ""

#: ../../whatsnew/3.5.rst:392
#, python-format
msgid ""
"Note that ``%s`` and ``%r`` conversion types, although supported, should "
"only be used in codebases that need compatibility with Python 2."
msgstr ""
"``%s``\\와 ``%r`` 변환 유형은, 지원되기는 하지만, 파이썬 2와의 호환성이 필요한 코드 베이스에서만 사용해야 함에 "
"유의하십시오."

#: ../../whatsnew/3.5.rst:397
#, python-format
msgid ":pep:`461` -- Adding % formatting to bytes and bytearray"
msgstr ":pep:`461` -- bytes와 bytearray에 % 포매팅 추가"

#: ../../whatsnew/3.5.rst:398
msgid ""
"PEP written by Ethan Furman; implemented by Neil Schemenauer and Ethan "
"Furman."
msgstr "Ethan Furman이 작성한 PEP; Neil Schemenauer와 Ethan Furman이 구현했습니다."

#: ../../whatsnew/3.5.rst:405
msgid "PEP 484 - Type Hints"
msgstr "PEP 484 - 형 힌트"

#: ../../whatsnew/3.5.rst:407
msgid ""
"Function annotation syntax has been a Python feature since version 3.0 "
"(:pep:`3107`), however the semantics of annotations has been left "
"undefined."
msgstr ""
"함수 어노테이션 구문은 버전 3.0(:pep:`3107`)부터 파이썬 기능이었지만, 어노테이션의 의미는 정의되지 않은 상태로 남아 "
"있었습니다."

#: ../../whatsnew/3.5.rst:410
msgid ""
"Experience has shown that the majority of function annotation uses were "
"to provide type hints to function parameters and return values.  It "
"became evident that it would be beneficial for Python users, if the "
"standard library included the base definitions and tools for type "
"annotations."
msgstr ""
"경험에 따르면 대부분 함수 어노테이션은 함수 매개 변수와 반환 값에 형 힌트를 제공하는 데 사용되었습니다. 표준 라이브러리에 형 "
"어노테이션을 위한 기본 정의와 도구가 포함되어 있다면 파이썬 사용자에게 도움이 될 것이 분명해졌습니다."

#: ../../whatsnew/3.5.rst:415
msgid ""
":pep:`484` introduces a :term:`provisional module <provisional API>` to "
"provide these standard definitions and tools, along with some conventions"
" for situations where annotations are not available."
msgstr ""
":pep:`484`\\는 어노테이션을 사용할 수 없는 상황에 대한 몇 가지 규칙과 함께 이러한 표준 정의와 도구를 제공하는 "
":term:`잠정적 모듈 <provisional API>`\\을 도입합니다."

#: ../../whatsnew/3.5.rst:419
msgid ""
"For example, here is a simple function whose argument and return type are"
" declared in the annotations::"
msgstr "예를 들어, 다음은 어노테이션에 인자와 반환형이 선언된 간단한 함수입니다::"

#: ../../whatsnew/3.5.rst:422
msgid ""
"def greeting(name: str) -> str:\n"
"    return 'Hello ' + name"
msgstr ""

#: ../../whatsnew/3.5.rst:425
#, fuzzy
msgid ""
"While these annotations are available at runtime through the usual "
":attr:`~object.__annotations__` attribute, *no automatic type checking "
"happens at runtime*.  Instead, it is assumed that a separate off-line "
"type checker (e.g. `mypy <https://mypy-lang.org>`_) will be used for on-"
"demand source code analysis."
msgstr ""
"이러한 어노테이션은 일반적인 :attr:`__annotations__` 어트리뷰트를 통해 실행 시간에 사용할 수 있지만, *어떤 "
"자동 형 검사도 실행 시간에 일어나지 않습니다*. 대신, 별도의 오프라인 형 검사기(예를 들어 `mypy <http://mypy-"
"lang.org>`_)가 필요할 때 소스 코드 분석에 사용되는 것으로 가정합니다."

#: ../../whatsnew/3.5.rst:431
msgid ""
"The type system supports unions, generic types, and a special type named "
":class:`~typing.Any` which is consistent with (i.e. assignable to and "
"from) all types."
msgstr ""
"형 시스템은 공용체(unions), 제네릭 형 및 모든 형과 일치하는 (즉, 대입 가능한) "
":class:`~typing.Any`\\라는 특수형을 지원합니다."

#: ../../whatsnew/3.5.rst:437
msgid ":mod:`typing` module documentation"
msgstr ":mod:`typing` 모듈 설명서"

#: ../../whatsnew/3.5.rst:438
msgid ":pep:`484` -- Type Hints"
msgstr ":pep:`484` -- 형 힌트"

#: ../../whatsnew/3.5.rst:439
msgid ""
"PEP written by Guido van Rossum, Jukka Lehtosalo, and Łukasz Langa; "
"implemented by Guido van Rossum."
msgstr ""
"Guido van Rossum, Jukka Lehtosalo 및 Łukasz Langa가 작성한 PEP; Guido van "
"Rossum이 구현했습니다."

#: ../../whatsnew/3.5.rst:441
msgid ":pep:`483` -- The Theory of Type Hints"
msgstr ":pep:`483` -- 형 힌트 이론"

#: ../../whatsnew/3.5.rst:442
msgid "PEP written by Guido van Rossum"
msgstr "Guido van Rossum이 작성한 PEP"

#: ../../whatsnew/3.5.rst:448
msgid "PEP 471 - os.scandir() function -- a better and faster directory iterator"
msgstr "PEP 471 - os.scandir() 함수 -- 더 빠르고 더 나은 디렉터리 이터레이터"

#: ../../whatsnew/3.5.rst:450
msgid ""
":pep:`471` adds a new directory iteration function, :func:`os.scandir`, "
"to the standard library.  Additionally, :func:`os.walk` is now "
"implemented using ``scandir``, which makes it 3 to 5 times faster on "
"POSIX systems and 7 to 20 times faster on Windows systems.  This is "
"largely achieved by greatly reducing the number of calls to "
":func:`os.stat` required to walk a directory tree."
msgstr ""
":pep:`471`\\은 표준 라이브러리에 새 디렉터리 이터레이션 함수 :func:`os.scandir`\\을 추가합니다. 또한, "
":func:`os.walk`\\는 이제 ``scandir``\\을 사용하여 구현되어, POSIX 시스템에서는 3 에서 5배, 윈도우"
" 시스템에서는 7 에서 20배 더 빠릅니다. 이것은 주로 디렉터리 트리를 탐색하는 데 필요한 :func:`os.stat` 호출 수를"
" 크게 줄임으로써 달성됩니다."

#: ../../whatsnew/3.5.rst:457
msgid ""
"Additionally, ``scandir`` returns an iterator, as opposed to returning a "
"list of file names, which improves memory efficiency when iterating over "
"very large directories."
msgstr ""
"또한, ``scandir``\\은 파일 이름 리스트 대신에 이터레이터를 반환하므로, 매우 큰 디렉터리를 이터레이션 할 때 메모리 "
"효율성이 향상됩니다."

#: ../../whatsnew/3.5.rst:461
msgid ""
"The following example shows a simple use of :func:`os.scandir` to display"
" all the files (excluding directories) in the given *path* that don't "
"start with ``'.'``. The :meth:`entry.is_file() <os.DirEntry.is_file>` "
"call will generally not make an additional system call::"
msgstr ""
"다음 예제는 ``'.'``\\로 시작하지 않는 지정된 *path*\\의 모든 파일(디렉터리 제외)을 표시하기 위해 "
":func:`os.scandir`\\을 사용하는 간단한 방법을 보여줍니다. :meth:`entry.is_file() "
"<os.DirEntry.is_file>` 호출은 일반적으로 추가 시스템 호출을 수행하지 않습니다::"

#: ../../whatsnew/3.5.rst:466
msgid ""
"for entry in os.scandir(path):\n"
"    if not entry.name.startswith('.') and entry.is_file():\n"
"        print(entry.name)"
msgstr ""

#: ../../whatsnew/3.5.rst:472
msgid ""
":pep:`471` -- os.scandir() function -- a better and faster directory "
"iterator"
msgstr ":pep:`471` -- os.scandir() 함수 -- 더 빠르고 더 나은 디렉터리 이터레이터"

#: ../../whatsnew/3.5.rst:473
msgid "PEP written and implemented by Ben Hoyt with the help of Victor Stinner."
msgstr "Victor Stinner의 도움으로 Ben Hoyt가 작성하고 구현한 PEP."

#: ../../whatsnew/3.5.rst:479
msgid "PEP 475: Retry system calls failing with EINTR"
msgstr "PEP 475: EINTR로 실패한 시스템 호출 재시도"

#: ../../whatsnew/3.5.rst:481
#, fuzzy
msgid ""
"An :py:const:`errno.EINTR` error code is returned whenever a system call,"
" that is waiting for I/O, is interrupted by a signal.  Previously, Python"
" would raise :exc:`InterruptedError` in such cases.  This meant that, "
"when writing a Python application, the developer had two choices:"
msgstr ""
":py:data:`errno.EINTR` 에러 코드는 I/O를 기다리는 시스템 호출이 시그널에 의해 중단될 때마다 반환됩니다. "
"이전에는, 이러한 경우에 파이썬이 :exc:`InterruptedError`\\를 발생시켰습니다. 이는 파이썬 응용 프로그램을 "
"작성할 때 개발자가 두 가지 선택을 할 수 있음을 의미합니다:"

#: ../../whatsnew/3.5.rst:486
msgid "Ignore the ``InterruptedError``."
msgstr "``InterruptedError``\\를 무시합니다."

#: ../../whatsnew/3.5.rst:487
msgid ""
"Handle the ``InterruptedError`` and attempt to restart the interrupted "
"system call at every call site."
msgstr "``InterruptedError``\\를 처리하고 모든 호출 지점에서 중단된 시스템 호출을 다시 시작합니다."

#: ../../whatsnew/3.5.rst:490
msgid ""
"The first option makes an application fail intermittently. The second "
"option adds a large amount of boilerplate that makes the code nearly "
"unreadable.  Compare::"
msgstr ""
"첫 번째 옵션은 응용 프로그램이 간헐적으로 실패하도록 합니다. 두 번째 옵션은 코드를 거의 읽을 수 없게 만드는 많은 양의 상용구를"
" 추가합니다. 다음을 비교해 보십시오::"

#: ../../whatsnew/3.5.rst:494
msgid "print(\"Hello World\")"
msgstr ""

#: ../../whatsnew/3.5.rst:496
msgid "and::"
msgstr "와::"

#: ../../whatsnew/3.5.rst:498
msgid ""
"while True:\n"
"    try:\n"
"        print(\"Hello World\")\n"
"        break\n"
"    except InterruptedError:\n"
"        continue"
msgstr ""

#: ../../whatsnew/3.5.rst:505
msgid ""
":pep:`475` implements automatic retry of system calls on ``EINTR``.  This"
" removes the burden of dealing with ``EINTR`` or :exc:`InterruptedError` "
"in user code in most situations and makes Python programs, including the "
"standard library, more robust.  Note that the system call is only retried"
" if the signal handler does not raise an exception."
msgstr ""
":pep:`475`\\는 ``EINTR``\\에서 시스템 호출의 자동 재시도를 구현합니다. 이것은 대부분의 상황에서 사용자 코드에서"
" ``EINTR``\\이나 :exc:`InterruptedError`\\를 다루는 부담을 제거하고 표준 라이브러리를 포함한 파이썬 "
"프로그램을 더욱 강인하게 만듭니다. 시스템 호출은 시그널 처리기가 예외를 발생시키지 않는 경우에만 재시도됨에 유의하십시오."

#: ../../whatsnew/3.5.rst:512
msgid ""
"Below is a list of functions which are now retried when interrupted by a "
"signal:"
msgstr "다음은 시그널에 의해 중단될 때 재시도되는 함수 목록입니다:"

#: ../../whatsnew/3.5.rst:515
msgid ":func:`open` and :func:`io.open`;"
msgstr ":func:`open`\\과 :func:`io.open`;"

#: ../../whatsnew/3.5.rst:517
msgid "functions of the :mod:`faulthandler` module;"
msgstr ":mod:`faulthandler` 모듈의 함수들;"

#: ../../whatsnew/3.5.rst:519
msgid ""
":mod:`os` functions: :func:`~os.fchdir`, :func:`~os.fchmod`, "
":func:`~os.fchown`, :func:`~os.fdatasync`, :func:`~os.fstat`, "
":func:`~os.fstatvfs`, :func:`~os.fsync`, :func:`~os.ftruncate`, "
":func:`~os.mkfifo`, :func:`~os.mknod`, :func:`~os.open`, "
":func:`~os.posix_fadvise`, :func:`~os.posix_fallocate`, "
":func:`~os.pread`, :func:`~os.pwrite`, :func:`~os.read`, "
":func:`~os.readv`, :func:`~os.sendfile`, :func:`~os.wait3`, "
":func:`~os.wait4`, :func:`~os.wait`, :func:`~os.waitid`, "
":func:`~os.waitpid`, :func:`~os.write`, :func:`~os.writev`;"
msgstr ""
":mod:`os` 함수: :func:`~os.fchdir`, :func:`~os.fchmod`, :func:`~os.fchown`,"
" :func:`~os.fdatasync`, :func:`~os.fstat`, :func:`~os.fstatvfs`, "
":func:`~os.fsync`, :func:`~os.ftruncate`, :func:`~os.mkfifo`, "
":func:`~os.mknod`, :func:`~os.open`, :func:`~os.posix_fadvise`, "
":func:`~os.posix_fallocate`, :func:`~os.pread`, :func:`~os.pwrite`, "
":func:`~os.read`, :func:`~os.readv`, :func:`~os.sendfile`, "
":func:`~os.wait3`, :func:`~os.wait4`, :func:`~os.wait`, "
":func:`~os.waitid`, :func:`~os.waitpid`, :func:`~os.write`, "
":func:`~os.writev`;"

#: ../../whatsnew/3.5.rst:529
#, fuzzy
msgid ""
"special cases: :func:`os.close` and :func:`os.dup2` now ignore "
":py:const:`~errno.EINTR` errors; the syscall is not retried (see the PEP "
"for the rationale);"
msgstr ""
"특수한 경우: :func:`os.close`\\와 :func:`os.dup2`\\는 이제 :py:data:`~errno.EINTR`"
" 에러를 무시합니다; 시스템 호출은 재시도되지 않습니다 (이유는 PEP를 참조하십시오);"

#: ../../whatsnew/3.5.rst:533
msgid ""
":mod:`select` functions: :func:`devpoll.poll() <select.devpoll.poll>`, "
":func:`epoll.poll() <select.epoll.poll>`, :func:`kqueue.control() "
"<select.kqueue.control>`, :func:`poll.poll() <select.poll.poll>`, "
":func:`~select.select`;"
msgstr ""
":mod:`select` 함수: :func:`devpoll.poll() <select.devpoll.poll>`, "
":func:`epoll.poll() <select.epoll.poll>`, :func:`kqueue.control() "
"<select.kqueue.control>`, :func:`poll.poll() <select.poll.poll>`, "
":func:`~select.select`;"

#: ../../whatsnew/3.5.rst:538
msgid ""
"methods of the :class:`~socket.socket` class: "
":meth:`~socket.socket.accept`, :meth:`~socket.socket.connect` (except for"
" non-blocking sockets), :meth:`~socket.socket.recv`, "
":meth:`~socket.socket.recvfrom`, :meth:`~socket.socket.recvmsg`, "
":meth:`~socket.socket.send`, :meth:`~socket.socket.sendall`, "
":meth:`~socket.socket.sendmsg`, :meth:`~socket.socket.sendto`;"
msgstr ""
":class:`~socket.socket` 클래스의 메서드: :meth:`~socket.socket.accept`, "
":meth:`~socket.socket.connect` (비 블로킹 소켓 제외), "
":meth:`~socket.socket.recv`, :meth:`~socket.socket.recvfrom`, "
":meth:`~socket.socket.recvmsg`, :meth:`~socket.socket.send`, "
":meth:`~socket.socket.sendall`, :meth:`~socket.socket.sendmsg`, "
":meth:`~socket.socket.sendto`;"

#: ../../whatsnew/3.5.rst:545
msgid ":func:`signal.sigtimedwait` and :func:`signal.sigwaitinfo`;"
msgstr ":func:`signal.sigtimedwait`\\와 :func:`signal.sigwaitinfo`;"

#: ../../whatsnew/3.5.rst:547
msgid ":func:`time.sleep`."
msgstr ":func:`time.sleep`."

#: ../../whatsnew/3.5.rst:551
msgid ":pep:`475` -- Retry system calls failing with EINTR"
msgstr ":pep:`475` -- EINTR로 실패한 시스템 호출 재시도"

#: ../../whatsnew/3.5.rst:552
msgid ""
"PEP and implementation written by Charles-François Natali and Victor "
"Stinner, with the help of Antoine Pitrou (the French connection)."
msgstr ""
"Charles-François Natali와 Victor Stinner가 Antoine Pitrou의 도움을 받아 PEP와 구현을 "
"작성했습니다 (프렌치 커넥션)."

#: ../../whatsnew/3.5.rst:559
msgid "PEP 479: Change StopIteration handling inside generators"
msgstr "PEP 479: 제너레이터 내부에서의 StopIteration 처리 변경"

#: ../../whatsnew/3.5.rst:561
msgid ""
"The interaction of generators and :exc:`StopIteration` in Python 3.4 and "
"earlier was sometimes surprising, and could conceal obscure bugs.  "
"Previously, ``StopIteration`` raised accidentally inside a generator "
"function was interpreted as the end of the iteration by the loop "
"construct driving the generator."
msgstr ""
"파이썬 3.4와 이전 버전에서 제너레이터와 :exc:`StopIteration`\\의 상호 작용은 때때로 놀랍고, 모호한 버그를 "
"감출 수 있습니다. 이전에는, 제너레이터 함수 내에서 실수로 발생한 ``StopIteration``\\이 제너레이터를 구동하는 루프"
" 구성에 의해 이터레이션의 끝으로 해석되었습니다."

#: ../../whatsnew/3.5.rst:567
msgid ""
":pep:`479` changes the behavior of generators: when a ``StopIteration`` "
"exception is raised inside a generator, it is replaced with a "
":exc:`RuntimeError` before it exits the generator frame.  The main goal "
"of this change is to ease debugging in the situation where an unguarded "
":func:`next` call raises ``StopIteration`` and causes the iteration "
"controlled by the generator to terminate silently. This is particularly "
"pernicious in combination with the ``yield from`` construct."
msgstr ""
":pep:`479`\\는 제너레이터의 동작을 변경합니다: 제너레이터 내부에서 ``StopIteration`` 예외가 발생하면, "
"제너레이터 프레임을 종료하기 전에 :exc:`RuntimeError`\\로 대체됩니다. 이 변경의 주요 목표는 보호되지 않는 "
":func:`next` 호출이 ``StopIteration``\\을 발생시키고 이 때문에 제너레이터가 제어하는 이터레이션이 조용히 "
"종료되도록 하는 상황에서 디버깅을 용이하게 하는 것입니다. 이것은 ``yield from`` 구조와 결합할 때 특히 유해합니다."

#: ../../whatsnew/3.5.rst:575
msgid ""
"This is a backwards incompatible change, so to enable the new behavior, a"
" :term:`__future__` import is necessary::"
msgstr "이는 이전 버전과 호환되지 않는 변경이므로, 새 동작을 사용하려면 :term:`__future__` 임포트가 필요합니다::"

#: ../../whatsnew/3.5.rst:578
msgid ""
">>> from __future__ import generator_stop\n"
"\n"
">>> def gen():\n"
"...     next(iter([]))\n"
"...     yield\n"
"...\n"
">>> next(gen())\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 2, in gen\n"
"StopIteration\n"
"\n"
"The above exception was the direct cause of the following exception:\n"
"\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"RuntimeError: generator raised StopIteration"
msgstr ""

#: ../../whatsnew/3.5.rst:595
msgid ""
"Without a ``__future__`` import, a :exc:`PendingDeprecationWarning` will "
"be raised whenever a :exc:`StopIteration` exception is raised inside a "
"generator."
msgstr ""
"``__future__`` 임포트가 없으면, 제너레이터 내에서 :exc:`StopIteration` 예외가 발생할 때마다 "
":exc:`PendingDeprecationWarning` 이 발생합니다."

#: ../../whatsnew/3.5.rst:600
msgid ":pep:`479` -- Change StopIteration handling inside generators"
msgstr ":pep:`479` -- 제너레이터 내부에서의 StopIteration 처리 변경"

#: ../../whatsnew/3.5.rst:601
msgid ""
"PEP written by Chris Angelico and Guido van Rossum. Implemented by Chris "
"Angelico, Yury Selivanov and Nick Coghlan."
msgstr ""
"Chris Angelico와 Guido van Rossum이 작성한 PEP. Chris Angelico, Yury Selivanov"
" 및 Nick Coghlan이 구현했습니다."

#: ../../whatsnew/3.5.rst:608
msgid "PEP 485: A function for testing approximate equality"
msgstr "PEP 485: 대략적인 동등성을 테스트하는 함수"

#: ../../whatsnew/3.5.rst:610
msgid ""
":pep:`485` adds the :func:`math.isclose` and :func:`cmath.isclose` "
"functions which tell whether two values are approximately equal or "
"\"close\" to each other.  Whether or not two values are considered close "
"is determined according to given absolute and relative tolerances. "
"Relative tolerance is the maximum allowed difference between ``isclose`` "
"arguments, relative to the larger absolute value::"
msgstr ""
":pep:`485`\\는 두 값이 대략 같거나 서로 \"가까운\"지를 알려주는 :func:`math.isclose`\\와 "
":func:`cmath.isclose` 함수를 추가합니다. 두 값이 가까운 것으로 간주하는지는 주어진 절대와 상대 허용 오차에 따라"
" 결정됩니다. 상대적 허용 오차는 더 큰 절댓값에 상대적으로 ``isclose`` 인자간에 허용되는 최대 차이입니다::"

#: ../../whatsnew/3.5.rst:617
msgid ""
">>> import math\n"
">>> a = 5.0\n"
">>> b = 4.99998\n"
">>> math.isclose(a, b, rel_tol=1e-5)\n"
"True\n"
">>> math.isclose(a, b, rel_tol=1e-6)\n"
"False"
msgstr ""

#: ../../whatsnew/3.5.rst:625
msgid ""
"It is also possible to compare two values using absolute tolerance, which"
" must be a non-negative value::"
msgstr "절대 허용 오차를 사용하여 두 값을 비교할 수도 있습니다. 이 값은 음수가 아니어야 합니다::"

#: ../../whatsnew/3.5.rst:628
msgid ""
">>> import math\n"
">>> a = 5.0\n"
">>> b = 4.99998\n"
">>> math.isclose(a, b, abs_tol=0.00003)\n"
"True\n"
">>> math.isclose(a, b, abs_tol=0.00001)\n"
"False"
msgstr ""

#: ../../whatsnew/3.5.rst:638
msgid ":pep:`485` -- A function for testing approximate equality"
msgstr ":pep:`485` -- 대략적인 동등성을 테스트하는 함수"

#: ../../whatsnew/3.5.rst:639
msgid ""
"PEP written by Christopher Barker; implemented by Chris Barker and Tal "
"Einat."
msgstr "Christopher Barker가 작성한 PEP; Chris Barker와 Tal Einat이 구현했습니다."

#: ../../whatsnew/3.5.rst:646
msgid "PEP 486: Make the Python Launcher aware of virtual environments"
msgstr "PEP 486: 파이썬 런처가 가상 환경을 인식하도록 만들기"

#: ../../whatsnew/3.5.rst:648
msgid ""
":pep:`486` makes the Windows launcher (see :pep:`397`) aware of an active"
" virtual environment. When the default interpreter would be used and the "
"``VIRTUAL_ENV`` environment variable is set, the interpreter in the "
"virtual environment will be used."
msgstr ""
":pep:`486`\\은 윈도우 런처(:pep:`397`\\을 참조하십시오)가 활성 가상 환경을 인식하도록 합니다. 기본 "
"인터프리터를 사용하고 ``VIRTUAL_ENV`` 환경 변수를 설정하면, 가상 환경의 인터프리터가 사용됩니다."

#: ../../whatsnew/3.5.rst:655
msgid ":pep:`486` -- Make the Python Launcher aware of virtual environments"
msgstr ":pep:`486` -- 파이썬 런처가 가상 환경을 인식하도록 만들기"

#: ../../whatsnew/3.5.rst:656
msgid "PEP written and implemented by Paul Moore."
msgstr "Paul Moore가 작성하고 구현한 PEP."

#: ../../whatsnew/3.5.rst:662
msgid "PEP 488: Elimination of PYO files"
msgstr "PEP 488: PYO 파일 제거"

#: ../../whatsnew/3.5.rst:664
msgid ""
":pep:`488` does away with the concept of ``.pyo`` files. This means that "
"``.pyc`` files represent both unoptimized and optimized bytecode. To "
"prevent the need to constantly regenerate bytecode files, ``.pyc`` files "
"now have an optional ``opt-`` tag in their name when the bytecode is "
"optimized. This has the side-effect of no more bytecode file name clashes"
" when running under either :option:`-O` or :option:`-OO`. Consequently, "
"bytecode files generated from :option:`-O`, and :option:`-OO` may now "
"exist simultaneously. :func:`importlib.util.cache_from_source` has an "
"updated API to help with this change."
msgstr ""
":pep:`488`\\은 ``.pyo`` 파일의 개념을 제거합니다. 이는 ``.pyc`` 파일이 최적화되지 않은 바이트 코드와 "
"최적화된 바이트 코드를 모두 나타냄을 의미합니다. 바이트 코드 파일을 지속해서 재생성할 필요가 없도록, ``.pyc`` 파일은 이제"
" 바이트 코드가 최적화될 때 이름에 선택적 ``opt-`` 태그를 갖습니다. 이것은 :option:`-O`\\나 "
":option:`-OO`\\에서 실행할 때 더는 바이트 코드 파일 이름 충돌이 발생하지 않는 부작용이 있습니다. 따라서, "
":option:`-O`\\와 :option:`-OO`\\에서 생성된 바이트 코드 파일이 이제 동시에 존재할 수 있습니다. "
":func:`importlib.util.cache_from_source`\\는 이러한 변경을 돕기 위해 갱신된 API를 갖습니다."

#: ../../whatsnew/3.5.rst:676
msgid ":pep:`488` -- Elimination of PYO files"
msgstr ":pep:`488` -- PYO 파일 제거"

#: ../../whatsnew/3.5.rst:677
msgid "PEP written and implemented by Brett Cannon."
msgstr "Brett Cannon이 작성하고 구현한 PEP."

#: ../../whatsnew/3.5.rst:683
msgid "PEP 489: Multi-phase extension module initialization"
msgstr "PEP 489: 다단계 확장 모듈 초기화"

#: ../../whatsnew/3.5.rst:685
msgid ""
":pep:`489` updates extension module initialization to take advantage of "
"the two step module loading mechanism introduced by :pep:`451` in Python "
"3.4."
msgstr ""
":pep:`489`\\는 파이썬 3.4에서 :pep:`451`\\이 도입한 2단계 모듈 로딩 메커니즘을 활용하기 위해 확장 모듈 "
"초기화를 갱신합니다."

#: ../../whatsnew/3.5.rst:688
msgid ""
"This change brings the import semantics of extension modules that opt-in "
"to using the new mechanism much closer to those of Python source and "
"bytecode modules, including the ability to use any valid identifier as a "
"module name, rather than being restricted to ASCII."
msgstr ""
"이 변경으로 인해 ASCII로 제한되지 않고 유효한 식별자를 모듈 이름으로 사용할 수 있는 기능을 포함하여, 확장 모듈의 임포트 "
"의미 체계가 파이썬 소스와 바이트 코드 모듈의 것과 훨씬 더 가까운 새로운 메커니즘을 사용하도록 옵트 인합니다."

#: ../../whatsnew/3.5.rst:695
msgid ":pep:`489` -- Multi-phase extension module initialization"
msgstr ":pep:`489` -- 다단계 확장 모듈 초기화"

#: ../../whatsnew/3.5.rst:696
msgid ""
"PEP written by Petr Viktorin, Stefan Behnel, and Nick Coghlan; "
"implemented by Petr Viktorin."
msgstr ""
"Petr Viktorin, Stefan Behnel 및 Nick Coghlan이 작성한 PEP; Petr Viktorin이 "
"구현했습니다."

#: ../../whatsnew/3.5.rst:701
msgid "Other Language Changes"
msgstr "기타 언어 변경"

#: ../../whatsnew/3.5.rst:703
msgid "Some smaller changes made to the core Python language are:"
msgstr "핵심 파이썬 언어에 대한 몇 가지 작은 변경 사항은 다음과 같습니다:"

#: ../../whatsnew/3.5.rst:705
msgid ""
"Added the ``\"namereplace\"`` error handlers.  The "
"``\"backslashreplace\"`` error handlers now work with decoding and "
"translating. (Contributed by Serhiy Storchaka in :issue:`19676` and "
":issue:`22286`.)"
msgstr ""
"``\"namereplace\"`` 에러 처리기를 추가했습니다. 이제 ``\"backslashreplace\"`` 에러 처리기가 "
"디코딩과 변환에서 작동합니다. (Contributed by Serhiy Storchaka in :issue:`19676` and "
":issue:`22286`.)"

#: ../../whatsnew/3.5.rst:709
msgid ""
"The :option:`-b` option now affects comparisons of :class:`bytes` with "
":class:`int`.  (Contributed by Serhiy Storchaka in :issue:`23681`.)"
msgstr ""
":option:`-b` 옵션은 이제 :class:`bytes`\\와 :class:`int`\\의 비교에 영향을 줍니다. "
"(Contributed by Serhiy Storchaka in :issue:`23681`.)"

#: ../../whatsnew/3.5.rst:712
msgid ""
"New Kazakh ``kz1048`` and Tajik ``koi8_t`` :ref:`codecs <standard-"
"encodings>`. (Contributed by Serhiy Storchaka in :issue:`22682` and "
":issue:`22681`.)"
msgstr ""
"새로운 카자흐어 ``kz1048``\\과 타지크어 ``koi8_t`` :ref:`코덱 <standard-encodings>`. "
"(Contributed by Serhiy Storchaka in :issue:`22682` and :issue:`22681`.)"

#: ../../whatsnew/3.5.rst:715
msgid ""
"Property docstrings are now writable. This is especially useful for "
":func:`collections.namedtuple` docstrings. (Contributed by Berker Peksag "
"in :issue:`24064`.)"
msgstr ""
"프로퍼티 독스트링은 이제 쓰기 가능합니다. 이것은 :func:`collections.namedtuple` 독스트링에 특히 "
"유용합니다. (Contributed by Berker Peksag in :issue:`24064`.)"

#: ../../whatsnew/3.5.rst:719
msgid ""
"Circular imports involving relative imports are now supported. "
"(Contributed by Brett Cannon and Antoine Pitrou in :issue:`17636`.)"
msgstr ""
"이제 상대 임포트를 포함하는 순환 임포트가 지원됩니다. (Contributed by Brett Cannon and Antoine "
"Pitrou in :issue:`17636`.)"

#: ../../whatsnew/3.5.rst:724
msgid "New Modules"
msgstr "새로운 모듈"

#: ../../whatsnew/3.5.rst:727
msgid "typing"
msgstr "typing"

#: ../../whatsnew/3.5.rst:729
msgid ""
"The new :mod:`typing` :term:`provisional <provisional API>` module "
"provides standard definitions and tools for function type annotations. "
"See :ref:`Type Hints <whatsnew-pep-484>` for more information."
msgstr ""
"새로운 :mod:`typing` :term:`잠정적 <provisional API>` 모듈은 함수 형 어노테이션에 대한 표준 정의와"
" 도구를 제공합니다. 자세한 내용은 :ref:`형 힌트 <whatsnew-pep-484>`\\를 참조하십시오."

#: ../../whatsnew/3.5.rst:736
msgid "zipapp"
msgstr "zipapp"

#: ../../whatsnew/3.5.rst:738
msgid ""
"The new :mod:`zipapp` module (specified in :pep:`441`) provides an API "
"and command line tool for creating executable Python Zip Applications, "
"which were introduced in Python 2.6 in :issue:`1739468`, but which were "
"not well publicized, either at the time or since."
msgstr ""
"새로운 (:pep:`441`\\에서 지정된) :mod:`zipapp` 모듈은 실행 가능한 파이썬 Zip 응용 프로그램을 만들기 위한"
" API와 명령 줄 도구를 제공합니다. 실행 가능한 파이썬 Zip 응용 프로그램은 :issue:`1739468`\\에서 파이썬 "
"2.6에 도입되었지만, 그때나 그 이후로 잘 공개되지 않았습니다."

#: ../../whatsnew/3.5.rst:743
msgid ""
"With the new module, bundling your application is as simple as putting "
"all the files, including a ``__main__.py`` file, into a directory "
"``myapp`` and running:"
msgstr ""
"새로운 모듈을 사용하면, ``__main__.py`` 파일을 포함한 모든 파일을 ``myapp`` 디렉터리에 넣고 다음을 실행하는 "
"것만큼 간단하게 응용 프로그램을 번들링 할 수 있습니다:"

#: ../../whatsnew/3.5.rst:747
msgid ""
"$ python -m zipapp myapp\n"
"$ python myapp.pyz"
msgstr ""

#: ../../whatsnew/3.5.rst:752
msgid ""
"The module implementation has been contributed by Paul Moore in "
":issue:`23491`."
msgstr "모듈 구현은 :issue:`23491`\\에서 Paul Moore에 의해 기고되었습니다."

#: ../../whatsnew/3.5.rst:757
msgid ":pep:`441` -- Improving Python ZIP Application Support"
msgstr ":pep:`441` -- 파이썬 ZIP 응용 프로그램 지원 개선"

#: ../../whatsnew/3.5.rst:761
msgid "Improved Modules"
msgstr "개선된 모듈"

#: ../../whatsnew/3.5.rst:764
msgid "argparse"
msgstr "argparse"

#: ../../whatsnew/3.5.rst:766
msgid ""
"The :class:`~argparse.ArgumentParser` class now allows disabling "
":ref:`abbreviated usage <prefix-matching>` of long options by setting "
":ref:`allow_abbrev` to ``False``.  (Contributed by Jonathan Paugh, Steven"
" Bethard, paul j3 and Daniel Eriksson in :issue:`14910`.)"
msgstr ""
":class:`~argparse.ArgumentParser` 클래스는 이제 :ref:`allow_abbrev`\\를 "
"``False``\\로 설정하여 긴 옵션의 :ref:`약어 사용 <prefix-matching>`\\을 비활성화 할 수 있습니다. "
"(Contributed by Jonathan Paugh, Steven Bethard, paul j3 and Daniel "
"Eriksson in :issue:`14910`.)"

#: ../../whatsnew/3.5.rst:773
msgid "asyncio"
msgstr "asyncio"

#: ../../whatsnew/3.5.rst:775
msgid ""
"Since the :mod:`asyncio` module is :term:`provisional <provisional API>`,"
" all changes introduced in Python 3.5 have also been backported to Python"
" 3.4.x."
msgstr ""
":mod:`asyncio` 모듈은 :term:`잠정적 <provisional API>`\\이므로, 파이썬 3.5에 도입된 모든 변경"
" 사항은 파이썬 3.4.x로 역 이식되었습니다."

#: ../../whatsnew/3.5.rst:778
msgid "Notable changes in the :mod:`asyncio` module since Python 3.4.0:"
msgstr "파이썬 3.4.0 이후 :mod:`asyncio` 모듈의 주목할만한 변경 사항:"

#: ../../whatsnew/3.5.rst:780
msgid ""
"New debugging APIs: :meth:`loop.set_debug() <asyncio.loop.set_debug>` and"
" :meth:`loop.get_debug() <asyncio.loop.get_debug>` methods. (Contributed "
"by Victor Stinner.)"
msgstr ""
"새로운 디버깅 API: :meth:`loop.set_debug() <asyncio.loop.set_debug>`\\와 "
":meth:`loop.get_debug() <asyncio.loop.get_debug>` 메서드. (Contributed by "
"Victor Stinner.)"

#: ../../whatsnew/3.5.rst:784
msgid ""
"The proactor event loop now supports SSL. (Contributed by Antoine Pitrou "
"and Victor Stinner in :issue:`22560`.)"
msgstr ""
"프로액터(proactor) 이벤트 루프는 이제 SSL을 지원합니다. (Contributed by Antoine Pitrou and "
"Victor Stinner in :issue:`22560`.)"

#: ../../whatsnew/3.5.rst:787
msgid ""
"A new :meth:`loop.is_closed() <asyncio.loop.is_closed>` method to check "
"if the event loop is closed. (Contributed by Victor Stinner in "
":issue:`21326`.)"
msgstr ""
"이벤트 루프가 닫혔는지 확인하는 새로운 :meth:`loop.is_closed() <asyncio.loop.is_closed>` "
"메서드. (Contributed by Victor Stinner in :issue:`21326`.)"

#: ../../whatsnew/3.5.rst:791
msgid ""
"A new :meth:`loop.create_task() <asyncio.loop.create_task>` to "
"conveniently create and schedule a new :class:`~asyncio.Task` for a "
"coroutine.  The ``create_task`` method is also used by all asyncio "
"functions that wrap coroutines into tasks, such as :func:`asyncio.wait`, "
":func:`asyncio.gather`, etc. (Contributed by Victor Stinner.)"
msgstr ""
"코루틴을 위한 새로운 :class:`~asyncio.Task`\\를 편리하게 만들고 예약하는 새로운 "
":meth:`loop.create_task() <asyncio.loop.create_task>`. ``create_task`` "
"메서드는 코루틴을 태스크로 감싸는 모든 asyncio 함수(가령 :func:`asyncio.wait`, "
":func:`asyncio.gather` 등)에서도 사용됩니다. (Contributed by Victor Stinner.)"

#: ../../whatsnew/3.5.rst:798
msgid ""
"A new :meth:`transport.get_write_buffer_limits() "
"<asyncio.WriteTransport.get_write_buffer_limits>` method to inquire for "
"*high-* and *low-* water limits of the flow control. (Contributed by "
"Victor Stinner.)"
msgstr ""
"흐름 제어의 *high-*\\와 *low-* 수위 한계를 조회하는 새로운 "
":meth:`transport.get_write_buffer_limits() "
"<asyncio.WriteTransport.get_write_buffer_limits>` 메서드. (Contributed by "
"Victor Stinner.)"

#: ../../whatsnew/3.5.rst:803
msgid ""
"The :func:`~asyncio.async` function is deprecated in favor of "
":func:`~asyncio.ensure_future`. (Contributed by Yury Selivanov.)"
msgstr ""
":func:`~asyncio.async` 함수는 폐지되었고 :func:`~asyncio.ensure_future`\\로 대체합니다."
" (Contributed by Yury Selivanov.)"

#: ../../whatsnew/3.5.rst:807
msgid ""
"New :meth:`loop.set_task_factory() <asyncio.loop.set_task_factory>` and "
":meth:`loop.get_task_factory() <asyncio.loop.get_task_factory>` methods "
"to customize the task factory that :meth:`loop.create_task() "
"<asyncio.loop.create_task>` method uses.  (Contributed by Yury "
"Selivanov.)"
msgstr ""
":meth:`loop.create_task() <asyncio.loop.create_task>` 메서드가 사용하는 태스크 팩토리를 "
"사용자 정의하는 새로운 :meth:`loop.set_task_factory() "
"<asyncio.loop.set_task_factory>`\\와 :meth:`loop.get_task_factory() "
"<asyncio.loop.get_task_factory>` 메서드. (Contributed by Yury Selivanov.)"

#: ../../whatsnew/3.5.rst:814
msgid ""
"New :meth:`Queue.join() <asyncio.Queue.join>` and "
":meth:`Queue.task_done() <asyncio.Queue.task_done>` queue methods. "
"(Contributed by Victor Stinner.)"
msgstr ""
"새로운 :meth:`Queue.join() <asyncio.Queue.join>`\\과 :meth:`Queue.task_done()"
" <asyncio.Queue.task_done>` 큐 메서드. (Contributed by Victor Stinner.)"

#: ../../whatsnew/3.5.rst:818
msgid ""
"The ``JoinableQueue`` class was removed, in favor of the "
":class:`asyncio.Queue` class. (Contributed by Victor Stinner.)"
msgstr ""
"``JoinableQueue`` 클래스가 제거되고, :class:`asyncio.Queue` 클래스로 대체되었습니다. "
"(Contributed by Victor Stinner.)"

#: ../../whatsnew/3.5.rst:822
msgid "Updates in 3.5.1:"
msgstr "3.5.1의 업데이트:"

#: ../../whatsnew/3.5.rst:824
msgid ""
"The :func:`~asyncio.ensure_future` function and all functions that use "
"it, such as :meth:`loop.run_until_complete() "
"<asyncio.loop.run_until_complete>`, now accept all kinds of "
":term:`awaitable objects <awaitable>`. (Contributed by Yury Selivanov.)"
msgstr ""
":func:`~asyncio.ensure_future` 함수와 이를 사용하는 모든 함수(가령 "
":meth:`loop.run_until_complete() <asyncio.loop.run_until_complete>`)는 이제 "
"모든 종류의 :term:`어웨이터블 객체 <awaitable>`\\를 받아들입니다. (Contributed by Yury "
"Selivanov.)"

#: ../../whatsnew/3.5.rst:829
msgid ""
"New :func:`~asyncio.run_coroutine_threadsafe` function to submit "
"coroutines to event loops from other threads. (Contributed by Vincent "
"Michel.)"
msgstr ""
"다른 스레드의 이벤트 루프에 코루틴을 제출하는 새로운 :func:`~asyncio.run_coroutine_threadsafe` "
"함수. (Contributed by Vincent Michel.)"

#: ../../whatsnew/3.5.rst:833
msgid ""
"New :meth:`Transport.is_closing() <asyncio.BaseTransport.is_closing>` "
"method to check if the transport is closing or closed. (Contributed by "
"Yury Selivanov.)"
msgstr ""
"트랜스포트가 닫히고 있거나 닫혀 있는지 확인하는 새로운 :meth:`Transport.is_closing() "
"<asyncio.BaseTransport.is_closing>` 메서드. (Contributed by Yury Selivanov.)"

#: ../../whatsnew/3.5.rst:837
msgid ""
"The :meth:`loop.create_server() <asyncio.loop.create_server>` method can "
"now accept a list of hosts. (Contributed by Yann Sionneau.)"
msgstr ""
":meth:`loop.create_server() <asyncio.loop.create_server>` 메서드는 이제 호스트 "
"리스트를 받아들일 수 있습니다. (Contributed by Yann Sionneau.)"

#: ../../whatsnew/3.5.rst:841
msgid "Updates in 3.5.2:"
msgstr "3.5.2의 업데이트 :"

#: ../../whatsnew/3.5.rst:843
msgid ""
"New :meth:`loop.create_future() <asyncio.loop.create_future>` method to "
"create Future objects.  This allows alternative event loop "
"implementations, such as `uvloop "
"<https://github.com/MagicStack/uvloop>`_, to provide a faster "
":class:`asyncio.Future` implementation. (Contributed by Yury Selivanov.)"
msgstr ""
"Future 객체를 만드는 새로운 :meth:`loop.create_future() "
"<asyncio.loop.create_future>` 메서드. 이를 통해 `uvloop "
"<https://github.com/MagicStack/uvloop>`_\\와 같은 대체 이벤트 루프 구현이 더 빠른 "
":class:`asyncio.Future` 구현을 제공 할 수 있습니다. (Contributed by Yury Selivanov.)"

#: ../../whatsnew/3.5.rst:850
msgid ""
"New :meth:`loop.get_exception_handler() "
"<asyncio.loop.get_exception_handler>` method to get the current exception"
" handler. (Contributed by Yury Selivanov.)"
msgstr ""
"현재 예외 처리기를 가져오는 새로운 :meth:`loop.get_exception_handler() "
"<asyncio.loop.get_exception_handler>` 메서드. (Contributed by Yury "
"Selivanov.)"

#: ../../whatsnew/3.5.rst:854
msgid ""
"New :meth:`StreamReader.readuntil() <asyncio.StreamReader.readuntil>` "
"method to read data from the stream until a separator bytes sequence "
"appears. (Contributed by Mark Korenberg.)"
msgstr ""
"구분자 바이트 시퀀스가 나타날 때까지 스트림에서 데이터를 읽는 새로운 :meth:`StreamReader.readuntil() "
"<asyncio.StreamReader.readuntil>` 메서드. (Contributed by Mark Korenberg.)"

#: ../../whatsnew/3.5.rst:859
msgid ""
"The :meth:`loop.create_connection() <asyncio.loop.create_connection>` and"
" :meth:`loop.create_server() <asyncio.loop.create_server>` methods are "
"optimized to avoid calling the system ``getaddrinfo`` function if the "
"address is already resolved. (Contributed by A. Jesse Jiryu Davis.)"
msgstr ""
":meth:`loop.create_connection() <asyncio.loop.create_connection>`\\과 "
":meth:`loop.create_server() <asyncio.loop.create_server>` 메서드는 주소가 이미 결정된"
" 경우 시스템 ``getaddrinfo`` 함수를 호출하지 않도록 최적화되었습니다. (Contributed by A. Jesse "
"Jiryu Davis.)"

#: ../../whatsnew/3.5.rst:865
msgid ""
"The :meth:`loop.sock_connect(sock, address) <asyncio.loop.sock_connect>` "
"no longer requires the *address* to be resolved prior to the call. "
"(Contributed by A. Jesse Jiryu Davis.)"
msgstr ""
":meth:`loop.sock_connect(sock, address) <asyncio.loop.sock_connect>`\\는 "
"더는 호출 전에 *address*\\를 결정할 필요가 없습니다. (Contributed by A. Jesse Jiryu "
"Davis.)"

#: ../../whatsnew/3.5.rst:871
msgid "bz2"
msgstr "bz2"

#: ../../whatsnew/3.5.rst:873
msgid ""
"The :meth:`BZ2Decompressor.decompress <bz2.BZ2Decompressor.decompress>` "
"method now accepts an optional *max_length* argument to limit the maximum"
" size of decompressed data. (Contributed by Nikolaus Rath in "
":issue:`15955`.)"
msgstr ""
"이제 :meth:`BZ2Decompressor.decompress <bz2.BZ2Decompressor.decompress>` "
"메서드는 압축 해제된 데이터의 최대 크기를 제한하기 위해 선택적 *max_length* 인자를 받아들입니다. (Contributed"
" by Nikolaus Rath in :issue:`15955`.)"

#: ../../whatsnew/3.5.rst:879
msgid "cgi"
msgstr "cgi"

#: ../../whatsnew/3.5.rst:881
#, fuzzy
msgid ""
"The :class:`!FieldStorage` class now supports the :term:`context manager`"
" protocol.  (Contributed by Berker Peksag in :issue:`20289`.)"
msgstr ""
":class:`~cgi.FieldStorage` 클래스는 이제 :term:`컨텍스트 관리자 <context manager>` "
"프로토콜을 지원합니다. (Contributed by Berker Peksag in :issue:`20289`.)"

#: ../../whatsnew/3.5.rst:886
msgid "cmath"
msgstr "cmath"

#: ../../whatsnew/3.5.rst:888
msgid ""
"A new function :func:`~cmath.isclose` provides a way to test for "
"approximate equality.  (Contributed by Chris Barker and Tal Einat in "
":issue:`24270`.)"
msgstr ""
"새로운 함수 :func:`~cmath.isclose`\\는 대략적인 동등성을 테스트하는 방법을 제공합니다. (Contributed "
"by Chris Barker and Tal Einat in :issue:`24270`.)"

#: ../../whatsnew/3.5.rst:893
msgid "code"
msgstr "code"

#: ../../whatsnew/3.5.rst:895
msgid ""
"The :func:`InteractiveInterpreter.showtraceback() "
"<code.InteractiveInterpreter.showtraceback>` method now prints the full "
"chained traceback, just like the interactive interpreter.  (Contributed "
"by Claudiu Popa in :issue:`17442`.)"
msgstr ""
":func:`InteractiveInterpreter.showtraceback() "
"<code.InteractiveInterpreter.showtraceback>` 메서드는 이제 대화 형 인터프리터처럼 전체 "
"연결된(chained) 트레이스백을 인쇄합니다. (Contributed by Claudiu Popa in "
":issue:`17442`.)"

#: ../../whatsnew/3.5.rst:901
msgid "collections"
msgstr "collections"

#: ../../whatsnew/3.5.rst:905
msgid ""
"The :class:`~collections.OrderedDict` class is now implemented in C, "
"which makes it 4 to 100 times faster.  (Contributed by Eric Snow in "
":issue:`16991`.)"
msgstr ""
":class:`~collections.OrderedDict` 클래스는 이제 C로 구현되어 4 에서 100배 더 빨라졌습니다. "
"(Contributed by Eric Snow in :issue:`16991`.)"

#: ../../whatsnew/3.5.rst:908
msgid ""
":meth:`OrderedDict.items() <collections.OrderedDict.items>`, "
":meth:`OrderedDict.keys() <collections.OrderedDict.keys>`, "
":meth:`OrderedDict.values() <collections.OrderedDict.values>` views now "
"support :func:`reversed` iteration. (Contributed by Serhiy Storchaka in "
":issue:`19505`.)"
msgstr ""
":meth:`OrderedDict.items() <collections.OrderedDict.items>`, "
":meth:`OrderedDict.keys() <collections.OrderedDict.keys>`, "
":meth:`OrderedDict.values() <collections.OrderedDict.values>` 뷰는 이제 "
":func:`reversed` 이터레이션을 지원합니다. (Contributed by Serhiy Storchaka in "
":issue:`19505`.)"

#: ../../whatsnew/3.5.rst:914
msgid ""
"The :class:`~collections.deque` class now defines "
":meth:`~collections.deque.index`, :meth:`~collections.deque.insert`, and "
":meth:`~collections.deque.copy`, and supports the ``+`` and ``*`` "
"operators. This allows deques to be recognized as a "
":class:`~collections.abc.MutableSequence` and improves their "
"substitutability for lists. (Contributed by Raymond Hettinger in "
":issue:`23704`.)"
msgstr ""
":class:`~collections.deque` 클래스는 이제 :meth:`~collections.deque.index`, "
":meth:`~collections.deque.insert` 및 :meth:`~collections.deque.copy`\\를 "
"정의하고, ``+``\\와 ``*`` 연산자를 지원합니다. 이를 통해 데크가 "
":class:`~collections.abc.MutableSequence`\\로 인식되고 리스트에 대한 대체 가능성이 향상됩니다. "
"(Contributed by Raymond Hettinger in :issue:`23704`.)"

#: ../../whatsnew/3.5.rst:921
msgid ""
"Docstrings produced by :func:`~collections.namedtuple` can now be "
"updated::"
msgstr "이제 :func:`~collections.namedtuple`\\이 생성한 독스트링을 갱신할 수 있습니다::"

#: ../../whatsnew/3.5.rst:923
msgid ""
"Point = namedtuple('Point', ['x', 'y'])\n"
"Point.__doc__ += ': Cartesian coordinate'\n"
"Point.x.__doc__ = 'abscissa'\n"
"Point.y.__doc__ = 'ordinate'"
msgstr ""

#: ../../whatsnew/3.5.rst:928
msgid "(Contributed by Berker Peksag in :issue:`24064`.)"
msgstr "(Contributed by Berker Peksag in :issue:`24064`.)"

#: ../../whatsnew/3.5.rst:930
msgid ""
"The :class:`~collections.UserString` class now implements the "
":meth:`__getnewargs__`, :meth:`__rmod__`, :meth:`~str.casefold`, "
":meth:`~str.format_map`, :meth:`~str.isprintable`, and "
":meth:`~str.maketrans` methods to match the corresponding methods of "
":class:`str`. (Contributed by Joe Jevnik in :issue:`22189`.)"
msgstr ""
":class:`~collections.UserString` 클래스는 이제 :class:`str`\\의 해당 메서드와 일치하도록 "
":meth:`__getnewargs__`, :meth:`__rmod__`, :meth:`~str.casefold`, "
":meth:`~str.format_map`, :meth:`~str.isprintable` 및 "
":meth:`~str.maketrans` 메서드를 구현합니다. (Contributed by Joe Jevnik in "
":issue:`22189`.)"

#: ../../whatsnew/3.5.rst:938
msgid "collections.abc"
msgstr "collections.abc"

#: ../../whatsnew/3.5.rst:940
msgid ""
"The :meth:`Sequence.index() <collections.abc.Sequence.index>` method now "
"accepts *start* and *stop* arguments to match the corresponding methods "
"of :class:`tuple`, :class:`list`, etc. (Contributed by Devin Jeanpierre "
"in :issue:`23086`.)"
msgstr ""
":meth:`Sequence.index() <collections.abc.Sequence.index>` 메서드는 이제 "
":class:`tuple`, :class:`list` 등의 해당 메서드와 일치하도록 *start*\\와 *stop* 인자를 "
"받아들입니다 (Contributed by Devin Jeanpierre in :issue:`23086`.)"

#: ../../whatsnew/3.5.rst:945
msgid ""
"A new :class:`~collections.abc.Generator` abstract base class. "
"(Contributed by Stefan Behnel in :issue:`24018`.)"
msgstr ""
"새로운 :class:`~collections.abc.Generator` 추상 베이스 클래스. (Contributed by "
"Stefan Behnel in :issue:`24018`.)"

#: ../../whatsnew/3.5.rst:948
msgid ""
"New :class:`~collections.abc.Awaitable`, "
":class:`~collections.abc.Coroutine`, "
":class:`~collections.abc.AsyncIterator`, and "
":class:`~collections.abc.AsyncIterable` abstract base classes. "
"(Contributed by Yury Selivanov in :issue:`24184`.)"
msgstr ""
"새로운 :class:`~collections.abc.Awaitable`, "
":class:`~collections.abc.Coroutine`, "
":class:`~collections.abc.AsyncIterator` 및 "
":class:`~collections.abc.AsyncIterable` 추상 베이스 클래스. (Contributed by Yury "
"Selivanov in :issue:`24184`.)"

#: ../../whatsnew/3.5.rst:953
#, fuzzy
msgid ""
"For earlier Python versions, a backport of the new ABCs is available in "
"an external :pypi:`PyPI package <backports_abc>`."
msgstr ""
"이전 파이썬 버전의 경우, 새 ABC의 역 이식을 외부 `PyPI 패키지 "
"<https://pypi.org/project/backports_abc>`_\\에서 사용할 수 있습니다."

#: ../../whatsnew/3.5.rst:958
msgid "compileall"
msgstr "compileall"

#: ../../whatsnew/3.5.rst:960
#, python-brace-format
msgid ""
"A new :mod:`compileall` option, :samp:`-j {N}`, allows running *N* "
"workers simultaneously to perform parallel bytecode compilation. The "
":func:`~compileall.compile_dir` function has a corresponding ``workers`` "
"parameter.  (Contributed by Claudiu Popa in :issue:`16104`.)"
msgstr ""
"새로운 :mod:`compileall` 옵션인 :samp:`-j {N}` 을 사용하면 *N* 작업자를 동시에 실행하여 병렬 바이트 "
"코드 컴파일을 수행할 수 있습니다. :func:`~compileall.compile_dir` 함수에는 대응하는 ``workers``"
" 매개 변수가 있습니다. (Contributed by Claudiu Popa in :issue:`16104`.)"

#: ../../whatsnew/3.5.rst:965
msgid ""
"Another new option, ``-r``, allows controlling the maximum recursion "
"level for subdirectories.  (Contributed by Claudiu Popa in "
":issue:`19628`.)"
msgstr ""
"또 다른 새로운 옵션인 ``-r``\\은 하위 디렉터리에 대한 최대 재귀 수준을 제어할 수 있습니다. (Contributed by "
"Claudiu Popa in :issue:`19628`.)"

#: ../../whatsnew/3.5.rst:968
msgid ""
"The ``-q`` command line option can now be specified more than once, in "
"which case all output, including errors, will be suppressed.  The "
"corresponding ``quiet`` parameter in :func:`~compileall.compile_dir`, "
":func:`~compileall.compile_file`, and :func:`~compileall.compile_path` "
"can now accept an integer value indicating the level of output "
"suppression. (Contributed by Thomas Kluyver in :issue:`21338`.)"
msgstr ""
"이제 ``-q`` 명령 줄 옵션을 두 번 이상 지정할 수 있으며, 이 경우 에러를 포함한 모든 출력이 억제됩니다. "
":func:`~compileall.compile_dir`, :func:`~compileall.compile_file` 및 "
":func:`~compileall.compile_path`\\의 해당 ``quiet`` 매개 변수는 이제 출력 억제 수준을 나타내는"
" 정숫값을 받아들일 수 있습니다. (Contributed by Thomas Kluyver in :issue:`21338`.)"

#: ../../whatsnew/3.5.rst:977
msgid "concurrent.futures"
msgstr "concurrent.futures"

#: ../../whatsnew/3.5.rst:979
msgid ""
"The :meth:`Executor.map() <concurrent.futures.Executor.map>` method now "
"accepts a *chunksize* argument to allow batching of tasks to improve "
"performance when :meth:`~concurrent.futures.ProcessPoolExecutor` is used."
" (Contributed by Dan O'Reilly in :issue:`11271`.)"
msgstr ""
":meth:`Executor.map() <concurrent.futures.Executor.map>` 메서드는 이제 "
"*chunksize* 인자를 받아, :meth:`~concurrent.futures.ProcessPoolExecutor`\\가 "
"사용될 때 작업을 일괄 처리하여 성능을 향상할 수 있습니다. (Contributed by Dan O'Reilly in "
":issue:`11271`.)"

#: ../../whatsnew/3.5.rst:984
msgid ""
"The number of workers in the "
":class:`~concurrent.futures.ThreadPoolExecutor` constructor is optional "
"now.  The default value is 5 times the number of CPUs. (Contributed by "
"Claudiu Popa in :issue:`21527`.)"
msgstr ""
":class:`~concurrent.futures.ThreadPoolExecutor` 생성자의 작업자 수는 이제 선택 사항입니다. "
"기본값은 CPU 수의 5배입니다. (Contributed by Claudiu Popa in :issue:`21527`.)"

#: ../../whatsnew/3.5.rst:990
msgid "configparser"
msgstr "configparser"

#: ../../whatsnew/3.5.rst:992
msgid ""
":mod:`configparser` now provides a way to customize the conversion of "
"values by specifying a dictionary of converters in the "
":class:`~configparser.ConfigParser` constructor, or by defining them as "
"methods in ``ConfigParser`` subclasses.  Converters defined in a parser "
"instance are inherited by its section proxies."
msgstr ""
":mod:`configparser`\\는 이제 :class:`~configparser.ConfigParser` 생성자에서 변환기 "
"딕셔너리를 지정하거나 ``ConfigParser`` 서브 클래스에서 메서드로 정의하여 값 변환을 사용자 정의하는 방법을 제공합니다."
" 구문 분석기 인스턴스에 정의된 변환기는 섹션 프락시에 의해 상속됩니다."

#: ../../whatsnew/3.5.rst:998
msgid "Example::"
msgstr "예::"

#: ../../whatsnew/3.5.rst:1000
#, python-brace-format
msgid ""
">>> import configparser\n"
">>> conv = {}\n"
">>> conv['list'] = lambda v: [e.strip() for e in v.split() if e.strip()]\n"
">>> cfg = configparser.ConfigParser(converters=conv)\n"
">>> cfg.read_string(\"\"\"\n"
"... [s]\n"
"... list = a b c d e f g\n"
"... \"\"\")\n"
">>> cfg.get('s', 'list')\n"
"'a b c d e f g'\n"
">>> cfg.getlist('s', 'list')\n"
"['a', 'b', 'c', 'd', 'e', 'f', 'g']\n"
">>> section = cfg['s']\n"
">>> section.getlist('list')\n"
"['a', 'b', 'c', 'd', 'e', 'f', 'g']"
msgstr ""

#: ../../whatsnew/3.5.rst:1016
msgid "(Contributed by Łukasz Langa in :issue:`18159`.)"
msgstr "(Contributed by Łukasz Langa in :issue:`18159`.)"

#: ../../whatsnew/3.5.rst:1020
msgid "contextlib"
msgstr "contextlib"

#: ../../whatsnew/3.5.rst:1022
msgid ""
"The new :func:`~contextlib.redirect_stderr` :term:`context manager` "
"(similar to :func:`~contextlib.redirect_stdout`) makes it easier for "
"utility scripts to handle inflexible APIs that write their output to "
":data:`sys.stderr` and don't provide any options to redirect it::"
msgstr ""
"새로운 :func:`~contextlib.redirect_stderr` :term:`컨텍스트 관리자 <context "
"manager>`\\(:func:`~contextlib.redirect_stdout`\\과 유사)를 사용하면 유틸리티 스크립트가 "
"출력을 :data:`sys.stderr`\\에 기록하고 리디렉션 옵션을 제공하지 않는 유연하지 않은 API를 더 쉽게 처리할 수 "
"있습니다::"

#: ../../whatsnew/3.5.rst:1027
msgid ""
">>> import contextlib, io, logging\n"
">>> f = io.StringIO()\n"
">>> with contextlib.redirect_stderr(f):\n"
"...     logging.warning('warning')\n"
"...\n"
">>> f.getvalue()\n"
"'WARNING:root:warning\\n'"
msgstr ""

#: ../../whatsnew/3.5.rst:1035
msgid "(Contributed by Berker Peksag in :issue:`22389`.)"
msgstr "(Contributed by Berker Peksag in :issue:`22389`.)"

#: ../../whatsnew/3.5.rst:1039
msgid "csv"
msgstr "csv"

#: ../../whatsnew/3.5.rst:1041
msgid ""
"The :meth:`~csv.csvwriter.writerow` method now supports arbitrary "
"iterables, not just sequences.  (Contributed by Serhiy Storchaka in "
":issue:`23171`.)"
msgstr ""
":meth:`~csv.csvwriter.writerow` 메서드는 이제 시퀀스뿐만 아니라 임의의 이터러블을 지원합니다. "
"(Contributed by Serhiy Storchaka in :issue:`23171`.)"

#: ../../whatsnew/3.5.rst:1046
msgid "curses"
msgstr "curses"

#: ../../whatsnew/3.5.rst:1048
#, fuzzy
msgid ""
"The new :func:`~curses.update_lines_cols` function updates the "
":data:`LINES` and :data:`COLS` module variables.  This is useful for "
"detecting manual screen resizing.  (Contributed by Arnon Yaari in "
":issue:`4254`.)"
msgstr ""
"새로운 :func:`~curses.update_lines_cols` 함수는 :envvar:`LINES`\\와 "
":envvar:`COLS` 환경 변수를 갱신합니다. 이것은 수동 화면 크기 조정을 감지하는 데 유용합니다. (Contributed "
"by Arnon Yaari in :issue:`4254`.)"

#: ../../whatsnew/3.5.rst:1054
msgid "dbm"
msgstr "dbm"

#: ../../whatsnew/3.5.rst:1056
msgid ""
":func:`dumb.open <dbm.dumb.open>` always creates a new database when the "
"flag has the value ``\"n\"``.  (Contributed by Claudiu Popa in "
":issue:`18039`.)"
msgstr ""
":func:`dumb.open <dbm.dumb.open>`\\은 플래그 값이 ``\"n\"``\\일 때 항상 새 데이터베이스를 "
"만듭니다. (Contributed by Claudiu Popa in :issue:`18039`.)"

#: ../../whatsnew/3.5.rst:1061
msgid "difflib"
msgstr "difflib"

#: ../../whatsnew/3.5.rst:1063
msgid ""
"The charset of HTML documents generated by :meth:`HtmlDiff.make_file() "
"<difflib.HtmlDiff.make_file>` can now be customized by using a new "
"*charset* keyword-only argument. The default charset of HTML document "
"changed from ``\"ISO-8859-1\"`` to ``\"utf-8\"``. (Contributed by Berker "
"Peksag in :issue:`2052`.)"
msgstr ""
":meth:`HtmlDiff.make_file() <difflib.HtmlDiff.make_file>`\\에 의해 생성된 HTML "
"문서의 문자 집합은 이제 새로운 *charset* 키워드 전용 인자를 사용하여 사용자 정의 할 수 있습니다. HTML 문서의 기본 "
"문자 집합이 ``\"ISO-8859-1\"``\\에서 ``\"utf-8\"``\\로 변경되었습니다. (Contributed by "
"Berker Peksag in :issue:`2052`.)"

#: ../../whatsnew/3.5.rst:1070
msgid ""
"The :func:`~difflib.diff_bytes` function can now compare lists of byte "
"strings.  This fixes a regression from Python 2. (Contributed by Terry J."
" Reedy and Greg Ward in :issue:`17445`.)"
msgstr ""
":func:`~difflib.diff_bytes` 함수는 이제 바이트 문자열 리스트를 비교할 수 있습니다. 이것은 파이썬 2의 "
"회귀를 수리합니다. (Contributed by Terry J. Reedy and Greg Ward in "
":issue:`17445`.)"

#: ../../whatsnew/3.5.rst:1076
msgid "distutils"
msgstr "distutils"

#: ../../whatsnew/3.5.rst:1078
msgid ""
"Both the ``build`` and ``build_ext`` commands now accept a ``-j`` option "
"to enable parallel building of extension modules. (Contributed by Antoine"
" Pitrou in :issue:`5309`.)"
msgstr ""
"``build``\\와 ``build_ext`` 명령은 이제 ``-j`` 옵션을 받아들여 확장 모듈의 병렬 빌드를 활성화합니다. "
"(Contributed by Antoine Pitrou in :issue:`5309`.)"

#: ../../whatsnew/3.5.rst:1082
#, fuzzy
msgid ""
"The ``distutils`` module now supports ``xz`` compression, and can be "
"enabled by passing ``xztar`` as an argument to ``bdist --format``. "
"(Contributed by Serhiy Storchaka in :issue:`16314`.)"
msgstr ""
":mod:`distutils` 모듈은 이제 ``xz`` 압축을 지원하며, ``xztar``\\를 인자로 ``bdist "
"--format``\\에 전달하여 활성화 할 수 있습니다. (Contributed by Serhiy Storchaka in "
":issue:`16314`.)"

#: ../../whatsnew/3.5.rst:1088
msgid "doctest"
msgstr "doctest"

#: ../../whatsnew/3.5.rst:1090
msgid ""
"The :func:`~doctest.DocTestSuite` function returns an empty "
":class:`unittest.TestSuite` if *module* contains no docstrings, instead "
"of raising :exc:`ValueError`.  (Contributed by Glenn Jones in "
":issue:`15916`.)"
msgstr ""
":func:`~doctest.DocTestSuite` 함수는 *module*\\에 독스트링이 없으면 "
":exc:`ValueError`\\를 발생시키는 대신 빈 :class:`unittest.TestSuite`\\를 반환합니다. "
"(Contributed by Glenn Jones in :issue:`15916`.)"

#: ../../whatsnew/3.5.rst:1096
msgid "email"
msgstr "email"

#: ../../whatsnew/3.5.rst:1098
msgid ""
"A new policy option :attr:`Policy.mangle_from_ "
"<email.policy.Policy.mangle_from_>` controls whether or not lines that "
"start with ``\"From \"`` in email bodies are prefixed with a ``\">\"`` "
"character by generators.  The default is ``True`` for "
":attr:`~email.policy.compat32` and ``False`` for all other policies. "
"(Contributed by Milan Oberkirch in :issue:`20098`.)"
msgstr ""
"새로운 정책 옵션 :attr:`Policy.mangle_from_ "
"<email.policy.Policy.mangle_from_>`\\은 생성자가 이메일 본문에서 ``\"From \"``\\으로 "
"시작하는 줄에 ``\">\"`` 문자를 접두사로 추가할지를 제어합니다. 기본값은 "
":attr:`~email.policy.compat32`\\의 경우 ``True``\\이고 다른 모든 정책의 경우 "
"``False``\\입니다. (Contributed by Milan Oberkirch in :issue:`20098`.)"

#: ../../whatsnew/3.5.rst:1104
msgid ""
"A new :meth:`Message.get_content_disposition() "
"<email.message.Message.get_content_disposition>` method provides easy "
"access to a canonical value for the :mailheader:`Content-Disposition` "
"header. (Contributed by Abhilash Raj in :issue:`21083`.)"
msgstr ""
"새로운 :meth:`Message.get_content_disposition() "
"<email.message.Message.get_content_disposition>` 메서드를 사용하면 :mailheader"
":`Content-Disposition` 헤더의 규범적 값에 쉽게 액세스 할 수 있습니다. (Contributed by "
"Abhilash Raj in :issue:`21083`.)"

#: ../../whatsnew/3.5.rst:1110
msgid ""
"A new policy option :attr:`EmailPolicy.utf8 "
"<email.policy.EmailPolicy.utf8>` can be set to ``True`` to encode email "
"headers using the UTF-8 charset instead of using encoded words.  This "
"allows ``Messages`` to be formatted according to :rfc:`6532` and used "
"with an SMTP server that supports the :rfc:`6531` ``SMTPUTF8`` extension."
"  (Contributed by R. David Murray in :issue:`24211`.)"
msgstr ""
"새로운 정책 옵션 :attr:`EmailPolicy.utf8 <email.policy.EmailPolicy.utf8>`\\을 "
"``True``\\로 설정하여 인코딩된 단어를 사용하는 대신 UTF-8 문자 집합을 사용하여 이메일 헤더를 인코딩 할 수 있습니다."
" 이를 통해 ``Messages``\\를 :rfc:`6532`\\에 따라 포매팅하고 :rfc:`6531` ``SMTPUTF8`` "
"확장을 지원하는 SMTP 서버와 함께 사용할 수 있습니다. (Contributed by R. David Murray in "
":issue:`24211`.)"

#: ../../whatsnew/3.5.rst:1117
msgid ""
"The :class:`mime.text.MIMEText <email.mime.text.MIMEText>` constructor "
"now accepts a :class:`charset.Charset <email.charset.Charset>` instance. "
"(Contributed by Claude Paroz and Berker Peksag in :issue:`16324`.)"
msgstr ""
":class:`mime.text.MIMEText <email.mime.text.MIMEText>` 생성자는 이제 "
":class:`charset.Charset <email.charset.Charset>` 인스턴스를 받아들입니다. "
"(Contributed by Claude Paroz and Berker Peksag in :issue:`16324`.)"

#: ../../whatsnew/3.5.rst:1123
msgid "enum"
msgstr "enum"

#: ../../whatsnew/3.5.rst:1125
msgid ""
"The :class:`~enum.Enum` callable has a new parameter *start* to specify "
"the initial number of enum values if only *names* are provided::"
msgstr ""
":class:`~enum.Enum` 콜러블에는 *names*\\만 제공되는 경우 열거형 값의 초기 수를 지정하는 새 매개 변수 "
"*start*\\가 있습니다::"

#: ../../whatsnew/3.5.rst:1128
msgid ""
">>> Animal = enum.Enum('Animal', 'cat dog', start=10)\n"
">>> Animal.cat\n"
"<Animal.cat: 10>\n"
">>> Animal.dog\n"
"<Animal.dog: 11>"
msgstr ""

#: ../../whatsnew/3.5.rst:1134
msgid "(Contributed by Ethan Furman in :issue:`21706`.)"
msgstr "(Contributed by Ethan Furman in :issue:`21706`.)"

#: ../../whatsnew/3.5.rst:1138
msgid "faulthandler"
msgstr "faulthandler"

#: ../../whatsnew/3.5.rst:1140
msgid ""
"The :func:`~faulthandler.enable`, :func:`~faulthandler.register`, "
":func:`~faulthandler.dump_traceback` and "
":func:`~faulthandler.dump_traceback_later` functions now accept file "
"descriptors in addition to file-like objects. (Contributed by Wei Wu in "
":issue:`23566`.)"
msgstr ""
":func:`~faulthandler.enable`, :func:`~faulthandler.register`, "
":func:`~faulthandler.dump_traceback` 및 "
":func:`~faulthandler.dump_traceback_later` 함수는 이제 파일류 객체 외에도 파일 기술자를 "
"받아들입니다. (Contributed by Wei Wu in :issue:`23566`.)"

#: ../../whatsnew/3.5.rst:1148
msgid "functools"
msgstr "functools"

#: ../../whatsnew/3.5.rst:1152
msgid ""
"Most of the :func:`~functools.lru_cache` machinery is now implemented in "
"C, making it significantly faster.  (Contributed by Matt Joiner, Alexey "
"Kachayev, and Serhiy Storchaka in :issue:`14373`.)"
msgstr ""
"대부분의 :func:`~functools.lru_cache` 장치는 이제 C로 구현되어 훨씬 빨라졌습니다. (Contributed "
"by Matt Joiner, Alexey Kachayev, and Serhiy Storchaka in :issue:`14373`.)"

#: ../../whatsnew/3.5.rst:1158
msgid "glob"
msgstr "glob"

#: ../../whatsnew/3.5.rst:1160
msgid ""
"The :func:`~glob.iglob` and :func:`~glob.glob` functions now support "
"recursive search in subdirectories, using the ``\"**\"`` pattern. "
"(Contributed by Serhiy Storchaka in :issue:`13968`.)"
msgstr ""
":func:`~glob.iglob`\\과 :func:`~glob.glob` 함수는 이제 ``\"**\"`` 패턴을 사용하여 하위 "
"디렉터리에서 재귀 검색을 지원합니다. (Contributed by Serhiy Storchaka in :issue:`13968`.)"

#: ../../whatsnew/3.5.rst:1166
msgid "gzip"
msgstr "gzip"

#: ../../whatsnew/3.5.rst:1168
msgid ""
"The *mode* argument of the :class:`~gzip.GzipFile` constructor now "
"accepts ``\"x\"`` to request exclusive creation. (Contributed by Tim "
"Heaney in :issue:`19222`.)"
msgstr ""
":class:`~gzip.GzipFile` 생성자의 *mode* 인자는 이제 배타적 생성을 요청하는 ``\"x\"``\\를 "
"받아들입니다. (Contributed by Tim Heaney in :issue:`19222`.)"

#: ../../whatsnew/3.5.rst:1174
msgid "heapq"
msgstr "heapq"

#: ../../whatsnew/3.5.rst:1176
msgid ""
"Element comparison in :func:`~heapq.merge` can now be customized by "
"passing a :term:`key function` in a new optional *key* keyword argument, "
"and a new optional *reverse* keyword argument can be used to reverse "
"element comparison::"
msgstr ""
":func:`~heapq.merge`\\의 요소 비교는 이제 새로운 선택적 *key* 키워드 인자에 :term:`키 함수 <key "
"function>`\\를 전달하여 사용자 정의 할 수 있으며, 새로운 선택적 *reverse* 키워드 인자를 사용하여 요소 비교를 "
"반전할 수 있습니다::"

#: ../../whatsnew/3.5.rst:1181
msgid ""
">>> import heapq\n"
">>> a = ['9', '777', '55555']\n"
">>> b = ['88', '6666']\n"
">>> list(heapq.merge(a, b, key=len))\n"
"['9', '88', '777', '6666', '55555']\n"
">>> list(heapq.merge(reversed(a), reversed(b), key=len, reverse=True))\n"
"['55555', '6666', '777', '88', '9']"
msgstr ""

#: ../../whatsnew/3.5.rst:1189
msgid "(Contributed by Raymond Hettinger in :issue:`13742`.)"
msgstr "(Contributed by Raymond Hettinger in :issue:`13742`.)"

#: ../../whatsnew/3.5.rst:1193
msgid "http"
msgstr "http"

#: ../../whatsnew/3.5.rst:1195
msgid ""
"A new :class:`HTTPStatus <http.HTTPStatus>` enum that defines a set of "
"HTTP status codes, reason phrases and long descriptions written in "
"English. (Contributed by Demian Brecht in :issue:`21793`.)"
msgstr ""
"HTTP 상태 코드, 이유 구문 및 영어로 작성된 자세한 설명의 집합을 정의하는 새로운 :class:`HTTPStatus "
"<http.HTTPStatus>` 열거형. (Contributed by Demian Brecht in :issue:`21793`.)"

#: ../../whatsnew/3.5.rst:1201
msgid "http.client"
msgstr "http.client"

#: ../../whatsnew/3.5.rst:1203
msgid ""
":meth:`HTTPConnection.getresponse() "
"<http.client.HTTPConnection.getresponse>` now raises a "
":exc:`~http.client.RemoteDisconnected` exception when a remote server "
"connection is closed unexpectedly.  Additionally, if a "
":exc:`ConnectionError` (of which ``RemoteDisconnected`` is a subclass) is"
" raised, the client socket is now closed automatically, and will "
"reconnect on the next request::"
msgstr ""
":meth:`HTTPConnection.getresponse() "
"<http.client.HTTPConnection.getresponse>`\\는 이제 원격 서버 연결이 예기치 않게 닫힐 때 "
":exc:`~http.client.RemoteDisconnected` 예외를 발생시킵니다. 또한 "
":exc:`ConnectionError`\\(``RemoteDisconnected``\\는 이것의 서브 클래스입니다)가 발생하면, "
"클라이언트 소켓이 이제 자동으로 닫히고 다음 요청에 다시 연결됩니다::"

#: ../../whatsnew/3.5.rst:1210
msgid ""
"import http.client\n"
"conn = http.client.HTTPConnection('www.python.org')\n"
"for retries in range(3):\n"
"    try:\n"
"        conn.request('GET', '/')\n"
"        resp = conn.getresponse()\n"
"    except http.client.RemoteDisconnected:\n"
"        pass"
msgstr ""

#: ../../whatsnew/3.5.rst:1219
msgid "(Contributed by Martin Panter in :issue:`3566`.)"
msgstr "(Contributed by Martin Panter in :issue:`3566`.)"

#: ../../whatsnew/3.5.rst:1223
msgid "idlelib and IDLE"
msgstr "idlelib 및 IDLE"

#: ../../whatsnew/3.5.rst:1225
msgid ""
"Since idlelib implements the IDLE shell and editor and is not intended "
"for import by other programs, it gets improvements with every release.  "
"See :file:`Lib/idlelib/NEWS.txt` for a cumulative list of changes since "
"3.4.0, as well as changes made in future 3.5.x releases. This file is "
"also available from the IDLE :menuselection:`Help --> About IDLE` dialog."
msgstr ""
"idlelib는 IDLE 셸과 편집기를 구현하고 다른 프로그램에서 임포트 하려는 것이 아니기 때문에, 모든 릴리스에서 개선됩니다. "
"3.4.0 이후의 누적 변경 사항과 향후 3.5.x 릴리스에서 변경된 사항은 "
":file:`Lib/idlelib/NEWS.txt`\\를 참조하십시오. 이 파일은 IDLE :menuselection:`Help "
"--> About IDLE` 대화 상자에서도 제공됩니다."

#: ../../whatsnew/3.5.rst:1233
msgid "imaplib"
msgstr "imaplib"

#: ../../whatsnew/3.5.rst:1235
msgid ""
"The :class:`~imaplib.IMAP4` class now supports the :term:`context "
"manager` protocol. When used in a :keyword:`with` statement, the IMAP4 "
"``LOGOUT`` command will be called automatically at the end of the block. "
"(Contributed by Tarek Ziadé and Serhiy Storchaka in :issue:`4972`.)"
msgstr ""
":class:`~imaplib.IMAP4` 클래스는 이제 :term:`컨텍스트 관리자 <context manager>` 프로토콜을 "
"지원합니다. :keyword:`with` 문에서 사용하면 IMAP4 ``LOGOUT`` 명령이 블록 끝에서 자동으로 호출됩니다. "
"(Contributed by Tarek Ziadé and Serhiy Storchaka in :issue:`4972`.)"

#: ../../whatsnew/3.5.rst:1240
msgid ""
"The :mod:`imaplib` module now supports :rfc:`5161` (ENABLE Extension) and"
" :rfc:`6855` (UTF-8 Support) via the :meth:`IMAP4.enable() "
"<imaplib.IMAP4.enable>` method.  A new :attr:`IMAP4.utf8_enabled "
"<imaplib.IMAP4.utf8_enabled>` attribute tracks whether or not :rfc:`6855`"
" support is enabled. (Contributed by Milan Oberkirch, R. David Murray, "
"and Maciej Szulik in :issue:`21800`.)"
msgstr ""
":mod:`imaplib` 모듈은 이제 :meth:`IMAP4.enable() <imaplib.IMAP4.enable>` 메서드를 "
"통해 :rfc:`5161`\\(ENABLE 확장) 및 :rfc:`6855`\\(UTF-8 지원)를 지원합니다. 새로운 "
":attr:`IMAP4.utf8_enabled <imaplib.IMAP4.utf8_enabled>` 어트리뷰트는 "
":rfc:`6855` 지원이 활성화되었는지를 추적합니다. (Contributed by Milan Oberkirch, R. David"
" Murray, and Maciej Szulik in :issue:`21800`.)"

#: ../../whatsnew/3.5.rst:1247
msgid ""
"The :mod:`imaplib` module now automatically encodes non-ASCII string "
"usernames and passwords using UTF-8, as recommended by the RFCs.  "
"(Contributed by Milan Oberkirch in :issue:`21800`.)"
msgstr ""
"이제 :mod:`imaplib` 모듈은 이제 RFC에서 권장하는 대로 UTF-8을 사용하여 ASCII가 아닌 문자열 사용자 이름과 "
"암호를 자동으로 인코딩합니다. (Contributed by Milan Oberkirch in :issue:`21800`.)"

#: ../../whatsnew/3.5.rst:1253
msgid "imghdr"
msgstr "imghdr"

#: ../../whatsnew/3.5.rst:1255
#, fuzzy
msgid ""
"The :func:`!what` function now recognizes the `OpenEXR "
"<https://www.openexr.com>`_ format (contributed by Martin Vignali and "
"Claudiu Popa in :issue:`20295`), and the `WebP "
"<https://en.wikipedia.org/wiki/WebP>`_ format (contributed by Fabrice "
"Aneche and Claudiu Popa in :issue:`20197`.)"
msgstr ""
":func:`~imghdr.what` 함수는 이제 `OpenEXR <http://www.openexr.com>`_ "
"형식(contributed by Martin Vignali and Claudiu Popa in :issue:`20295`) 및 "
"`WebP <https://en.wikipedia.org/wiki/WebP>`_ 형식(contributed by Fabrice "
"Aneche and Claudiu Popa in :issue:`20197`)을 인식합니다."

#: ../../whatsnew/3.5.rst:1263
msgid "importlib"
msgstr "importlib"

#: ../../whatsnew/3.5.rst:1265
msgid ""
"The :class:`util.LazyLoader <importlib.util.LazyLoader>` class allows for"
" lazy loading of modules in applications where startup time is important."
" (Contributed by Brett Cannon in :issue:`17621`.)"
msgstr ""
":class:`util.LazyLoader <importlib.util.LazyLoader>` 클래스는 시작 소요 시간이 중요한 "
"응용 프로그램에서 모듈의 지연 로드를 허용합니다. (Contributed by Brett Cannon in "
":issue:`17621`.)"

#: ../../whatsnew/3.5.rst:1269
msgid ""
"The :func:`abc.InspectLoader.source_to_code() "
"<importlib.abc.InspectLoader.source_to_code>` method is now a static "
"method.  This makes it easier to initialize a module object with code "
"compiled from a string by running ``exec(code, module.__dict__)``. "
"(Contributed by Brett Cannon in :issue:`21156`.)"
msgstr ""
":func:`abc.InspectLoader.source_to_code() "
"<importlib.abc.InspectLoader.source_to_code>` 메서드는 이제 정적 메서드입니다. 이렇게 하면 "
"``exec(code, module.__dict__)``\\를 실행하여 문자열에서 컴파일된 코드로 모듈 객체를 더 쉽게 초기화 할 "
"수 있습니다. (Contributed by Brett Cannon in :issue:`21156`.)"

#: ../../whatsnew/3.5.rst:1275
msgid ""
"The new :func:`util.module_from_spec() <importlib.util.module_from_spec>`"
" function is now the preferred way to create a new module.  As opposed to"
" creating a :class:`types.ModuleType` instance directly, this new "
"function will set the various import-controlled attributes based on the "
"passed-in spec object.  (Contributed by Brett Cannon in :issue:`20383`.)"
msgstr ""
"새 :func:`util.module_from_spec() <importlib.util.module_from_spec>` 함수는 "
"이제 새 모듈을 만드는 데 선호되는 방법입니다. :class:`types.ModuleType` 인스턴스를 직접 만드는 것과는 "
"반대로, 이 새로운 함수는 전달된 명세 객체를 기반으로 다양한 임포트 제어 어트리뷰트를 설정합니다. (Contributed by "
"Brett Cannon in :issue:`20383`.)"

#: ../../whatsnew/3.5.rst:1283
msgid "inspect"
msgstr "inspect"

#: ../../whatsnew/3.5.rst:1285
msgid ""
"Both the :class:`~inspect.Signature` and :class:`~inspect.Parameter` "
"classes are now picklable and hashable.  (Contributed by Yury Selivanov "
"in :issue:`20726` and :issue:`20334`.)"
msgstr ""
":class:`~inspect.Signature`\\와 :class:`~inspect.Parameter` 클래스 모두 이제 피클 "
"가능하고 해시 가능합니다. (Contributed by Yury Selivanov in :issue:`20726` and "
":issue:`20334`.)"

#: ../../whatsnew/3.5.rst:1289
msgid ""
"A new :meth:`BoundArguments.apply_defaults() "
"<inspect.BoundArguments.apply_defaults>` method provides a way to set "
"default values for missing arguments::"
msgstr ""
"새로운 :meth:`BoundArguments.apply_defaults() "
"<inspect.BoundArguments.apply_defaults>` 메서드는 누락 된 인자에 대한 기본값을 설정하는 방법을 "
"제공합니다::"

#: ../../whatsnew/3.5.rst:1293
msgid ""
">>> def foo(a, b='ham', *args): pass\n"
">>> ba = inspect.signature(foo).bind('spam')\n"
">>> ba.apply_defaults()\n"
">>> ba.arguments\n"
"OrderedDict([('a', 'spam'), ('b', 'ham'), ('args', ())])"
msgstr ""

#: ../../whatsnew/3.5.rst:1299
msgid "(Contributed by Yury Selivanov in :issue:`24190`.)"
msgstr "(Contributed by Yury Selivanov in :issue:`24190`.)"

#: ../../whatsnew/3.5.rst:1301
msgid ""
"A new class method :meth:`Signature.from_callable() "
"<inspect.Signature.from_callable>` makes subclassing of "
":class:`~inspect.Signature` easier.  (Contributed by Yury Selivanov and "
"Eric Snow in :issue:`17373`.)"
msgstr ""
"새로운 클래스 메서드 :meth:`Signature.from_callable() "
"<inspect.Signature.from_callable>`\\은 :class:`~inspect.Signature`\\의 서브 "
"클래싱을 더 쉽게 만듭니다. (Contributed by Yury Selivanov and Eric Snow in "
":issue:`17373`.)"

#: ../../whatsnew/3.5.rst:1306
msgid ""
"The :func:`~inspect.signature` function now accepts a *follow_wrapped* "
"optional keyword argument, which, when set to ``False``, disables "
"automatic following of ``__wrapped__`` links. (Contributed by Yury "
"Selivanov in :issue:`20691`.)"
msgstr ""
":func:`~inspect.signature` 함수는 이제 *follow_wrapped* 선택적 키워드 인자를 받아들이며, "
"``False``\\로 설정되면 ``__wrapped__`` 링크의 자동 추적을 비활성화합니다. (Contributed by "
"Yury Selivanov in :issue:`20691`.)"

#: ../../whatsnew/3.5.rst:1311
msgid ""
"A set of new functions to inspect :term:`coroutine functions <coroutine "
"function>` and :term:`coroutine objects <coroutine>` has been added: "
":func:`~inspect.iscoroutine`, :func:`~inspect.iscoroutinefunction`, "
":func:`~inspect.isawaitable`, :func:`~inspect.getcoroutinelocals`, and "
":func:`~inspect.getcoroutinestate`. (Contributed by Yury Selivanov in "
":issue:`24017` and :issue:`24400`.)"
msgstr ""
":term:`코루틴 함수 <coroutine function>`\\와 :term:`코루틴 객체 <coroutine>`\\를 검사하는"
" 새로운 함수 집합 : :func:`~inspect.iscoroutine`, "
":func:`~inspect.iscoroutinefunction`, :func:`~inspect.isawaitable`, "
":func:`~inspect.getcoroutinelocals` 및 :func:`~inspect.getcoroutinestate` "
"가 추가되었습니다. (Contributed by Yury Selivanov in :issue:`24017` and "
":issue:`24400`.)"

#: ../../whatsnew/3.5.rst:1319
msgid ""
"The :func:`~inspect.stack`, :func:`~inspect.trace`, "
":func:`~inspect.getouterframes`, and :func:`~inspect.getinnerframes` "
"functions now return a list of named tuples. (Contributed by Daniel "
"Shahaf in :issue:`16808`.)"
msgstr ""
":func:`~inspect.stack`, :func:`~inspect.trace`, "
":func:`~inspect.getouterframes` 및 :func:`~inspect.getinnerframes` 함수는 이제 "
"네임드 튜플 리스트를 반환합니다. (Contributed by Daniel Shahaf in :issue:`16808`.)"

#: ../../whatsnew/3.5.rst:1326
msgid "io"
msgstr "io"

#: ../../whatsnew/3.5.rst:1328
msgid ""
"A new :meth:`BufferedIOBase.readinto1() <io.BufferedIOBase.readinto1>` "
"method, that uses at most one call to the underlying raw stream's "
":meth:`RawIOBase.read() <io.RawIOBase.read>` or "
":meth:`RawIOBase.readinto() <io.RawIOBase.readinto>` methods. "
"(Contributed by Nikolaus Rath in :issue:`20578`.)"
msgstr ""
"하부 원시 스트림의 :meth:`RawIOBase.read() <io.RawIOBase.read>`\\나 "
":meth:`RawIOBase.readinto() <io.RawIOBase.readinto>` 메서드에 대한 호출을 최대 한 번 "
"사용하는 새로운 :meth:`BufferedIOBase.readinto1() <io.BufferedIOBase.readinto1>`"
" 메서드. (Contributed by Nikolaus Rath in :issue:`20578`.)"

#: ../../whatsnew/3.5.rst:1336
msgid "ipaddress"
msgstr "ipaddress"

#: ../../whatsnew/3.5.rst:1338
msgid ""
"Both the :class:`~ipaddress.IPv4Network` and "
":class:`~ipaddress.IPv6Network` classes now accept an ``(address, "
"netmask)`` tuple argument, so as to easily construct network objects from"
" existing addresses::"
msgstr ""
":class:`~ipaddress.IPv4Network`\\와 :class:`~ipaddress.IPv6Network` 클래스는 "
"이제 기존 주소에서 네트워크 객체를 쉽게 구성할 수 있도록 ``(address, netmask)`` 튜플 인자를 받아들입니다::"

#: ../../whatsnew/3.5.rst:1342
msgid ""
">>> import ipaddress\n"
">>> ipaddress.IPv4Network(('127.0.0.0', 8))\n"
"IPv4Network('127.0.0.0/8')\n"
">>> ipaddress.IPv4Network(('127.0.0.0', '255.0.0.0'))\n"
"IPv4Network('127.0.0.0/8')"
msgstr ""

#: ../../whatsnew/3.5.rst:1348
msgid "(Contributed by Peter Moody and Antoine Pitrou in :issue:`16531`.)"
msgstr "(Contributed by Peter Moody and Antoine Pitrou in :issue:`16531`.)"

#: ../../whatsnew/3.5.rst:1350
msgid ""
"A new :attr:`~ipaddress.IPv4Network.reverse_pointer` attribute for the "
":class:`~ipaddress.IPv4Network` and :class:`~ipaddress.IPv6Network` "
"classes returns the name of the reverse DNS PTR record::"
msgstr ""
":class:`~ipaddress.IPv4Network`\\와 :class:`~ipaddress.IPv6Network` 클래스의 "
"새로운 :attr:`~ipaddress.IPv4Network.reverse_pointer` 어트리뷰트는 역 DNS PTR 레코드의 "
"이름을 반환합니다::"

#: ../../whatsnew/3.5.rst:1354
msgid ""
">>> import ipaddress\n"
">>> addr = ipaddress.IPv4Address('127.0.0.1')\n"
">>> addr.reverse_pointer\n"
"'1.0.0.127.in-addr.arpa'\n"
">>> addr6 = ipaddress.IPv6Address('::1')\n"
">>> addr6.reverse_pointer\n"
"'1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.ip6.arpa'"
msgstr ""

#: ../../whatsnew/3.5.rst:1362
msgid "(Contributed by Leon Weber in :issue:`20480`.)"
msgstr "(Contributed by Leon Weber in :issue:`20480`.)"

#: ../../whatsnew/3.5.rst:1366
msgid "json"
msgstr "json"

#: ../../whatsnew/3.5.rst:1368
msgid ""
"The :mod:`json.tool` command line interface now preserves the order of "
"keys in JSON objects passed in input.  The new ``--sort-keys`` option can"
" be used to sort the keys alphabetically. (Contributed by Berker Peksag "
"in :issue:`21650`.)"
msgstr ""
":mod:`json.tool` 명령 줄 인터페이스는 이제 입력으로 전달된 JSON 객체의 키 순서를 유지합니다. 새로운 "
"``--sort-keys`` 옵션을 사용하여 키를 알파벳순으로 정렬 할 수 있습니다. (Contributed by Berker "
"Peksag in :issue:`21650`.)"

#: ../../whatsnew/3.5.rst:1373
msgid ""
"JSON decoder now raises :exc:`~json.JSONDecodeError` instead of "
":exc:`ValueError` to provide better context information about the error. "
"(Contributed by Serhiy Storchaka in :issue:`19361`.)"
msgstr ""
"이제 JSON 디코더는 에러에 대한 더 나은 문맥 정보를 제공하기 위해 :exc:`ValueError` 대신 "
":exc:`~json.JSONDecodeError`\\를 발생시킵니다. (Contributed by Serhiy Storchaka "
"in :issue:`19361`.)"

#: ../../whatsnew/3.5.rst:1379
msgid "linecache"
msgstr "linecache"

#: ../../whatsnew/3.5.rst:1381
msgid ""
"A new :func:`~linecache.lazycache` function can be used to capture "
"information about a non-file-based module to permit getting its lines "
"later via :func:`~linecache.getline`. This avoids doing I/O until a line "
"is actually needed, without having to carry the module globals around "
"indefinitely. (Contributed by Robert Collins in :issue:`17911`.)"
msgstr ""
"새로운 :func:`~linecache.lazycache` 함수를 사용하여 파일 기반이 아닌 모듈에 대한 정보를 캡처하여 나중에 "
":func:`~linecache.getline`\\을 통해 해당 라인을 가져올 수 있습니다. 이렇게 하면 모듈 전역을 무기한으로 "
"유지할 필요 없이, 실제로 줄이 필요할 때까지 I/O를 수행하지 않습니다. (Contributed by Robert Collins "
"in :issue:`17911`.)"

#: ../../whatsnew/3.5.rst:1389
msgid "locale"
msgstr "locale"

#: ../../whatsnew/3.5.rst:1391
msgid ""
"A new :func:`~locale.delocalize` function can be used to convert a string"
" into a normalized number string, taking the ``LC_NUMERIC`` settings into"
" account::"
msgstr ""
"새로운 :func:`~locale.delocalize` 함수를 사용하여 ``LC_NUMERIC`` 설정을 고려하여 문자열을 정규화된"
" 숫자 문자열로 변환 할 수 있습니다::"

#: ../../whatsnew/3.5.rst:1394
msgid ""
">>> import locale\n"
">>> locale.setlocale(locale.LC_NUMERIC, 'de_DE.UTF-8')\n"
"'de_DE.UTF-8'\n"
">>> locale.delocalize('1.234,56')\n"
"'1234.56'\n"
">>> locale.setlocale(locale.LC_NUMERIC, 'en_US.UTF-8')\n"
"'en_US.UTF-8'\n"
">>> locale.delocalize('1,234.56')\n"
"'1234.56'"
msgstr ""

#: ../../whatsnew/3.5.rst:1404
msgid "(Contributed by Cédric Krier in :issue:`13918`.)"
msgstr "(Contributed by Cédric Krier in :issue:`13918`.)"

#: ../../whatsnew/3.5.rst:1408
msgid "logging"
msgstr "logging"

#: ../../whatsnew/3.5.rst:1410
msgid ""
"All logging methods (:class:`~logging.Logger` "
":meth:`~logging.Logger.log`, :meth:`~logging.Logger.exception`, "
":meth:`~logging.Logger.critical`, :meth:`~logging.Logger.debug`, etc.), "
"now accept exception instances as an *exc_info* argument, in addition to "
"boolean values and exception tuples::"
msgstr ""
"모든 로깅 메서드(:class:`~logging.Logger` :meth:`~logging.Logger.log`, "
":meth:`~logging.Logger.exception`, :meth:`~logging.Logger.critical`, "
":meth:`~logging.Logger.debug` 등)는 이제 불리언 값과 예외 튜플 외에도 예외 인스턴스를 *exc_info*"
" 인자로 받아들입니다::"

#: ../../whatsnew/3.5.rst:1416
msgid ""
">>> import logging\n"
">>> try:\n"
"...     1/0\n"
"... except ZeroDivisionError as ex:\n"
"...     logging.error('exception', exc_info=ex)\n"
"ERROR:root:exception"
msgstr ""

#: ../../whatsnew/3.5.rst:1423
msgid "(Contributed by Yury Selivanov in :issue:`20537`.)"
msgstr "(Contributed by Yury Selivanov in :issue:`20537`.)"

#: ../../whatsnew/3.5.rst:1425
msgid ""
"The :class:`handlers.HTTPHandler <logging.handlers.HTTPHandler>` class "
"now accepts an optional :class:`ssl.SSLContext` instance to configure SSL"
" settings used in an HTTP connection. (Contributed by Alex Gaynor in "
":issue:`22788`.)"
msgstr ""
"이제 :class:`handlers.HTTPHandler <logging.handlers.HTTPHandler>` 클래스는 HTTP"
" 연결에 사용되는 SSL 설정을 구성하기 위해 선택적 :class:`ssl.SSLContext` 인스턴스를 받아들입니다. "
"(Contributed by Alex Gaynor in :issue:`22788`.)"

#: ../../whatsnew/3.5.rst:1430
msgid ""
"The :class:`handlers.QueueListener <logging.handlers.QueueListener>` "
"class now takes a *respect_handler_level* keyword argument which, if set "
"to ``True``, will pass messages to handlers taking handler levels into "
"account. (Contributed by Vinay Sajip.)"
msgstr ""
":class:`handlers.QueueListener <logging.handlers.QueueListener>` 클래스는 이제 "
"*respect_handler_level* 키워드 인자를 취합니다. 이 인자는 ``True``\\로 설정되면 처리기 수준을 고려하여"
" 처리기에 메시지를 전달합니다. (Contributed by Vinay Sajip.)"

#: ../../whatsnew/3.5.rst:1437
msgid "lzma"
msgstr "lzma"

#: ../../whatsnew/3.5.rst:1439
msgid ""
"The :meth:`LZMADecompressor.decompress() "
"<lzma.LZMADecompressor.decompress>` method now accepts an optional "
"*max_length* argument to limit the maximum size of decompressed data. "
"(Contributed by Martin Panter in :issue:`15955`.)"
msgstr ""
"이제 :meth:`LZMADecompressor.decompress() "
"<lzma.LZMADecompressor.decompress>` 메서드는 압축 해제된 데이터의 최대 크기를 제한하기 위해 선택적 "
"*max_length* 인자를 받아들입니다. (Contributed by Martin Panter in "
":issue:`15955`.)"

#: ../../whatsnew/3.5.rst:1446
msgid "math"
msgstr "math"

#: ../../whatsnew/3.5.rst:1448
msgid ""
"Two new constants have been added to the :mod:`math` module: "
":data:`~math.inf` and :data:`~math.nan`.  (Contributed by Mark Dickinson "
"in :issue:`23185`.)"
msgstr ""
":mod:`math` 모듈에 :data:`~math.inf`\\와 :data:`~math.nan`\\의 두 가지 새로운 상수가 "
"추가되었습니다. (Contributed by Mark Dickinson in :issue:`23185`.)"

#: ../../whatsnew/3.5.rst:1451
msgid ""
"A new function :func:`~math.isclose` provides a way to test for "
"approximate equality. (Contributed by Chris Barker and Tal Einat in "
":issue:`24270`.)"
msgstr ""
"새로운 함수 :func:`~math.isclose`\\는 대략적인 동등성을 테스트하는 방법을 제공합니다. (Contributed "
"by Chris Barker and Tal Einat in :issue:`24270`.)"

#: ../../whatsnew/3.5.rst:1454
msgid ""
"A new :func:`~math.gcd` function has been added.  The "
":func:`fractions.gcd` function is now deprecated. (Contributed by Mark "
"Dickinson and Serhiy Storchaka in :issue:`22486`.)"
msgstr ""
"새로운 :func:`~math.gcd` 함수가 추가되었습니다. :func:`fractions.gcd` 함수는 이제 폐지되었습니다. "
"(Contributed by Mark Dickinson and Serhiy Storchaka in :issue:`22486`.)"

#: ../../whatsnew/3.5.rst:1460
msgid "multiprocessing"
msgstr "multiprocessing"

#: ../../whatsnew/3.5.rst:1462
msgid ""
":func:`sharedctypes.synchronized() "
"<multiprocessing.sharedctypes.synchronized>` objects now support the "
":term:`context manager` protocol. (Contributed by Charles-François Natali"
" in :issue:`21565`.)"
msgstr ""
":func:`sharedctypes.synchronized() "
"<multiprocessing.sharedctypes.synchronized>` 객체는 이제 :term:`컨텍스트 관리자 "
"<context manager>` 프로토콜을 지원합니다. (Contributed by Charles-François Natali "
"in :issue:`21565`.)"

#: ../../whatsnew/3.5.rst:1468
msgid "operator"
msgstr "operator"

#: ../../whatsnew/3.5.rst:1470
msgid ""
":func:`~operator.attrgetter`, :func:`~operator.itemgetter`, and "
":func:`~operator.methodcaller` objects now support pickling. (Contributed"
" by Josh Rosenberg and Serhiy Storchaka in :issue:`22955`.)"
msgstr ""
":func:`~operator.attrgetter`, :func:`~operator.itemgetter` 및 "
":func:`~operator.methodcaller` 객체는 이제 피클링을 지원합니다. (Contributed by Josh "
"Rosenberg and Serhiy Storchaka in :issue:`22955`.)"

#: ../../whatsnew/3.5.rst:1474
msgid ""
"New :func:`~operator.matmul` and :func:`~operator.imatmul` functions to "
"perform matrix multiplication. (Contributed by Benjamin Peterson in "
":issue:`21176`.)"
msgstr ""
"행렬 곱셈을 수행하는 새로운 :func:`~operator.matmul`\\과 :func:`~operator.imatmul` 함수."
" (Contributed by Benjamin Peterson in :issue:`21176`.)"

#: ../../whatsnew/3.5.rst:1480
msgid "os"
msgstr "os"

#: ../../whatsnew/3.5.rst:1482
msgid ""
"The new :func:`~os.scandir` function returning an iterator of "
":class:`~os.DirEntry` objects has been added.  If possible, "
":func:`~os.scandir` extracts file attributes while scanning a directory, "
"removing the need to perform subsequent system calls to determine file "
"type or attributes, which may significantly improve performance.  "
"(Contributed by Ben Hoyt with the help of Victor Stinner in "
":issue:`22524`.)"
msgstr ""
":class:`~os.DirEntry` 객체의 이터레이터를 반환하는 새로운 :func:`~os.scandir` 함수가 "
"추가되었습니다. 가능하면, :func:`~os.scandir`\\은 디렉터리를 스캔하는 동안 파일 어트리뷰트를 추출하여, 파일 "
"유형이나 어트리뷰트를 파악하기 위해 후속 시스템 호출을 수행할 필요가 없어서, 성능이 크게 향상될 수 있습니다. "
"(Contributed by Ben Hoyt with the help of Victor Stinner in "
":issue:`22524`.)"

#: ../../whatsnew/3.5.rst:1489
msgid ""
"On Windows, a new :attr:`stat_result.st_file_attributes "
"<os.stat_result.st_file_attributes>` attribute is now available.  It "
"corresponds to the ``dwFileAttributes`` member of the "
"``BY_HANDLE_FILE_INFORMATION`` structure returned by "
"``GetFileInformationByHandle()``.  (Contributed by Ben Hoyt in "
":issue:`21719`.)"
msgstr ""
"윈도우에서, 이제 새로운 :attr:`stat_result.st_file_attributes "
"<os.stat_result.st_file_attributes>` 어트리뷰트를 사용할 수 있습니다. "
"``GetFileInformationByHandle()`` 이 반환한 ``BY_HANDLE_FILE_INFORMATION`` "
"구조체의 ``dwFileAttributes`` 멤버에 해당합니다. (Contributed by Ben Hoyt in "
":issue:`21719`.)"

#: ../../whatsnew/3.5.rst:1495
msgid ""
"The :func:`~os.urandom` function now uses the ``getrandom()`` syscall on "
"Linux 3.17 or newer, and ``getentropy()`` on OpenBSD 5.6 and newer, "
"removing the need to use ``/dev/urandom`` and avoiding failures due to "
"potential file descriptor exhaustion.  (Contributed by Victor Stinner in "
":issue:`22181`.)"
msgstr ""
":func:`~os.urandom` 함수는 이제 리눅스 3.17 이상에서 ``getrandom()`` 시스템 호출을 사용하고, "
"OpenBSD 5.6 이상에서 ``getentropy()``\\를 사용하여, ``/dev/urandom``\\을 사용할 필요가 없고"
" 잠재적인 파일 기술자 고갈로 인한 실패를 방지합니다. (Contributed by Victor Stinner in "
":issue:`22181`.)"

#: ../../whatsnew/3.5.rst:1500
#, fuzzy
msgid ""
"New :func:`~os.get_blocking` and :func:`~os.set_blocking` functions allow"
" getting and setting a file descriptor's blocking mode "
"(:const:`~os.O_NONBLOCK`.) (Contributed by Victor Stinner in "
":issue:`22054`.)"
msgstr ""
"새로운 :func:`~os.get_blocking`\\과 :func:`~os.set_blocking` 함수를 사용하여 파일 기술자의"
" 블로킹 모드(:data:`~os.O_NONBLOCK`)를 가져오고 설정할 수 있습니다 (Contributed by Victor "
"Stinner in :issue:`22054`.)"

#: ../../whatsnew/3.5.rst:1504
msgid ""
"The :func:`~os.truncate` and :func:`~os.ftruncate` functions are now "
"supported on Windows.  (Contributed by Steve Dower in :issue:`23668`.)"
msgstr ""
"이제 :func:`~os.truncate`\\와 :func:`~os.ftruncate` 함수가 이제 윈도우에서 지원됩니다. "
"(Contributed by Steve Dower in :issue:`23668`.)"

#: ../../whatsnew/3.5.rst:1507
msgid ""
"There is a new :func:`os.path.commonpath` function returning the longest "
"common sub-path of each passed pathname.  Unlike the "
":func:`os.path.commonprefix` function, it always returns a valid path::"
msgstr ""
"전달된 각 경로명의 가장 긴 공통 하위 경로를 반환하는 새로운 :func:`os.path.commonpath` 함수가 있습니다. "
":func:`os.path.commonprefix` 함수와 달리, 항상 유효한 경로를 반환합니다::"

#: ../../whatsnew/3.5.rst:1512
msgid ""
">>> os.path.commonprefix(['/usr/lib', '/usr/local/lib'])\n"
"'/usr/l'\n"
"\n"
">>> os.path.commonpath(['/usr/lib', '/usr/local/lib'])\n"
"'/usr'"
msgstr ""

#: ../../whatsnew/3.5.rst:1518
msgid "(Contributed by Rafik Draoui and Serhiy Storchaka in :issue:`10395`.)"
msgstr "(Contributed by Rafik Draoui and Serhiy Storchaka in :issue:`10395`.)"

#: ../../whatsnew/3.5.rst:1522
msgid "pathlib"
msgstr "pathlib"

#: ../../whatsnew/3.5.rst:1524
msgid ""
"The new :meth:`Path.samefile() <pathlib.Path.samefile>` method can be "
"used to check whether the path points to the same file as another path, "
"which can be either another :class:`~pathlib.Path` object, or a string::"
msgstr ""
"새로운 :meth:`Path.samefile() <pathlib.Path.samefile>` 메서드를 사용하여 다른 "
":class:`~pathlib.Path` 객체나 문자열일 수 있는 다른 경로와 같은 파일을 가리키는지를 확인할 수 있습니다::"

#: ../../whatsnew/3.5.rst:1528
msgid ""
">>> import pathlib\n"
">>> p1 = pathlib.Path('/etc/hosts')\n"
">>> p2 = pathlib.Path('/etc/../etc/hosts')\n"
">>> p1.samefile(p2)\n"
"True"
msgstr ""

#: ../../whatsnew/3.5.rst:1534
msgid "(Contributed by Vajrasky Kok and Antoine Pitrou in :issue:`19775`.)"
msgstr "(Contributed by Vajrasky Kok and Antoine Pitrou in :issue:`19775`.)"

#: ../../whatsnew/3.5.rst:1536
msgid ""
"The :meth:`Path.mkdir() <pathlib.Path.mkdir>` method now accepts a new "
"optional *exist_ok* argument to match ``mkdir -p`` and "
":func:`os.makedirs` functionality.  (Contributed by Berker Peksag in "
":issue:`21539`.)"
msgstr ""
":meth:`Path.mkdir() <pathlib.Path.mkdir>` 메서드는 이제 ``mkdir -p``\\와 "
":func:`os.makedirs` 기능과 일치하는 새로운 선택적 *exist_ok* 인자를 받아들입니다. (Contributed "
"by Berker Peksag in :issue:`21539`.)"

#: ../../whatsnew/3.5.rst:1540
msgid ""
"There is a new :meth:`Path.expanduser() <pathlib.Path.expanduser>` method"
" to expand ``~`` and ``~user`` prefixes.  (Contributed by Serhiy "
"Storchaka and Claudiu Popa in :issue:`19776`.)"
msgstr ""
"``~``\\와 ``~user`` 접두사를 확장하는 새로운 :meth:`Path.expanduser() "
"<pathlib.Path.expanduser>` 메서드가 있습니다. (Contributed by Serhiy Storchaka "
"and Claudiu Popa in :issue:`19776`.)"

#: ../../whatsnew/3.5.rst:1544
msgid ""
"A new :meth:`Path.home() <pathlib.Path.home>` class method can be used to"
" get a :class:`~pathlib.Path` instance representing the user’s home "
"directory. (Contributed by Victor Salgado and Mayank Tripathi in "
":issue:`19777`.)"
msgstr ""
"새로운 :meth:`Path.home() <pathlib.Path.home>` 클래스 메서드를 사용하여 사용자의 홈 디렉터리를 "
"나타내는 :class:`~pathlib.Path` 인스턴스를 가져올 수 있습니다. (Contributed by Victor "
"Salgado and Mayank Tripathi in :issue:`19777`.)"

#: ../../whatsnew/3.5.rst:1549
msgid ""
"New :meth:`Path.write_text() <pathlib.Path.write_text>`, "
":meth:`Path.read_text() <pathlib.Path.read_text>`, "
":meth:`Path.write_bytes() <pathlib.Path.write_bytes>`, "
":meth:`Path.read_bytes() <pathlib.Path.read_bytes>` methods to simplify "
"read/write operations on files."
msgstr ""
"파일에 대한 읽기/쓰기 연산을 단순화하는 새로운 :meth:`Path.write_text() "
"<pathlib.Path.write_text>`, :meth:`Path.read_text() "
"<pathlib.Path.read_text>`, :meth:`Path.write_bytes() "
"<pathlib.Path.write_bytes>`, :meth:`Path.read_bytes() "
"<pathlib.Path.read_bytes>` 메서드."

#: ../../whatsnew/3.5.rst:1555
msgid ""
"The following code snippet will create or rewrite existing file "
"``~/spam42``::"
msgstr "다음 코드 조각은 ``~/spam42``\\를 만들거나 기존 파일을 다시 작성합니다::"

#: ../../whatsnew/3.5.rst:1558
msgid ""
">>> import pathlib\n"
">>> p = pathlib.Path('~/spam42')\n"
">>> p.expanduser().write_text('ham')\n"
"3"
msgstr ""

#: ../../whatsnew/3.5.rst:1563
msgid "(Contributed by Christopher Welborn in :issue:`20218`.)"
msgstr "(Contributed by Christopher Welborn in :issue:`20218`.)"

#: ../../whatsnew/3.5.rst:1567
msgid "pickle"
msgstr "pickle"

#: ../../whatsnew/3.5.rst:1569
msgid ""
"Nested objects, such as unbound methods or nested classes, can now be "
"pickled using :ref:`pickle protocols <pickle-protocols>` older than "
"protocol version 4. Protocol version 4 already supports these cases.  "
"(Contributed by Serhiy Storchaka in :issue:`23611`.)"
msgstr ""
"연결되지 않은 메서드나 중첩된 클래스와 같은 중첩 된 객체는 이제 프로토콜 버전 4보다 오래된 :ref:`피클 프로토콜 "
"<pickle-protocols>`\\을 사용하여 피클 할 수 있습니다. 프로토콜 버전 4는 이미 이러한 경우를 지원합니다. "
"(Contributed by Serhiy Storchaka in :issue:`23611`.)"

#: ../../whatsnew/3.5.rst:1576
msgid "poplib"
msgstr "poplib"

#: ../../whatsnew/3.5.rst:1578
msgid ""
"A new :meth:`POP3.utf8() <poplib.POP3.utf8>` command enables :rfc:`6856` "
"(Internationalized Email) support, if a POP server supports it. "
"(Contributed by Milan OberKirch in :issue:`21804`.)"
msgstr ""
"새로운 :meth:`POP3.utf8() <poplib.POP3.utf8>` 명령은 POP 서버가 지원하면 :rfc:`6856` "
"(국제화된 이메일) 지원을 활성화합니다. (Contributed by Milan OberKirch in "
":issue:`21804`.)"

#: ../../whatsnew/3.5.rst:1584
msgid "re"
msgstr "re"

#: ../../whatsnew/3.5.rst:1586
msgid ""
"References and conditional references to groups with fixed length are now"
" allowed in lookbehind assertions::"
msgstr "고정 길이를 가진 그룹에 대한 참조와 조건부 참조는 이제 되돌아보기 어서션(lookbehind assertions)에서 허용됩니다::"

#: ../../whatsnew/3.5.rst:1589
msgid ""
">>> import re\n"
">>> pat = re.compile(r'(a|b).(?<=\\1)c')\n"
">>> pat.match('aac')\n"
"<_sre.SRE_Match object; span=(0, 3), match='aac'>\n"
">>> pat.match('bbc')\n"
"<_sre.SRE_Match object; span=(0, 3), match='bbc'>"
msgstr ""

#: ../../whatsnew/3.5.rst:1596
msgid "(Contributed by Serhiy Storchaka in :issue:`9179`.)"
msgstr "(Contributed by Serhiy Storchaka in :issue:`9179`.)"

#: ../../whatsnew/3.5.rst:1598
msgid ""
"The number of capturing groups in regular expressions is no longer "
"limited to 100.  (Contributed by Serhiy Storchaka in :issue:`22437`.)"
msgstr ""
"정규식의 캡처 그룹 수는 더는 100개로 제한되지 않습니다. (Contributed by Serhiy Storchaka in "
":issue:`22437`.)"

#: ../../whatsnew/3.5.rst:1601
msgid ""
"The :func:`~re.sub` and :func:`~re.subn` functions now replace unmatched "
"groups with empty strings instead of raising an exception. (Contributed "
"by Serhiy Storchaka in :issue:`1519638`.)"
msgstr ""
":func:`~re.sub`\\와 :func:`~re.subn` 함수는 이제 예외를 발생시키는 대신 일치하지 않는 그룹을 빈 "
"문자열로 대체합니다. (Contributed by Serhiy Storchaka in :issue:`1519638`.)"

#: ../../whatsnew/3.5.rst:1605
msgid ""
"The :class:`re.error` exceptions have new attributes, "
":attr:`~re.error.msg`, :attr:`~re.error.pattern`, :attr:`~re.error.pos`, "
":attr:`~re.error.lineno`, and :attr:`~re.error.colno`, that provide "
"better context information about the error::"
msgstr ""
":class:`re.error` 예외에는 에러에 대한 더 나은 문맥 정보를 제공하는 새 어트리뷰트인 "
":attr:`~re.error.msg`, :attr:`~re.error.pattern`, :attr:`~re.error.pos`, "
":attr:`~re.error.lineno` 및 :attr:`~re.error.colno`\\가 있습니다::"

#: ../../whatsnew/3.5.rst:1611
msgid ""
">>> re.compile(\"\"\"\n"
"...     (?x)\n"
"...     .++\n"
"... \"\"\")\n"
"Traceback (most recent call last):\n"
"   ...\n"
"sre_constants.error: multiple repeat at position 16 (line 3, column 7)"
msgstr ""

#: ../../whatsnew/3.5.rst:1619
msgid "(Contributed by Serhiy Storchaka in :issue:`22578`.)"
msgstr "(Contributed by Serhiy Storchaka in :issue:`22578`.)"

#: ../../whatsnew/3.5.rst:1623
msgid "readline"
msgstr "readline"

#: ../../whatsnew/3.5.rst:1625
msgid ""
"A new :func:`~readline.append_history_file` function can be used to "
"append the specified number of trailing elements in history to the given "
"file. (Contributed by Bruno Cauet in :issue:`22940`.)"
msgstr ""
"새로운 :func:`~readline.append_history_file` 함수를 사용하여 지정된 파일에 히스토리에 지정된 수의 "
"후행 요소를 추가 할 수 있습니다. (Contributed by Bruno Cauet in :issue:`22940`.)"

#: ../../whatsnew/3.5.rst:1631
msgid "selectors"
msgstr "selectors"

#: ../../whatsnew/3.5.rst:1633
msgid ""
"The new :class:`~selectors.DevpollSelector` supports efficient "
"``/dev/poll`` polling on Solaris. (Contributed by Giampaolo Rodola' in "
":issue:`18931`.)"
msgstr ""
"새로운 :class:`~selectors.DevpollSelector`\\는 Solaris에서 효율적인 ``/dev/poll`` "
"폴링을 지원합니다. (Contributed by Giampaolo Rodola' in :issue:`18931`.)"

#: ../../whatsnew/3.5.rst:1639
msgid "shutil"
msgstr "Shutil"

#: ../../whatsnew/3.5.rst:1641
msgid ""
"The :func:`~shutil.move` function now accepts a *copy_function* argument,"
" allowing, for example, the :func:`~shutil.copy` function to be used "
"instead of the default :func:`~shutil.copy2` if there is a need to ignore"
" file metadata when moving. (Contributed by Claudiu Popa in "
":issue:`19840`.)"
msgstr ""
":func:`~shutil.move` 함수는 이제 *copy_function* 인자를 받아들여, 예를 들어, 이동할 때 파일 메타 "
"데이터를 무시해야 하면 기본 :func:`~shutil.copy2` 대신 :func:`~shutil.copy` 함수를 사용할 수 "
"있습니다. (Contributed by Claudiu Popa in :issue:`19840`.)"

#: ../../whatsnew/3.5.rst:1647
msgid ""
"The :func:`~shutil.make_archive` function now supports the *xztar* "
"format. (Contributed by Serhiy Storchaka in :issue:`5411`.)"
msgstr ""
":func:`~shutil.make_archive` 함수는 이제 *xztar* 형식을 지원합니다. (Contributed by "
"Serhiy Storchaka in :issue:`5411`.)"

#: ../../whatsnew/3.5.rst:1652
msgid "signal"
msgstr "signal"

#: ../../whatsnew/3.5.rst:1654
msgid ""
"On Windows, the :func:`~signal.set_wakeup_fd` function now also supports "
"socket handles.  (Contributed by Victor Stinner in :issue:`22018`.)"
msgstr ""
"윈도우에서, :func:`~signal.set_wakeup_fd` 함수는 이제 소켓 핸들도 지원합니다. (Contributed by"
" Victor Stinner in :issue:`22018`.)"

#: ../../whatsnew/3.5.rst:1657
msgid ""
"Various ``SIG*`` constants in the :mod:`signal` module have been "
"converted into :mod:`Enums <enum>`.  This allows meaningful names to be "
"printed during debugging, instead of integer \"magic numbers\". "
"(Contributed by Giampaolo Rodola' in :issue:`21076`.)"
msgstr ""
":mod:`signal` 모듈의 다양한 ``SIG*`` 상수가 :mod:`열거형 <enum>`\\으로 변환되었습니다. 이를 통해 "
"디버깅 중에 정수 \"매직 넘버\" 대신 의미 있는 이름을 인쇄할 수 있습니다. (Contributed by Giampaolo "
"Rodola' in :issue:`21076`.)"

#: ../../whatsnew/3.5.rst:1664
msgid "smtpd"
msgstr "smtpd"

#: ../../whatsnew/3.5.rst:1666
#, fuzzy
msgid ""
"Both the :class:`!SMTPServer` and :class:`!SMTPChannel` classes now "
"accept a *decode_data* keyword argument to determine if the ``DATA`` "
"portion of the SMTP transaction is decoded using the ``\"utf-8\"`` codec "
"or is instead provided to the :meth:`!SMTPServer.process_message` method "
"as a byte string.  The default is ``True`` for backward compatibility "
"reasons, but will change to ``False`` in Python 3.6.  If *decode_data* is"
" set to ``False``, the ``process_message`` method must be prepared to "
"accept keyword arguments. (Contributed by Maciej Szulik in "
":issue:`19662`.)"
msgstr ""
"이제 :class:`~smtpd.SMTPServer`\\와 :class:`~smtpd.SMTPChannel` 클래스 모두 "
"*decode_data* 키워드 인자를 받아 SMTP 트랜잭션의 ``DATA`` 부분이 ``\"utf-8\"`` 코덱을 사용하여 "
"디코딩되는지 아니면 대신 바이트 문자열로 :meth:`SMTPServer.process_message() "
"<smtpd.SMTPServer.process_message>` 메서드에 제공되는지 확인합니다. 이전 버전과의 호환성을 위해 "
"기본값은 ``True``\\이지만, 파이썬 3.6에서는 ``False``\\로 변경됩니다. *decode_data*\\가 "
"``False``\\로 설정되면, ``process_message`` 메서드는 키워드 인자를 받아들일 준비가 되어 있어야 합니다. "
"(Contributed by Maciej Szulik in :issue:`19662`.)"

#: ../../whatsnew/3.5.rst:1677
#, fuzzy
msgid ""
"The :class:`!SMTPServer` class now advertises the ``8BITMIME`` extension "
"(:rfc:`6152`) if *decode_data* has been set ``True``.  If the client "
"specifies ``BODY=8BITMIME`` on the ``MAIL`` command, it is passed to "
":meth:`!SMTPServer.process_message` via the *mail_options* keyword. "
"(Contributed by Milan Oberkirch and R.  David Murray in :issue:`21795`.)"
msgstr ""
"*decode_data*\\가 ``True``\\로 설정되면 :class:`~smtpd.SMTPServer` 클래스는 이제 "
"``8BITMIME`` 확장(:rfc:`6152`)을 알립니다. 클라이언트가 ``MAIL`` 명령에 "
"``BODY=8BITMIME``\\를 지정하면, *mail_options* 키워드를 통해 "
":meth:`SMTPServer.process_message() "
"<smtpd.SMTPServer.process_message>`\\로 전달됩니다. (Contributed by Milan "
"Oberkirch and R.  David Murray in :issue:`21795`.)"

#: ../../whatsnew/3.5.rst:1684
#, fuzzy
msgid ""
"The :class:`!SMTPServer` class now also supports the ``SMTPUTF8`` "
"extension (:rfc:`6531`: Internationalized Email).  If the client "
"specified ``SMTPUTF8 BODY=8BITMIME`` on the ``MAIL`` command, they are "
"passed to :meth:`!SMTPServer.process_message` via the *mail_options* "
"keyword.  It is the responsibility of the ``process_message`` method to "
"correctly handle the ``SMTPUTF8`` data. (Contributed by Milan Oberkirch "
"in :issue:`21725`.)"
msgstr ""
":class:`~smtpd.SMTPServer` 클래스는 이제 ``SMTPUTF8`` 확장(:rfc:`6531`: 국제화된 "
"이메일)도 지원합니다. 클라이언트가 ``MAIL`` 명령에 ``SMTPUTF8 BODY=8BITMIME``\\을 지정하면, "
"*mail_options* 키워드를 통해 :meth:`SMTPServer.process_message() "
"<smtpd.SMTPServer.process_message>`\\로 전달됩니다. ``SMTPUTF8`` 데이터를 올바르게 처리하는"
" 것은 ``process_message`` 메서드의 책임입니다. (Contributed by Milan Oberkirch in "
":issue:`21725`.)"

#: ../../whatsnew/3.5.rst:1692
#, fuzzy
msgid ""
"It is now possible to provide, directly or via name resolution, IPv6 "
"addresses in the :class:`!SMTPServer` constructor, and have it "
"successfully connect.  (Contributed by Milan Oberkirch in "
":issue:`14758`.)"
msgstr ""
"이제 :class:`~smtpd.SMTPServer` 생성자에 직접 또는 이름 결정(name resolution)을 통해 IPv6 "
"주소를 제공하고 성공적으로 연결할 수 있습니다. (Contributed by Milan Oberkirch in "
":issue:`14758`.)"

#: ../../whatsnew/3.5.rst:1698
msgid "smtplib"
msgstr "smtplib"

#: ../../whatsnew/3.5.rst:1700
msgid ""
"A new :meth:`SMTP.auth() <smtplib.SMTP.auth>` method provides a "
"convenient way to implement custom authentication mechanisms. "
"(Contributed by Milan Oberkirch in :issue:`15014`.)"
msgstr ""
"새로운 :meth:`SMTP.auth() <smtplib.SMTP.auth>` 메서드는 사용자 정의 인증 메커니즘을 구현하는 편리한"
" 방법을 제공합니다. (Contributed by Milan Oberkirch in :issue:`15014`.)"

#: ../../whatsnew/3.5.rst:1704
msgid ""
"The :meth:`SMTP.set_debuglevel() <smtplib.SMTP.set_debuglevel>` method "
"now accepts an additional debuglevel (2), which enables timestamps in "
"debug messages. (Contributed by Gavin Chappell and Maciej Szulik in "
":issue:`16914`.)"
msgstr ""
":meth:`SMTP.set_debuglevel() <smtplib.SMTP.set_debuglevel>` 메서드는 이제 디버그 "
"메시지에서 타임 스탬프를 활성화하는 추가 디버그 수준(2)을 받아들입니다. (Contributed by Gavin Chappell "
"and Maciej Szulik in :issue:`16914`.)"

#: ../../whatsnew/3.5.rst:1708
msgid ""
"Both the :meth:`SMTP.sendmail() <smtplib.SMTP.sendmail>` and "
":meth:`SMTP.send_message() <smtplib.SMTP.send_message>` methods now "
"support :rfc:`6531` (SMTPUTF8). (Contributed by Milan Oberkirch and R. "
"David Murray in :issue:`22027`.)"
msgstr ""
":meth:`SMTP.sendmail() <smtplib.SMTP.sendmail>`\\과 "
":meth:`SMTP.send_message() <smtplib.SMTP.send_message>` 메서드 모두 이제 "
":rfc:`6531`\\(SMTPUTF8)을 지원합니다. (Contributed by Milan Oberkirch and R. "
"David Murray in :issue:`22027`.)"

#: ../../whatsnew/3.5.rst:1715
msgid "sndhdr"
msgstr "sndhdr"

#: ../../whatsnew/3.5.rst:1717
#, fuzzy
msgid ""
"The :func:`!what` and :func:`!whathdr` functions  now return a "
":func:`~collections.namedtuple`.  (Contributed by Claudiu Popa in "
":issue:`18615`.)"
msgstr ""
":func:`~sndhdr.what`\\과 :func:`~sndhdr.whathdr` 함수는 이제 "
":func:`~collections.namedtuple`\\을 반환합니다. (Contributed by Claudiu Popa in"
" :issue:`18615`.)"

#: ../../whatsnew/3.5.rst:1723
msgid "socket"
msgstr "socket"

#: ../../whatsnew/3.5.rst:1725
msgid ""
"Functions with timeouts now use a monotonic clock, instead of a system "
"clock. (Contributed by Victor Stinner in :issue:`22043`.)"
msgstr ""
"제한 시간이 있는 함수는 이제 시스템 시계 대신 단조증가(monotonic) 시계를 사용합니다. (Contributed by "
"Victor Stinner in :issue:`22043`.)"

#: ../../whatsnew/3.5.rst:1728
msgid ""
"A new :meth:`socket.sendfile() <socket.socket.sendfile>` method allows "
"sending a file over a socket by using the high-performance "
":func:`os.sendfile` function on UNIX, resulting in uploads being from 2 "
"to 3 times faster than when using plain :meth:`socket.send() "
"<socket.socket.send>`. (Contributed by Giampaolo Rodola' in "
":issue:`17552`.)"
msgstr ""
"새로운 :meth:`socket.sendfile() <socket.socket.sendfile>` 메서드를 사용하면 유닉스에서 "
"고성능 :func:`os.sendfile` 함수를 사용하여 소켓을 통해 파일을 전송할 수 있어서, 일반 "
":meth:`socket.send() <socket.socket.send>`\\를 사용할 때 보다 업로드 속도가 2 에서 3배 "
"빨라집니다. (Contributed by Giampaolo Rodola' in :issue:`17552`.)"

#: ../../whatsnew/3.5.rst:1734
msgid ""
"The :meth:`socket.sendall() <socket.socket.sendall>` method no longer "
"resets the socket timeout every time bytes are received or sent.  The "
"socket timeout is now the maximum total duration to send all data. "
"(Contributed by Victor Stinner in :issue:`23853`.)"
msgstr ""
":meth:`socket.sendall() <socket.socket.sendall>` 메서드는 더는 바이트를 받거나 보낼 때마다 "
"소켓 시간제한을 재설정하지 않습니다. 소켓 시간제한은 이제 모든 데이터를 보내는 최대 총 기간입니다. (Contributed by "
"Victor Stinner in :issue:`23853`.)"

#: ../../whatsnew/3.5.rst:1739
msgid ""
"The *backlog* argument of the :meth:`socket.listen() "
"<socket.socket.listen>` method is now optional.  By default it is set to "
":data:`SOMAXCONN <socket.SOMAXCONN>` or to ``128``, whichever is less. "
"(Contributed by Charles-François Natali in :issue:`21455`.)"
msgstr ""
":meth:`socket.listen() <socket.socket.listen>` 메서드의 *backlog* 인자는 이제 선택 "
"사항입니다. 기본적으로 :data:`SOMAXCONN <socket.SOMAXCONN>`\\나 ``128``\\중 작은 값으로 "
"설정됩니다. (Contributed by Charles-François Natali in :issue:`21455`.)"

#: ../../whatsnew/3.5.rst:1746
msgid "ssl"
msgstr "ssl"

#: ../../whatsnew/3.5.rst:1751
msgid "Memory BIO Support"
msgstr "메모리 BIO 지원"

#: ../../whatsnew/3.5.rst:1753
msgid "(Contributed by Geert Jansen in :issue:`21965`.)"
msgstr "(Contributed by Geert Jansen in :issue:`21965`.)"

#: ../../whatsnew/3.5.rst:1755
msgid ""
"The new :class:`~ssl.SSLObject` class has been added to provide SSL "
"protocol support for cases when the network I/O capabilities of "
":class:`~ssl.SSLSocket` are not necessary or are suboptimal.  "
"``SSLObject`` represents an SSL protocol instance, but does not implement"
" any network I/O methods, and instead provides a memory buffer interface."
"  The new :class:`~ssl.MemoryBIO` class can be used to pass data between "
"Python and an SSL protocol instance."
msgstr ""
"새로운 :class:`~ssl.SSLObject` 클래스가 추가되어 :class:`~ssl.SSLSocket`\\의 네트워크 I/O"
" 기능이 필요하지 않거나 최적이 아닐 때 SSL 프로토콜 지원을 제공합니다. ``SSLObject``\\는 SSL 프로토콜 "
"인스턴스를 나타내지만, 네트워크 I/O 메서드를 구현하지 않고 대신 메모리 버퍼 인터페이스를 제공합니다. 새로운 "
":class:`~ssl.MemoryBIO` 클래스는 파이썬과 SSL 프로토콜 인스턴스 간에 데이터를 전달하는 데 사용할 수 "
"있습니다."

#: ../../whatsnew/3.5.rst:1762
msgid ""
"The memory BIO SSL support is primarily intended to be used in frameworks"
" implementing asynchronous I/O for which :class:`~ssl.SSLSocket`'s "
"readiness model (\"select/poll\") is inefficient."
msgstr ""
"메모리 BIO SSL 지원은 주로 :class:`~ssl.SSLSocket`\\의 준비(readiness) 모델 "
"(\"select/poll\")이 비효율적인 비동기 I/O를 구현하는 프레임워크에서 사용하기 위한 것입니다."

#: ../../whatsnew/3.5.rst:1766
msgid ""
"A new :meth:`SSLContext.wrap_bio() <ssl.SSLContext.wrap_bio>` method can "
"be used to create a new ``SSLObject`` instance."
msgstr ""
"새 :meth:`SSLContext.wrap_bio() <ssl.SSLContext.wrap_bio>` 메서드를 사용하여 새 "
"``SSLObject`` 인스턴스를 만들 수 있습니다."

#: ../../whatsnew/3.5.rst:1771
msgid "Application-Layer Protocol Negotiation Support"
msgstr "응용 프로그램 계층 프로토콜 협상 지원"

#: ../../whatsnew/3.5.rst:1773
msgid "(Contributed by Benjamin Peterson in :issue:`20188`.)"
msgstr "(Contributed by Benjamin Peterson in :issue:`20188`.)"

#: ../../whatsnew/3.5.rst:1775
msgid ""
"Where OpenSSL support is present, the :mod:`ssl` module now implements "
"the *Application-Layer Protocol Negotiation* TLS extension as described "
"in :rfc:`7301`."
msgstr ""
"OpenSSL 지원이 있는 경우, :mod:`ssl` 모듈은 이제 :rfc:`7301`\\에 설명된 대로 *응용 프로그램 계층 "
"프로토콜 협상(Application-Layer Protocol Negotiation)* TLS 확장을 구현합니다."

#: ../../whatsnew/3.5.rst:1779
msgid ""
"The new :meth:`SSLContext.set_alpn_protocols() "
"<ssl.SSLContext.set_alpn_protocols>` can be used to specify which "
"protocols a socket should advertise during the TLS handshake."
msgstr ""
"새로운 :meth:`SSLContext.set_alpn_protocols() "
"<ssl.SSLContext.set_alpn_protocols>`\\는 소켓이 TLS 핸드 셰이크 중에 어떤 프로토콜을 알려야 "
"하는지 지정하는 데 사용할 수 있습니다."

#: ../../whatsnew/3.5.rst:1783
#, fuzzy
msgid ""
"The new :meth:`SSLSocket.selected_alpn_protocol() "
"<ssl.SSLSocket.selected_alpn_protocol>` returns the protocol that was "
"selected during the TLS handshake. The :const:`~ssl.HAS_ALPN` flag "
"indicates whether ALPN support is present."
msgstr ""
"새로운 :meth:`SSLSocket.selected_alpn_protocol() "
"<ssl.SSLSocket.selected_alpn_protocol>`\\은 TLS 핸드 셰이크 중에 선택된 프로토콜을 반환합니다."
" :data:`~ssl.HAS_ALPN` 플래그는 ALPN 지원이 있는지를 나타냅니다."

#: ../../whatsnew/3.5.rst:1790
msgid "Other Changes"
msgstr "기타 변경 사항"

#: ../../whatsnew/3.5.rst:1792
msgid ""
"There is a new :meth:`SSLSocket.version() <ssl.SSLSocket.version>` method"
" to query the actual protocol version in use. (Contributed by Antoine "
"Pitrou in :issue:`20421`.)"
msgstr ""
"사용 중인 실제 프로토콜 버전을 조회하는 새로운 :meth:`SSLSocket.version() "
"<ssl.SSLSocket.version>` 메서드가 있습니다. (Contributed by Antoine Pitrou in "
":issue:`20421`.)"

#: ../../whatsnew/3.5.rst:1796
msgid ""
"The :class:`~ssl.SSLSocket` class now implements a "
":meth:`SSLSocket.sendfile() <ssl.SSLSocket.sendfile>` method. "
"(Contributed by Giampaolo Rodola' in :issue:`17552`.)"
msgstr ""
":class:`~ssl.SSLSocket` 클래스는 이제 :meth:`SSLSocket.sendfile() "
"<ssl.SSLSocket.sendfile>` 메서드를 구현합니다. (Contributed by Giampaolo Rodola' "
"in :issue:`17552`.)"

#: ../../whatsnew/3.5.rst:1800
msgid ""
"The :meth:`SSLSocket.send() <ssl.SSLSocket.send>` method now raises "
"either the :exc:`ssl.SSLWantReadError` or :exc:`ssl.SSLWantWriteError` "
"exception on a non-blocking socket if the operation would block. "
"Previously, it would return ``0``.  (Contributed by Nikolaus Rath in "
":issue:`20951`.)"
msgstr ""
":meth:`SSLSocket.send() <ssl.SSLSocket.send>` 메서드는 이제 연산이 블록 되려고 하면 비 블로킹"
" 소켓에서 :exc:`ssl.SSLWantReadError` 나 :exc:`ssl.SSLWantWriteError` 예외를 "
"발생시킵니다. 이전에는 ``0``\\을 반환했습니다. (Contributed by Nikolaus Rath in "
":issue:`20951`.)"

#: ../../whatsnew/3.5.rst:1805
msgid ""
"The :func:`~ssl.cert_time_to_seconds` function now interprets the input "
"time as UTC and not as local time, per :rfc:`5280`.  Additionally, the "
"return value is always an :class:`int`. (Contributed by Akira Li in "
":issue:`19940`.)"
msgstr ""
":func:`~ssl.cert_time_to_seconds` 함수는 이제 입력 시간을 :rfc:`5280`\\에 따라 현지 시간이 "
"아닌 UTC로 해석합니다. 또한, 반환 값은 항상 :class:`int`\\입니다. (Contributed by Akira Li "
"in :issue:`19940`.)"

#: ../../whatsnew/3.5.rst:1809
msgid ""
"New :meth:`SSLObject.shared_ciphers() <ssl.SSLObject.shared_ciphers>` and"
" :meth:`SSLSocket.shared_ciphers() <ssl.SSLSocket.shared_ciphers>` "
"methods return the list of ciphers sent by the client during the "
"handshake. (Contributed by Benjamin Peterson in :issue:`23186`.)"
msgstr ""
"새로운 :meth:`SSLObject.shared_ciphers() <ssl.SSLObject.shared_ciphers>`\\와 "
":meth:`SSLSocket.shared_ciphers() <ssl.SSLSocket.shared_ciphers>` 메서드는 핸드"
" 셰이크 중에 클라이언트가 보낸 사이퍼 리스트를 반환합니다. (Contributed by Benjamin Peterson in "
":issue:`23186`.)"

#: ../../whatsnew/3.5.rst:1814
msgid ""
"The :meth:`SSLSocket.do_handshake() <ssl.SSLSocket.do_handshake>`, "
":meth:`SSLSocket.read() <ssl.SSLSocket.read>`, "
":meth:`SSLSocket.shutdown() <ssl.SSLSocket.shutdown>`, and "
":meth:`SSLSocket.write() <ssl.SSLSocket.write>` methods of the "
":class:`~ssl.SSLSocket` class no longer reset the socket timeout every "
"time bytes are received or sent. The socket timeout is now the maximum "
"total duration of the method. (Contributed by Victor Stinner in "
":issue:`23853`.)"
msgstr ""
":class:`~ssl.SSLSocket` 클래스의 :meth:`SSLSocket.do_handshake() "
"<ssl.SSLSocket.do_handshake>`, :meth:`SSLSocket.read() "
"<ssl.SSLSocket.read>`, :meth:`SSLSocket.shutdown() "
"<ssl.SSLSocket.shutdown>` 및 :meth:`SSLSocket.write() "
"<ssl.SSLSocket.write>` 메서드는 더는 바이트를 받거나 보낼 때마다 소켓 시간제한을 재설정하지 않습니다. 소켓 "
"시간제한은 이제 메서드의 최대 총 지속 시간입니다. (Contributed by Victor Stinner in "
":issue:`23853`.)"

#: ../../whatsnew/3.5.rst:1822
msgid ""
"The :func:`~ssl.match_hostname` function now supports matching of IP "
"addresses. (Contributed by Antoine Pitrou in :issue:`23239`.)"
msgstr ""
":func:`~ssl.match_hostname` 함수는 이제 IP 주소 일치를 지원합니다. (Contributed by "
"Antoine Pitrou in :issue:`23239`.)"

#: ../../whatsnew/3.5.rst:1827
msgid "sqlite3"
msgstr "sqlite3"

#: ../../whatsnew/3.5.rst:1829
msgid ""
"The :class:`~sqlite3.Row` class now fully supports the sequence protocol,"
" in particular :func:`reversed` iteration and slice indexing. "
"(Contributed by Claudiu Popa in :issue:`10203`; by Lucas Sinclair, "
"Jessica McKellar, and  Serhiy Storchaka in :issue:`13583`.)"
msgstr ""
":class:`~sqlite3.Row` 클래스는 이제 시퀀스 프로토콜, 특히 :func:`reversed` 이터레이션과 슬라이스 "
"인덱싱을 완전히 지원합니다. (Contributed by Claudiu Popa in :issue:`10203`; by Lucas "
"Sinclair, Jessica McKellar, and  Serhiy Storchaka in :issue:`13583`.)"

#: ../../whatsnew/3.5.rst:1838
msgid "subprocess"
msgstr "subprocess"

#: ../../whatsnew/3.5.rst:1840
msgid ""
"The new :func:`~subprocess.run` function has been added. It runs the "
"specified command and returns a :class:`~subprocess.CompletedProcess` "
"object, which describes a finished process.  The new API is more "
"consistent and is the recommended approach to invoking subprocesses in "
"Python code that does not need to maintain compatibility with earlier "
"Python versions. (Contributed by Thomas Kluyver in :issue:`23342`.)"
msgstr ""
"새로운 :func:`~subprocess.run` 함수가 추가되었습니다. 지정된 명령을 실행하고 완료된 프로세스를 설명하는 "
":class:`~subprocess.CompletedProcess` 객체를 반환합니다. 새 API는 더 일관적이며 이전 파이썬 "
"버전과의 호환성을 유지할 필요가 없는 파이썬 코드에서 서브 프로세스를 호출하는 데 권장되는 접근 방식입니다. (Contributed"
" by Thomas Kluyver in :issue:`23342`.)"

#: ../../whatsnew/3.5.rst:1850
msgid ""
">>> subprocess.run([\"ls\", \"-l\"])  # doesn't capture output\n"
"CompletedProcess(args=['ls', '-l'], returncode=0)\n"
"\n"
">>> subprocess.run(\"exit 1\", shell=True, check=True)\n"
"Traceback (most recent call last):\n"
"  ...\n"
"subprocess.CalledProcessError: Command 'exit 1' returned non-zero exit "
"status 1\n"
"\n"
">>> subprocess.run([\"ls\", \"-l\", \"/dev/null\"], "
"stdout=subprocess.PIPE)\n"
"CompletedProcess(args=['ls', '-l', '/dev/null'], returncode=0,\n"
"stdout=b'crw-rw-rw- 1 root root 1, 3 Jan 23 16:23 /dev/null\\n')"
msgstr ""

#: ../../whatsnew/3.5.rst:1864
msgid "sys"
msgstr "sys"

#: ../../whatsnew/3.5.rst:1866
msgid ""
"A new :func:`~sys.set_coroutine_wrapper` function allows setting a global"
" hook that will be called whenever a :term:`coroutine object <coroutine>`"
" is created by an :keyword:`async def` function.  A corresponding "
":func:`~sys.get_coroutine_wrapper` can be used to obtain a currently set "
"wrapper.  Both functions are :term:`provisional <provisional API>`, and "
"are intended for debugging purposes only.  (Contributed by Yury Selivanov"
" in :issue:`24017`.)"
msgstr ""
"새로운 :func:`~sys.set_coroutine_wrapper` 함수를 사용하면 :keyword:`async def` 함수에 "
"의해 :term:`코루틴 객체 <coroutine>`\\가 만들어질 때마다 호출되는 전역 훅을 설정할 수 있습니다. 해당 "
":func:`~sys.get_coroutine_wrapper`\\를 사용하여 현재 설정된 래퍼를 얻을 수 있습니다. 두 함수 모두 "
":term:`잠정적 <provisional API>`\\이며 디버깅 목적으로만 사용됩니다. (Contributed by Yury "
"Selivanov in :issue:`24017`.)"

#: ../../whatsnew/3.5.rst:1874
msgid ""
"A new :func:`~sys.is_finalizing` function can be used to check if the "
"Python interpreter is :term:`shutting down <interpreter shutdown>`. "
"(Contributed by Antoine Pitrou in :issue:`22696`.)"
msgstr ""
"새로운 :func:`~sys.is_finalizing` 함수를 사용하여 파이썬 인터프리터가 :term:`종료 중 "
"<interpreter shutdown>`\\인지 확인할 수 있습니다. (Contributed by Antoine Pitrou in"
" :issue:`22696`.)"

#: ../../whatsnew/3.5.rst:1880
msgid "sysconfig"
msgstr "sysconfig"

#: ../../whatsnew/3.5.rst:1882
msgid ""
"The name of the user scripts directory on Windows now includes the first "
"two components of the Python version. (Contributed by Paul Moore in "
":issue:`23437`.)"
msgstr ""
"이제 윈도우의 사용자 스크립트 디렉터리 이름에 파이썬 버전의 처음 두 구성 요소가 포함됩니다. (Contributed by Paul"
" Moore in :issue:`23437`.)"

#: ../../whatsnew/3.5.rst:1888
msgid "tarfile"
msgstr "tarfile"

#: ../../whatsnew/3.5.rst:1890
msgid ""
"The *mode* argument of the :func:`~tarfile.open` function now accepts "
"``\"x\"`` to request exclusive creation.  (Contributed by Berker Peksag "
"in :issue:`21717`.)"
msgstr ""
":func:`~tarfile.open` 함수의 *mode* 인자는 이제 배타적 생성을 요청하는 ``\"x\"``\\를 받아들입니다."
" (Contributed by Berker Peksag in :issue:`21717`.)"

#: ../../whatsnew/3.5.rst:1893
msgid ""
"The :meth:`TarFile.extractall() <tarfile.TarFile.extractall>` and "
":meth:`TarFile.extract() <tarfile.TarFile.extract>` methods now take a "
"keyword argument *numeric_owner*.  If set to ``True``, the extracted "
"files and directories will be owned by the numeric ``uid`` and ``gid`` "
"from the tarfile. If set to ``False`` (the default, and the behavior in "
"versions prior to 3.5), they will be owned by the named user and group in"
" the tarfile. (Contributed by Michael Vogt and Eric Smith in "
":issue:`23193`.)"
msgstr ""
":meth:`TarFile.extractall() <tarfile.TarFile.extractall>`\\과 "
":meth:`TarFile.extract() <tarfile.TarFile.extract>` 메서드는 이제 키워드 인자 "
"*numeric_owner*\\를 취합니다. ``True``\\로 설정하면, 압축을 푼 파일과 디렉터리는 tar 파일의 숫자 "
"``uid``\\와 ``gid``\\가 소유합니다. ``False``\\(기본값, 또한 3.5 이전 버전의 동작)로 설정하면, "
"tar 파일의 명명된 사용자와 그룹이 소유합니다. (Contributed by Michael Vogt and Eric Smith "
"in :issue:`23193`.)"

#: ../../whatsnew/3.5.rst:1901
msgid ""
"The :meth:`TarFile.list() <tarfile.TarFile.list>` now accepts an optional"
" *members* keyword argument that can be set to a subset of the list "
"returned by :meth:`TarFile.getmembers() <tarfile.TarFile.getmembers>`. "
"(Contributed by Serhiy Storchaka in :issue:`21549`.)"
msgstr ""
":meth:`TarFile.list() <tarfile.TarFile.list>`\\는 이제 "
":meth:`TarFile.getmembers() <tarfile.TarFile.getmembers>`\\가 반환하는 리스트의 부분"
" 집합으로 설정할 수 있는 선택적 *members* 키워드 인자를 받아들입니다. (Contributed by Serhiy "
"Storchaka in :issue:`21549`.)"

#: ../../whatsnew/3.5.rst:1908
msgid "threading"
msgstr "threading"

#: ../../whatsnew/3.5.rst:1910
msgid ""
"Both the :meth:`Lock.acquire() <threading.Lock.acquire>` and "
":meth:`RLock.acquire() <threading.RLock.acquire>` methods now use a "
"monotonic clock for timeout management. (Contributed by Victor Stinner in"
" :issue:`22043`.)"
msgstr ""
"이제 :meth:`Lock.acquire() <threading.Lock.acquire>`\\와 "
":meth:`RLock.acquire() <threading.RLock.acquire>` 메서드 모두 시간제한 관리에 "
"단조증가(monotonic) 시계를 사용합니다. (Contributed by Victor Stinner in "
":issue:`22043`.)"

#: ../../whatsnew/3.5.rst:1917
msgid "time"
msgstr "time"

#: ../../whatsnew/3.5.rst:1919
msgid ""
"The :func:`~time.monotonic` function is now always available. "
"(Contributed by Victor Stinner in :issue:`22043`.)"
msgstr ""
":func:`~time.monotonic` 함수는 이제 항상 사용할 수 있습니다. (Contributed by Victor "
"Stinner in :issue:`22043`.)"

#: ../../whatsnew/3.5.rst:1924
msgid "timeit"
msgstr "timeit"

#: ../../whatsnew/3.5.rst:1926
#, python-brace-format
msgid ""
"A new command line option ``-u`` or :samp:`--unit={U}` can be used to "
"specify the time unit for the timer output.  Supported options are "
"``usec``, ``msec``, or ``sec``.  (Contributed by Julian Gindi in "
":issue:`18983`.)"
msgstr ""
"새로운 명령 줄 옵션 ``-u``\\나 :samp:`--unit={U}` 를 사용하여 타이머 출력의 시간 단위를 지정할 수 "
"있습니다. 지원되는 옵션은 ``usec``, ``msec`` 또는 ``sec``\\입니다. (Contributed by Julian"
" Gindi in :issue:`18983`.)"

#: ../../whatsnew/3.5.rst:1930
msgid ""
"The :func:`~timeit.timeit` function has a new *globals* parameter for "
"specifying the namespace in which the code will be running. (Contributed "
"by Ben Roberts in :issue:`2527`.)"
msgstr ""
":func:`~timeit.timeit` 함수에는 코드가 실행될 이름 공간을 지정하기 위한 새로운 *globals* 매개 변수가 "
"있습니다. (Contributed by Ben Roberts in :issue:`2527`.)"

#: ../../whatsnew/3.5.rst:1936
msgid "tkinter"
msgstr "tkinter"

#: ../../whatsnew/3.5.rst:1938
#, fuzzy
msgid ""
"The :mod:`!tkinter._fix` module used for setting up the Tcl/Tk "
"environment on Windows has been replaced by a private function in the "
":mod:`!_tkinter` module which makes no permanent changes to environment "
"variables. (Contributed by Zachary Ware in :issue:`20035`.)"
msgstr ""
"윈도우에서 Tcl/Tk 환경을 설정하는 데 사용되는 :mod:`tkinter._fix` 모듈은 환경 변수를 영구적으로 변경하지 않는"
" :mod:`_tkinter` 모듈의 내부 함수로 대체되었습니다. (Contributed by Zachary Ware in "
":issue:`20035`.)"

#: ../../whatsnew/3.5.rst:1947
msgid "traceback"
msgstr "traceback"

#: ../../whatsnew/3.5.rst:1949
#, fuzzy
msgid ""
"New :func:`~traceback.walk_stack` and :func:`~traceback.walk_tb` "
"functions to conveniently traverse frame and :ref:`traceback objects "
"<traceback-objects>`. (Contributed by Robert Collins in :issue:`17911`.)"
msgstr ""
"새로운 :func:`~traceback.walk_stack`\\과 :func:`~traceback.walk_tb` 함수로 프레임과 "
"트레이스백 객체를 편리하게 탐색 할 수 있습니다. (Contributed by Robert Collins in "
":issue:`17911`.)"

#: ../../whatsnew/3.5.rst:1954
msgid ""
"New lightweight classes: :class:`~traceback.TracebackException`, "
":class:`~traceback.StackSummary`, and :class:`~traceback.FrameSummary`. "
"(Contributed by Robert Collins in :issue:`17911`.)"
msgstr ""
"새로운 경량 클래스: :class:`~traceback.TracebackException`, "
":class:`~traceback.StackSummary` 및 :class:`~traceback.FrameSummary`. "
"(Contributed by Robert Collins in :issue:`17911`.)"

#: ../../whatsnew/3.5.rst:1958
msgid ""
"Both the :func:`~traceback.print_tb` and :func:`~traceback.print_stack` "
"functions now support negative values for the *limit* argument. "
"(Contributed by Dmitry Kazakov in :issue:`22619`.)"
msgstr ""
":func:`~traceback.print_tb`\\와 :func:`~traceback.print_stack` 함수는 모두 이제 "
"*limit* 인자에 대해 음수 값을 지원합니다. (Contributed by Dmitry Kazakov in "
":issue:`22619`.)"

#: ../../whatsnew/3.5.rst:1964
msgid "types"
msgstr "types"

#: ../../whatsnew/3.5.rst:1966
msgid ""
"A new :func:`~types.coroutine` function to transform :term:`generator "
"<generator iterator>` and :class:`generator-like "
"<collections.abc.Generator>` objects into :term:`awaitables <awaitable>`."
" (Contributed by Yury Selivanov in :issue:`24017`.)"
msgstr ""
":term:`제너레이터 <generator iterator>`\\와 :class:`제너레이터류 "
"<collections.abc.Generator>` 객체를 :term:`어웨이터블 <awaitable>`\\로 변환하는 새로운 "
":func:`~types.coroutine` 함수. (Contributed by Yury Selivanov in "
":issue:`24017`.)"

#: ../../whatsnew/3.5.rst:1972
msgid ""
"A new type called :class:`~types.CoroutineType`, which is used for "
":term:`coroutine` objects created by :keyword:`async def` functions. "
"(Contributed by Yury Selivanov in :issue:`24400`.)"
msgstr ""
":keyword:`async def` 함수로 만든 :term:`코루틴 <coroutine>` 객체에 사용되는 "
":class:`~types.CoroutineType`\\라는 새로운 형. (Contributed by Yury Selivanov "
"in :issue:`24400`.)"

#: ../../whatsnew/3.5.rst:1978
msgid "unicodedata"
msgstr "unicodedata"

#: ../../whatsnew/3.5.rst:1980
#, fuzzy
msgid ""
"The :mod:`unicodedata` module now uses data from `Unicode 8.0.0 "
"<https://unicode.org/versions/Unicode8.0.0/>`_."
msgstr ""
":mod:`unicodedata` 모듈은 이제 `유니코드 8.0.0 "
"<http://unicode.org/versions/Unicode8.0.0/>`_\\의 데이터를 사용합니다."

#: ../../whatsnew/3.5.rst:1985
msgid "unittest"
msgstr "unittest"

#: ../../whatsnew/3.5.rst:1987
msgid ""
"The :meth:`TestLoader.loadTestsFromModule() "
"<unittest.TestLoader.loadTestsFromModule>` method now accepts a keyword-"
"only argument *pattern* which is passed to ``load_tests`` as the third "
"argument.  Found packages are now checked for ``load_tests`` regardless "
"of whether their path matches *pattern*, because it is impossible for a "
"package name to match the default pattern. (Contributed by Robert Collins"
" and Barry A. Warsaw in :issue:`16662`.)"
msgstr ""
":meth:`TestLoader.loadTestsFromModule() "
"<unittest.TestLoader.loadTestsFromModule>` 메서드는 이제 ``load_tests``\\에 세 번째"
" 인자로 전달되는 키워드 전용 인자 *pattern*\\을 받아들입니다. 패키지 이름이 기본 패턴과 일치할 수 없어서, 이제 발견된"
" 패키지의 경로가 *pattern*\\과 일치하는지와 관계없이 ``load_tests``\\를 확인합니다. (Contributed "
"by Robert Collins and Barry A. Warsaw in :issue:`16662`.)"

#: ../../whatsnew/3.5.rst:1994
msgid ""
"Unittest discovery errors now are exposed in the :data:`TestLoader.errors"
" <unittest.TestLoader.errors>` attribute of the "
":class:`~unittest.TestLoader` instance. (Contributed by Robert Collins in"
" :issue:`19746`.)"
msgstr ""
"이제 unittest 디스커버리 에러가 :class:`~unittest.TestLoader` 인스턴스의 "
":data:`TestLoader.errors <unittest.TestLoader.errors>` 어트리뷰트에 표시됩니다. "
"(Contributed by Robert Collins in :issue:`19746`.)"

#: ../../whatsnew/3.5.rst:1999
msgid ""
"A new command line option ``--locals`` to show local variables in "
"tracebacks.  (Contributed by Robert Collins in :issue:`22936`.)"
msgstr ""
"트레이스백에 지역 변수를 표시하는 새로운 명령 줄 옵션 ``--locals``. (Contributed by Robert "
"Collins in :issue:`22936`.)"

#: ../../whatsnew/3.5.rst:2004
msgid "unittest.mock"
msgstr "unittest.mock"

#: ../../whatsnew/3.5.rst:2006
msgid "The :class:`~unittest.mock.Mock` class has the following improvements:"
msgstr ":class:`~unittest.mock.Mock` 클래스는 다음과 같이 개선되었습니다:"

#: ../../whatsnew/3.5.rst:2008
msgid ""
"The class constructor has a new *unsafe* parameter, which causes mock "
"objects to raise :exc:`AttributeError` on attribute names starting with "
"``\"assert\"``. (Contributed by Kushal Das in :issue:`21238`.)"
msgstr ""
"클래스 생성자에는 ``\"assert\"``\\로 시작하는 어트리뷰트 이름에 대해 모의 객체가 "
":exc:`AttributeError`\\를 발생시키는 새로운 *unsafe* 매개 변수가 있습니다. (Contributed by "
"Kushal Das in :issue:`21238`.)"

#: ../../whatsnew/3.5.rst:2013
msgid ""
"A new :meth:`Mock.assert_not_called() "
"<unittest.mock.Mock.assert_not_called>` method to check if the mock "
"object was called. (Contributed by Kushal Das in :issue:`21262`.)"
msgstr ""
"모의 객체가 호출되었는지 확인하는 새로운 :meth:`Mock.assert_not_called() "
"<unittest.mock.Mock.assert_not_called>` 메서드. (Contributed by Kushal Das "
"in :issue:`21262`.)"

#: ../../whatsnew/3.5.rst:2017
msgid ""
"The :class:`~unittest.mock.MagicMock` class now supports "
":meth:`__truediv__`, :meth:`__divmod__` and :meth:`__matmul__` operators."
" (Contributed by Johannes Baiter in :issue:`20968`, and Håkan Lövdahl in "
":issue:`23581` and :issue:`23568`.)"
msgstr ""
":class:`~unittest.mock.MagicMock` 클래스는 이제 :meth:`__truediv__`, "
":meth:`__divmod__` 및 :meth:`__matmul__` 연산자를 지원합니다. (Contributed by "
"Johannes Baiter in :issue:`20968`, and Håkan Lövdahl in :issue:`23581` "
"and :issue:`23568`.)"

#: ../../whatsnew/3.5.rst:2022
msgid ""
"It is no longer necessary to explicitly pass ``create=True`` to the "
":func:`~unittest.mock.patch` function when patching builtin names. "
"(Contributed by Kushal Das in :issue:`17660`.)"
msgstr ""
"내장 이름을 패치 할 때 더는 ``create=True``\\를 :func:`~unittest.mock.patch` 함수에 "
"명시적으로 전달할 필요가 없습니다. (Contributed by Kushal Das in :issue:`17660`.)"

#: ../../whatsnew/3.5.rst:2028
msgid "urllib"
msgstr "urllib"

#: ../../whatsnew/3.5.rst:2030
msgid ""
"A new :class:`request.HTTPPasswordMgrWithPriorAuth "
"<urllib.request.HTTPPasswordMgrWithPriorAuth>` class allows HTTP Basic "
"Authentication credentials to be managed so as to eliminate unnecessary "
"``401`` response handling, or to unconditionally send credentials on the "
"first request in order to communicate with servers that return a ``404`` "
"response instead of a ``401`` if the ``Authorization`` header is not "
"sent. (Contributed by Matej Cepl in :issue:`19494` and Akshit Khurana in "
":issue:`7159`.)"
msgstr ""
"새로운 :class:`request.HTTPPasswordMgrWithPriorAuth "
"<urllib.request.HTTPPasswordMgrWithPriorAuth>` 클래스는 HTTP 기본 인증 자격 증명을 "
"관리하도록 허용하여, 불필요한 ``401`` 응답 처리를 제거하거나, ``Authorization`` 헤더가 전송되지 않았으면 "
"``401`` 대신 ``404`` 응답을 반환하는 서버와 통신하기 위해 첫 번째 요청에서 자격 증명을 무조건 전송하도록 합니다. "
"(Contributed by Matej Cepl in :issue:`19494` and Akshit Khurana in "
":issue:`7159`.)"

#: ../../whatsnew/3.5.rst:2039
msgid ""
"A new *quote_via* argument for the :func:`parse.urlencode() "
"<urllib.parse.urlencode>` function provides a way to control the encoding"
" of query parts if needed. (Contributed by Samwyse and Arnon Yaari in "
":issue:`13866`.)"
msgstr ""
":func:`parse.urlencode() <urllib.parse.urlencode>` 함수에 대한 새로운 *quote_via*"
" 인자는 필요하면 쿼리 부분의 인코딩을 제어하는 방법을 제공합니다. (Contributed by Samwyse and Arnon "
"Yaari in :issue:`13866`.)"

#: ../../whatsnew/3.5.rst:2044
msgid ""
"The :func:`request.urlopen() <urllib.request.urlopen>` function accepts "
"an :class:`ssl.SSLContext` object as a *context* argument, which will be "
"used for the HTTPS connection.  (Contributed by Alex Gaynor in "
":issue:`22366`.)"
msgstr ""
":func:`request.urlopen() <urllib.request.urlopen>` 함수는 HTTPS 연결에 사용될 "
"*context* 인자로 :class:`ssl.SSLContext` 객체를 받아들입니다. (Contributed by Alex "
"Gaynor in :issue:`22366`.)"

#: ../../whatsnew/3.5.rst:2048
msgid ""
"The :func:`parse.urljoin() <urllib.parse.urljoin>` was updated to use the"
" :rfc:`3986` semantics for the resolution of relative URLs, rather than "
":rfc:`1808` and :rfc:`2396`. (Contributed by Demian Brecht and Senthil "
"Kumaran in :issue:`22118`.)"
msgstr ""
":func:`parse.urljoin() <urllib.parse.urljoin>`\\은 상대 URL 확인을 위해 "
":rfc:`1808`\\과 :rfc:`2396` 대신에 :rfc:`3986` 의미 체계를 사용하도록 갱신되었습니다. "
"(Contributed by Demian Brecht and Senthil Kumaran in :issue:`22118`.)"

#: ../../whatsnew/3.5.rst:2055
msgid "wsgiref"
msgstr "wsgiref"

#: ../../whatsnew/3.5.rst:2057
msgid ""
"The *headers* argument of the :class:`headers.Headers "
"<wsgiref.headers.Headers>` class constructor is now optional. "
"(Contributed by Pablo Torres Navarrete and SilentGhost in :issue:`5800`.)"
msgstr ""
":class:`headers.Headers <wsgiref.headers.Headers>` 클래스 생성자의 *headers* 인자는"
" 이제 선택 사항입니다. (Contributed by Pablo Torres Navarrete and SilentGhost in "
":issue:`5800`.)"

#: ../../whatsnew/3.5.rst:2063
msgid "xmlrpc"
msgstr "xmlrpc"

#: ../../whatsnew/3.5.rst:2065
msgid ""
"The :class:`client.ServerProxy <xmlrpc.client.ServerProxy>` class now "
"supports the :term:`context manager` protocol. (Contributed by Claudiu "
"Popa in :issue:`20627`.)"
msgstr ""
":class:`client.ServerProxy <xmlrpc.client.ServerProxy>` 클래스는 이제 "
":term:`컨텍스트 관리자 <context manager>` 프로토콜을 지원합니다. (Contributed by Claudiu "
"Popa in :issue:`20627`.)"

#: ../../whatsnew/3.5.rst:2069
msgid ""
"The :class:`client.ServerProxy <xmlrpc.client.ServerProxy>` constructor "
"now accepts an optional :class:`ssl.SSLContext` instance. (Contributed by"
" Alex Gaynor in :issue:`22960`.)"
msgstr ""
":class:`client.ServerProxy <xmlrpc.client.ServerProxy>` 생성자는 이제 선택적 "
":class:`ssl.SSLContext` 인스턴스를 받아들입니다. (Contributed by Alex Gaynor in "
":issue:`22960`.)"

#: ../../whatsnew/3.5.rst:2075
msgid "xml.sax"
msgstr "xml.sax"

#: ../../whatsnew/3.5.rst:2077
msgid ""
"SAX parsers now support a character stream of the "
":class:`xmlreader.InputSource <xml.sax.xmlreader.InputSource>` object. "
"(Contributed by Serhiy Storchaka in :issue:`2175`.)"
msgstr ""
"SAX 구문 분석기는 이제 :class:`xmlreader.InputSource "
"<xml.sax.xmlreader.InputSource>` 객체의 문자 스트림을 지원합니다. (Contributed by "
"Serhiy Storchaka in :issue:`2175`.)"

#: ../../whatsnew/3.5.rst:2081
msgid ""
":func:`~xml.sax.parseString` now accepts a :class:`str` instance. "
"(Contributed by Serhiy Storchaka in :issue:`10590`.)"
msgstr ""
":func:`~xml.sax.parseString`\\은 이제 :class:`str` 인스턴스를 받아들입니다. "
"(Contributed by Serhiy Storchaka in :issue:`10590`.)"

#: ../../whatsnew/3.5.rst:2086
msgid "zipfile"
msgstr "zipfile"

#: ../../whatsnew/3.5.rst:2088
msgid ""
"ZIP output can now be written to unseekable streams. (Contributed by "
"Serhiy Storchaka in :issue:`23252`.)"
msgstr ""
"이제 ZIP 출력을 위치 변경할 수 없는(unseekable) 스트림에 쓸 수 있습니다. (Contributed by Serhiy "
"Storchaka in :issue:`23252`.)"

#: ../../whatsnew/3.5.rst:2091
msgid ""
"The *mode* argument of :meth:`ZipFile.open() <zipfile.ZipFile.open>` "
"method now accepts ``\"x\"`` to request exclusive creation. (Contributed "
"by Serhiy Storchaka in :issue:`21717`.)"
msgstr ""
":meth:`ZipFile.open() <zipfile.ZipFile.open>` 메서드의 *mode* 인자는 이제 배타적 생성을 "
"요청하는 ``\"x\"``\\를 받아들입니다. (Contributed by Serhiy Storchaka in "
":issue:`21717`.)"

#: ../../whatsnew/3.5.rst:2097
msgid "Other module-level changes"
msgstr "기타 모듈 수준 변경"

#: ../../whatsnew/3.5.rst:2099
#, fuzzy
msgid ""
"Many functions in the :mod:`mmap`, :mod:`!ossaudiodev`, :mod:`socket`, "
":mod:`ssl`, and :mod:`codecs` modules now accept writable :term:`bytes-"
"like objects <bytes-like object>`. (Contributed by Serhiy Storchaka in "
":issue:`23001`.)"
msgstr ""
":mod:`mmap`, :mod:`ossaudiodev`, :mod:`socket`, :mod:`ssl` 및 "
":mod:`codecs` 모듈의 많은 함수는 이제 쓰기 가능한 :term:`바이트열류 객체 <bytes-like "
"object>`\\를 받아들입니다. (Contributed by Serhiy Storchaka in :issue:`23001`.)"

#: ../../whatsnew/3.5.rst:2106
msgid "Optimizations"
msgstr "최적화"

#: ../../whatsnew/3.5.rst:2108
msgid ""
"The :func:`os.walk` function has been sped up by 3 to 5 times on POSIX "
"systems, and by 7 to 20 times on Windows.  This was done using the new "
":func:`os.scandir` function, which exposes file information from the "
"underlying ``readdir`` or ``FindFirstFile``/``FindNextFile`` system "
"calls.  (Contributed by Ben Hoyt with help from Victor Stinner in "
":issue:`23605`.)"
msgstr ""
":func:`os.walk` 함수는 POSIX 시스템에서 3 에서 5배, 윈도우에서 7 에서 20배 빨라졌습니다. 이는 하부 "
"``readdir``\\이나 ``FindFirstFile``/``FindNextFile`` 시스템 호출에서 파일 정보를 노출하는 "
"새로운 :func:`os.scandir` 함수를 사용하여 수행되었습니다. (Contributed by Ben Hoyt with "
"help from Victor Stinner in :issue:`23605`.)"

#: ../../whatsnew/3.5.rst:2114
msgid ""
"Construction of ``bytes(int)`` (filled by zero bytes) is faster and uses "
"less memory for large objects. ``calloc()`` is used instead of "
"``malloc()`` to allocate memory for these objects. (Contributed by Victor"
" Stinner in :issue:`21233`.)"
msgstr ""
"(0 바이트로 채워진) ``bytes(int)``\\의 구성이 더 빠르고 큰 객체에 대해 더 적은 메모리를 사용합니다. "
"``malloc()`` 대신 ``calloc()``\\을 사용하여 이러한 객체에 대한 메모리를 할당합니다. (Contributed "
"by Victor Stinner in :issue:`21233`.)"

#: ../../whatsnew/3.5.rst:2119
msgid ""
"Some operations on :mod:`ipaddress` :class:`~ipaddress.IPv4Network` and "
":class:`~ipaddress.IPv6Network` have been massively sped up, such as "
":meth:`~ipaddress.IPv4Network.subnets`, "
":meth:`~ipaddress.IPv4Network.supernet`, "
":func:`~ipaddress.summarize_address_range`, "
":func:`~ipaddress.collapse_addresses`. The speed up can range from 3 to "
"15 times. (Contributed by Antoine Pitrou, Michel Albert, and Markus in "
":issue:`21486`, :issue:`21487`, :issue:`20826`, :issue:`23266`.)"
msgstr ""
":mod:`ipaddress` :class:`~ipaddress.IPv4Network`\\와 "
":class:`~ipaddress.IPv6Network`\\에 대한 일부 연산(가령 "
":meth:`~ipaddress.IPv4Network.subnets`, "
":meth:`~ipaddress.IPv4Network.supernet`, "
":func:`~ipaddress.summarize_address_range`, "
":func:`~ipaddress.collapse_addresses`)이 크게 빨라졌습니다. 속도 향상 범위는 3 에서 15배입니다."
" (Contributed by Antoine Pitrou, Michel Albert, and Markus in "
":issue:`21486`, :issue:`21487`, :issue:`20826`, :issue:`23266`.)"

#: ../../whatsnew/3.5.rst:2127
msgid ""
"Pickling of :mod:`ipaddress` objects was optimized to produce "
"significantly smaller output.  (Contributed by Serhiy Storchaka in "
":issue:`23133`.)"
msgstr ""
":mod:`ipaddress` 객체의 피클링은 훨씬 더 작은 출력을 생성하도록 최적화되었습니다. (Contributed by "
"Serhiy Storchaka in :issue:`23133`.)"

#: ../../whatsnew/3.5.rst:2130
#, python-format
msgid ""
"Many operations on :class:`io.BytesIO` are now 50% to 100% faster. "
"(Contributed by Serhiy Storchaka in :issue:`15381` and David Wilson in "
":issue:`22003`.)"
msgstr ""
":class:`io.BytesIO`\\에 대한 많은 연산이 이제 50%에서 100% 더 빨라졌습니다. (Contributed by "
"Serhiy Storchaka in :issue:`15381` and David Wilson in :issue:`22003`.)"

#: ../../whatsnew/3.5.rst:2134
msgid ""
"The :func:`marshal.dumps` function is now faster: 65--85% with versions 3"
" and 4, 20--25% with versions 0 to 2 on typical data, and up to 5 times "
"in best cases. (Contributed by Serhiy Storchaka in :issue:`20416` and "
":issue:`23344`.)"
msgstr ""
"이제 :func:`marshal.dumps` 함수가 더 빨라졌습니다: 일반 데이터에서는 버전 3과 4에서 65--85%, 버전 "
"0부터 2에서 20--25%, 최상의 경우 최대 5배입니다. (Contributed by Serhiy Storchaka in "
":issue:`20416` and :issue:`23344`.)"

#: ../../whatsnew/3.5.rst:2139
msgid ""
"The UTF-32 encoder is now 3 to 7 times faster. (Contributed by Serhiy "
"Storchaka in :issue:`15027`.)"
msgstr ""
"UTF-32 인코더는 이제 3 에서 7배 더 빨라졌습니다. (Contributed by Serhiy Storchaka in "
":issue:`15027`.)"

#: ../../whatsnew/3.5.rst:2142
#, python-format
msgid ""
"Regular expressions are now parsed up to 10% faster. (Contributed by "
"Serhiy Storchaka in :issue:`19380`.)"
msgstr ""
"이제 정규식이 최대 10% 더 빠르게 구문 분석됩니다. (Contributed by Serhiy Storchaka in "
":issue:`19380`.)"

#: ../../whatsnew/3.5.rst:2145
msgid ""
"The :func:`json.dumps` function was optimized to run with "
"``ensure_ascii=False`` as fast as with ``ensure_ascii=True``. "
"(Contributed by Naoki Inada in :issue:`23206`.)"
msgstr ""
":func:`json.dumps` 함수는 ``ensure_ascii=False``\\로 실행될 때 "
"``ensure_ascii=True``\\와 같이 빠르게 실행되도록 최적화되었습니다. (Contributed by Naoki "
"Inada in :issue:`23206`.)"

#: ../../whatsnew/3.5.rst:2149
msgid ""
"The :c:func:`PyObject_IsInstance` and :c:func:`PyObject_IsSubclass` "
"functions have been sped up in the common case that the second argument "
"has :class:`type` as its metaclass. (Contributed Georg Brandl by in "
":issue:`22540`.)"
msgstr ""
":c:func:`PyObject_IsInstance`\\와 :c:func:`PyObject_IsSubclass` 함수는 두 번째 "
"인자가 메타 클래스로 :class:`type`\\을 갖는 일반적인 경우에 가속화되었습니다. (Contributed Georg "
"Brandl by in :issue:`22540`.)"

#: ../../whatsnew/3.5.rst:2154
msgid ""
"Method caching was slightly improved, yielding up to 5% performance "
"improvement in some benchmarks. (Contributed by Antoine Pitrou in "
":issue:`22847`.)"
msgstr ""
"메서드 캐싱이 약간 개선되어, 일부 벤치마크에서 최대 5%의 성능 향상을 가져왔습니다. (Contributed by Antoine "
"Pitrou in :issue:`22847`.)"

#: ../../whatsnew/3.5.rst:2158
#, python-format
msgid ""
"Objects from the :mod:`random` module now use 50% less memory on 64-bit "
"builds.  (Contributed by Serhiy Storchaka in :issue:`23488`.)"
msgstr ""
":mod:`random` 모듈의 객체는 이제 64비트 빌드에서 50% 적은 메모리를 사용합니다. (Contributed by "
"Serhiy Storchaka in :issue:`23488`.)"

#: ../../whatsnew/3.5.rst:2161
#, python-format
msgid ""
"The :func:`property` getter calls are up to 25% faster. (Contributed by "
"Joe Jevnik in :issue:`23910`.)"
msgstr ""
":func:`property` 게터 호출은 최대 25% 더 빠릅니다. (Contributed by Joe Jevnik in "
":issue:`23910`.)"

#: ../../whatsnew/3.5.rst:2164
#, python-format
msgid ""
"Instantiation of :class:`fractions.Fraction` is now up to 30% faster. "
"(Contributed by Stefan Behnel in :issue:`22464`.)"
msgstr ""
":class:`fractions.Fraction`\\의 인스턴스 화가 이제 최대 30% 빨라졌습니다. (Contributed by "
"Stefan Behnel in :issue:`22464`.)"

#: ../../whatsnew/3.5.rst:2167
msgid ""
"String methods :meth:`~str.find`, :meth:`~str.rfind`, :meth:`~str.split`,"
" :meth:`~str.partition` and the :keyword:`in` string operator are now "
"significantly faster for searching 1-character substrings. (Contributed "
"by Serhiy Storchaka in :issue:`23573`.)"
msgstr ""
"문자열 메서드 :meth:`~str.find`, :meth:`~str.rfind`, :meth:`~str.split`, "
":meth:`~str.partition` 및 :keyword:`in` 문자열 연산자는 이제 1-문자 하위 문자열을 검색할 때 훨씬 "
"더 빠릅니다. (Contributed by Serhiy Storchaka in :issue:`23573`.)"

#: ../../whatsnew/3.5.rst:2174
msgid "Build and C API Changes"
msgstr "빌드와 C API 변경"

#: ../../whatsnew/3.5.rst:2176
msgid "New ``calloc`` functions were added:"
msgstr "새로운 ``calloc`` 함수가 추가되었습니다:"

#: ../../whatsnew/3.5.rst:2178
msgid ":c:func:`PyMem_RawCalloc`,"
msgstr ":c:func:`PyMem_RawCalloc`,"

#: ../../whatsnew/3.5.rst:2179
msgid ":c:func:`PyMem_Calloc`,"
msgstr ":c:func:`PyMem_Calloc`,"

#: ../../whatsnew/3.5.rst:2180
msgid ":c:func:`PyObject_Calloc`."
msgstr ":c:func:`PyObject_Calloc`."

#: ../../whatsnew/3.5.rst:2182
msgid "(Contributed by Victor Stinner in :issue:`21233`.)"
msgstr "(Contributed by Victor Stinner in :issue:`21233`.)"

#: ../../whatsnew/3.5.rst:2184
msgid "New encoding/decoding helper functions:"
msgstr "새로운 인코딩/디코딩 도우미 함수:"

#: ../../whatsnew/3.5.rst:2186
msgid ":c:func:`Py_DecodeLocale` (replaced ``_Py_char2wchar()``),"
msgstr ":c:func:`Py_DecodeLocale` (``_Py_char2wchar()``\\을 대체),"

#: ../../whatsnew/3.5.rst:2187
msgid ":c:func:`Py_EncodeLocale` (replaced ``_Py_wchar2char()``)."
msgstr ":c:func:`Py_EncodeLocale` (``_Py_wchar2char()``\\을 대체)."

#: ../../whatsnew/3.5.rst:2189
msgid "(Contributed by Victor Stinner in :issue:`18395`.)"
msgstr "(Contributed by Victor Stinner in :issue:`18395`.)"

#: ../../whatsnew/3.5.rst:2191
#, python-brace-format
msgid ""
"A new :c:func:`PyCodec_NameReplaceErrors` function to replace the unicode"
" encode error with ``\\N{...}`` escapes. (Contributed by Serhiy Storchaka"
" in :issue:`19676`.)"
msgstr ""
"유니코드 인코딩 에러를 ``\\N{...}`` 이스케이프로 대체하는 새로운 "
":c:func:`PyCodec_NameReplaceErrors` 함수. (Contributed by Serhiy Storchaka "
"in :issue:`19676`.)"

#: ../../whatsnew/3.5.rst:2195
#, fuzzy
msgid ""
"A new :c:func:`PyErr_FormatV` function similar to :c:func:`PyErr_Format`,"
" but accepts a :c:type:`va_list` argument. (Contributed by Antoine Pitrou"
" in :issue:`18711`.)"
msgstr ""
":c:func:`PyErr_Format`\\과 유사하지만 ``va_list`` 인자를 받아들이는 새로운 "
":c:func:`PyErr_FormatV` 함수. (Contributed by Antoine Pitrou in "
":issue:`18711`.)"

#: ../../whatsnew/3.5.rst:2199
msgid ""
"A new :c:data:`PyExc_RecursionError` exception. (Contributed by Georg "
"Brandl in :issue:`19235`.)"
msgstr ""
"새로운 :c:data:`PyExc_RecursionError` 예외. (Contributed by Georg Brandl in "
":issue:`19235`.)"

#: ../../whatsnew/3.5.rst:2202
msgid ""
"New :c:func:`PyModule_FromDefAndSpec`, "
":c:func:`PyModule_FromDefAndSpec2`, and :c:func:`PyModule_ExecDef` "
"functions introduced by :pep:`489` -- multi-phase extension module "
"initialization. (Contributed by Petr Viktorin in :issue:`24268`.)"
msgstr ""
":pep:`489` -- 다단계 확장 모듈 초기화에 의해 도입된 새로운 "
":c:func:`PyModule_FromDefAndSpec`, :c:func:`PyModule_FromDefAndSpec2` 및 "
":c:func:`PyModule_ExecDef` 함수. (Contributed by Petr Viktorin in "
":issue:`24268`.)"

#: ../../whatsnew/3.5.rst:2207
msgid ""
"New :c:func:`PyNumber_MatrixMultiply` and "
":c:func:`PyNumber_InPlaceMatrixMultiply` functions to perform matrix "
"multiplication. (Contributed by Benjamin Peterson in :issue:`21176`.  See"
" also :pep:`465` for details.)"
msgstr ""
"행렬 곱셈을 수행하는 새로운 :c:func:`PyNumber_MatrixMultiply`\\와 "
":c:func:`PyNumber_InPlaceMatrixMultiply` 함수. (Contributed by Benjamin "
"Peterson in :issue:`21176`. 자세한 내용은 :pep:`465`\\를 참조하십시오.)"

#: ../../whatsnew/3.5.rst:2213
msgid ""
"The :c:member:`PyTypeObject.tp_finalize` slot is now part of the stable "
"ABI."
msgstr ":c:member:`PyTypeObject.tp_finalize` 슬롯은 이제 안정적인 ABI의 일부입니다."

#: ../../whatsnew/3.5.rst:2215
#, fuzzy
msgid ""
"Windows builds now require Microsoft Visual C++ 14.0, which is available "
"as part of `Visual Studio 2015 <https://visualstudio.microsoft.com/en/vs"
"/older-downloads/#visual-studio-2015-and-other-products>`_."
msgstr ""
"이제 윈도우 빌드에는 `Visual Studio 2015 <https://www.visualstudio.com/>`_\\의 일부로 "
"제공되는 Microsoft Visual C++ 14.0이 필요합니다."

#: ../../whatsnew/3.5.rst:2218
msgid ""
"Extension modules now include a platform information tag in their "
"filename on some platforms (the tag is optional, and CPython will import "
"extensions without it, although if the tag is present and mismatched, the"
" extension won't be loaded):"
msgstr ""
"확장 모듈은 이제 일부 플랫폼에서 파일명에 플랫폼 정보 태그를 포함합니다 (태그는 선택 사항이며, CPython은 태그가 없더라도 "
"확장을 임포트 하지만, 태그가 존재하고 일치하지 않으면 확장이 로드되지 않습니다):"

#: ../../whatsnew/3.5.rst:2223
msgid ""
"On Linux, extension module filenames end with "
"``.cpython-<major><minor>m-<architecture>-<os>.pyd``:"
msgstr ""
"리눅스에서, 확장 모듈 파일명은 ``.cpython-<major><minor>m-<architecture>-<os>.pyd``\\로"
" 끝납니다:"

#: ../../whatsnew/3.5.rst:2226 ../../whatsnew/3.5.rst:2243
msgid ""
"``<major>`` is the major number of the Python version; for Python 3.5 "
"this is ``3``."
msgstr "``<major>``\\는 파이썬 버전의 주 번호입니다; 파이썬 3.5의 경우 ``3``\\입니다."

#: ../../whatsnew/3.5.rst:2229 ../../whatsnew/3.5.rst:2246
msgid ""
"``<minor>`` is the minor number of the Python version; for Python 3.5 "
"this is ``5``."
msgstr "``<minor>``\\는 파이썬 버전의 부 번호입니다; 파이썬 3.5의 경우 ``5``\\입니다."

#: ../../whatsnew/3.5.rst:2232
msgid ""
"``<architecture>`` is the hardware architecture the extension module was "
"built to run on. It's most commonly either ``i386`` for 32-bit Intel "
"platforms or ``x86_64`` for 64-bit Intel (and AMD) platforms."
msgstr ""
"``<architecture>``\\는 확장 모듈이 실행되도록 빌드된 하드웨어 아키텍처입니다. 가장 흔하게 32비트 Intel "
"플랫폼의 경우 ``i386`` 또는 64비트 Intel (및 AMD) 플랫폼의 경우 ``x86_64``\\입니다."

#: ../../whatsnew/3.5.rst:2236
msgid ""
"``<os>`` is always ``linux-gnu``, except for extensions built to talk to "
"the 32-bit ABI on 64-bit platforms, in which case it is ``linux-gnu32`` "
"(and ``<architecture>`` will be ``x86_64``)."
msgstr ""
"``<os>``\\는 64비트 플랫폼에서 32비트 ABI와 통신하도록 빌드된 확장을 제외하고 항상 ``linux-"
"gnu``\\입니다. 이 경우 ``linux-gnu32``\\(그리고 ``<architecture>``\\는 "
"``x86_64``\\가 됩니다)입니다."

#: ../../whatsnew/3.5.rst:2240
msgid ""
"On Windows, extension module filenames end with "
"``<debug>.cp<major><minor>-<platform>.pyd``:"
msgstr "윈도우에서, 확장 모듈 파일명은 ``<debug>.cp<major><minor>-<platform>.pyd``\\로 끝납니다:"

#: ../../whatsnew/3.5.rst:2249
msgid ""
"``<platform>`` is the platform the extension module was built for, either"
" ``win32`` for Win32, ``win_amd64`` for Win64, ``win_ia64`` for Windows "
"Itanium 64, and ``win_arm`` for Windows on ARM."
msgstr ""
"``<platform>``\\은 확장 모듈이 빌드된 플랫폼으로, Win32 용 ``win32``, Win64 용 "
"``win_amd64``, 윈도우 Itanium 64 용 ``win_ia64`` 및 ARM 기반 윈도우 용 "
"``win_arm``\\입니다."

#: ../../whatsnew/3.5.rst:2253
msgid ""
"If built in debug mode, ``<debug>`` will be ``_d``, otherwise it will be "
"blank."
msgstr "디버그 모드로 빌드되면, ``<debug>``\\는 ``_d``\\가 되고 그렇지 않으면 공백이 됩니다."

#: ../../whatsnew/3.5.rst:2256
msgid "On OS X platforms, extension module filenames now end with ``-darwin.so``."
msgstr "OS X 플랫폼에서, 확장 모듈 파일명은 이제 ``-darwin.so``\\로 끝납니다."

#: ../../whatsnew/3.5.rst:2258
msgid ""
"On all other platforms, extension module filenames are the same as they "
"were with Python 3.4."
msgstr "다른 모든 플랫폼에서, 확장 모듈 파일명은 파이썬 3.4에서와 같습니다."

#: ../../whatsnew/3.5.rst:2263
msgid "Deprecated"
msgstr "폐지"

#: ../../whatsnew/3.5.rst:2266
msgid "New Keywords"
msgstr "새 키워드"

#: ../../whatsnew/3.5.rst:2268
msgid ""
"``async`` and ``await`` are not recommended to be used as variable, "
"class, function or module names.  Introduced by :pep:`492` in Python 3.5,"
" they will become proper keywords in Python 3.7."
msgstr ""
"``async``\\와 ``await``\\는 변수, 클래스, 함수 또는 모듈 이름으로 사용하지 않는 것이 좋습니다. 파이썬 "
"3.5에서 :pep:`492`\\에 의해 도입되었으며, 파이썬 3.7에서 정식 키워드가 될 것입니다."

#: ../../whatsnew/3.5.rst:2274
msgid "Deprecated Python Behavior"
msgstr "폐지된 파이썬 동작"

#: ../../whatsnew/3.5.rst:2276
msgid ""
"Raising the :exc:`StopIteration` exception inside a generator will now "
"generate a silent :exc:`PendingDeprecationWarning`, which will become a "
"non-silent deprecation warning in Python 3.6 and will trigger a "
":exc:`RuntimeError` in Python 3.7. See :ref:`PEP 479: Change "
"StopIteration handling inside generators <whatsnew-pep-479>` for details."
msgstr ""
"제너레이터 내에서 :exc:`StopIteration` 예외를 발생시키면 이제 조용한 "
":exc:`PendingDeprecationWarning` 을 생성하며, 이는 파이썬 3.6에서 조용하지 않은 폐지 경고가 되고 "
"파이썬 3.7에서 :exc:`RuntimeError`\\를 트리거할 것입니다. 자세한 내용은 :ref:`PEP 479: 제너레이터 "
"내부에서의 StopIteration 처리 변경 <whatsnew-pep-479>`\\을 참조하십시오."

#: ../../whatsnew/3.5.rst:2284
msgid "Unsupported Operating Systems"
msgstr "지원되지 않는 운영 체제"

#: ../../whatsnew/3.5.rst:2286
msgid ""
"Windows XP is no longer supported by Microsoft, thus, per :PEP:`11`, "
"CPython 3.5 is no longer officially supported on this OS."
msgstr ""
"윈도우 XP는 더는 Microsoft에서 지원하지 않아서, :PEP:`11`\\에 따라 CPython 3.5는 이 OS에서 더는 "
"공식적으로 지원되지 않습니다."

#: ../../whatsnew/3.5.rst:2291
msgid "Deprecated Python modules, functions and methods"
msgstr "폐지된 파이썬 모듈, 함수 및 메서드"

#: ../../whatsnew/3.5.rst:2293
msgid ""
"The :mod:`formatter` module has now graduated to full deprecation and is "
"still slated for removal in Python 3.6."
msgstr ":mod:`formatter` 모듈은 이제 완전히 폐지되었으며 파이썬 3.6에서 제거될 예정입니다."

#: ../../whatsnew/3.5.rst:2296
msgid ""
"The :func:`asyncio.async` function is deprecated in favor of "
":func:`~asyncio.ensure_future`."
msgstr ":func:`asyncio.async` 함수는 폐지되었고 :func:`~asyncio.ensure_future`\\로 대체합니다."

#: ../../whatsnew/3.5.rst:2299
#, fuzzy
msgid ""
"The :mod:`!smtpd` module has in the past always decoded the DATA portion "
"of email messages using the ``utf-8`` codec.  This can now be controlled "
"by the new *decode_data* keyword to :class:`!SMTPServer`.  The default "
"value is ``True``, but this default is deprecated.  Specify the "
"*decode_data* keyword with an appropriate value to avoid the deprecation "
"warning."
msgstr ""
":mod:`smtpd` 모듈은 과거에 항상 ``utf-8`` 코덱을 사용하여 이메일 메시지의 DATA 부분을 디코딩했습니다. 이제 "
":class:`~smtpd.SMTPServer`\\에 대한 새로운 *decode_data* 키워드로 제어 할 수 있습니다. 기본값은"
" ``True``\\이지만, 이 기본값은 폐지되었습니다. 폐지 경고를 방지하려면 적절한 값으로 *decode_data* 키워드를 "
"지정하십시오."

#: ../../whatsnew/3.5.rst:2305
msgid ""
"Directly assigning values to the :attr:`~http.cookies.Morsel.key`, "
":attr:`~http.cookies.Morsel.value` and "
":attr:`~http.cookies.Morsel.coded_value` of :class:`http.cookies.Morsel` "
"objects is deprecated.  Use the :meth:`~http.cookies.Morsel.set` method "
"instead.  In addition, the undocumented *LegalChars* parameter of "
":meth:`~http.cookies.Morsel.set` is deprecated, and is now ignored."
msgstr ""
":class:`http.cookies.Morsel` 객체의 :attr:`~http.cookies.Morsel.key`, "
":attr:`~http.cookies.Morsel.value` 및 "
":attr:`~http.cookies.Morsel.coded_value`\\에 값을 직접 대입하는 것은 폐지되었습니다. 대신 "
":meth:`~http.cookies.Morsel.set` 메서드를 사용하십시오. 또한, "
":meth:`~http.cookies.Morsel.set`\\의 문서화되지 않은 *LegalChars* 매개 변수는 폐지되었으며 "
"이제 무시됩니다."

#: ../../whatsnew/3.5.rst:2312
msgid ""
"Passing a format string as keyword argument *format_string* to the "
":meth:`~string.Formatter.format` method of the :class:`string.Formatter` "
"class has been deprecated. (Contributed by Serhiy Storchaka in "
":issue:`23671`.)"
msgstr ""
"포맷 문자열을 키워드 인자 *format_string*\\으로 :class:`string.Formatter` 클래스의 "
":meth:`~string.Formatter.format` 메서드에 전달하는 것은 폐지되었습니다. (Contributed by "
"Serhiy Storchaka in :issue:`23671`.)"

#: ../../whatsnew/3.5.rst:2317
msgid ""
"The :func:`platform.dist` and :func:`platform.linux_distribution` "
"functions are now deprecated.  Linux distributions use too many different"
" ways of describing themselves, so the functionality is left to a "
"package. (Contributed by Vajrasky Kok and Berker Peksag in "
":issue:`1322`.)"
msgstr ""
":func:`platform.dist`\\와 :func:`platform.linux_distribution` 함수는 이제 "
"폐지되었습니다. 리눅스 배포판은 자신을 설명하는 데 너무 많은 다른 방법을 사용하므로, 기능은 패키지에 남겨집니다. "
"(Contributed by Vajrasky Kok and Berker Peksag in :issue:`1322`.)"

#: ../../whatsnew/3.5.rst:2322
msgid ""
"The previously undocumented ``from_function`` and ``from_builtin`` "
"methods of :class:`inspect.Signature` are deprecated.  Use the new "
":meth:`Signature.from_callable() <inspect.Signature.from_callable>` "
"method instead. (Contributed by Yury Selivanov in :issue:`24248`.)"
msgstr ""
"이전에 문서화되지 않은 :class:`inspect.Signature`\\의 ``from_function``\\과 "
"``from_builtin`` 메서드는 폐지되었습니다. 대신 새로운 :meth:`Signature.from_callable() "
"<inspect.Signature.from_callable>` 메서드를 사용하십시오. (Contributed by Yury "
"Selivanov in :issue:`24248`.)"

#: ../../whatsnew/3.5.rst:2327
msgid ""
"The :func:`inspect.getargspec` function is deprecated and scheduled to be"
" removed in Python 3.6.  (See :issue:`20438` for details.)"
msgstr ""
":func:`inspect.getargspec` 함수는 폐지되었으며 파이썬 3.6에서 제거될 예정입니다. (자세한 내용은 "
":issue:`20438`\\을 참조하십시오.)"

#: ../../whatsnew/3.5.rst:2330
msgid ""
"The :mod:`inspect` :func:`~inspect.getfullargspec`, "
":func:`~inspect.getcallargs`, and :func:`~inspect.formatargspec` "
"functions are deprecated in favor of the :func:`inspect.signature` API. "
"(Contributed by Yury Selivanov in :issue:`20438`.)"
msgstr ""
":mod:`inspect` :func:`~inspect.getfullargspec`, "
":func:`~inspect.getcallargs` 및 :func:`~inspect.formatargspec` 함수는 폐지되었고 "
":func:`inspect.signature` API로 대체합니다. (Contributed by Yury Selivanov in "
":issue:`20438`.)"

#: ../../whatsnew/3.5.rst:2335
msgid ""
":func:`~inspect.getargvalues` and :func:`~inspect.formatargvalues` "
"functions were inadvertently marked as deprecated with the release of "
"Python 3.5.0."
msgstr ""
":func:`~inspect.getargvalues`\\와 :func:`~inspect.formatargvalues` 함수는 파이썬"
" 3.5.0 릴리스에서 실수로 폐지된 것으로 표시되었습니다."

#: ../../whatsnew/3.5.rst:2338
msgid ""
"Use of :const:`re.LOCALE` flag with str patterns or :const:`re.ASCII` is "
"now deprecated.  (Contributed by Serhiy Storchaka in :issue:`22407`.)"
msgstr ""
"str 패턴이나 :const:`re.ASCII`\\와 함께 :const:`re.LOCALE` 플래그를 사용하는 것은 이제 "
"폐지되었습니다. (Contributed by Serhiy Storchaka in :issue:`22407`.)"

#: ../../whatsnew/3.5.rst:2341
msgid ""
"Use of unrecognized special sequences consisting of ``'\\'`` and an ASCII"
" letter in regular expression patterns and replacement patterns now "
"raises a deprecation warning and will be forbidden in Python 3.6. "
"(Contributed by Serhiy Storchaka in :issue:`23622`.)"
msgstr ""
"정규식 패턴과 치환 패턴에서 ``'\\'``\\와 ASCII 문자로 구성된 인식할 수 없는 특수 시퀀스를 사용하면 이제 폐지 경고가"
" 발생하며 파이썬 3.6에서는 금지됩니다. (Contributed by Serhiy Storchaka in "
":issue:`23622`.)"

#: ../../whatsnew/3.5.rst:2346
msgid ""
"The undocumented and unofficial *use_load_tests* default argument of the "
":meth:`unittest.TestLoader.loadTestsFromModule` method now is deprecated "
"and ignored. (Contributed by Robert Collins and Barry A. Warsaw in "
":issue:`16662`.)"
msgstr ""
":meth:`unittest.TestLoader.loadTestsFromModule` 메서드의 문서화되지 않고 비공식적인 "
"*use_load_tests* 기본 인자는 이제 폐지되었으며 무시됩니다. (Contributed by Robert Collins "
"and Barry A. Warsaw in :issue:`16662`.)"

#: ../../whatsnew/3.5.rst:2353
msgid "Removed"
msgstr "제거"

#: ../../whatsnew/3.5.rst:2356
msgid "API and Feature Removals"
msgstr "API 및 기능 제거"

#: ../../whatsnew/3.5.rst:2358
msgid ""
"The following obsolete and previously deprecated APIs and features have "
"been removed:"
msgstr "다음과 같은 더는 사용되지 않고 이전에 폐지된 API와 기능이 제거되었습니다:"

#: ../../whatsnew/3.5.rst:2361
msgid ""
"The ``__version__`` attribute has been dropped from the email package.  "
"The email code hasn't been shipped separately from the stdlib for a long "
"time, and the ``__version__`` string was not updated in the last few "
"releases."
msgstr ""
"``__version__`` 어트리뷰트가 이메일 패키지에서 삭제되었습니다. 이메일 코드는 오랫동안 표준 라이브러리와 별도로 배포되지"
" 않았으며 ``__version__`` 문자열은 지난 몇 번의 릴리스에서 갱신되지 않았습니다."

#: ../../whatsnew/3.5.rst:2365
msgid ""
"The internal ``Netrc`` class in the :mod:`ftplib` module was deprecated "
"in 3.4, and has now been removed. (Contributed by Matt Chaput in "
":issue:`6623`.)"
msgstr ""
":mod:`ftplib` 모듈의 내부 ``Netrc`` 클래스는 3.4에서 폐지되었으며, 이제 제거되었습니다. "
"(Contributed by Matt Chaput in :issue:`6623`.)"

#: ../../whatsnew/3.5.rst:2369
msgid "The concept of ``.pyo`` files has been removed."
msgstr "``.pyo`` 파일의 개념이 제거되었습니다."

#: ../../whatsnew/3.5.rst:2371
msgid ""
"The JoinableQueue class in the provisional :mod:`asyncio` module was "
"deprecated in 3.4.4 and is now removed. (Contributed by A. Jesse Jiryu "
"Davis in :issue:`23464`.)"
msgstr ""
"잠정적 :mod:`asyncio` 모듈의 JoinableQueue 클래스는 3.4.4에서 폐지되었으며 이제 제거되었습니다. "
"(Contributed by A. Jesse Jiryu Davis in :issue:`23464`.)"

#: ../../whatsnew/3.5.rst:2377
msgid "Porting to Python 3.5"
msgstr "파이썬 3.5로 이식하기"

#: ../../whatsnew/3.5.rst:2379
msgid ""
"This section lists previously described changes and other bugfixes that "
"may require changes to your code."
msgstr "이 섹션은 코드 변경이 필요할 수 있는 이전에 설명한 변경 사항과 기타 버그 수정을 나열합니다."

#: ../../whatsnew/3.5.rst:2384
msgid "Changes in Python behavior"
msgstr "파이썬 동작의 변경"

#: ../../whatsnew/3.5.rst:2386
msgid ""
"Due to an oversight, earlier Python versions erroneously accepted the "
"following syntax::"
msgstr "부주의로 인해, 이전 파이썬 버전은 다음 문법을 잘못 수락했습니다::"

#: ../../whatsnew/3.5.rst:2389
msgid ""
"f(1 for x in [1], *args)\n"
"f(1 for x in [1], **kwargs)"
msgstr ""

#: ../../whatsnew/3.5.rst:2392
msgid ""
"Python 3.5 now correctly raises a :exc:`SyntaxError`, as generator "
"expressions must be put in parentheses if not a sole argument to a "
"function."
msgstr ""
"함수에 대한 유일한 인자가 아닌 경우 제너레이터 표현식을 괄호로 묶어야 하므로, 파이썬 3.5는 이제 "
":exc:`SyntaxError`\\를 올바르게 발생시킵니다."

#: ../../whatsnew/3.5.rst:2397
msgid "Changes in the Python API"
msgstr "파이썬 API의 변경"

#: ../../whatsnew/3.5.rst:2399
msgid ""
":pep:`475`: System calls are now retried when interrupted by a signal "
"instead of raising :exc:`InterruptedError` if the Python signal handler "
"does not raise an exception."
msgstr ""
":pep:`475`: 시스템 호출은 시그널에 의해 중단될 때 파이썬 시그널 처리기가 예외를 발생시키지 않으면 이제 "
":exc:`InterruptedError`\\를 발생시키는 대신 재시도됩니다."

#: ../../whatsnew/3.5.rst:2403
msgid ""
"Before Python 3.5, a :class:`datetime.time` object was considered to be "
"false if it represented midnight in UTC.  This behavior was considered "
"obscure and error-prone and has been removed in Python 3.5.  See "
":issue:`13936` for full details."
msgstr ""
"파이썬 3.5 이전에는, :class:`datetime.time` 객체가 UTC로 자정을 나타내면 거짓으로 간주했습니다. 이 동작은"
" 모호하고 에러가 발생하기 쉬운 것으로 간주하여 파이썬 3.5에서 제거되었습니다. 자세한 내용은 :issue:`13936`\\을 "
"참조하십시오."

#: ../../whatsnew/3.5.rst:2408
#, fuzzy
msgid ""
"The :meth:`ssl.SSLSocket.send` method now raises either "
":exc:`ssl.SSLWantReadError` or :exc:`ssl.SSLWantWriteError` on a non-"
"blocking socket if the operation would block.  Previously, it would "
"return ``0``.  (Contributed by Nikolaus Rath in :issue:`20951`.)"
msgstr ""
":meth:`ssl.SSLSocket.send()` 메서드는 이제 연산이 블록 되려고 하면 비 블로킹 소켓에서 "
":exc:`ssl.SSLWantReadError` 나 :exc:`ssl.SSLWantWriteError`\\를 발생시킵니다. "
"이전에는 ``0``\\을 반환했습니다. (Contributed by Nikolaus Rath in :issue:`20951`.)"

#: ../../whatsnew/3.5.rst:2413
msgid ""
"The ``__name__`` attribute of generators is now set from the function "
"name, instead of being set from the code name. Use "
"``gen.gi_code.co_name`` to retrieve the code name. Generators also have a"
" new ``__qualname__`` attribute, the qualified name, which is now used "
"for the representation of a generator (``repr(gen)``). (Contributed by "
"Victor Stinner in :issue:`21205`.)"
msgstr ""
"제너레이터의 ``__name__`` 어트리뷰트는 이제 코드 이름에서 설정되는 대신 함수 이름에서 설정됩니다. 코드 이름을 꺼내려면 "
"``gen.gi_code.co_name``\\을 사용하십시오. 제너레이터에는 이제 제너레이터의 표현(``repr(gen)``)에 "
"사용되는 정규화된 이름인 새로운 ``__qualname__`` 어트리뷰트도 있습니다. (Contributed by Victor "
"Stinner in :issue:`21205`.)"

#: ../../whatsnew/3.5.rst:2420
#, fuzzy
msgid ""
"The deprecated \"strict\" mode and argument of "
":class:`~html.parser.HTMLParser`, :meth:`!HTMLParser.error`, and the "
":exc:`!HTMLParserError` exception have been removed.  (Contributed by "
"Ezio Melotti in :issue:`15114`.) The *convert_charrefs* argument of "
":class:`~html.parser.HTMLParser` is now ``True`` by default.  "
"(Contributed by Berker Peksag in :issue:`21047`.)"
msgstr ""
"폐지된 \"strict\" 모드와 :class:`~html.parser.HTMLParser`\\의 인자, "
":meth:`HTMLParser.error` 및 :exc:`HTMLParserError` 예외가 제거되었습니다. "
"(Contributed by Ezio Melotti in :issue:`15114`.) "
":class:`~html.parser.HTMLParser`\\의 *convert_charrefs* 인자는 이제 기본적으로 "
"``True``\\입니다. (Contributed by Berker Peksag in :issue:`21047`.)"

#: ../../whatsnew/3.5.rst:2426
msgid ""
"Although it is not formally part of the API, it is worth noting for "
"porting purposes (ie: fixing tests) that error messages that were "
"previously of the form \"'sometype' does not support the buffer "
"protocol\" are now of the form \"a :term:`bytes-like object` is required,"
" not 'sometype'\". (Contributed by Ezio Melotti in :issue:`16518`.)"
msgstr ""
"공식적으로 API의 일부는 아니지만, 이전에 \"'sometype' does not support the buffer "
"protocol\" 형식이었던 에러 메시지는 이제 \"a :term:`bytes-like object` is required, "
"not 'sometype'\" 형식임을 이식의 목적(즉: 테스트 수선)을 위해 유의할 필요가 있습니다. (Contributed by"
" Ezio Melotti in :issue:`16518`.)"

#: ../../whatsnew/3.5.rst:2432
msgid ""
"If the current directory is set to a directory that no longer exists then"
" :exc:`FileNotFoundError` will no longer be raised and instead "
":meth:`~importlib.machinery.FileFinder.find_spec` will return ``None`` "
"**without** caching ``None`` in :data:`sys.path_importer_cache`, which is"
" different than the typical case (:issue:`22834`)."
msgstr ""
"현재 디렉터리가 더는 존재하지 않는 디렉터리로 설정되면 :exc:`FileNotFoundError` 가 더는 발생하지 않고 대신 "
":meth:`~importlib.machinery.FileFinder.find_spec`\\이 "
":data:`sys.path_importer_cache`\\에서 ``None``\\을 캐싱하지 **않고** ``None``\\을 "
"반환합니다. 이는 일반적일 때와 다릅니다 (:issue:`22834`)."

#: ../../whatsnew/3.5.rst:2438
msgid ""
"HTTP status code and messages from :mod:`http.client` and "
":mod:`http.server` were refactored into a common "
":class:`~http.HTTPStatus` enum.  The values in :mod:`http.client` and "
":mod:`http.server` remain available for backwards compatibility.  "
"(Contributed by Demian Brecht in :issue:`21793`.)"
msgstr ""
":mod:`http.client`\\와 :mod:`http.server`\\의 HTTP 상태 코드와 메시지는 공통 "
":class:`~http.HTTPStatus` 열거형으로 리팩토링 되었습니다. :mod:`http.client`\\와 "
":mod:`http.server`\\의 값은 이전 버전과의 호환성을 위해 계속 사용할 수 있습니다. (Contributed by "
"Demian Brecht in :issue:`21793`.)"

#: ../../whatsnew/3.5.rst:2443
msgid ""
"When an import loader defines "
":meth:`importlib.machinery.Loader.exec_module` it is now expected to also"
" define :meth:`~importlib.machinery.Loader.create_module` (raises a "
":exc:`DeprecationWarning` now, will be an error in Python 3.6). If the "
"loader inherits from :class:`importlib.abc.Loader` then there is nothing "
"to do, else simply define "
":meth:`~importlib.machinery.Loader.create_module` to return ``None``.  "
"(Contributed by Brett Cannon in :issue:`23014`.)"
msgstr ""
"임포트 로더가 :meth:`importlib.machinery.Loader.exec_module`\\을 정의할 때 이제 "
":meth:`~importlib.machinery.Loader.create_module`\\도 정의해야 합니다 (지금은 "
":exc:`DeprecationWarning`\\를 발생시키고, 파이썬 3.6에서는 에러가 될 것입니다). 로더가 "
":class:`importlib.abc.Loader`\\에서 상속하면 할 일이 없습니다. 그렇지 않으면 단순히 ``None``\\을"
" 반환하는 :meth:`~importlib.machinery.Loader.create_module`\\을 정의합니다. "
"(Contributed by Brett Cannon in :issue:`23014`.)"

#: ../../whatsnew/3.5.rst:2451
msgid ""
"The :func:`re.split` function always ignored empty pattern matches, so "
"the ``\"x*\"`` pattern worked the same as ``\"x+\"``, and the ``\"\\b\"``"
" pattern never worked.  Now :func:`re.split` raises a warning if the "
"pattern could match an empty string.  For compatibility, use patterns "
"that never match an empty string (e.g. ``\"x+\"`` instead of ``\"x*\"``)."
"  Patterns that could only match an empty string (such as ``\"\\b\"``) "
"now raise an error. (Contributed by Serhiy Storchaka in :issue:`22818`.)"
msgstr ""
":func:`re.split` 함수는 항상 빈 패턴 일치를 무시해서, ``\"x*\"`` 패턴은 ``\"x+\"``\\와 같게 "
"작동하고, ``\"\\b\"`` 패턴은 절대 작동하지 않습니다. 이제 :func:`re.split`\\은 패턴이 빈 문자열과 일치 "
"할 수 있으면 경고를 발생시킵니다. 호환성을 위해, 절대 빈 문자열과 일치하지 않는 패턴을 사용하십시오 (예를 들어 "
"``\"x*\"`` 대신 ``\"x+\"``). 빈 문자열과만 일치 할 수 있는 패턴(가령 ``\"\\b\"``)은 이제 에러를 "
"발생시킵니다. (Contributed by Serhiy Storchaka in :issue:`22818`.)"

#: ../../whatsnew/3.5.rst:2459
msgid ""
"The :class:`http.cookies.Morsel` dict-like interface has been made self "
"consistent:  morsel comparison now takes the "
":attr:`~http.cookies.Morsel.key` and :attr:`~http.cookies.Morsel.value` "
"into account, :meth:`~http.cookies.Morsel.copy` now results in a "
":class:`~http.cookies.Morsel` instance rather than a :class:`dict`, and "
":meth:`~http.cookies.Morsel.update` will now raise an exception if any of"
" the keys in the update dictionary are invalid.  In addition, the "
"undocumented *LegalChars* parameter of :func:`~http.cookies.Morsel.set` "
"is deprecated and is now ignored.  (Contributed by Demian Brecht in "
":issue:`2211`.)"
msgstr ""
":class:`http.cookies.Morsel` 딕셔너리류 인터페이스가 자체 일관성이 있도록 만들었습니다: 이제 Morsel "
"비교는 :attr:`~http.cookies.Morsel.key`\\와 "
":attr:`~http.cookies.Morsel.value`\\를 고려하고, "
":meth:`~http.cookies.Morsel.copy`\\는 이제 :class:`dict`\\가 아닌 "
":class:`~http.cookies.Morsel` 인스턴스를 생성하며, "
":meth:`~http.cookies.Morsel.update`\\는 이제 업데이트 딕셔너리의 키 중 하나라도 잘못되면 예외를 "
"발생시킵니다. 또한, :func:`~http.cookies.Morsel.set`\\의 문서화되지 않은 *LegalChars* 매개 "
"변수는 폐지되었으며 이제 무시됩니다. (Contributed by Demian Brecht in :issue:`2211`.)"

#: ../../whatsnew/3.5.rst:2469
#, fuzzy
msgid ""
":pep:`488` has removed ``.pyo`` files from Python and introduced the "
"optional ``opt-`` tag in ``.pyc`` file names. The "
":func:`importlib.util.cache_from_source` has gained an *optimization* "
"parameter to help control the ``opt-`` tag. Because of this, the "
"*debug_override* parameter of the function is now deprecated. ``.pyo`` "
"files are also no longer supported as a file argument to the Python "
"interpreter and thus serve no purpose when distributed on their own (i.e."
" sourceless code distribution). Due to the fact that the magic number for"
" bytecode has changed in Python 3.5, all old ``.pyo`` files from previous"
" versions of Python are invalid regardless of this PEP."
msgstr ""
":pep:`488`\\은 파이썬에서 ``.pyo`` 파일을 제거하고 ``.pyc`` 파일 이름에 선택적 ``opt-`` 태그를 "
"도입했습니다. :func:`importlib.util.cache_from_source`\\는 ``opt-`` 태그를 제어하는 데 "
"도움이 되는 *optimization* 매개 변수를 얻었습니다. 이로 인해, 함수의 *debug_override* 매개 변수는 이제"
" 폐지되었습니다. 또한 `.pyo` 파일은 더는 파이썬 인터프리터에 대한 파일 인자로 지원되지 않아서 자체적으로 배포될 때 (즉, "
"소스 없는 코드 배포) 용도가 없습니다. 파이썬 3.5에서 바이트 코드의 매직 넘버가 변경되었기 때문에, 이전 버전의 파이썬에서 "
"가져온 모든 이전 `.pyo` 파일은 이 PEP에 관계없이 유효하지 않습니다."

#: ../../whatsnew/3.5.rst:2480
#, fuzzy
msgid ""
"The :mod:`socket` module now exports the "
":const:`~socket.CAN_RAW_FD_FRAMES` constant on linux 3.6 and greater."
msgstr ""
":mod:`socket` 모듈은 이제 리눅스 3.6 이상에서 :data:`~socket.CAN_RAW_FD_FRAMES` 상수를 "
"내보냅니다."

#: ../../whatsnew/3.5.rst:2483
msgid ""
"The :func:`ssl.cert_time_to_seconds` function now interprets the input "
"time as UTC and not as local time, per :rfc:`5280`.  Additionally, the "
"return value is always an :class:`int`. (Contributed by Akira Li in "
":issue:`19940`.)"
msgstr ""
":func:`ssl.cert_time_to_seconds` 함수는 이제 입력 시간을 :rfc:`5280`\\에 따라 현지 시간이 "
"아닌 UTC로 해석합니다. 또한, 반환 값은 항상 :class:`int`\\입니다. (Contributed by Akira Li "
"in :issue:`19940`.)"

#: ../../whatsnew/3.5.rst:2487
msgid ""
"The ``pygettext.py`` Tool now uses the standard +NNNN format for "
"timezones in the POT-Creation-Date header."
msgstr "``pygettext.py`` 도구는 이제 POT-Creation-Date 헤더의 시간대에 표준 +NNNN 형식을 사용합니다."

#: ../../whatsnew/3.5.rst:2490
msgid ""
"The :mod:`smtplib` module now uses :data:`sys.stderr` instead of the "
"previous module-level :data:`stderr` variable for debug output.  If your "
"(test) program depends on patching the module-level variable to capture "
"the debug output, you will need to update it to capture sys.stderr "
"instead."
msgstr ""
":mod:`smtplib` 모듈은 이제 디버그 출력을 위해 이전 모듈 수준 :data:`stderr` 변수 대신 "
":data:`sys.stderr`\\을 사용합니다. (테스트) 프로그램이 디버그 출력을 캡처하기 위해 모듈 수준 변수를 패치 하는 "
"데 의존하면, 대신 sys.stderr을 캡처하도록 갱신해야 합니다."

#: ../../whatsnew/3.5.rst:2495
msgid ""
"The :meth:`str.startswith` and :meth:`str.endswith` methods no longer "
"return ``True`` when finding the empty string and the indexes are "
"completely out of range.  (Contributed by Serhiy Storchaka in "
":issue:`24284`.)"
msgstr ""
":meth:`str.startswith`\\와 :meth:`str.endswith` 메서드는 빈 문자열을 찾고 인덱스가 완전히 "
"범위를 벗어났을 때 더는 ``True``\\를 반환하지 않습니다. (Contributed by Serhiy Storchaka in "
":issue:`24284`.)"

#: ../../whatsnew/3.5.rst:2499
msgid ""
"The :func:`inspect.getdoc` function now returns documentation strings "
"inherited from base classes.  Documentation strings no longer need to be "
"duplicated if the inherited documentation is appropriate.  To suppress an"
" inherited string, an empty string must be specified (or the "
"documentation may be filled in).  This change affects the output of the "
":mod:`pydoc` module and the :func:`help` function. (Contributed by Serhiy"
" Storchaka in :issue:`15582`.)"
msgstr ""
":func:`inspect.getdoc` 함수는 이제 베이스 클래스에서 상속된 설명서 문자열을 반환합니다. 상속된 설명서가 적절하면"
" 설명서 문자열을 더는 복제할 필요가 없습니다. 상속된 문자열을 억제하려면, 빈 문자열을 지정해야 합니다 (또는 설명서를 채울 수 "
"있습니다). 이 변경 사항은 :mod:`pydoc` 모듈과 :func:`help` 함수의 출력에 영향을 줍니다. "
"(Contributed by Serhiy Storchaka in :issue:`15582`.)"

#: ../../whatsnew/3.5.rst:2507
msgid ""
"Nested :func:`functools.partial` calls are now flattened.  If you were "
"relying on the previous behavior, you can now either add an attribute to "
"a :func:`functools.partial` object or you can create a subclass of "
":func:`functools.partial`. (Contributed by Alexander Belopolsky in "
":issue:`7830`.)"
msgstr ""
"중첩된 :func:`functools.partial` 호출은 이제 평활화됩니다. 이전 동작에 의존한다면, 이제 "
":func:`functools.partial` 객체에 어트리뷰트를 추가하거나 :func:`functools.partial`\\의 "
"서브 클래스를 만들 수 있습니다. (Contributed by Alexander Belopolsky in "
":issue:`7830`.)"

#: ../../whatsnew/3.5.rst:2514
msgid "Changes in the C API"
msgstr "C API의 변경"

#: ../../whatsnew/3.5.rst:2516
#, fuzzy
msgid ""
"The undocumented :c:member:`!format` member of the (non-public) "
":c:type:`PyMemoryViewObject` structure has been removed. All extensions "
"relying on the relevant parts in ``memoryobject.h`` must be rebuilt."
msgstr ""
"(비공개) :c:type:`PyMemoryViewObject` 구조체의 문서화되지 않은 "
":c:member:`~PyMemoryViewObject.format` 멤버가 제거되었습니다. ``memoryobject.h``\\의"
" 관련 부분에 의존하는 모든 확장은 다시 빌드해야 합니다."

#: ../../whatsnew/3.5.rst:2521
msgid ""
"The :c:type:`PyMemAllocator` structure was renamed to "
":c:type:`PyMemAllocatorEx` and a new ``calloc`` field was added."
msgstr ""
":c:type:`PyMemAllocator` 구조체는 :c:type:`PyMemAllocatorEx` 로 이름이 바뀌었고 새로운 "
"``calloc`` 필드가 추가되었습니다."

#: ../../whatsnew/3.5.rst:2524
#, fuzzy
msgid ""
"Removed non-documented macro :c:macro:`!PyObject_REPR()` which leaked "
"references. Use format character ``%R`` in "
":c:func:`PyUnicode_FromFormat`-like functions to format the :func:`repr` "
"of the object. (Contributed by Serhiy Storchaka in :issue:`22453`.)"
msgstr ""
"참조를 누출한 문서화되지 않은 매크로 :c:macro:`PyObject_REPR`\\을 제거했습니다. "
":c:func:`PyUnicode_FromFormat`\\과 유사한 함수에서 객체의 :func:`repr`\\을 포맷하려면 포맷 "
"문자 ``%R``\\을 사용하십시오. (Contributed by Serhiy Storchaka in :issue:`22453`.)"

#: ../../whatsnew/3.5.rst:2529
#, fuzzy
msgid ""
"Because the lack of the :attr:`~type.__module__` attribute breaks "
"pickling and introspection, a deprecation warning is now raised for "
"builtin types without the :attr:`~type.__module__` attribute.  This will "
"be an :exc:`AttributeError` in the future. (Contributed by Serhiy "
"Storchaka in :issue:`20204`.)"
msgstr ""
":attr:`__module__` 어트리뷰트가 없으면 피클링과 인트로스펙션이 망가지므로, :attr:`__module__` "
"어트리뷰트가 없는 내장형에 대해 폐지 경고가 발생합니다. 이것은 향후 AttributeError가 될 것입니다. "
"(Contributed by Serhiy Storchaka in :issue:`20204`.)"

#: ../../whatsnew/3.5.rst:2535
#, fuzzy
msgid ""
"As part of the :pep:`492` implementation, the ``tp_reserved`` slot of "
":c:type:`PyTypeObject` was replaced with a "
":c:member:`~PyTypeObject.tp_as_async` slot.  Refer to :ref:`coro-objects`"
" for new types, structures and functions."
msgstr ""
":pep:`492` 구현의 일부로, :c:type:`PyTypeObject`\\의 ``tp_reserved`` 슬롯이 "
":c:member:`tp_as_async` 슬롯으로 대체되었습니다. 새로운 형, 구조체 및 함수는 :ref:`coro-"
"objects`\\를 참조하십시오."

#: ../../whatsnew/3.5.rst:2542
msgid "Notable changes in Python 3.5.4"
msgstr "파이썬 3.5.4의 주목할만한 변경 사항"

#: ../../whatsnew/3.5.rst:2545
msgid "New ``make regen-all`` build target"
msgstr "새로운 ``make regen-all`` 빌드 대상"

#: ../../whatsnew/3.5.rst:2547
msgid ""
"To simplify cross-compilation, and to ensure that CPython can reliably be"
" compiled without requiring an existing version of Python to already be "
"available, the autotools-based build system no longer attempts to "
"implicitly recompile generated files based on file modification times."
msgstr ""
"교차 컴파일을 단순화하고, 기존 버전의 파이썬이 이미 사용할 수 있어야 한다는 요구 사항 없이 CPython을 안정적으로 컴파일 할"
" 수 있도록, autotools 기반 빌드 시스템은 더는 파일 수정 시간을 기반으로 생성된 파일을 묵시적으로 재컴파일하려고 시도하지"
" 않습니다."

#: ../../whatsnew/3.5.rst:2552
msgid ""
"Instead, a new ``make regen-all`` command has been added to force "
"regeneration of these files when desired (e.g. after an initial version "
"of Python has already been built based on the pregenerated versions)."
msgstr ""
"대신, 원할 때 이러한 파일을 강제로 재생성하기 위해 새로운 ``make regen-all`` 명령이 추가되었습니다 (예를 들어 "
"사전 생성된 버전을 기반으로 파이썬의 초기 버전이 이미 빌드된 후)."

#: ../../whatsnew/3.5.rst:2556
msgid ""
"More selective regeneration targets are also defined - see "
":source:`Makefile.pre.in` for details."
msgstr "보다 선택적 재생성 대상도 정의됩니다 - 자세한 내용은 :source:`Makefile.pre.in`\\을 참조하십시오."

#: ../../whatsnew/3.5.rst:2559 ../../whatsnew/3.5.rst:2572
msgid "(Contributed by Victor Stinner in :issue:`23404`.)"
msgstr "(Contributed by Victor Stinner in :issue:`23404`.)"

#: ../../whatsnew/3.5.rst:2565
msgid "Removal of ``make touch`` build target"
msgstr "``make touch`` 빌드 대상 제거"

#: ../../whatsnew/3.5.rst:2567
msgid ""
"The ``make touch`` build target previously used to request implicit "
"regeneration of generated files by updating their modification times has "
"been removed."
msgstr "수정 시간을 갱신하여 생성된 파일의 묵시적 재생성을 요청하는 데 이전에 사용된 ``make touch`` 빌드 대상이 제거되었습니다."

#: ../../whatsnew/3.5.rst:2570
msgid "It has been replaced by the new ``make regen-all`` target."
msgstr "새로운 ``make regen-all`` 대상으로 대체되었습니다."

