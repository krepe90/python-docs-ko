# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2017, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-04-17 23:44+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: Dong-gweon Oh <flowdas@gmail.com>\n"
"Language-Team: Korean (https://python.flowdas.com)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.17.0\n"

#: ../../c-api/long.rst:6
msgid "Integer Objects"
msgstr "정수 객체"

#: ../../c-api/long.rst:11
msgid ""
"All integers are implemented as \"long\" integer objects of arbitrary "
"size."
msgstr "모든 정수는 임의의 크기의 \"long\" 정수 객체로 구현됩니다."

#: ../../c-api/long.rst:13
msgid ""
"On error, most ``PyLong_As*`` APIs return ``(return type)-1`` which "
"cannot be distinguished from a number.  Use :c:func:`PyErr_Occurred` to "
"disambiguate."
msgstr ""
"에러 시, 대부분의 ``PyLong_As*`` API는 숫자와 구별할 수 없는 ``(return type)-1``\\을 반환합니다."
" 모호성을 제거하려면 :c:func:`PyErr_Occurred`\\를 사용하십시오."

#: ../../c-api/long.rst:18
msgid "This subtype of :c:type:`PyObject` represents a Python integer object."
msgstr "이 :c:type:`PyObject`\\의 서브 형은 파이썬 정수 객체를 나타냅니다."

#: ../../c-api/long.rst:23
msgid ""
"This instance of :c:type:`PyTypeObject` represents the Python integer "
"type. This is the same object as :class:`int` in the Python layer."
msgstr ""
"이 :c:type:`PyTypeObject` 인스턴스는 파이썬 정수 형을 나타냅니다. 이것은 파이썬 계층의 "
":class:`int`\\와 같은 객체입니다."

#: ../../c-api/long.rst:29
msgid ""
"Return true if its argument is a :c:type:`PyLongObject` or a subtype of "
":c:type:`PyLongObject`.  This function always succeeds."
msgstr ""
"인자가 :c:type:`PyLongObject`\\이나 :c:type:`PyLongObject`\\의 서브 형이면 참을 반환합니다."
" 이 함수는 항상 성공합니다."

#: ../../c-api/long.rst:35
msgid ""
"Return true if its argument is a :c:type:`PyLongObject`, but not a "
"subtype of :c:type:`PyLongObject`.  This function always succeeds."
msgstr ""
"인자가 :c:type:`PyLongObject` 이지만 :c:type:`PyLongObject`\\의 서브 형이 아니면 참을 "
"반환합니다. 이 함수는 항상 성공합니다."

#: ../../c-api/long.rst:41
msgid ""
"Return a new :c:type:`PyLongObject` object from *v*, or ``NULL`` on "
"failure."
msgstr "*v*\\로부터 새 :c:type:`PyLongObject` 객체를 반환하거나, 실패하면 ``NULL``\\을 반환합니다."

#: ../../c-api/long.rst:43
#, fuzzy
msgid ""
"The current implementation keeps an array of integer objects for all "
"integers between ``-5`` and ``256``. When you create an int in that range"
" you actually just get back a reference to the existing object."
msgstr ""
"현재 구현은 ``-5``\\와 ``256`` 사이의 모든 정수에 대해 정수 객체의 배열을 유지합니다. 이 범위에 있는 정수를 만들면"
" 실제로는 기존 객체에 대한 참조만 반환됩니다."

#: ../../c-api/long.rst:50
#, fuzzy
msgid ""
"Return a new :c:type:`PyLongObject` object from a C :c:expr:`unsigned "
"long`, or ``NULL`` on failure."
msgstr ""
"C :c:type:`unsigned long`\\으로부터 새 :c:type:`PyLongObject` 객체를 반환하거나, 실패하면 "
"``NULL``\\을 반환합니다."

#: ../../c-api/long.rst:56
msgid ""
"Return a new :c:type:`PyLongObject` object from a C :c:type:`Py_ssize_t`,"
" or ``NULL`` on failure."
msgstr ""
"C :c:type:`Py_ssize_t`\\로부터 새 :c:type:`PyLongObject` 객체를 반환하거나, 실패하면 "
"``NULL``\\을 반환합니다."

#: ../../c-api/long.rst:62
msgid ""
"Return a new :c:type:`PyLongObject` object from a C :c:type:`size_t`, or "
"``NULL`` on failure."
msgstr ""
"C :c:type:`size_t`\\로부터 새 :c:type:`PyLongObject` 객체를 반환하거나, 실패하면 "
"``NULL``\\을 반환합니다."

#: ../../c-api/long.rst:68
#, fuzzy
msgid ""
"Return a new :c:type:`PyLongObject` object from a C :c:expr:`long long`, "
"or ``NULL`` on failure."
msgstr ""
"C :c:type:`long long`\\으로부터 새 :c:type:`PyLongObject` 객체를 반환하거나, 실패하면 "
"``NULL``\\을 반환합니다."

#: ../../c-api/long.rst:74
#, fuzzy
msgid ""
"Return a new :c:type:`PyLongObject` object from a C :c:expr:`unsigned "
"long long`, or ``NULL`` on failure."
msgstr ""
"C :c:type:`unsigned long long`\\으로부터 새 :c:type:`PyLongObject` 객체를 반환하거나, "
"실패하면 ``NULL``\\을 반환합니다."

#: ../../c-api/long.rst:80
msgid ""
"Return a new :c:type:`PyLongObject` object from the integer part of *v*, "
"or ``NULL`` on failure."
msgstr ""
"*v*\\의 정수 부분으로부터 새 :c:type:`PyLongObject` 객체를 반환하거나, 실패하면 ``NULL``\\을 "
"반환합니다."

#: ../../c-api/long.rst:86
#, fuzzy
msgid ""
"Return a new :c:type:`PyLongObject` based on the string value in *str*, "
"which is interpreted according to the radix in *base*, or ``NULL`` on "
"failure.  If *pend* is non-``NULL``, *\\*pend* will point to the end of "
"*str* on success or to the first character that could not be processed on"
" error.  If *base* is ``0``, *str* is interpreted using the "
":ref:`integers` definition; in this case, leading zeros in a non-zero "
"decimal number raises a :exc:`ValueError`.  If *base* is not ``0``, it "
"must be between ``2`` and ``36``, inclusive.  Leading and trailing "
"whitespace and single underscores after a base specifier and between "
"digits are ignored.  If there are no digits or *str* is not NULL-"
"terminated following the digits and trailing whitespace, "
":exc:`ValueError` will be raised."
msgstr ""
"*str*\\의 문자열 값을 기반으로 한 새 :c:type:`PyLongObject`\\를 반환합니다. 문자열 값은 "
"*base*\\의 진수(기수)에 따라 해석됩니다. *pend*\\가 ``NULL``\\이 아니면, *\\*pend*\\는 숫자 "
"표현의 뒤에 오는 첫 번째 문자를 가리킵니다. *base*\\가 ``0``\\이면, *str*\\은 :ref:`integers` "
"정의를 사용해서 해석됩니다; 이때, 0이 아닌 십진수의 선행 0은 :exc:`ValueError`\\를 발생시킵니다. "
"*base*\\가 ``0``\\이 아니면, ``2``\\와 ``36`` 사이에 있어야 하며, 경계를 포함합니다. 선행 공백과 진수 "
"지정자 뒤나 숫자 사이의 단일 밑줄은 무시됩니다. 숫자가 없으면 :exc:`ValueError`\\가 발생합니다."

#: ../../c-api/long.rst:97
msgid ""
"Python methods :meth:`int.to_bytes` and :meth:`int.from_bytes` to convert"
" a :c:type:`PyLongObject` to/from an array of bytes in base ``256``. You "
"can call those from C using :c:func:`PyObject_CallMethod`."
msgstr ""

#: ../../c-api/long.rst:104
msgid ""
"Convert a sequence of Unicode digits in the string *u* to a Python "
"integer value."
msgstr "문자열 *u*\\에 있는 유니코드 숫자의 시퀀스를 파이썬 정숫값으로 변환합니다."

#: ../../c-api/long.rst:112
msgid ""
"Create a Python integer from the pointer *p*. The pointer value can be "
"retrieved from the resulting value using :c:func:`PyLong_AsVoidPtr`."
msgstr ""
"포인터 *p*\\로부터 파이썬 정수를 만듭니다. 포인터 값은 :c:func:`PyLong_AsVoidPtr`\\를 사용하여 "
"결괏값에서 조회할 수 있습니다."

#: ../../c-api/long.rst:118
msgid ""
"Create a Python integer from the value contained in the first *n_bytes* "
"of *buffer*, interpreted as a two's-complement signed number."
msgstr ""

#: ../../c-api/long.rst:121
msgid ""
"*flags* are as for :c:func:`PyLong_AsNativeBytes`. Passing ``-1`` will "
"select the native endian that CPython was compiled with and assume that "
"the most-significant bit is a sign bit. Passing "
"``Py_ASNATIVEBYTES_UNSIGNED_BUFFER`` will produce the same result as "
"calling :c:func:`PyLong_FromUnsignedNativeBytes`. Other flags are "
"ignored."
msgstr ""

#: ../../c-api/long.rst:132
msgid ""
"Create a Python integer from the value contained in the first *n_bytes* "
"of *buffer*, interpreted as an unsigned number."
msgstr ""

#: ../../c-api/long.rst:135
msgid ""
"*flags* are as for :c:func:`PyLong_AsNativeBytes`. Passing ``-1`` will "
"select the native endian that CPython was compiled with and assume that "
"the most-significant bit is not a sign bit. Flags other than endian are "
"ignored."
msgstr ""

#: ../../c-api/long.rst:148 ../../c-api/long.rst:184
#, fuzzy
msgid ""
"Return a C :c:expr:`long` representation of *obj*.  If *obj* is not an "
"instance of :c:type:`PyLongObject`, first call its "
":meth:`~object.__index__` method (if present) to convert it to a "
":c:type:`PyLongObject`."
msgstr ""
"*obj*\\의 C :c:type:`long` 표현을 반환합니다. *obj*\\가 :c:type:`PyLongObject`\\의 "
"인스턴스가 아니면, (있다면) 먼저 :meth:`__index__`\\나 :meth:`__int__` 메서드를 호출하여 "
":c:type:`PyLongObject`\\로 변환합니다."

#: ../../c-api/long.rst:152
#, fuzzy
msgid ""
"Raise :exc:`OverflowError` if the value of *obj* is out of range for a "
":c:expr:`long`."
msgstr "*obj*\\의 값이 :c:type:`long`\\의 범위를 벗어나면 :exc:`OverflowError`\\를 발생시킵니다."

#: ../../c-api/long.rst:155 ../../c-api/long.rst:193 ../../c-api/long.rst:214
#: ../../c-api/long.rst:234 ../../c-api/long.rst:257
msgid "Returns ``-1`` on error.  Use :c:func:`PyErr_Occurred` to disambiguate."
msgstr "에러 시 ``-1``\\을 반환합니다. 모호성을 제거하려면 :c:func:`PyErr_Occurred`\\를 사용하십시오."

#: ../../c-api/long.rst:157 ../../c-api/long.rst:195 ../../c-api/long.rst:216
#: ../../c-api/long.rst:238 ../../c-api/long.rst:322 ../../c-api/long.rst:342
#, fuzzy
msgid "Use :meth:`~object.__index__` if available."
msgstr "사용할 수 있으면 :meth:`__index__`\\를 사용합니다."

#: ../../c-api/long.rst:160 ../../c-api/long.rst:198 ../../c-api/long.rst:219
#: ../../c-api/long.rst:241 ../../c-api/long.rst:325 ../../c-api/long.rst:345
msgid "This function will no longer use :meth:`~object.__int__`."
msgstr ""

#: ../../c-api/long.rst:167
msgid ""
"A :term:`soft deprecated` alias. Exactly equivalent to the preferred "
"``PyLong_AsLong``. In particular, it can fail with :exc:`OverflowError` "
"or another exception."
msgstr ""

#: ../../c-api/long.rst:171
msgid "The function is soft deprecated."
msgstr ""

#: ../../c-api/long.rst:176
msgid ""
"Similar to :c:func:`PyLong_AsLong`, but store the result in a C "
":c:expr:`int` instead of a C :c:expr:`long`."
msgstr ""

#: ../../c-api/long.rst:188
#, fuzzy
msgid ""
"If the value of *obj* is greater than :c:macro:`LONG_MAX` or less than "
":c:macro:`LONG_MIN`, set *\\*overflow* to ``1`` or ``-1``, respectively, "
"and return ``-1``; otherwise, set *\\*overflow* to ``0``.  If any other "
"exception occurs set *\\*overflow* to ``0`` and return ``-1`` as usual."
msgstr ""
"*obj*\\의 값이 :const:`LONG_MAX`\\보다 크거나 :const:`LONG_MIN`\\보다 작으면, "
"*\\*overflow*\\를 각각 ``1``\\이나 ``-1``\\로 설정하고 ``-1``\\을 반환합니다; 그렇지 않으면, "
"*\\*overflow*\\를 ``0``\\으로 설정합니다. 다른 예외가 발생하면 *\\*overflow*\\를 ``0``\\으로 "
"설정하고 ``-1``\\을 평소와 같이 반환합니다."

#: ../../c-api/long.rst:207 ../../c-api/long.rst:225
#, fuzzy
msgid ""
"Return a C :c:expr:`long long` representation of *obj*.  If *obj* is not "
"an instance of :c:type:`PyLongObject`, first call its "
":meth:`~object.__index__` method (if present) to convert it to a "
":c:type:`PyLongObject`."
msgstr ""
"*obj*\\의 C :c:type:`long long` 표현을 반환합니다. *obj*\\가 "
":c:type:`PyLongObject`\\의 인스턴스가 아니면, (있다면) 먼저 :meth:`__index__`\\나 "
":meth:`__int__` 메서드를 호출하여 :c:type:`PyLongObject`\\로 변환합니다."

#: ../../c-api/long.rst:211
#, fuzzy
msgid ""
"Raise :exc:`OverflowError` if the value of *obj* is out of range for a "
":c:expr:`long long`."
msgstr ""
"*obj*\\의 값이 :c:type:`long long`\\의 범위를 벗어나면 :exc:`OverflowError`\\를 "
"발생시킵니다."

#: ../../c-api/long.rst:229
#, fuzzy
msgid ""
"If the value of *obj* is greater than :c:macro:`LLONG_MAX` or less than "
":c:macro:`LLONG_MIN`, set *\\*overflow* to ``1`` or ``-1``, respectively,"
" and return ``-1``; otherwise, set *\\*overflow* to ``0``.  If any other "
"exception occurs set *\\*overflow* to ``0`` and return ``-1`` as usual."
msgstr ""
"*obj*\\의 값이 :const:`LLONG_MAX`\\보다 크거나 :const:`LLONG_MIN`\\보다 작으면, "
"*\\*overflow*\\를 각각 ``1``\\이나 ``-1``\\로 설정하고 ``-1``\\을 반환합니다; 그렇지 않으면, "
"*\\*overflow*\\를 ``0``\\으로 설정합니다. 다른 예외가 발생하면 *\\*overflow*\\를 ``0``\\으로 "
"설정하고 ``-1``\\을 평소와 같이 반환합니다."

#: ../../c-api/long.rst:251
msgid ""
"Return a C :c:type:`Py_ssize_t` representation of *pylong*.  *pylong* "
"must be an instance of :c:type:`PyLongObject`."
msgstr ""
"*pylong*\\의 C :c:type:`Py_ssize_t` 표현을 반환합니다. *pylong*\\은 "
":c:type:`PyLongObject`\\의 인스턴스여야 합니다."

#: ../../c-api/long.rst:254
msgid ""
"Raise :exc:`OverflowError` if the value of *pylong* is out of range for a"
" :c:type:`Py_ssize_t`."
msgstr ""
"*pylong*\\의 값이 :c:type:`Py_ssize_t`\\의 범위를 벗어나면 :exc:`OverflowError`\\를 "
"발생시킵니다."

#: ../../c-api/long.rst:266
#, fuzzy
msgid ""
"Return a C :c:expr:`unsigned long` representation of *pylong*.  *pylong* "
"must be an instance of :c:type:`PyLongObject`."
msgstr ""
"*pylong*\\의 C :c:type:`unsigned long` 표현을 반환합니다. *pylong*\\은 "
":c:type:`PyLongObject`\\의 인스턴스여야 합니다."

#: ../../c-api/long.rst:269
#, fuzzy
msgid ""
"Raise :exc:`OverflowError` if the value of *pylong* is out of range for a"
" :c:expr:`unsigned long`."
msgstr ""
"*pylong*\\의 값이 :c:type:`unsigned long`\\의 범위를 벗어나면 "
":exc:`OverflowError`\\를 발생시킵니다."

#: ../../c-api/long.rst:272
msgid ""
"Returns ``(unsigned long)-1`` on error. Use :c:func:`PyErr_Occurred` to "
"disambiguate."
msgstr ""
"에러 시 ``(unsigned long)-1``\\을 반환합니다. 모호성을 제거하려면 "
":c:func:`PyErr_Occurred`\\를 사용하십시오."

#: ../../c-api/long.rst:282
msgid ""
"Return a C :c:type:`size_t` representation of *pylong*.  *pylong* must be"
" an instance of :c:type:`PyLongObject`."
msgstr ""
"*pylong*\\의 C :c:type:`size_t` 표현을 반환합니다. *pylong*\\은 "
":c:type:`PyLongObject`\\의 인스턴스여야 합니다."

#: ../../c-api/long.rst:285
msgid ""
"Raise :exc:`OverflowError` if the value of *pylong* is out of range for a"
" :c:type:`size_t`."
msgstr ""
"*pylong*\\의 값이 :c:type:`size_t`\\의 범위를 벗어나면 :exc:`OverflowError`\\를 "
"발생시킵니다."

#: ../../c-api/long.rst:288
msgid ""
"Returns ``(size_t)-1`` on error. Use :c:func:`PyErr_Occurred` to "
"disambiguate."
msgstr ""
"에러 시 ``(size_t)-1``\\을 반환합니다. 모호성을 제거하려면 :c:func:`PyErr_Occurred`\\를 "
"사용하십시오."

#: ../../c-api/long.rst:297
#, fuzzy
msgid ""
"Return a C :c:expr:`unsigned long long` representation of *pylong*.  "
"*pylong* must be an instance of :c:type:`PyLongObject`."
msgstr ""
"*pylong*\\의 C :c:type:`unsigned long long` 표현을 반환합니다. *pylong*\\은 "
":c:type:`PyLongObject`\\의 인스턴스여야 합니다."

#: ../../c-api/long.rst:300
#, fuzzy
msgid ""
"Raise :exc:`OverflowError` if the value of *pylong* is out of range for "
"an :c:expr:`unsigned long long`."
msgstr ""
"*pylong*\\의 값이 :c:type:`unsigned long long`\\의 범위를 벗어나면 "
":exc:`OverflowError`\\를 발생시킵니다."

#: ../../c-api/long.rst:303
msgid ""
"Returns ``(unsigned long long)-1`` on error. Use :c:func:`PyErr_Occurred`"
" to disambiguate."
msgstr ""
"에러 시 ``(unsigned long long)-1``\\을 반환합니다. 모호성을 제거하려면 "
":c:func:`PyErr_Occurred`\\를 사용하십시오."

#: ../../c-api/long.rst:306
msgid "A negative *pylong* now raises :exc:`OverflowError`, not :exc:`TypeError`."
msgstr "음의 *pylong*\\는 이제 :exc:`TypeError`\\가 아니라 :exc:`OverflowError`\\를 발생시킵니다."

#: ../../c-api/long.rst:312
#, fuzzy
msgid ""
"Return a C :c:expr:`unsigned long` representation of *obj*.  If *obj* is "
"not an instance of :c:type:`PyLongObject`, first call its "
":meth:`~object.__index__` method (if present) to convert it to a "
":c:type:`PyLongObject`."
msgstr ""
"*obj*\\의 C :c:type:`unsigned long` 표현을 반환합니다. *obj*\\가 "
":c:type:`PyLongObject`\\의 인스턴스가 아니면, (있다면) 먼저 :meth:`__index__`\\나 "
":meth:`__int__` 메서드를 호출하여 :c:type:`PyLongObject`\\로 변환합니다."

#: ../../c-api/long.rst:316
#, fuzzy
msgid ""
"If the value of *obj* is out of range for an :c:expr:`unsigned long`, "
"return the reduction of that value modulo ``ULONG_MAX + 1``."
msgstr ""
"*obj*\\의 값이 :c:type:`unsigned long`\\의 범위를 벗어나면, 그 값의 모듈로 ``ULONG_MAX + "
"1`` 환원을 반환합니다."

#: ../../c-api/long.rst:319
msgid ""
"Returns ``(unsigned long)-1`` on error.  Use :c:func:`PyErr_Occurred` to "
"disambiguate."
msgstr ""
"에러 시 ``(unsigned long)-1``\\을 반환합니다. 모호성을 제거하려면 "
":c:func:`PyErr_Occurred`\\를 사용하십시오."

#: ../../c-api/long.rst:331
#, fuzzy
msgid ""
"Return a C :c:expr:`unsigned long long` representation of *obj*.  If "
"*obj* is not an instance of :c:type:`PyLongObject`, first call its "
":meth:`~object.__index__` method (if present) to convert it to a "
":c:type:`PyLongObject`."
msgstr ""
"*obj*\\의 C :c:type:`unsigned long long` 표현을 반환합니다. *obj*\\가 "
":c:type:`PyLongObject`\\의 인스턴스가 아니면, (있다면) 먼저 :meth:`__index__`\\나 "
":meth:`__int__` 메서드를 호출하여 :c:type:`PyLongObject`\\로 변환합니다."

#: ../../c-api/long.rst:336
#, fuzzy
msgid ""
"If the value of *obj* is out of range for an :c:expr:`unsigned long "
"long`, return the reduction of that value modulo ``ULLONG_MAX + 1``."
msgstr ""
"*obj*\\의 값이 :c:type:`unsigned long long`\\의 범위를 벗어나면, 그 값의 모듈로 "
"``ULLONG_MAX + 1`` 환원을 반환합니다."

#: ../../c-api/long.rst:339
msgid ""
"Returns ``(unsigned long long)-1`` on error.  Use "
":c:func:`PyErr_Occurred` to disambiguate."
msgstr ""
"에러 시 ``(unsigned long long)-1``\\을 반환합니다. 모호성을 제거하려면 "
":c:func:`PyErr_Occurred`\\를 사용하십시오."

#: ../../c-api/long.rst:351
#, fuzzy
msgid ""
"Return a C :c:expr:`double` representation of *pylong*.  *pylong* must be"
" an instance of :c:type:`PyLongObject`."
msgstr ""
"*pylong*\\의 C :c:type:`double` 표현을 반환합니다. *pylong*\\은 "
":c:type:`PyLongObject`\\의 인스턴스여야 합니다."

#: ../../c-api/long.rst:354
#, fuzzy
msgid ""
"Raise :exc:`OverflowError` if the value of *pylong* is out of range for a"
" :c:expr:`double`."
msgstr ""
"*pylong*\\의 값이 :c:type:`double`\\의 범위를 벗어나면 :exc:`OverflowError`\\를 "
"발생시킵니다."

#: ../../c-api/long.rst:357
msgid "Returns ``-1.0`` on error.  Use :c:func:`PyErr_Occurred` to disambiguate."
msgstr "에러 시 ``-1.0``\\을 반환합니다. 모호성을 제거하려면 :c:func:`PyErr_Occurred`\\를 사용하십시오."

#: ../../c-api/long.rst:362
#, fuzzy
msgid ""
"Convert a Python integer *pylong* to a C :c:expr:`void` pointer. If "
"*pylong* cannot be converted, an :exc:`OverflowError` will be raised.  "
"This is only assured to produce a usable :c:expr:`void` pointer for "
"values created with :c:func:`PyLong_FromVoidPtr`."
msgstr ""
"파이썬 정수 *pylong*\\을 C :c:type:`void` 포인터로 변환합니다. *pylong*\\을 변환할 수 없으면, "
":exc:`OverflowError`\\가 발생합니다. 이것은 :c:func:`PyLong_FromVoidPtr`\\로 만들어진 "
"값에 대해서만 사용할 수 있는 :c:type:`void` 포인터를 생성하는 것이 보장됩니다."

#: ../../c-api/long.rst:367
msgid "Returns ``NULL`` on error.  Use :c:func:`PyErr_Occurred` to disambiguate."
msgstr "에러 시 ``NULL``\\을 반환합니다. 모호성을 제거하려면 :c:func:`PyErr_Occurred`\\를 사용하십시오."

#: ../../c-api/long.rst:372
msgid ""
"Copy the Python integer value *pylong* to a native *buffer* of size "
"*n_bytes*. The *flags* can be set to ``-1`` to behave similarly to a C "
"cast, or to values documented below to control the behavior."
msgstr ""

#: ../../c-api/long.rst:376
msgid ""
"Returns ``-1`` with an exception raised on error.  This may happen if "
"*pylong* cannot be interpreted as an integer, or if *pylong* was negative"
" and the ``Py_ASNATIVEBYTES_REJECT_NEGATIVE`` flag was set."
msgstr ""

#: ../../c-api/long.rst:380
msgid ""
"Otherwise, returns the number of bytes required to store the value. If "
"this is equal to or less than *n_bytes*, the entire value was copied. All"
" *n_bytes* of the buffer are written: large buffers are padded with "
"zeroes."
msgstr ""

#: ../../c-api/long.rst:385
msgid ""
"If the returned value is greater than than *n_bytes*, the value was "
"truncated: as many of the lowest bits of the value as could fit are "
"written, and the higher bits are ignored. This matches the typical "
"behavior of a C-style downcast."
msgstr ""

#: ../../c-api/long.rst:392
msgid ""
"Overflow is not considered an error. If the returned value is larger than"
" *n_bytes*, most significant bits were discarded."
msgstr ""

#: ../../c-api/long.rst:395
msgid "``0`` will never be returned."
msgstr ""

#: ../../c-api/long.rst:397
msgid "Values are always copied as two's-complement."
msgstr ""

#: ../../c-api/long.rst:399
msgid "Usage example::"
msgstr ""

#: ../../c-api/long.rst:401
#, python-brace-format
msgid ""
"int32_t value;\n"
"Py_ssize_t bytes = PyLong_AsNativeBytes(pylong, &value, sizeof(value), "
"-1);\n"
"if (bytes < 0) {\n"
"    // Failed. A Python exception was set with the reason.\n"
"    return NULL;\n"
"}\n"
"else if (bytes <= (Py_ssize_t)sizeof(value)) {\n"
"    // Success!\n"
"}\n"
"else {\n"
"    // Overflow occurred, but 'value' contains the truncated\n"
"    // lowest bits of pylong.\n"
"}"
msgstr ""

#: ../../c-api/long.rst:415
msgid ""
"Passing zero to *n_bytes* will return the size of a buffer that would be "
"large enough to hold the value. This may be larger than technically "
"necessary, but not unreasonably so. If *n_bytes=0*, *buffer* may be "
"``NULL``."
msgstr ""

#: ../../c-api/long.rst:422
msgid ""
"Passing *n_bytes=0* to this function is not an accurate way to determine "
"the bit length of the value."
msgstr ""

#: ../../c-api/long.rst:425
msgid ""
"To get at the entire Python value of an unknown size, the function can be"
" called twice: first to determine the buffer size, then to fill it::"
msgstr ""

#: ../../c-api/long.rst:428
#, python-brace-format
msgid ""
"// Ask how much space we need.\n"
"Py_ssize_t expected = PyLong_AsNativeBytes(pylong, NULL, 0, -1);\n"
"if (expected < 0) {\n"
"    // Failed. A Python exception was set with the reason.\n"
"    return NULL;\n"
"}\n"
"assert(expected != 0);  // Impossible per the API definition.\n"
"uint8_t *bignum = malloc(expected);\n"
"if (!bignum) {\n"
"    PyErr_SetString(PyExc_MemoryError, \"bignum malloc failed.\");\n"
"    return NULL;\n"
"}\n"
"// Safely get the entire value.\n"
"Py_ssize_t bytes = PyLong_AsNativeBytes(pylong, bignum, expected, -1);\n"
"if (bytes < 0) {  // Exception has been set.\n"
"    free(bignum);\n"
"    return NULL;\n"
"}\n"
"else if (bytes > expected) {  // This should not be possible.\n"
"    PyErr_SetString(PyExc_RuntimeError,\n"
"        \"Unexpected bignum truncation after a size check.\");\n"
"    free(bignum);\n"
"    return NULL;\n"
"}\n"
"// The expected success given the above pre-check.\n"
"// ... use bignum ...\n"
"free(bignum);"
msgstr ""

#: ../../c-api/long.rst:456
msgid ""
"*flags* is either ``-1`` (``Py_ASNATIVEBYTES_DEFAULTS``) to select "
"defaults that behave most like a C cast, or a combination of the other "
"flags in the table below. Note that ``-1`` cannot be combined with other "
"flags."
msgstr ""

#: ../../c-api/long.rst:461
msgid ""
"Currently, ``-1`` corresponds to ``Py_ASNATIVEBYTES_NATIVE_ENDIAN | "
"Py_ASNATIVEBYTES_UNSIGNED_BUFFER``."
msgstr ""

#: ../../c-api/long.rst:467
msgid "Flag"
msgstr ""

#: ../../c-api/long.rst:467
msgid "Value"
msgstr ""

#: ../../c-api/long.rst:469
msgid "``-1``"
msgstr ""

#: ../../c-api/long.rst:470
msgid "``0``"
msgstr ""

#: ../../c-api/long.rst:471
msgid "``1``"
msgstr ""

#: ../../c-api/long.rst:472
msgid "``3``"
msgstr ""

#: ../../c-api/long.rst:473
msgid "``4``"
msgstr ""

#: ../../c-api/long.rst:474
msgid "``8``"
msgstr ""

#: ../../c-api/long.rst:475
msgid "``16``"
msgstr ""

#: ../../c-api/long.rst:478
msgid ""
"Specifying ``Py_ASNATIVEBYTES_NATIVE_ENDIAN`` will override any other "
"endian flags. Passing ``2`` is reserved."
msgstr ""

#: ../../c-api/long.rst:481
msgid ""
"By default, sufficient buffer will be requested to include a sign bit. "
"For example, when converting 128 with *n_bytes=1*, the function will "
"return 2 (or more) in order to store a zero sign bit."
msgstr ""

#: ../../c-api/long.rst:485
msgid ""
"If ``Py_ASNATIVEBYTES_UNSIGNED_BUFFER`` is specified, a zero sign bit "
"will be omitted from size calculations. This allows, for example, 128 to "
"fit in a single-byte buffer. If the destination buffer is later treated "
"as signed, a positive input value may become negative. Note that the flag"
" does not affect handling of negative values: for those, space for a sign"
" bit is always requested."
msgstr ""

#: ../../c-api/long.rst:492
msgid ""
"Specifying ``Py_ASNATIVEBYTES_REJECT_NEGATIVE`` causes an exception to be"
" set if *pylong* is negative. Without this flag, negative values will be "
"copied provided there is enough space for at least one sign bit, "
"regardless of whether ``Py_ASNATIVEBYTES_UNSIGNED_BUFFER`` was specified."
msgstr ""

#: ../../c-api/long.rst:497
msgid ""
"If ``Py_ASNATIVEBYTES_ALLOW_INDEX`` is specified and a non-integer value "
"is passed, its :meth:`~object.__index__` method will be called first. "
"This may result in Python code executing and other threads being allowed "
"to run, which could cause changes to other objects or values in use. When"
" *flags* is ``-1``, this option is not set, and non-integer values will "
"raise :exc:`TypeError`."
msgstr ""

#: ../../c-api/long.rst:506
msgid ""
"With the default *flags* (``-1``, or *UNSIGNED_BUFFER*  without "
"*REJECT_NEGATIVE*), multiple Python integers can map to a single value "
"without overflow. For example, both ``255`` and ``-1`` fit a single-byte "
"buffer and set all its bits. This matches typical C cast behavior."
msgstr ""

#: ../../c-api/long.rst:517
msgid ""
"On success, return a read only :term:`named tuple`, that holds "
"information about Python's internal representation of integers. See "
":data:`sys.int_info` for description of individual fields."
msgstr ""

#: ../../c-api/long.rst:521
msgid "On failure, return ``NULL`` with an exception set."
msgstr ""

#: ../../c-api/long.rst:528
msgid "Return 1 if *op* is compact, 0 otherwise."
msgstr ""

#: ../../c-api/long.rst:530
msgid ""
"This function makes it possible for performance-critical code to "
"implement a “fast path” for small integers. For compact values use "
":c:func:`PyUnstable_Long_CompactValue`; for others fall back to a "
":c:func:`PyLong_As* <PyLong_AsSize_t>` function or "
":c:func:`PyLong_AsNativeBytes`."
msgstr ""

#: ../../c-api/long.rst:536
msgid "The speedup is expected to be negligible for most users."
msgstr ""

#: ../../c-api/long.rst:538
msgid ""
"Exactly what values are considered compact is an implementation detail "
"and is subject to change."
msgstr ""

#: ../../c-api/long.rst:546
msgid ""
"If *op* is compact, as determined by :c:func:`PyUnstable_Long_IsCompact`,"
" return its value."
msgstr ""

#: ../../c-api/long.rst:549
msgid "Otherwise, the return value is undefined."
msgstr ""

#: ../../c-api/long.rst:8
msgid "object"
msgstr ""

#: ../../c-api/long.rst:8
msgid "long integer"
msgstr ""

#: ../../c-api/long.rst:8
#, fuzzy
msgid "integer"
msgstr "정수 객체"

#: ../../c-api/long.rst:144
msgid "LONG_MAX (C macro)"
msgstr ""

#: ../../c-api/long.rst:144 ../../c-api/long.rst:204 ../../c-api/long.rst:247
#: ../../c-api/long.rst:262 ../../c-api/long.rst:278 ../../c-api/long.rst:294
msgid "OverflowError (built-in exception)"
msgstr ""

#: ../../c-api/long.rst:247
msgid "PY_SSIZE_T_MAX (C macro)"
msgstr ""

#: ../../c-api/long.rst:262
msgid "ULONG_MAX (C macro)"
msgstr ""

#: ../../c-api/long.rst:278
msgid "SIZE_MAX (C macro)"
msgstr ""

#~ msgid "Convert a sequence of Unicode digits to a Python integer value."
#~ msgstr "유니코드 숫자의 시퀀스를 파이썬 정숫값으로 변환합니다."

#~ msgid ""
#~ "Part of the old-style "
#~ ":c:type:`Py_UNICODE` API; please migrate to"
#~ " using :c:func:`PyLong_FromUnicodeObject`."
#~ msgstr ""
#~ "이전 스타일의 :c:type:`Py_UNICODE` API의 일부; "
#~ ":c:func:`PyLong_FromUnicodeObject`\\를 사용하는 것으로 "
#~ "변경하십시오."

#~ msgid "Using :meth:`__int__` is deprecated."
#~ msgstr ":meth:`__int__` 사용은 폐지되었습니다."

