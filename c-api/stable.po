# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2017, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-04-17 23:44+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.17.0\n"

#: ../../c-api/stable.rst:7
msgid "C API Stability"
msgstr ""

#: ../../c-api/stable.rst:9
msgid ""
"Unless documented otherwise, Python's C API is covered by the Backwards "
"Compatibility Policy, :pep:`387`. Most changes to it are source-"
"compatible (typically by only adding new API). Changing existing API or "
"removing API is only done after a deprecation period or to fix serious "
"issues."
msgstr ""

#: ../../c-api/stable.rst:15
msgid ""
"CPython's Application Binary Interface (ABI) is forward- and backwards-"
"compatible across a minor release (if these are compiled the same way; "
"see :ref:`stable-abi-platform` below). So, code compiled for Python "
"3.10.0 will work on 3.10.8 and vice versa, but will need to be compiled "
"separately for 3.9.x and 3.11.x."
msgstr ""

#: ../../c-api/stable.rst:21
msgid "There are two tiers of C API with different stability expectations:"
msgstr ""

#: ../../c-api/stable.rst:23
msgid ""
":ref:`Unstable API <unstable-c-api>`, may change in minor versions "
"without a deprecation period. It is marked by the ``PyUnstable`` prefix "
"in names."
msgstr ""

#: ../../c-api/stable.rst:25
msgid ""
":ref:`Limited API <limited-c-api>`, is compatible across several minor "
"releases. When :c:macro:`Py_LIMITED_API` is defined, only this subset is "
"exposed from ``Python.h``."
msgstr ""

#: ../../c-api/stable.rst:29
msgid "These are discussed in more detail below."
msgstr ""

#: ../../c-api/stable.rst:31
msgid ""
"Names prefixed by an underscore, such as ``_Py_InternalState``, are "
"private API that can change without notice even in patch releases. If you"
" need to use this API, consider reaching out to `CPython developers "
"<https://discuss.python.org/c/core-dev/c-api/30>`_ to discuss adding "
"public API for your use case."
msgstr ""

#: ../../c-api/stable.rst:40
msgid "Unstable C API"
msgstr ""

#: ../../c-api/stable.rst:44
msgid ""
"Any API named with the ``PyUnstable`` prefix exposes CPython "
"implementation details, and may change in every minor release (e.g. from "
"3.9 to 3.10) without any deprecation warnings. However, it will not "
"change in a bugfix release (e.g. from 3.10.0 to 3.10.1)."
msgstr ""

#: ../../c-api/stable.rst:49
msgid "It is generally intended for specialized, low-level tools like debuggers."
msgstr ""

#: ../../c-api/stable.rst:51
msgid ""
"Projects that use this API are expected to follow CPython development and"
" spend extra effort adjusting to changes."
msgstr ""

#: ../../c-api/stable.rst:56
msgid "Stable Application Binary Interface"
msgstr "안정적인 응용 프로그램 바이너리 인터페이스"

#: ../../c-api/stable.rst:58
msgid ""
"For simplicity, this document talks about *extensions*, but the Limited "
"API and Stable ABI work the same way for all uses of the API – for "
"example, embedding Python."
msgstr ""

#: ../../c-api/stable.rst:65
msgid "Limited C API"
msgstr ""

#: ../../c-api/stable.rst:67
msgid ""
"Python 3.2 introduced the *Limited API*, a subset of Python's C API. "
"Extensions that only use the Limited API can be compiled once and be "
"loaded on multiple versions of Python. Contents of the Limited API are "
":ref:`listed below <limited-api-list>`."
msgstr ""

#: ../../c-api/stable.rst:74
msgid ""
"Define this macro before including ``Python.h`` to opt in to only use the"
" Limited API, and to select the Limited API version."
msgstr ""

#: ../../c-api/stable.rst:77
msgid ""
"Define ``Py_LIMITED_API`` to the value of :c:macro:`PY_VERSION_HEX` "
"corresponding to the lowest Python version your extension supports. The "
"extension will be ABI-compatible with all Python 3 releases from the "
"specified one onward, and can use Limited API introduced up to that "
"version."
msgstr ""

#: ../../c-api/stable.rst:83
msgid ""
"Rather than using the ``PY_VERSION_HEX`` macro directly, hardcode a "
"minimum minor version (e.g. ``0x030A0000`` for Python 3.10) for stability"
" when compiling with future Python versions."
msgstr ""

#: ../../c-api/stable.rst:87
msgid ""
"You can also define ``Py_LIMITED_API`` to ``3``. This works the same as "
"``0x03020000`` (Python 3.2, the version that introduced Limited API)."
msgstr ""

#: ../../c-api/stable.rst:94
msgid "Stable ABI"
msgstr ""

#: ../../c-api/stable.rst:96
msgid ""
"To enable this, Python provides a *Stable ABI*: a set of symbols that "
"will remain ABI-compatible across Python 3.x versions."
msgstr ""

#: ../../c-api/stable.rst:101
msgid ""
"The Stable ABI prevents ABI issues, like linker errors due to missing "
"symbols or data corruption due to changes in structure layouts or "
"function signatures. However, other changes in Python can change the "
"*behavior* of extensions. See Python's Backwards Compatibility Policy "
"(:pep:`387`) for details."
msgstr ""

#: ../../c-api/stable.rst:107
msgid ""
"The Stable ABI contains symbols exposed in the :ref:`Limited API "
"<limited-c-api>`, but also other ones – for example, functions necessary "
"to support older versions of the Limited API."
msgstr ""

#: ../../c-api/stable.rst:111
msgid ""
"On Windows, extensions that use the Stable ABI should be linked against "
"``python3.dll`` rather than a version-specific library such as "
"``python39.dll``."
msgstr ""

#: ../../c-api/stable.rst:115
msgid ""
"On some platforms, Python will look for and load shared library files "
"named with the ``abi3`` tag (e.g. ``mymodule.abi3.so``). It does not "
"check if such extensions conform to a Stable ABI. The user (or their "
"packaging tools) need to ensure that, for example, extensions built with "
"the 3.10+ Limited API are not installed for lower versions of Python."
msgstr ""

#: ../../c-api/stable.rst:122
msgid ""
"All functions in the Stable ABI are present as functions in Python's "
"shared library, not solely as macros. This makes them usable from "
"languages that don't use the C preprocessor."
msgstr ""

#: ../../c-api/stable.rst:128
msgid "Limited API Scope and Performance"
msgstr ""

#: ../../c-api/stable.rst:130
msgid ""
"The goal for the Limited API is to allow everything that is possible with"
" the full C API, but possibly with a performance penalty."
msgstr ""

#: ../../c-api/stable.rst:133
msgid ""
"For example, while :c:func:`PyList_GetItem` is available, its “unsafe” "
"macro variant :c:func:`PyList_GET_ITEM` is not. The macro can be faster "
"because it can rely on version-specific implementation details of the "
"list object."
msgstr ""

#: ../../c-api/stable.rst:138
msgid ""
"Without ``Py_LIMITED_API`` defined, some C API functions are inlined or "
"replaced by macros. Defining ``Py_LIMITED_API`` disables this inlining, "
"allowing stability as Python's data structures are improved, but possibly"
" reducing performance."
msgstr ""

#: ../../c-api/stable.rst:143
msgid ""
"By leaving out the ``Py_LIMITED_API`` definition, it is possible to "
"compile a Limited API extension with a version-specific ABI. This can "
"improve performance for that Python version, but will limit "
"compatibility. Compiling with ``Py_LIMITED_API`` will then yield an "
"extension that can be distributed where a version-specific one is not "
"available – for example, for prereleases of an upcoming Python version."
msgstr ""

#: ../../c-api/stable.rst:152
msgid "Limited API Caveats"
msgstr ""

#: ../../c-api/stable.rst:154
msgid ""
"Note that compiling with ``Py_LIMITED_API`` is *not* a complete guarantee"
" that code conforms to the :ref:`Limited API <limited-c-api>` or the "
":ref:`Stable ABI <stable-abi>`. ``Py_LIMITED_API`` only covers "
"definitions, but an API also includes other issues, such as expected "
"semantics."
msgstr ""

#: ../../c-api/stable.rst:159
msgid ""
"One issue that ``Py_LIMITED_API`` does not guard against is calling a "
"function with arguments that are invalid in a lower Python version. For "
"example, consider a function that starts accepting ``NULL`` for an "
"argument. In Python 3.9, ``NULL`` now selects a default behavior, but in "
"Python 3.8, the argument will be used directly, causing a ``NULL`` "
"dereference and crash. A similar argument works for fields of structs."
msgstr ""

#: ../../c-api/stable.rst:166
msgid ""
"Another issue is that some struct fields are currently not hidden when "
"``Py_LIMITED_API`` is defined, even though they're part of the Limited "
"API."
msgstr ""

#: ../../c-api/stable.rst:169
msgid ""
"For these reasons, we recommend testing an extension with *all* minor "
"Python versions it supports, and preferably to build with the *lowest* "
"such version."
msgstr ""

#: ../../c-api/stable.rst:172
msgid ""
"We also recommend reviewing documentation of all used API to check if it "
"is explicitly part of the Limited API. Even with ``Py_LIMITED_API`` "
"defined, a few private declarations are exposed for technical reasons (or"
" even unintentionally, as bugs)."
msgstr ""

#: ../../c-api/stable.rst:177
msgid ""
"Also note that the Limited API is not necessarily stable: compiling with "
"``Py_LIMITED_API`` with Python 3.8 means that the extension will run with"
" Python 3.12, but it will not necessarily *compile* with Python 3.12. In "
"particular, parts of the Limited API may be deprecated and removed, "
"provided that the Stable ABI stays stable."
msgstr ""

#: ../../c-api/stable.rst:187
msgid "Platform Considerations"
msgstr ""

#: ../../c-api/stable.rst:189
msgid ""
"ABI stability depends not only on Python, but also on the compiler used, "
"lower-level libraries and compiler options. For the purposes of the "
":ref:`Stable ABI <stable-abi>`, these details define a “platform”. They "
"usually depend on the OS type and processor architecture"
msgstr ""

#: ../../c-api/stable.rst:194
msgid ""
"It is the responsibility of each particular distributor of Python to "
"ensure that all Python versions on a particular platform are built in a "
"way that does not break the Stable ABI. This is the case with Windows and"
" macOS releases from ``python.org`` and many third-party distributors."
msgstr ""

#: ../../c-api/stable.rst:204
msgid "Contents of Limited API"
msgstr ""

#: ../../c-api/stable.rst:207
msgid ""
"Currently, the :ref:`Limited API <limited-c-api>` includes the following "
"items:"
msgstr ""

#: ../../c-api/stable.rst:42
msgid "PyUnstable"
msgstr ""

#~ msgid ""
#~ "Traditionally, the C API of Python "
#~ "will change with every release.  Most"
#~ " changes will be source-compatible, "
#~ "typically by only adding API, rather "
#~ "than changing existing API or removing"
#~ " API (although some interfaces do get"
#~ " removed after being deprecated first)."
#~ msgstr ""
#~ "관례에 따라, 파이썬의 C API는 모든 배포마다 "
#~ "변경될 것입니다. 대부분 변경은 소스 호환되며, 일반적으로"
#~ " 기존 API를 변경하거나 API를 제거하지 않고 "
#~ "API를 추가하기만 합니다 (일부 인터페이스는 먼저 폐지된"
#~ " 후에 제거됩니다)."

#~ msgid ""
#~ "Unfortunately, the API compatibility does "
#~ "not extend to binary compatibility (the"
#~ " ABI). The reason is primarily the"
#~ " evolution of struct definitions, where "
#~ "addition of a new field, or "
#~ "changing the type of a field, "
#~ "might not break the API, but can"
#~ " break the ABI.  As a consequence,"
#~ " extension modules need to be "
#~ "recompiled for every Python release "
#~ "(although an exception is possible on"
#~ " Unix when none of the affected "
#~ "interfaces are used). In addition, on"
#~ " Windows, extension modules link with "
#~ "a specific pythonXY.dll and need to "
#~ "be recompiled to link with a newer"
#~ " one."
#~ msgstr ""
#~ "아쉽게도, API 호환성은 ABI(바이너리 호환성)로 확장되지 "
#~ "않습니다. 그 이유는 기본적으로 구조체 정의가 진화하기 "
#~ "때문인데, 새로운 필드를 추가하거나 필드의 형을 바꾸면 "
#~ "API가 손상되지는 않지만, ABI가 손상될 수 있습니다."
#~ " 결과적으로, 확장 모듈은 파이썬 배포마다 다시 "
#~ "컴파일해야 합니다 (영향을 받는 인터페이스가 사용되지 않는"
#~ " 경우 유닉스에서는 예외일 수 있습니다). 또한, "
#~ "윈도우에서 확장 모듈은 특정 pythonXY.dll과 링크되고 "
#~ "최신 모듈과 링크하기 위해 다시 컴파일할 필요가 "
#~ "있습니다."

#~ msgid ""
#~ "Since Python 3.2, a subset of the"
#~ " API has been declared to guarantee"
#~ " a stable ABI. Extension modules "
#~ "wishing to use this API (called "
#~ "\"limited API\") need to define "
#~ "``Py_LIMITED_API``. A number of interpreter"
#~ " details then become hidden from the"
#~ " extension module; in return, a "
#~ "module is built that works on any"
#~ " 3.x version (x>=2) without recompilation."
#~ msgstr ""
#~ "파이썬 3.2부터, API 일부가 안정적인 ABI를 보장하도록"
#~ " 선언되었습니다. 이 API( \"제한된 API\"라고 합니다)를"
#~ " 사용하고자 하는 확장 모듈은 ``Py_LIMITED_API``\\를 "
#~ "정의해야 합니다. 그러면 인터프리터의 세부 정보는 확장 "
#~ "모듈에 숨겨집니다; 그 대가로, 재컴파일 없이 모든 "
#~ "3.x 버전(x>=2)에서 작동하는 모듈이 빌드됩니다."

#~ msgid ""
#~ "In some cases, the stable ABI "
#~ "needs to be extended with new "
#~ "functions. Extension modules wishing to "
#~ "use these new APIs need to set "
#~ "``Py_LIMITED_API`` to the ``PY_VERSION_HEX`` "
#~ "value (see :ref:`apiabiversion`) of the "
#~ "minimum Python version they want to "
#~ "support (e.g. ``0x03030000`` for Python "
#~ "3.3). Such modules will work on "
#~ "all subsequent Python releases, but fail"
#~ " to load (because of missing symbols)"
#~ " on the older releases."
#~ msgstr ""
#~ "어떤 경우에는, 안정적인 ABI를 새로운 기능으로 확장해야"
#~ " 합니다. 이러한 새로운 API를 사용하고자 하는 확장"
#~ " 모듈은 지원하고자 하는 최소 파이썬 버전의 "
#~ "``PY_VERSION_HEX`` 값(:ref:`apiabiversion` 참조)으로 "
#~ "``Py_LIMITED_API``\\를 설정해야 합니다 (예를 들어, "
#~ "파이썬 3.3의 경우 ``0x03030000``). 이러한 모듈은 "
#~ "모든 후속 파이썬 배포에서 작동하지만, 이전 배포에서 "
#~ "(심볼 누락으로 인해)로드하지 못합니다."

#~ msgid ""
#~ "As of Python 3.2, the set of "
#~ "functions available to the limited API"
#~ " is documented in :pep:`384`.  In the"
#~ " C API documentation, API elements "
#~ "that are not part of the limited"
#~ " API are marked as \"Not part "
#~ "of the limited API.\""
#~ msgstr ""
#~ "파이썬 3.2부터, 제한된 API에서 사용할 수 있는 "
#~ "함수 집합이 :pep:`384`\\에 문서로 만들어져 있습니다. "
#~ "C API 설명서에서, 제한된 API 일부가 아닌 "
#~ "API 요소는 \"제한된 API 일부가 아닙니다.\"로 "
#~ "표시됩니다."

