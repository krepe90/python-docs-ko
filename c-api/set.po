# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2017, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-04-17 23:44+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: Dong-gweon Oh <flowdas@gmail.com>\n"
"Language-Team: Korean (https://python.flowdas.com)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.17.0\n"

#: ../../c-api/set.rst:6
msgid "Set Objects"
msgstr "집합 객체"

#: ../../c-api/set.rst:15
msgid ""
"This section details the public API for :class:`set` and "
":class:`frozenset` objects.  Any functionality not listed below is best "
"accessed using either the abstract object protocol (including "
":c:func:`PyObject_CallMethod`, :c:func:`PyObject_RichCompareBool`, "
":c:func:`PyObject_Hash`, :c:func:`PyObject_Repr`, "
":c:func:`PyObject_IsTrue`, :c:func:`PyObject_Print`, and "
":c:func:`PyObject_GetIter`) or the abstract number protocol (including "
":c:func:`PyNumber_And`, :c:func:`PyNumber_Subtract`, "
":c:func:`PyNumber_Or`, :c:func:`PyNumber_Xor`, "
":c:func:`PyNumber_InPlaceAnd`, :c:func:`PyNumber_InPlaceSubtract`, "
":c:func:`PyNumber_InPlaceOr`, and :c:func:`PyNumber_InPlaceXor`)."
msgstr ""
"이 절에서는 :class:`set`\\과 :class:`frozenset` 객체에 대한 공용 API에 대해 자세히 설명합니다. 아래"
" 나열되지 않은 기능은 추상 객체 프로토콜 (:c:func:`PyObject_CallMethod`, "
":c:func:`PyObject_RichCompareBool`, :c:func:`PyObject_Hash`, "
":c:func:`PyObject_Repr`, :c:func:`PyObject_IsTrue`, "
":c:func:`PyObject_Print` 및 :c:func:`PyObject_GetIter`\\를 포함합니다)이나 추상 숫자 "
"프로토콜 (:c:func:`PyNumber_And`, :c:func:`PyNumber_Subtract`, "
":c:func:`PyNumber_Or`, :c:func:`PyNumber_Xor`, "
":c:func:`PyNumber_InPlaceAnd`, :c:func:`PyNumber_InPlaceSubtract`, "
":c:func:`PyNumber_InPlaceOr` 및 :c:func:`PyNumber_InPlaceXor`\\을 포함합니다)."

#: ../../c-api/set.rst:29
msgid ""
"This subtype of :c:type:`PyObject` is used to hold the internal data for "
"both :class:`set` and :class:`frozenset` objects.  It is like a "
":c:type:`PyDictObject` in that it is a fixed size for small sets (much "
"like tuple storage) and will point to a separate, variable sized block of"
" memory for medium and large sized sets (much like list storage). None of"
" the fields of this structure should be considered public and all are "
"subject to change.  All access should be done through the documented API "
"rather than by manipulating the values in the structure."
msgstr ""
"이 :c:type:`PyObject`\\의 서브 형은 :class:`set`\\과 :class:`frozenset` 객체 모두의 "
"내부 데이터를 담는 데 사용됩니다. 이것은 작은 집합은 고정 크기(튜플 저장과 매우 흡사함)이고, 중형과 대형 집합은 별도의 가변 "
"크기 메모리 블록(리스트 저장소처럼)을 가리킨다는 점에서 :c:type:`PyDictObject`\\와 비슷합니다. 이 구조체의 "
"필드는 아무것도 공개되지 않은 것으로 취급되어야 하며, 모두 변경될 수 있습니다. 모든 액세스는 구조체의 값을 조작하기보다는 설명된"
" API를 통해 수행해야 합니다."

#: ../../c-api/set.rst:40
msgid ""
"This is an instance of :c:type:`PyTypeObject` representing the Python "
":class:`set` type."
msgstr "이것은 파이썬 :class:`set` 형을 나타내는 :c:type:`PyTypeObject`\\의 인스턴스입니다."

#: ../../c-api/set.rst:46
msgid ""
"This is an instance of :c:type:`PyTypeObject` representing the Python "
":class:`frozenset` type."
msgstr "이것은 파이썬 :class:`frozenset` 형을 나타내는 :c:type:`PyTypeObject`\\의 인스턴스입니다."

#: ../../c-api/set.rst:49
msgid ""
"The following type check macros work on pointers to any Python object. "
"Likewise, the constructor functions work with any iterable Python object."
msgstr ""
"다음 형 검사 매크로는 모든 파이썬 객체에 대한 포인터에서 작동합니다. 마찬가지로, 생성자 함수는 모든 이터러블 파이썬 객체에서 "
"작동합니다."

#: ../../c-api/set.rst:55
msgid ""
"Return true if *p* is a :class:`set` object or an instance of a subtype. "
"This function always succeeds."
msgstr "*p*\\가 :class:`set` 객체나 서브 형의 인스턴스면 참을 반환합니다. 이 함수는 항상 성공합니다."

#: ../../c-api/set.rst:60
msgid ""
"Return true if *p* is a :class:`frozenset` object or an instance of a "
"subtype.  This function always succeeds."
msgstr "*p*\\가 :class:`frozenset` 객체나 서브 형의 인스턴스면 참을 반환합니다. 이 함수는 항상 성공합니다."

#: ../../c-api/set.rst:65
msgid ""
"Return true if *p* is a :class:`set` object, a :class:`frozenset` object,"
" or an instance of a subtype.  This function always succeeds."
msgstr ""
"*p*\\가 :class:`set` 객체, :class:`frozenset` 객체 또는 서브 형의 인스턴스면 참을 반환합니다. 이 "
"함수는 항상 성공합니다."

#: ../../c-api/set.rst:70
msgid ""
"Return true if *p* is a :class:`set` object but not an instance of a "
"subtype.  This function always succeeds."
msgstr "*p*\\가 :class:`set` 객체이지만, 서브 형의 인스턴스는 아니면 참을 반환합니다. 이 함수는 항상 성공합니다."

#: ../../c-api/set.rst:77
msgid ""
"Return true if *p* is a :class:`set` object or a :class:`frozenset` "
"object but not an instance of a subtype.  This function always succeeds."
msgstr ""
"*p*\\가 :class:`set` 객체나 :class:`frozenset` 객체이지만, 서브 형의 인스턴스는 아니면 참을 "
"반환합니다. 이 함수는 항상 성공합니다."

#: ../../c-api/set.rst:83
msgid ""
"Return true if *p* is a :class:`frozenset` object but not an instance of "
"a subtype.  This function always succeeds."
msgstr "*p*\\가 :class:`frozenset` 객체이지만, 서브 형의 인스턴스는 아니면 참을 반환합니다. 이 함수는 항상 성공합니다."

#: ../../c-api/set.rst:89
msgid ""
"Return a new :class:`set` containing objects returned by the *iterable*."
"  The *iterable* may be ``NULL`` to create a new empty set.  Return the "
"new set on success or ``NULL`` on failure.  Raise :exc:`TypeError` if "
"*iterable* is not actually iterable.  The constructor is also useful for "
"copying a set (``c=set(s)``)."
msgstr ""
"*iterable*\\에 의해 반환된 객체를 포함하는 새로운 :class:`set`\\을 반환합니다. *iterable*\\은 "
"새로운 빈 집합을 만들기 위해 ``NULL`` 일 수 있습니다. 성공하면 새 집합을, 실패하면 ``NULL``\\을 반환합니다. "
"*iterable*\\이 실제로 이터러블이 아니면 :exc:`TypeError`\\를 발생시킵니다. 생성자는 집합을 복사할 때도 "
"유용합니다 (``c=set(s)``)."

#: ../../c-api/set.rst:98
msgid ""
"Return a new :class:`frozenset` containing objects returned by the "
"*iterable*. The *iterable* may be ``NULL`` to create a new empty "
"frozenset.  Return the new set on success or ``NULL`` on failure.  Raise "
":exc:`TypeError` if *iterable* is not actually iterable."
msgstr ""
"*iterable*\\에 의해 반환된 객체를 포함한 새로운 :class:`frozenset`\\을 반환합니다. "
"*iterable*\\은 새로운 빈 frozenset을 만들기 위해 ``NULL`` 일 수 있습니다. 성공하면 새 집합을, 실패하면"
" ``NULL``\\을 반환합니다. *iterable*\\이 실제로 이터러블이 아니면 :exc:`TypeError`\\를 "
"발생시킵니다."

#: ../../c-api/set.rst:104
msgid ""
"The following functions and macros are available for instances of "
":class:`set` or :class:`frozenset` or instances of their subtypes."
msgstr ""
":class:`set` 이나 :class:`frozenset`\\의 인스턴스 또는 그들의 서브 형의 인스턴스에 대해 다음 함수와 "
"매크로를 사용할 수 있습니다."

#: ../../c-api/set.rst:112
msgid ""
"Return the length of a :class:`set` or :class:`frozenset` object. "
"Equivalent to ``len(anyset)``.  Raises a :exc:`SystemError` if *anyset* "
"is not a :class:`set`, :class:`frozenset`, or an instance of a subtype."
msgstr ""
":class:`set` 이나 :class:`frozenset` 객체의 길이를 반환합니다. ``len(anyset)``\\와 "
"동등합니다. *anyset*\\이 :class:`set`, :class:`frozenset` 또는 서브 형의 인스턴스가 아니면 "
":exc:`SystemError`\\를 발생시킵니다."

#: ../../c-api/set.rst:119
msgid "Macro form of :c:func:`PySet_Size` without error checking."
msgstr "에러 검사 없는 :c:func:`PySet_Size`\\의 매크로 형식."

#: ../../c-api/set.rst:124
msgid ""
"Return ``1`` if found, ``0`` if not found, and ``-1`` if an error is "
"encountered.  Unlike the Python :meth:`~object.__contains__` method, this"
" function does not automatically convert unhashable sets into temporary "
"frozensets.  Raise a :exc:`TypeError` if the *key* is unhashable. Raise "
":exc:`SystemError` if *anyset* is not a :class:`set`, :class:`frozenset`,"
" or an instance of a subtype."
msgstr ""
"발견되면 ``1``\\을, 발견되지 않으면 ``0``\\을, 에러가 발생하면 ``-1``\\을 반환합니다. 파이썬 "
":meth:`~object.__contains__` 메서드와는 달리, 이 함수는 해시 불가능한 집합을 임시 frozenset으로 "
"자동 변환하지 않습니다. *key*\\가 해시 불가능하면, :exc:`TypeError`\\를 발생시킵니다. *anyset*\\이 "
":class:`set`, :class:`frozenset` 또는 서브 형의 인스턴스가 아니면 :exc:`SystemError`\\를"
" 발생시킵니다."

#: ../../c-api/set.rst:133
msgid ""
"Add *key* to a :class:`set` instance.  Also works with :class:`frozenset`"
" instances (like :c:func:`PyTuple_SetItem` it can be used to fill in the "
"values of brand new frozensets before they are exposed to other code).  "
"Return ``0`` on success or ``-1`` on failure. Raise a :exc:`TypeError` if"
" the *key* is unhashable. Raise a :exc:`MemoryError` if there is no room "
"to grow.  Raise a :exc:`SystemError` if *set* is not an instance of "
":class:`set` or its subtype."
msgstr ""
"*key*\\를 :class:`set` 인스턴스에 추가합니다. 또한 :class:`frozenset` 인스턴스에도 작동합니다 "
"(:c:func:`PyTuple_SetItem`\\처럼 다른 코드에 노출되기 전에 새로운 frozenset의 값을 채우는 데 사용할"
" 수 있습니다). 성공하면 ``0``\\을, 실패하면 ``-1``\\을 반환합니다. *key*\\가 해시 불가능하면, "
":exc:`TypeError`\\를 발생시킵니다. 성장할 공간이 없다면 :exc:`MemoryError`\\를 발생시킵니다. "
"*set*\\이 :class:`set` 이나 그 서브 형의 인스턴스가 아니면 :exc:`SystemError`\\를 발생시킵니다."

#: ../../c-api/set.rst:142
msgid ""
"The following functions are available for instances of :class:`set` or "
"its subtypes but not for instances of :class:`frozenset` or its subtypes."
msgstr ""
"다음 함수는 :class:`set` 이나 그것의 서브 형의 인스턴스에는 사용할 수 있지만, :class:`frozenset` 이나 "
"그 서브 형의 인스턴스에는 사용할 수 없습니다."

#: ../../c-api/set.rst:148
msgid ""
"Return ``1`` if found and removed, ``0`` if not found (no action taken), "
"and ``-1`` if an error is encountered.  Does not raise :exc:`KeyError` "
"for missing keys.  Raise a :exc:`TypeError` if the *key* is unhashable.  "
"Unlike the Python :meth:`~frozenset.discard` method, this function does "
"not automatically convert unhashable sets into temporary frozensets. "
"Raise :exc:`SystemError` if *set* is not an instance of :class:`set` or "
"its subtype."
msgstr ""
"발견되고 제거되면 ``1``\\을 반환하고, 발견되지 않으면(아무런 일도 하지 않습니다) ``0``\\을 반환하고, 에러가 발생하면"
" ``-1``\\을 반환합니다. 발견할 수 없는 키에 대해 :exc:`KeyError`\\를 발생시키지 않습니다. *key*\\가 "
"해시 불가능하면 :exc:`TypeError`\\를 발생시킵니다. 파이썬 :meth:`~frozenset.discard` 메서드와는"
" 달리, 이 함수는 해시 불가능한 집합을 임시 frozenset으로 자동 변환하지 않습니다. *set*\\이 :class:`set`"
" 이나 그 서브 형의 인스턴스가 아니면 :exc:`SystemError`\\를 발생시킵니다."

#: ../../c-api/set.rst:158
msgid ""
"Return a new reference to an arbitrary object in the *set*, and removes "
"the object from the *set*.  Return ``NULL`` on failure.  Raise "
":exc:`KeyError` if the set is empty. Raise a :exc:`SystemError` if *set* "
"is not an instance of :class:`set` or its subtype."
msgstr ""
"*set*\\에 들어있는 임의의 객체에 대한 새 참조를 반환하고, *set*\\에서 객체를 제거합니다. 실패하면 "
"``NULL``\\을 반환합니다. 집합이 비어 있으면, :exc:`KeyError`\\를 발생시킵니다. *set*\\이 "
":class:`set` 이나 그 서브 형의 인스턴스가 아니면 :exc:`SystemError`\\를 발생시킵니다."

#: ../../c-api/set.rst:166
msgid ""
"Empty an existing set of all elements. Return ``0`` on success. Return "
"``-1`` and raise :exc:`SystemError` if *set* is not an instance of "
":class:`set` or its subtype."
msgstr ""
"기존의 모든 요소 집합을 비웁니다. 성공하면 ``0``\\을 반환합니다. *set*\\이 :class:`set`\\이나 그 "
"서브타입의 인스턴스가 아니면 :exc:`SystemError`\\를 발생시키고 ``-1``\\을 반환합니다."

#: ../../c-api/set.rst:11
msgid "object"
msgstr "객체"

#: ../../c-api/set.rst:11
msgid "set"
msgstr "set"

#: ../../c-api/set.rst:11
msgid "frozenset"
msgstr "frozenset"

#: ../../c-api/set.rst:110
msgid "built-in function"
msgstr "내장 함수"

#: ../../c-api/set.rst:110
msgid "len"
msgstr "len"

