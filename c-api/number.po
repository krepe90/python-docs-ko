# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2017, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-04-17 23:44+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: Dong-gweon Oh <flowdas@gmail.com>\n"
"Language-Team: Korean (https://python.flowdas.com)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.17.0\n"

#: ../../c-api/number.rst:6
msgid "Number Protocol"
msgstr "숫자 프로토콜"

#: ../../c-api/number.rst:11
msgid ""
"Returns ``1`` if the object *o* provides numeric protocols, and false "
"otherwise. This function always succeeds."
msgstr "객체 *o*\\가 숫자 프로토콜을 제공하면 ``1``\\을 반환하고, 그렇지 않으면 거짓을 반환합니다. 이 함수는 항상 성공합니다."

#: ../../c-api/number.rst:14
msgid "Returns ``1`` if *o* is an index integer."
msgstr "*o*\\가 인덱스 정수면 ``1``\\을 반환합니다."

#: ../../c-api/number.rst:20
msgid ""
"Returns the result of adding *o1* and *o2*, or ``NULL`` on failure.  This"
" is the equivalent of the Python expression ``o1 + o2``."
msgstr ""
"*o1*\\과 *o2*\\를 더한 결과나, 실패 시 ``NULL``\\을 반환합니다. 이것은 파이썬 표현식 ``o1 + "
"o2``\\와 동등합니다."

#: ../../c-api/number.rst:26
msgid ""
"Returns the result of subtracting *o2* from *o1*, or ``NULL`` on failure."
"  This is the equivalent of the Python expression ``o1 - o2``."
msgstr ""
"*o1*\\에서 *o2*\\를 뺀 결과나, 실패 시 ``NULL``\\을 반환합니다. 이것은 파이썬 표현식 ``o1 - "
"o2``\\와 동등합니다."

#: ../../c-api/number.rst:32
msgid ""
"Returns the result of multiplying *o1* and *o2*, or ``NULL`` on failure."
"  This is the equivalent of the Python expression ``o1 * o2``."
msgstr ""
"*o1*\\과 *o2*\\를 곱한 결과나, 실패 시 ``NULL``\\을 반환합니다. 이것은 파이썬 표현식 ``o1 * "
"o2``\\와 동등합니다."

#: ../../c-api/number.rst:38
msgid ""
"Returns the result of matrix multiplication on *o1* and *o2*, or ``NULL``"
" on failure.  This is the equivalent of the Python expression ``o1 @ "
"o2``."
msgstr ""
"*o1*\\과 *o2*\\를 행렬 곱셈한 결과나, 실패 시 ``NULL``\\을 반환합니다. 이것은 파이썬 표현식 ``o1 @ "
"o2``\\와 동등합니다."

#: ../../c-api/number.rst:46
#, fuzzy, python-format
msgid ""
"Return the floor of *o1* divided by *o2*, or ``NULL`` on failure.  This "
"is the equivalent of the Python expression ``o1 // o2``."
msgstr ""
"*o1*\\을 *o2*\\로 나눈 나머지나, 실패 시 ``NULL``\\을 반환합니다. 이것은 파이썬 표현식 ``o1 % "
"o2``\\와 동등합니다."

#: ../../c-api/number.rst:52
#, fuzzy
msgid ""
"Return a reasonable approximation for the mathematical value of *o1* "
"divided by *o2*, or ``NULL`` on failure.  The return value is "
"\"approximate\" because binary floating-point numbers are approximate; it"
" is not possible to represent all real numbers in base two.  This "
"function can return a floating-point value when passed two integers.  "
"This is the equivalent of the Python expression ``o1 / o2``."
msgstr ""
"*o1*\\을 *o2*\\로 나눈 수학적 값의 적절한 근삿값이나, 실패 시 ``NULL``\\을 반환합니다. 반환 값은 "
"\"근사치\" 인데, 이진 부동 소수점 수가 근사치이기 때문입니다; 이진수로 모든 실수를 표현할 수는 없습니다. 이 함수는 두 개의"
" 정수를 전달할 때 부동 소수점 수를 반환할 수 있습니다."

#: ../../c-api/number.rst:61
#, python-format
msgid ""
"Returns the remainder of dividing *o1* by *o2*, or ``NULL`` on failure.  "
"This is the equivalent of the Python expression ``o1 % o2``."
msgstr ""
"*o1*\\을 *o2*\\로 나눈 나머지나, 실패 시 ``NULL``\\을 반환합니다. 이것은 파이썬 표현식 ``o1 % "
"o2``\\와 동등합니다."

#: ../../c-api/number.rst:69
msgid ""
"See the built-in function :func:`divmod`. Returns ``NULL`` on failure.  "
"This is the equivalent of the Python expression ``divmod(o1, o2)``."
msgstr ""
"내장 함수 :func:`divmod`\\를 참조하십시오. 실패하면 ``NULL``\\을 반환합니다. 이것은 파이썬 표현식 "
"``divmod(o1, o2)``\\와 동등합니다."

#: ../../c-api/number.rst:77
msgid ""
"See the built-in function :func:`pow`. Returns ``NULL`` on failure.  This"
" is the equivalent of the Python expression ``pow(o1, o2, o3)``, where "
"*o3* is optional. If *o3* is to be ignored, pass :c:data:`Py_None` in its"
" place (passing ``NULL`` for *o3* would cause an illegal memory access)."
msgstr ""
"내장 함수 :func:`pow`\\를 참조하십시오. 실패하면 ``NULL``\\을 반환합니다. 이것은 파이썬 표현식 "
"``pow(o1, o2, o3)``\\와 동등합니다, 여기서 *o3*\\는 선택적입니다. *o3*\\를 무시하려면, 그 자리에 "
":c:data:`Py_None`\\을 전달하십시오 (*o3*\\에 ``NULL``\\을 전달하면 잘못된 메모리 액세스가 "
"발생합니다)."

#: ../../c-api/number.rst:85
msgid ""
"Returns the negation of *o* on success, or ``NULL`` on failure. This is "
"the equivalent of the Python expression ``-o``."
msgstr ""
"성공 시 *o*\\의 음의 값(negation)을, 실패 시 ``NULL``\\을 반환합니다. 이것은 파이썬 표현식 "
"``-o``\\와 동등합니다."

#: ../../c-api/number.rst:91
msgid ""
"Returns *o* on success, or ``NULL`` on failure.  This is the equivalent "
"of the Python expression ``+o``."
msgstr "성공 시 *o*\\를, 실패 시 ``NULL``\\을 반환합니다. 이것은 파이썬 표현식 ``+o``\\와 동등합니다."

#: ../../c-api/number.rst:99
msgid ""
"Returns the absolute value of *o*, or ``NULL`` on failure.  This is the "
"equivalent of the Python expression ``abs(o)``."
msgstr "*o*\\의 절댓값이나, 실패 시 ``NULL``\\을 반환합니다. 이것은 파이썬 표현식 ``abs(o)``\\와 동등합니다."

#: ../../c-api/number.rst:105
msgid ""
"Returns the bitwise negation of *o* on success, or ``NULL`` on failure.  "
"This is the equivalent of the Python expression ``~o``."
msgstr ""
"성공 시 *o*\\의 비트 반전(bitwise negation)을, 실패 시 ``NULL``\\을 반환합니다. 이것은 파이썬 표현식"
" ``~o``\\와 동등합니다."

#: ../../c-api/number.rst:111
msgid ""
"Returns the result of left shifting *o1* by *o2* on success, or ``NULL`` "
"on failure.  This is the equivalent of the Python expression ``o1 << "
"o2``."
msgstr ""
"성공 시 *o1*\\을 *o2*\\만큼 왼쪽으로 시프트 한 결과를, 실패 시 ``NULL``\\을 반환합니다. 이것은 파이썬 표현식"
" ``o1 << o2``\\와 동등합니다."

#: ../../c-api/number.rst:117
msgid ""
"Returns the result of right shifting *o1* by *o2* on success, or ``NULL``"
" on failure.  This is the equivalent of the Python expression ``o1 >> "
"o2``."
msgstr ""
"성공 시 *o1*\\을 *o2*\\만큼 오른쪽으로 시프트 한 결과를, 실패 시 ``NULL``\\을 반환합니다. 이것은 파이썬 "
"표현식 ``o1 >> o2``\\와 동등합니다."

#: ../../c-api/number.rst:123
msgid ""
"Returns the \"bitwise and\" of *o1* and *o2* on success and ``NULL`` on "
"failure. This is the equivalent of the Python expression ``o1 & o2``."
msgstr ""
"성공 시 *o1*\\과 *o2*\\의 \"비트별 논리곱(bitwise and)\"을, 실패 시 ``NULL``\\을 반환합니다. "
"이것은 파이썬 표현식 ``o1 & o2``\\와 동등합니다."

#: ../../c-api/number.rst:129
msgid ""
"Returns the \"bitwise exclusive or\" of *o1* by *o2* on success, or "
"``NULL`` on failure.  This is the equivalent of the Python expression "
"``o1 ^ o2``."
msgstr ""
"성공 시 *o1*\\과 *o2*\\의 \"비트별 배타적 논리합(bitwise exclusive or)\"을, 실패 시 "
"``NULL``\\을 반환합니다. 이것은 파이썬 표현식 ``o1 ^ o2``\\와 동등합니다."

#: ../../c-api/number.rst:135
msgid ""
"Returns the \"bitwise or\" of *o1* and *o2* on success, or ``NULL`` on "
"failure. This is the equivalent of the Python expression ``o1 | o2``."
msgstr ""
"성공 시 *o1*\\과 *o2*\\의 \"비트별 논리합(bitwise or)\"을, 실패 시 ``NULL``\\을 반환합니다. "
"이것은 파이썬 표현식 ``o1 | o2``\\와 동등합니다."

#: ../../c-api/number.rst:141
msgid ""
"Returns the result of adding *o1* and *o2*, or ``NULL`` on failure.  The "
"operation is done *in-place* when *o1* supports it.  This is the "
"equivalent of the Python statement ``o1 += o2``."
msgstr ""
"*o1*\\과 *o2*\\를 더한 결과나, 실패 시 ``NULL``\\을 반환합니다. 이 연산은 *o1*\\이 지원하면 *제자리에서"
"(in-place)* 수행됩니다. 이것은 파이썬 문장 ``o1 += o2``\\와 동등합니다."

#: ../../c-api/number.rst:148
msgid ""
"Returns the result of subtracting *o2* from *o1*, or ``NULL`` on failure."
"  The operation is done *in-place* when *o1* supports it.  This is the "
"equivalent of the Python statement ``o1 -= o2``."
msgstr ""
"*o1*\\에서 *o2*\\를 뺀 결과나, 실패 시 ``NULL``\\을 반환합니다. 이 연산은 *o1*\\이 지원하면 *제자리에서"
"(in-place)* 수행됩니다. 이것은 파이썬 문장 ``o1 -= o2``\\와 동등합니다."

#: ../../c-api/number.rst:155
msgid ""
"Returns the result of multiplying *o1* and *o2*, or ``NULL`` on failure."
"  The operation is done *in-place* when *o1* supports it.  This is the "
"equivalent of the Python statement ``o1 *= o2``."
msgstr ""
"*o1*\\과 *o2*\\를 곱한 결과나, 실패 시 ``NULL``\\을 반환합니다. 이 연산은 *o1*\\이 지원하면 *제자리에서"
"(in-place)* 수행됩니다. 이것은 파이썬 문장 ``o1 *= o2``\\와 동등합니다."

#: ../../c-api/number.rst:162
msgid ""
"Returns the result of matrix multiplication on *o1* and *o2*, or ``NULL``"
" on failure.  The operation is done *in-place* when *o1* supports it.  "
"This is the equivalent of the Python statement ``o1 @= o2``."
msgstr ""
"*o1*\\과 *o2*\\를 행렬 곱셈한 결과나, 실패 시 ``NULL``\\을 반환합니다. 이 연산은 *o1*\\이 지원하면 "
"*제자리에서(in-place)* 수행됩니다. 이것은 파이썬 문장 ``o1 @= o2``\\와 동등합니다."

#: ../../c-api/number.rst:171
msgid ""
"Returns the mathematical floor of dividing *o1* by *o2*, or ``NULL`` on "
"failure. The operation is done *in-place* when *o1* supports it.  This is"
" the equivalent of the Python statement ``o1 //= o2``."
msgstr ""
"*o1*\\을 *o2*\\로 나눈 수학적 플로어(floor)나, 실패 시 ``NULL``\\을 반환합니다. 이 연산은 *o1*\\이"
" 지원하면 *제자리에서(in-place)* 수행됩니다. 이것은 파이썬 문장 ``o1 //= o2``\\와 동등합니다."

#: ../../c-api/number.rst:178
#, fuzzy
msgid ""
"Return a reasonable approximation for the mathematical value of *o1* "
"divided by *o2*, or ``NULL`` on failure.  The return value is "
"\"approximate\" because binary floating-point numbers are approximate; it"
" is not possible to represent all real numbers in base two.  This "
"function can return a floating-point value when passed two integers.  The"
" operation is done *in-place* when *o1* supports it. This is the "
"equivalent of the Python statement ``o1 /= o2``."
msgstr ""
"*o1*\\을 *o2*\\로 나눈 수학적 값의 적절한 근삿값이나, 실패 시 ``NULL``\\을 반환합니다. 반환 값은 "
"\"근사치\" 인데, 이진 부동 소수점 수가 근사치이기 때문입니다; 이진수로 모든 실수를 표현할 수는 없습니다. 이 함수는 두 개의"
" 정수를 전달할 때 부동 소수점 수를 반환할 수 있습니다. 이 연산은 *o1*\\이 지원하면 *제자리에서(in-place)* "
"수행됩니다."

#: ../../c-api/number.rst:188
msgid ""
"Returns the remainder of dividing *o1* by *o2*, or ``NULL`` on failure.  "
"The operation is done *in-place* when *o1* supports it.  This is the "
"equivalent of the Python statement ``o1 %= o2``."
msgstr ""
"*o1*\\을 *o2*\\로 나눈 나머지나, 실패 시 ``NULL``\\을 반환합니다. 이 연산은 *o1*\\이 지원하면 "
"*제자리에서(in-place)* 수행됩니다. 이것은 파이썬 문장 ``o1 %= o2``\\와 동등합니다."

#: ../../c-api/number.rst:197
msgid ""
"See the built-in function :func:`pow`. Returns ``NULL`` on failure.  The "
"operation is done *in-place* when *o1* supports it.  This is the "
"equivalent of the Python statement ``o1 **= o2`` when o3 is "
":c:data:`Py_None`, or an in-place variant of ``pow(o1, o2, o3)`` "
"otherwise. If *o3* is to be ignored, pass :c:data:`Py_None` in its place "
"(passing ``NULL`` for *o3* would cause an illegal memory access)."
msgstr ""
"내장 함수 :func:`pow`\\를 참조하십시오. 실패하면 ``NULL``\\을 반환합니다. 이 연산은 *o1*\\이 지원하면 "
"*제자리에서(in-place)* 수행됩니다. 이것은 o3가 :c:data:`Py_None`\\일 때 파이썬 문장 ``o1 **= "
"o2``\\와, 그렇지 않으면 ``pow(o1, o2, o3)``\\의 제자리 변형과 동등합니다. *o3*\\를 무시하려면, 그 "
"자리에 :c:data:`Py_None`\\을 전달하십시오 (*o3*\\에 ``NULL``\\을 전달하면 잘못된 메모리 액세스가 "
"발생합니다)."

#: ../../c-api/number.rst:206
msgid ""
"Returns the result of left shifting *o1* by *o2* on success, or ``NULL`` "
"on failure.  The operation is done *in-place* when *o1* supports it.  "
"This is the equivalent of the Python statement ``o1 <<= o2``."
msgstr ""
"성공 시 *o1*\\을 *o2*\\만큼 왼쪽으로 시프트 한 결과를, 실패 시 ``NULL``\\을 반환합니다. 이 연산은 "
"*o1*\\이 지원하면 *제자리에서(in-place)* 수행됩니다. 이것은 파이썬 문장 ``o1 <<= o2``\\와 동등합니다."

#: ../../c-api/number.rst:213
msgid ""
"Returns the result of right shifting *o1* by *o2* on success, or ``NULL``"
" on failure.  The operation is done *in-place* when *o1* supports it.  "
"This is the equivalent of the Python statement ``o1 >>= o2``."
msgstr ""
"성공 시 *o1*\\을 *o2*\\만큼 오른쪽으로 시프트 한 결과를, 실패 시 ``NULL``\\을 반환합니다. 이 연산은 "
"*o1*\\이 지원하면 *제자리에서(in-place)* 수행됩니다. 이것은 파이썬 문장 ``o1 >>= o2``\\와 동등합니다."

#: ../../c-api/number.rst:220
msgid ""
"Returns the \"bitwise and\" of *o1* and *o2* on success and ``NULL`` on "
"failure. The operation is done *in-place* when *o1* supports it.  This is"
" the equivalent of the Python statement ``o1 &= o2``."
msgstr ""
"성공 시 *o1*\\과 *o2*\\의 \"비트별 논리곱(bitwise and)\"을, 실패 시 ``NULL``\\을 반환합니다. 이"
" 연산은 *o1*\\이 지원하면 *제자리에서(in-place)* 수행됩니다. 이것은 파이썬 문장 ``o1 &= o2``\\와 "
"동등합니다."

#: ../../c-api/number.rst:227
msgid ""
"Returns the \"bitwise exclusive or\" of *o1* by *o2* on success, or "
"``NULL`` on failure.  The operation is done *in-place* when *o1* supports"
" it.  This is the equivalent of the Python statement ``o1 ^= o2``."
msgstr ""
"성공 시 *o1*\\과 *o2*\\의 \"비트별 배타적 논리합(bitwise exclusive or)\"을, 실패 시 "
"``NULL``\\을 반환합니다. 이 연산은 *o1*\\이 지원하면 *제자리에서(in-place)* 수행됩니다. 이것은 파이썬 문장"
" ``o1 ^= o2``\\와 동등합니다."

#: ../../c-api/number.rst:234
msgid ""
"Returns the \"bitwise or\" of *o1* and *o2* on success, or ``NULL`` on "
"failure.  The operation is done *in-place* when *o1* supports it.  This "
"is the equivalent of the Python statement ``o1 |= o2``."
msgstr ""
"성공 시 *o1*\\과 *o2*\\의 \"비트별 논리합(bitwise or)\"을, 실패 시 ``NULL``\\을 반환합니다. 이 "
"연산은 *o1*\\이 지원하면 *제자리에서(in-place)* 수행됩니다. 이것은 파이썬 문장 ``o1 |= o2``\\와 "
"동등합니다."

#: ../../c-api/number.rst:243
msgid ""
"Returns the *o* converted to an integer object on success, or ``NULL`` on"
" failure.  This is the equivalent of the Python expression ``int(o)``."
msgstr ""
"성공 시 정수 객체로 변환된 *o*\\를, 실패 시 ``NULL``\\을 반환합니다. 이것은 파이썬 표현식 ``int(o)``\\와"
" 동등합니다."

#: ../../c-api/number.rst:251
msgid ""
"Returns the *o* converted to a float object on success, or ``NULL`` on "
"failure. This is the equivalent of the Python expression ``float(o)``."
msgstr ""
"성공 시 float 객체로 변환된 *o*\\를, 실패 시 ``NULL``\\을 반환합니다. 이것은 파이썬 표현식 "
"``float(o)``\\와 동등합니다."

#: ../../c-api/number.rst:257
msgid ""
"Returns the *o* converted to a Python int on success or ``NULL`` with a "
":exc:`TypeError` exception raised on failure."
msgstr ""
"성공 시 파이썬 int로 변환된 *o*\\를, 실패 시 ``NULL``\\을 반환합니다. 실패 시 :exc:`TypeError` "
"예외가 발생합니다."

#: ../../c-api/number.rst:260
msgid ""
"The result always has exact type :class:`int`.  Previously, the result "
"could have been an instance of a subclass of ``int``."
msgstr ""

#: ../../c-api/number.rst:267
msgid ""
"Returns the integer *n* converted to base *base* as a string.  The *base*"
" argument must be one of 2, 8, 10, or 16.  For base 2, 8, or 16, the "
"returned string is prefixed with a base marker of ``'0b'``, ``'0o'``, or "
"``'0x'``, respectively.  If *n* is not a Python int, it is converted with"
" :c:func:`PyNumber_Index` first."
msgstr ""
"정수 *n*\\을 진수 *base*\\를 사용해서 변환한 문자열을 반환합니다. *base* 인자는 2, 8, 10 또는 16중 "
"하나여야 합니다. 진수 2, 8 또는 16의 경우, 반환된 문자열은 ``'0b'``, ``'0o'`` 또는 ``'0x'``\\의 "
"진수 표시자가 각각 앞에 붙습니다. *n*\\이 파이썬 int가 아니면, 먼저 :c:func:`PyNumber_Index`\\로 "
"변환됩니다."

#: ../../c-api/number.rst:276
#, fuzzy
msgid ""
"Returns *o* converted to a :c:type:`Py_ssize_t` value if *o* can be "
"interpreted as an integer.  If the call fails, an exception is raised and"
" ``-1`` is returned."
msgstr ""
"*o*\\가 정수로 해석될 수 있으면, *o*\\를 Py_ssize_t 값으로 변환하여 반환합니다. 호출이 실패하면, 예외가 "
"발생하고 ``-1``\\이 반환됩니다."

#: ../../c-api/number.rst:279
#, fuzzy
msgid ""
"If *o* can be converted to a Python int but the attempt to convert to a "
":c:type:`Py_ssize_t` value would raise an :exc:`OverflowError`, then the "
"*exc* argument is the type of exception that will be raised (usually "
":exc:`IndexError` or :exc:`OverflowError`).  If *exc* is ``NULL``, then "
"the exception is cleared and the value is clipped to ``PY_SSIZE_T_MIN`` "
"for a negative integer or ``PY_SSIZE_T_MAX`` for a positive integer."
msgstr ""
"*o*\\가 파이썬 int로 변환될 수 있지만 Py_ssize_t 값으로 변환하려는 시도가 "
":exc:`OverflowError`\\를 발생시키면, *exc* 인자는 발생할 예외의 형(일반적으로 "
":exc:`IndexError`\\나 :exc:`OverflowError`)입니다. *exc*\\가 ``NULL``\\이면, 예외가"
" 지워지고 값은 음의 정수는 ``PY_SSIZE_T_MIN``\\으로, 양의 정수는 ``PY_SSIZE_T_MAX``\\로 "
"잘립니다."

#: ../../c-api/number.rst:289
#, fuzzy
msgid ""
"Returns ``1`` if *o* is an index integer (has the ``nb_index`` slot of "
"the ``tp_as_number`` structure filled in), and ``0`` otherwise. This "
"function always succeeds."
msgstr ""
"*o*\\가 인덱스 정수(tp_as_number 구조의 nb_index 슬롯이 채워져 있습니다)면 ``1``\\을 반환하고, 그렇지"
" 않으면 ``0``\\을 반환합니다. 이 함수는 항상 성공합니다."

#: ../../c-api/number.rst:67 ../../c-api/number.rst:75
#: ../../c-api/number.rst:97 ../../c-api/number.rst:195
#: ../../c-api/number.rst:241 ../../c-api/number.rst:249
msgid "built-in function"
msgstr ""

#: ../../c-api/number.rst:67
msgid "divmod"
msgstr ""

#: ../../c-api/number.rst:75 ../../c-api/number.rst:195
msgid "pow"
msgstr ""

#: ../../c-api/number.rst:97
msgid "abs"
msgstr ""

#: ../../c-api/number.rst:241
msgid "int"
msgstr ""

#: ../../c-api/number.rst:249
msgid "float"
msgstr ""

#~ msgid ""
#~ "Return the floor of *o1* divided "
#~ "by *o2*, or ``NULL`` on failure.  "
#~ "This is equivalent to the \"classic\""
#~ " division of integers."
#~ msgstr ""
#~ "*o1*\\을 *o2*\\로 나눈 결과나, 실패 시 "
#~ "``NULL``\\을 반환합니다. 이것은 \"고전적인\" 정수 나눗셈과"
#~ " 동등합니다."

