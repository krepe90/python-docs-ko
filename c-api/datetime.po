# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2017, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-04-17 23:44+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: Dong-gweon Oh <flowdas@gmail.com>\n"
"Language-Team: Korean (https://python.flowdas.com)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.17.0\n"

#: ../../c-api/datetime.rst:6
msgid "DateTime Objects"
msgstr "DateTime 객체"

#: ../../c-api/datetime.rst:8
#, fuzzy
msgid ""
"Various date and time objects are supplied by the :mod:`datetime` module."
" Before using any of these functions, the header file :file:`datetime.h` "
"must be included in your source (note that this is not included by "
":file:`Python.h`), and the macro :c:macro:`!PyDateTime_IMPORT` must be "
"invoked, usually as part of the module initialisation function.  The "
"macro puts a pointer to a C structure into a static variable, "
":c:data:`!PyDateTimeAPI`, that is used by the following macros."
msgstr ""
"다양한 날짜와 시간 객체가 :mod:`datetime` 모듈에서 제공됩니다. 이 함수를 사용하기 전에, 헤더 파일 "
":file:`datetime.h`\\가 소스에 포함되어야 하고 (:file:`Python.h`\\가 포함하지 않음에 유의하십시오),"
" 일반적으로 모듈 초기화 함수의 일부로 :c:macro:`PyDateTime_IMPORT` 매크로를 호출해야 합니다. 매크로는 C "
"구조체에 대한 포인터를 다음 매크로에서 사용되는 static 변수 :c:data:`PyDateTimeAPI`\\에 넣습니다."

#: ../../c-api/datetime.rst:18
msgid "This subtype of :c:type:`PyObject` represents a Python date object."
msgstr ""

#: ../../c-api/datetime.rst:22
msgid "This subtype of :c:type:`PyObject` represents a Python datetime object."
msgstr ""

#: ../../c-api/datetime.rst:26
msgid "This subtype of :c:type:`PyObject` represents a Python time object."
msgstr ""

#: ../../c-api/datetime.rst:30
msgid ""
"This subtype of :c:type:`PyObject` represents the difference between two "
"datetime values."
msgstr ""

#: ../../c-api/datetime.rst:34
msgid ""
"This instance of :c:type:`PyTypeObject` represents the Python date type; "
"it is the same object as :class:`datetime.date` in the Python layer."
msgstr ""

#: ../../c-api/datetime.rst:39
msgid ""
"This instance of :c:type:`PyTypeObject` represents the Python datetime "
"type; it is the same object as :class:`datetime.datetime` in the Python "
"layer."
msgstr ""

#: ../../c-api/datetime.rst:44
msgid ""
"This instance of :c:type:`PyTypeObject` represents the Python time type; "
"it is the same object as :class:`datetime.time` in the Python layer."
msgstr ""

#: ../../c-api/datetime.rst:49
msgid ""
"This instance of :c:type:`PyTypeObject` represents Python type for the "
"difference between two datetime values; it is the same object as "
":class:`datetime.timedelta` in the Python layer."
msgstr ""

#: ../../c-api/datetime.rst:55
msgid ""
"This instance of :c:type:`PyTypeObject` represents the Python time zone "
"info type; it is the same object as :class:`datetime.tzinfo` in the "
"Python layer."
msgstr ""

#: ../../c-api/datetime.rst:59
msgid "Macro for access to the UTC singleton:"
msgstr "UTC 싱글톤에 액세스하기 위한 매크로:"

#: ../../c-api/datetime.rst:63
msgid ""
"Returns the time zone singleton representing UTC, the same object as "
":attr:`datetime.timezone.utc`."
msgstr "UTC를 나타내는 시간대 싱글톤을 반환합니다, :attr:`datetime.timezone.utc`\\와 같은 객체입니다."

#: ../../c-api/datetime.rst:69
msgid "Type-check macros:"
msgstr "형 검사 매크로:"

#: ../../c-api/datetime.rst:73
#, fuzzy
msgid ""
"Return true if *ob* is of type :c:data:`PyDateTime_DateType` or a subtype"
" of :c:data:`!PyDateTime_DateType`.  *ob* must not be ``NULL``.  This "
"function always succeeds."
msgstr ""
"*ob*\\가 :c:data:`PyDateTime_DateType` 형이거나 "
":c:data:`PyDateTime_DateType`\\의 서브 형이면 참을 돌려줍니다. *ob*\\는 ``NULL``\\이 "
"아니어야 합니다. 이 함수는 항상 성공합니다."

#: ../../c-api/datetime.rst:80
msgid ""
"Return true if *ob* is of type :c:data:`PyDateTime_DateType`. *ob* must "
"not be ``NULL``.  This function always succeeds."
msgstr ""
"*ob*\\가 :c:data:`PyDateTime_DateType` 형이면 참을 돌려줍니다. *ob*\\는 ``NULL``\\이 "
"아니어야 합니다. 이 함수는 항상 성공합니다."

#: ../../c-api/datetime.rst:86
#, fuzzy
msgid ""
"Return true if *ob* is of type :c:data:`PyDateTime_DateTimeType` or a "
"subtype of :c:data:`!PyDateTime_DateTimeType`.  *ob* must not be "
"``NULL``.  This function always succeeds."
msgstr ""
"*ob*\\가 :c:data:`PyDateTime_DateTimeType` 형이거나 "
":c:data:`PyDateTime_DateTimeType`\\의 서브 형이면 참을 돌려줍니다. *ob*\\는 ``NULL``\\이"
" 아니어야 합니다. 이 함수는 항상 성공합니다."

#: ../../c-api/datetime.rst:93
msgid ""
"Return true if *ob* is of type :c:data:`PyDateTime_DateTimeType`. *ob* "
"must not be ``NULL``.  This function always succeeds."
msgstr ""
"*ob*\\가 :c:data:`PyDateTime_DateTimeType` 형이면 참을 돌려줍니다. *ob*\\는 "
"``NULL``\\이 아니어야 합니다. 이 함수는 항상 성공합니다."

#: ../../c-api/datetime.rst:99
#, fuzzy
msgid ""
"Return true if *ob* is of type :c:data:`PyDateTime_TimeType` or a subtype"
" of :c:data:`!PyDateTime_TimeType`.  *ob* must not be ``NULL``.  This "
"function always succeeds."
msgstr ""
"*ob*\\가 :c:data:`PyDateTime_TimeType` 형이거나 "
":c:data:`PyDateTime_TimeType`\\의 서브 형이면 참을 돌려줍니다. *ob*\\는 ``NULL``\\이 "
"아니어야 합니다. 이 함수는 항상 성공합니다."

#: ../../c-api/datetime.rst:106
msgid ""
"Return true if *ob* is of type :c:data:`PyDateTime_TimeType`. *ob* must "
"not be ``NULL``.  This function always succeeds."
msgstr ""
"*ob*\\가 :c:data:`PyDateTime_TimeType` 형이면 참을 돌려줍니다. *ob*\\는 ``NULL``\\이 "
"아니어야 합니다. 이 함수는 항상 성공합니다."

#: ../../c-api/datetime.rst:112
#, fuzzy
msgid ""
"Return true if *ob* is of type :c:data:`PyDateTime_DeltaType` or a "
"subtype of :c:data:`!PyDateTime_DeltaType`.  *ob* must not be ``NULL``.  "
"This function always succeeds."
msgstr ""
"*ob*\\가 :c:data:`PyDateTime_DeltaType` 형이거나 "
":c:data:`PyDateTime_DeltaType`\\의 서브 형이면 참을 돌려줍니다. *ob*\\는 ``NULL``\\이 "
"아니어야 합니다. 이 함수는 항상 성공합니다."

#: ../../c-api/datetime.rst:119
msgid ""
"Return true if *ob* is of type :c:data:`PyDateTime_DeltaType`. *ob* must "
"not be ``NULL``.  This function always succeeds."
msgstr ""
"*ob*\\가 :c:data:`PyDateTime_DeltaType` 형이면 참을 돌려줍니다. *ob*\\는 ``NULL``\\이 "
"아니어야 합니다. 이 함수는 항상 성공합니다."

#: ../../c-api/datetime.rst:125
#, fuzzy
msgid ""
"Return true if *ob* is of type :c:data:`PyDateTime_TZInfoType` or a "
"subtype of :c:data:`!PyDateTime_TZInfoType`.  *ob* must not be ``NULL``."
"  This function always succeeds."
msgstr ""
"*ob*\\가 :c:data:`PyDateTime_TZInfoType` 형이거나 "
":c:data:`PyDateTime_TZInfoType`\\의 서브 형이면 참을 돌려줍니다. *ob*\\는 ``NULL``\\이 "
"아니어야 합니다. 이 함수는 항상 성공합니다."

#: ../../c-api/datetime.rst:132
msgid ""
"Return true if *ob* is of type :c:data:`PyDateTime_TZInfoType`. *ob* must"
" not be ``NULL``.  This function always succeeds."
msgstr ""
"*ob*\\가 :c:data:`PyDateTime_TZInfoType` 형이면 참을 돌려줍니다. *ob*\\는 ``NULL``\\이"
" 아니어야 합니다. 이 함수는 항상 성공합니다."

#: ../../c-api/datetime.rst:136
msgid "Macros to create objects:"
msgstr "객체를 만드는 매크로:"

#: ../../c-api/datetime.rst:140
msgid ""
"Return a :class:`datetime.date` object with the specified year, month and"
" day."
msgstr "지정된 년, 월, 일의 :class:`datetime.date` 객체를 반환합니다."

#: ../../c-api/datetime.rst:145
msgid ""
"Return a :class:`datetime.datetime` object with the specified year, "
"month, day, hour, minute, second and microsecond."
msgstr "지정된 년, 월, 일, 시, 분, 초 및 마이크로초의 :class:`datetime.datetime` 객체를 반환합니다."

#: ../../c-api/datetime.rst:151
msgid ""
"Return a :class:`datetime.datetime` object with the specified year, "
"month, day, hour, minute, second, microsecond and fold."
msgstr "지정된 년, 월, 일, 시, 분, 초, 마이크로초 및 fold의 :class:`datetime.datetime` 객체를 반환합니다."

#: ../../c-api/datetime.rst:159
msgid ""
"Return a :class:`datetime.time` object with the specified hour, minute, "
"second and microsecond."
msgstr "지정된 시, 분, 초 및 마이크로초의 :class:`datetime.time` 객체를 반환합니다."

#: ../../c-api/datetime.rst:165
msgid ""
"Return a :class:`datetime.time` object with the specified hour, minute, "
"second, microsecond and fold."
msgstr "지정된 시, 분, 초, 마이크로초 및 fold의 :class:`datetime.time` 객체를 반환합니다."

#: ../../c-api/datetime.rst:173
msgid ""
"Return a :class:`datetime.timedelta` object representing the given number"
" of days, seconds and microseconds.  Normalization is performed so that "
"the resulting number of microseconds and seconds lie in the ranges "
"documented for :class:`datetime.timedelta` objects."
msgstr ""
"지정된 일, 초 및 마이크로초 수를 나타내는 :class:`datetime.timedelta` 객체를 반환합니다. 결과 마이크로초와"
" 초가 :class:`datetime.timedelta` 객체에 관해 설명된 범위에 있도록 정규화가 수행됩니다."

#: ../../c-api/datetime.rst:181
msgid ""
"Return a :class:`datetime.timezone` object with an unnamed fixed offset "
"represented by the *offset* argument."
msgstr "*offset* 인자로 나타내지는 이름이 없는 고정 오프셋의 :class:`datetime.timezone` 객체를 돌려줍니다."

#: ../../c-api/datetime.rst:189
msgid ""
"Return a :class:`datetime.timezone` object with a fixed offset "
"represented by the *offset* argument and with tzname *name*."
msgstr ""
"*offset* 인자와 tzname *name*\\으로 나타내지는 고정 오프셋의 :class:`datetime.timezone` "
"객체를 돌려줍니다."

#: ../../c-api/datetime.rst:195
#, fuzzy
msgid ""
"Macros to extract fields from date objects.  The argument must be an "
"instance of :c:type:`PyDateTime_Date`, including subclasses (such as "
":c:type:`PyDateTime_DateTime`).  The argument must not be ``NULL``, and "
"the type is not checked:"
msgstr ""
"날짜 객체에서 필드를 추출하는 매크로. 인자는 서브 클래스(가령 :c:data:`PyDateTime_DateTime`)를 포함하여 "
":c:data:`PyDateTime_Date`\\의 인스턴스여야 합니다. 인자는 ``NULL``\\이 아니어야 하며, 형은 검사하지"
" 않습니다:"

#: ../../c-api/datetime.rst:202
msgid "Return the year, as a positive int."
msgstr "양의 int로, 년을 반환합니다."

#: ../../c-api/datetime.rst:207
msgid "Return the month, as an int from 1 through 12."
msgstr "1에서 12까지의 int로, 월을 반환합니다."

#: ../../c-api/datetime.rst:212
msgid "Return the day, as an int from 1 through 31."
msgstr "1에서 31까지의 int로, 일을 반환합니다."

#: ../../c-api/datetime.rst:215
#, fuzzy
msgid ""
"Macros to extract fields from datetime objects.  The argument must be an "
"instance of :c:type:`PyDateTime_DateTime`, including subclasses. The "
"argument must not be ``NULL``, and the type is not checked:"
msgstr ""
"날짜 시간 객체에서 필드를 추출하는 매크로. 인자는 서브 클래스를 포함하여 "
":c:data:`PyDateTime_DateTime`\\의 인스턴스여야 합니다. 인자는 ``NULL``\\이 아니어야 하며, 형은 "
"검사하지 않습니다.:"

#: ../../c-api/datetime.rst:221 ../../c-api/datetime.rst:259
msgid "Return the hour, as an int from 0 through 23."
msgstr "0부터 23까지의 int로, 시를 반환합니다."

#: ../../c-api/datetime.rst:226 ../../c-api/datetime.rst:264
msgid "Return the minute, as an int from 0 through 59."
msgstr "0부터 59까지의 int로, 분을 반환합니다."

#: ../../c-api/datetime.rst:231 ../../c-api/datetime.rst:269
msgid "Return the second, as an int from 0 through 59."
msgstr "0부터 59까지의 int로, 초를 반환합니다."

#: ../../c-api/datetime.rst:236 ../../c-api/datetime.rst:274
msgid "Return the microsecond, as an int from 0 through 999999."
msgstr "0부터 999999까지의 int로, 마이크로초를 반환합니다."

#: ../../c-api/datetime.rst:241 ../../c-api/datetime.rst:279
#, fuzzy
msgid "Return the fold, as an int from 0 through 1."
msgstr "1에서 31까지의 int로, 일을 반환합니다."

#: ../../c-api/datetime.rst:248 ../../c-api/datetime.rst:286
msgid "Return the tzinfo (which may be ``None``)."
msgstr ""

#: ../../c-api/datetime.rst:253
#, fuzzy
msgid ""
"Macros to extract fields from time objects.  The argument must be an "
"instance of :c:type:`PyDateTime_Time`, including subclasses. The argument"
" must not be ``NULL``, and the type is not checked:"
msgstr ""
"시간 객체에서 필드를 추출하는 매크로. 인자는 서브 클래스를 포함하여 :c:data:`PyDateTime_Time`\\의 "
"인스턴스여야 합니다. 인자는 ``NULL``\\이 아니어야 하며 형은 검사하지 않습니다:"

#: ../../c-api/datetime.rst:291
#, fuzzy
msgid ""
"Macros to extract fields from time delta objects.  The argument must be "
"an instance of :c:type:`PyDateTime_Delta`, including subclasses. The "
"argument must not be ``NULL``, and the type is not checked:"
msgstr ""
"시간 델타 객체에서 필드를 추출하는 매크로. 인자는 서브 클래스를 포함하여 :c:data:`PyDateTime_Delta`\\의 "
"인스턴스여야 합니다. 인자는 ``NULL``\\이 아니어야 하며 형은 검사하지 않습니다.:"

#: ../../c-api/datetime.rst:297
msgid "Return the number of days, as an int from -999999999 to 999999999."
msgstr "-999999999에서 999999999까지의 int로, 일 수를 반환합니다."

#: ../../c-api/datetime.rst:304
msgid "Return the number of seconds, as an int from 0 through 86399."
msgstr "0부터 86399까지의 int로, 초 수를 반환합니다."

#: ../../c-api/datetime.rst:311
msgid "Return the number of microseconds, as an int from 0 through 999999."
msgstr "0에서 999999까지의 int로, 마이크로초 수를 반환합니다."

#: ../../c-api/datetime.rst:316
msgid "Macros for the convenience of modules implementing the DB API:"
msgstr "DB API를 구현하는 모듈의 편의를 위한 매크로:"

#: ../../c-api/datetime.rst:320
#, fuzzy
msgid ""
"Create and return a new :class:`datetime.datetime` object given an "
"argument tuple suitable for passing to "
":meth:`datetime.datetime.fromtimestamp`."
msgstr ""
":meth:`datetime.datetime.fromtimestamp()`\\에 전달하는 데 적합한 인자 튜플로 새 "
":class:`datetime.datetime` 객체를 만들고 반환합니다."

#: ../../c-api/datetime.rst:326
#, fuzzy
msgid ""
"Create and return a new :class:`datetime.date` object given an argument "
"tuple suitable for passing to :meth:`datetime.date.fromtimestamp`."
msgstr ""
":meth:`datetime.date.fromtimestamp()`\\에 전달하는 데 적합한 인자 튜플로 새 "
":class:`datetime.date` 객체를 만들고 반환합니다."

