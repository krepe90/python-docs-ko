# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2017, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-04-17 23:44+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: Dong-gweon Oh <flowdas@gmail.com>\n"
"Language-Team: Korean (https://python.flowdas.com)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.17.0\n"

#: ../../c-api/sequence.rst:6
msgid "Sequence Protocol"
msgstr "시퀀스 프로토콜"

#: ../../c-api/sequence.rst:11
msgid ""
"Return ``1`` if the object provides the sequence protocol, and ``0`` "
"otherwise. Note that it returns ``1`` for Python classes with a "
":meth:`~object.__getitem__` method, unless they are :class:`dict` "
"subclasses, since in general it is impossible to determine what type of "
"keys the class supports.  This function always succeeds."
msgstr ""
"객체가 시퀀스 프로토콜을 제공하면 ``1``\\을 반환하고, 그렇지 않으면 ``0``\\을 반환합니다. "
":meth:`~object.__getitem__` 메서드가 있는 파이썬 클래스의 경우 :class:`dict` 서브 클래스가 아닌 "
"한 ``1``\\을 반환하는 것에 유의하십시오. 일반적으로 클래스가 어떤 형의 키를 지원하는지 판단할 수 없기 때문입니다. 이 "
"함수는 항상 성공합니다."

#: ../../c-api/sequence.rst:23
msgid ""
"Returns the number of objects in sequence *o* on success, and ``-1`` on "
"failure.  This is equivalent to the Python expression ``len(o)``."
msgstr ""
"성공 시 시퀀스 *o*\\의 객체 수를 반환하고, 실패하면 ``-1``\\을 반환합니다. 이것은 파이썬 표현식 "
"``len(o)``\\와 동등합니다."

#: ../../c-api/sequence.rst:29
msgid ""
"Return the concatenation of *o1* and *o2* on success, and ``NULL`` on "
"failure. This is the equivalent of the Python expression ``o1 + o2``."
msgstr ""
"성공 시 *o1*\\와 *o2*\\의 이어붙이기를 반환하고, 실패하면 ``NULL``\\을 반환합니다. 이것은 파이썬 표현식 "
"``o1 + o2``\\와 동등합니다."

#: ../../c-api/sequence.rst:35
msgid ""
"Return the result of repeating sequence object *o* *count* times, or "
"``NULL`` on failure.  This is the equivalent of the Python expression ``o"
" * count``."
msgstr ""
"시퀸스 객체 *o*\\를 *count* 번 반복한 결과를 반환하거나, 실패 시 ``NULL``\\을 반환합니다. 이것은 파이썬 "
"표현식 ``o * count``\\와 동등합니다."

#: ../../c-api/sequence.rst:41
msgid ""
"Return the concatenation of *o1* and *o2* on success, and ``NULL`` on "
"failure. The operation is done *in-place* when *o1* supports it.  This is"
" the equivalent of the Python expression ``o1 += o2``."
msgstr ""
"성공 시 *o1*\\와 *o2*\\의 이어붙이기를 반환하고, 실패하면 ``NULL``\\을 반환합니다. 이 연산은 *o1*\\가 "
"지원하면 *제자리에서(in-place)* 수행됩니다. 이것은 파이썬 표현식 ``o1 += o2``\\와 동등합니다."

#: ../../c-api/sequence.rst:48
msgid ""
"Return the result of repeating sequence object *o* *count* times, or "
"``NULL`` on failure.  The operation is done *in-place* when *o* supports "
"it.  This is the equivalent of the Python expression ``o *= count``."
msgstr ""
"시퀸스 객체 *o*\\를 *count* 번 반복한 결과를 반환하거나, 실패 시 ``NULL``\\을 반환합니다. 이 연산은 "
"*o*\\가 지원하면 *제자리에서(in-place)* 수행됩니다. 이것은 파이썬 표현식 ``o *= count``\\와 동등합니다."

#: ../../c-api/sequence.rst:55
msgid ""
"Return the *i*\\ th element of *o*, or ``NULL`` on failure. This is the "
"equivalent of the Python expression ``o[i]``."
msgstr ""
"*o*\\의 *i* 번째 요소를 반환하거나, 실패하면 ``NULL``\\을 반환합니다. 이것은 파이썬 표현식 ``o[i]``\\와 "
"동등합니다."

#: ../../c-api/sequence.rst:61
msgid ""
"Return the slice of sequence object *o* between *i1* and *i2*, or "
"``NULL`` on failure. This is the equivalent of the Python expression "
"``o[i1:i2]``."
msgstr ""
"시퀀스 객체 *o*\\의 *i1*\\와 *i2* 사이의 슬라이스를 반환하거나, 실패하면 ``NULL``\\을 반환합니다. 이것은 "
"파이썬 표현식 ``o[i1:i2]``\\와 동등합니다."

#: ../../c-api/sequence.rst:67
msgid ""
"Assign object *v* to the *i*\\ th element of *o*.  Raise an exception and"
" return ``-1`` on failure; return ``0`` on success.  This is the "
"equivalent of the Python statement ``o[i] = v``.  This function *does "
"not* steal a reference to *v*."
msgstr ""
"객체 *v*\\를 *o*\\의 *i* 번째 요소에 대입합니다. 실패하면 예외를 발생시키고 ``-1``\\을 반환합니다; 성공하면 "
"``0``\\을 반환합니다. 이것은 파이썬 문장 ``o[i] = v``\\와 동등합니다. 이 함수는 *v*\\에 대한 참조를 훔치지"
" *않습니다*."

#: ../../c-api/sequence.rst:72
msgid ""
"If *v* is ``NULL``, the element is deleted, but this feature is "
"deprecated in favour of using :c:func:`PySequence_DelItem`."
msgstr ""
"*v*\\가 ``NULL``\\이면, 요소가 삭제되지만, 이 기능은 :c:func:`PySequence_DelItem` 사용을 위해"
" 폐지되었습니다."

#: ../../c-api/sequence.rst:78
msgid ""
"Delete the *i*\\ th element of object *o*.  Returns ``-1`` on failure.  "
"This is the equivalent of the Python statement ``del o[i]``."
msgstr ""
"*o* 객체의 *i* 번째 요소를 삭제합니다. 실패하면 ``-1``\\을 반환합니다. 이것은 파이썬 문장 ``del "
"o[i]``\\와 동등합니다."

#: ../../c-api/sequence.rst:84
msgid ""
"Assign the sequence object *v* to the slice in sequence object *o* from "
"*i1* to *i2*.  This is the equivalent of the Python statement ``o[i1:i2] "
"= v``."
msgstr ""
"시퀀스 객체 *v*\\를 시퀀스 객체 *o*\\의 *i1*\\에서 *i2* 사이의 슬라이스에 대입합니다. 이것은 파이썬 문장 "
"``o[i1:i2] = v``\\와 동등합니다."

#: ../../c-api/sequence.rst:90
msgid ""
"Delete the slice in sequence object *o* from *i1* to *i2*.  Returns "
"``-1`` on failure.  This is the equivalent of the Python statement ``del "
"o[i1:i2]``."
msgstr ""
"시퀀스 객체 *o*\\의 *i1*\\에서 *i2* 사이의 슬라이스를 삭제합니다. 실패하면 ``-1``\\을 반환합니다. 이것은 "
"파이썬 문장 ``del o[i1:i2]``\\와 동등합니다."

#: ../../c-api/sequence.rst:96
msgid ""
"Return the number of occurrences of *value* in *o*, that is, return the "
"number of keys for which ``o[key] == value``.  On failure, return ``-1``."
"  This is equivalent to the Python expression ``o.count(value)``."
msgstr ""
"*o*\\에 있는 *value*\\의 수를 반환합니다. 즉, ``o[key] == value``\\를 만족하는 key의 수를 "
"반환합니다. 실패하면 ``-1``\\을 반환합니다. 이것은 파이썬 표현식 ``o.count(value)``\\와 동등합니다."

#: ../../c-api/sequence.rst:103
msgid ""
"Determine if *o* contains *value*.  If an item in *o* is equal to "
"*value*, return ``1``, otherwise return ``0``. On error, return ``-1``.  "
"This is equivalent to the Python expression ``value in o``."
msgstr ""
"*o*\\에 *value*\\가 있는지 확인합니다. *o*\\의 항목 중 하나가 *value*\\와 같으면 ``1``\\을 "
"반환하고, 그렇지 않으면 ``0``\\을 반환합니다. 에러 시 ``-1``\\을 반환합니다. 이는 파이썬 표현식 ``value in"
" o``\\와 동등합니다."

#: ../../c-api/sequence.rst:110
msgid ""
"Return the first index *i* for which ``o[i] == value``.  On error, return"
" ``-1``.    This is equivalent to the Python expression "
"``o.index(value)``."
msgstr ""
"``o[i] == value``\\을 만족하는 첫 번째 인덱스 *i*\\를 반환합니다. 에러 시 ``-1``\\을 반환합니다. "
"이것은 파이썬 표현식 ``o.index(value)``\\와 동등합니다."

#: ../../c-api/sequence.rst:116
msgid ""
"Return a list object with the same contents as the sequence or iterable "
"*o*, or ``NULL`` on failure.  The returned list is guaranteed to be new."
"  This is equivalent to the Python expression ``list(o)``."
msgstr ""
"시퀀스나 이터러블 *o*\\와 같은 내용을 가진 리스트 객체를 반환하거나, 실패하면 ``NULL``\\을 반환합니다. 반환된 "
"리스트는 새로운 것으로 보장됩니다. 이것은 파이썬 표현식 ``list(o)``\\와 동등합니다."

#: ../../c-api/sequence.rst:125
msgid ""
"Return a tuple object with the same contents as the sequence or iterable "
"*o*, or ``NULL`` on failure.  If *o* is a tuple, a new reference will be "
"returned, otherwise a tuple will be constructed with the appropriate "
"contents.  This is equivalent to the Python expression ``tuple(o)``."
msgstr ""
"시퀀스나 이터러블 *o*\\와 같은 내용을 가진 튜플 객체를 반환하거나, 실패하면 ``NULL``\\을 반환합니다. *o*\\가 "
"튜플이면, 새로운 참조가 반환되고, 그렇지 않으면 튜플이 적절한 내용으로 만들어집니다. 이것은 파이썬 표현식 "
"``tuple(o)``\\와 동등합니다."

#: ../../c-api/sequence.rst:133
msgid ""
"Return the sequence or iterable *o* as an object usable by the other "
"``PySequence_Fast*`` family of functions. If the object is not a sequence"
" or iterable, raises :exc:`TypeError` with *m* as the message text. "
"Returns ``NULL`` on failure."
msgstr ""
"시퀀스나 이터러블 *o*\\를 다른 ``PySequence_Fast*`` 계열 함수에서 사용할 수 있는 객체로 반환합니다. 객체가 "
"시퀀스나 이터러블이 아니면 *m*\\을 메시지 텍스트로 사용하여 :exc:`TypeError`\\를 발생시킵니다. 실패 시 "
"``NULL``\\을 반환합니다."

#: ../../c-api/sequence.rst:138
msgid ""
"The ``PySequence_Fast*`` functions are thus named because they assume *o*"
" is a :c:type:`PyTupleObject` or a :c:type:`PyListObject` and access the "
"data fields of *o* directly."
msgstr ""
"``PySequence_Fast*`` 함수는 *o*\\가 :c:type:`PyTupleObject`\\나 "
":c:type:`PyListObject`\\라고 가정하고 *o*\\의 데이터 필드에 직접 액세스하기 때문에 이렇게 이름 붙였습니다."

#: ../../c-api/sequence.rst:142
msgid ""
"As a CPython implementation detail, if *o* is already a sequence or list,"
" it will be returned."
msgstr "CPython 구현 세부 사항으로, *o*\\가 이미 시퀀스나 리스트면, 반환됩니다."

#: ../../c-api/sequence.rst:148
msgid ""
"Returns the length of *o*, assuming that *o* was returned by "
":c:func:`PySequence_Fast` and that *o* is not ``NULL``.  The size can "
"also be retrieved by calling :c:func:`PySequence_Size` on *o*, but "
":c:func:`PySequence_Fast_GET_SIZE` is faster because it can assume *o* is"
" a list or tuple."
msgstr ""
"*o*\\의 길이를 반환하는데, *o*\\가 :c:func:`PySequence_Fast`\\에 의해 반환되었고, *o*\\가 "
"``NULL``\\이 아니라고 가정합니다. 크기는 *o*\\에 대해 :c:func:`PySequence_Size`\\를 호출하여 "
"얻을 수도 있지만, :c:func:`PySequence_Fast_GET_SIZE`\\는 *o*\\가 리스트나 튜플이라고 가정할 수 "
"있으므로 더 빠릅니다."

#: ../../c-api/sequence.rst:157
msgid ""
"Return the *i*\\ th element of *o*, assuming that *o* was returned by "
":c:func:`PySequence_Fast`, *o* is not ``NULL``, and that *i* is within "
"bounds."
msgstr ""
"*o*\\의 *i* 번째 요소를 반환하는데, *o*\\가 :c:func:`PySequence_Fast`\\에 의해 반환되었고, "
"*o*\\가 ``NULL``\\이 아니며, *i*\\가 경계 내에 있다고 가정합니다."

#: ../../c-api/sequence.rst:163
msgid ""
"Return the underlying array of PyObject pointers.  Assumes that *o* was "
"returned by :c:func:`PySequence_Fast` and *o* is not ``NULL``."
msgstr ""
"PyObject 포인터의 하부 배열을 반환합니다. *o*\\가 :c:func:`PySequence_Fast`\\에 의해 반환되었고,"
" *o*\\가 ``NULL``\\이 아니라고 가정합니다."

#: ../../c-api/sequence.rst:166
msgid ""
"Note, if a list gets resized, the reallocation may relocate the items "
"array. So, only use the underlying array pointer in contexts where the "
"sequence cannot change."
msgstr ""
"리스트의 크기가 변경되면, 재할당이 항목 배열을 재배치할 수 있음에 유의하십시오. 따라서, 시퀀스가 변경될 수 없는 문맥에서만 하부"
" 배열 포인터를 사용하십시오."

#: ../../c-api/sequence.rst:173
msgid ""
"Return the *i*\\ th element of *o* or ``NULL`` on failure. Faster form of"
" :c:func:`PySequence_GetItem` but without checking that "
":c:func:`PySequence_Check` on *o* is true and without adjustment for "
"negative indices."
msgstr ""
"*o*\\의 *i* 번째 요소를 반환하거나, 실패하면 ``NULL``\\을 반환합니다. "
":c:func:`PySequence_GetItem`\\의 빠른 형식이지만, *o*\\에 대해 "
":c:func:`PySequence_Check`\\가 참인지 검사하지 않고, 음수 인덱스를 조정하지 않습니다."

#: ../../c-api/sequence.rst:21 ../../c-api/sequence.rst:123
msgid "built-in function"
msgstr ""

#: ../../c-api/sequence.rst:21
msgid "len"
msgstr ""

#: ../../c-api/sequence.rst:123
msgid "tuple"
msgstr ""

