# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2017, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-04-17 23:44+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: Dong-gweon Oh <flowdas@gmail.com>\n"
"Language-Team: Korean (https://python.flowdas.com)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.17.0\n"

#: ../../c-api/type.rst:6
msgid "Type Objects"
msgstr "형 객체"

#: ../../c-api/type.rst:13
msgid "The C structure of the objects used to describe built-in types."
msgstr "내장형을 기술하는 데 사용되는 객체의 C 구조체."

#: ../../c-api/type.rst:18
msgid ""
"This is the type object for type objects; it is the same object as "
":class:`type` in the Python layer."
msgstr "이것은 형 객체의 형 객체입니다; 파이썬 계층의 :class:`type`\\과 같은 객체입니다."

#: ../../c-api/type.rst:24
msgid ""
"Return non-zero if the object *o* is a type object, including instances "
"of types derived from the standard type object.  Return 0 in all other "
"cases. This function always succeeds."
msgstr ""
"객체 *o*\\가 표준형 객체에서 파생된 형의 인스턴스를 포함하여 형 객체면 0이 아닌 값을 반환합니다. 다른 모든 경우 0을 "
"반환합니다. 이 함수는 항상 성공합니다."

#: ../../c-api/type.rst:31
msgid ""
"Return non-zero if the object *o* is a type object, but not a subtype of "
"the standard type object.  Return 0 in all other cases.  This function "
"always succeeds."
msgstr ""
"객체 *o*\\가 형 객체이지만, 표준형 객체의 서브 형이 아니면 0이 아닌 값을 반환합니다. 다른 모든 경우 0을 반환합니다. 이"
" 함수는 항상 성공합니다."

#: ../../c-api/type.rst:38
msgid "Clear the internal lookup cache. Return the current version tag."
msgstr "내부 조회 캐시를 지웁니다. 현재의 버전 태그를 반환합니다."

#: ../../c-api/type.rst:42
msgid ""
"Return the :c:member:`~PyTypeObject.tp_flags` member of *type*. This "
"function is primarily meant for use with ``Py_LIMITED_API``; the "
"individual flag bits are guaranteed to be stable across Python releases, "
"but access to :c:member:`~PyTypeObject.tp_flags` itself is not part of "
"the :ref:`limited API <limited-c-api>`."
msgstr ""
"*type*\\의 :c:member:`~PyTypeObject.tp_flags` 멤버를 반환합니다. 이 함수는 주로 "
"``Py_LIMITED_API``\\와 함께 사용하기 위한 것입니다; 개별 플래그 비트는 파이썬 배포 간에 안정적인 것으로 "
"보장되지만, :c:member:`~PyTypeObject.tp_flags` 자체에 대한 액세스는 :ref:`제한된 API "
"<limited-c-api>` 일부가 아닙니다."

#: ../../c-api/type.rst:49
msgid "The return type is now ``unsigned long`` rather than ``long``."
msgstr "반환형은 이제 ``long``\\이 아니라 ``unsigned long``\\입니다."

#: ../../c-api/type.rst:55
msgid ""
"Return the type object's internal namespace, which is otherwise only "
"exposed via a read-only proxy (:attr:`cls.__dict__ <type.__dict__>`). "
"This is a replacement for accessing :c:member:`~PyTypeObject.tp_dict` "
"directly. The returned dictionary must be treated as read-only."
msgstr ""

#: ../../c-api/type.rst:61
msgid ""
"This function is meant for specific embedding and language-binding cases,"
" where direct access to the dict is necessary and indirect access (e.g. "
"via the proxy or :c:func:`PyObject_GetAttr`) isn't adequate."
msgstr ""

#: ../../c-api/type.rst:65
msgid ""
"Extension modules should continue to use ``tp_dict``, directly or "
"indirectly, when setting up their own types."
msgstr ""

#: ../../c-api/type.rst:73
msgid ""
"Invalidate the internal lookup cache for the type and all of its "
"subtypes.  This function must be called after any manual modification of "
"the attributes or base classes of the type."
msgstr ""
"형과 그것의 모든 서브 형에 대한 내부 검색 캐시를 무효로 합니다. 형의 어트리뷰트나 베이스 클래스를 수동으로 수정한 후에는 이 "
"함수를 호출해야 합니다."

#: ../../c-api/type.rst:80
msgid ""
"Register *callback* as a type watcher. Return a non-negative integer ID "
"which must be passed to future calls to :c:func:`PyType_Watch`. In case "
"of error (e.g. no more watcher IDs available), return ``-1`` and set an "
"exception."
msgstr ""

#: ../../c-api/type.rst:85
msgid ""
"In free-threaded builds, :c:func:`PyType_AddWatcher` is not thread-safe, "
"so it must be called at start up (before spawning the first thread)."
msgstr ""

#: ../../c-api/type.rst:93
msgid ""
"Clear watcher identified by *watcher_id* (previously returned from "
":c:func:`PyType_AddWatcher`). Return ``0`` on success, ``-1`` on error "
"(e.g. if *watcher_id* was never registered.)"
msgstr ""

#: ../../c-api/type.rst:97
msgid ""
"An extension should never call ``PyType_ClearWatcher`` with a "
"*watcher_id* that was not returned to it by a previous call to "
":c:func:`PyType_AddWatcher`."
msgstr ""

#: ../../c-api/type.rst:106
msgid ""
"Mark *type* as watched. The callback granted *watcher_id* by "
":c:func:`PyType_AddWatcher` will be called whenever "
":c:func:`PyType_Modified` reports a change to *type*. (The callback may "
"be called only once for a series of consecutive modifications to *type*, "
"if :c:func:`!_PyType_Lookup` is not called on *type* between the "
"modifications; this is an implementation detail and subject to change.)"
msgstr ""

#: ../../c-api/type.rst:113
msgid ""
"An extension should never call ``PyType_Watch`` with a *watcher_id* that "
"was not returned to it by a previous call to :c:func:`PyType_AddWatcher`."
msgstr ""

#: ../../c-api/type.rst:121
msgid "Type of a type-watcher callback function."
msgstr ""

#: ../../c-api/type.rst:123
msgid ""
"The callback must not modify *type* or cause :c:func:`PyType_Modified` to"
" be called on *type* or any type in its MRO; violating this rule could "
"cause infinite recursion."
msgstr ""

#: ../../c-api/type.rst:132
msgid ""
"Return non-zero if the type object *o* sets the feature *feature*. Type "
"features are denoted by single bit flags."
msgstr "형 객체 *o*\\가 기능 *feature*\\를 설정하면 0이 아닌 값을 반환합니다. 형 기능은 단일 비트 플래그로 표시됩니다."

#: ../../c-api/type.rst:138
msgid ""
"Return true if the type object includes support for the cycle detector; "
"this tests the type flag :c:macro:`Py_TPFLAGS_HAVE_GC`."
msgstr ""
"형 객체가 순환 검출기에 대한 지원을 포함하고 있으면 참을 반환합니다. 이것은 형 플래그 "
":c:macro:`Py_TPFLAGS_HAVE_GC`\\를 검사합니다."

#: ../../c-api/type.rst:144
msgid "Return true if *a* is a subtype of *b*."
msgstr "*a*\\가 *b*\\의 서브 형이면 참을 반환합니다."

#: ../../c-api/type.rst:146
msgid ""
"This function only checks for actual subtypes, which means that "
":meth:`~type.__subclasscheck__` is not called on *b*.  Call "
":c:func:`PyObject_IsSubclass` to do the same check that "
":func:`issubclass` would do."
msgstr ""
"이 함수는 실제 서브 형만 검사합니다. 즉, :meth:`~type.__subclasscheck__`\\가 *b*\\에 대해 "
"호출되지 않습니다. :func:`issubclass`\\가 수행하는 것과 같은 검사를 하려면 "
":c:func:`PyObject_IsSubclass`\\를 호출하십시오."

#: ../../c-api/type.rst:154
msgid ""
"Generic handler for the :c:member:`~PyTypeObject.tp_alloc` slot of a type"
" object.  Use Python's default memory allocation mechanism to allocate a "
"new instance and initialize all its contents to ``NULL``."
msgstr ""
"형 객체의 :c:member:`~PyTypeObject.tp_alloc` 슬롯을 위한 일반 처리기. 파이썬의 기본 메모리 할당 "
"메커니즘을 사용하여 새 인스턴스를 할당하고 모든 내용을 ``NULL``\\로 초기화합니다."

#: ../../c-api/type.rst:160
msgid ""
"Generic handler for the :c:member:`~PyTypeObject.tp_new` slot of a type "
"object.  Create a new instance using the type's "
":c:member:`~PyTypeObject.tp_alloc` slot."
msgstr ""
"형 객체의 :c:member:`~PyTypeObject.tp_new` 슬롯을 위한 일반 처리기. 형의 "
":c:member:`~PyTypeObject.tp_alloc` 슬롯을 사용하여 새 인스턴스를 만듭니다."

#: ../../c-api/type.rst:165
msgid ""
"Finalize a type object.  This should be called on all type objects to "
"finish their initialization.  This function is responsible for adding "
"inherited slots from a type's base class.  Return ``0`` on success, or "
"return ``-1`` and sets an exception on error."
msgstr ""
"형 개체를 마무리합니다. 초기화를 완료하려면 모든 형 객체에 대해 이 메서드를 호출해야 합니다. 이 함수는 형의 베이스 클래스에서 "
"상속된 슬롯을 추가합니다. 성공 시 ``0``\\을 반환하고, 오류 시 ``-1``\\을 반환하고 예외를 설정합니다."

#: ../../c-api/type.rst:171
msgid ""
"If some of the base classes implements the GC protocol and the provided "
"type does not include the :c:macro:`Py_TPFLAGS_HAVE_GC` in its flags, "
"then the GC protocol will be automatically implemented from its parents. "
"On the contrary, if the type being created does include "
":c:macro:`Py_TPFLAGS_HAVE_GC` in its flags then it **must** implement the"
" GC protocol itself by at least implementing the "
":c:member:`~PyTypeObject.tp_traverse` handle."
msgstr ""

#: ../../c-api/type.rst:181
msgid ""
"Return the type's name. Equivalent to getting the type's "
":attr:`~type.__name__` attribute."
msgstr ""

#: ../../c-api/type.rst:188
msgid ""
"Return the type's qualified name. Equivalent to getting the type's "
":attr:`~type.__qualname__` attribute."
msgstr ""

#: ../../c-api/type.rst:195
#, python-brace-format
msgid ""
"Return the type's fully qualified name. Equivalent to "
"``f\"{type.__module__}.{type.__qualname__}\"``, or "
":attr:`type.__qualname__` if :attr:`type.__module__` is not a string or "
"is equal to ``\"builtins\"``."
msgstr ""

#: ../../c-api/type.rst:203
msgid ""
"Return the type's module name. Equivalent to getting the "
":attr:`type.__module__` attribute."
msgstr ""

#: ../../c-api/type.rst:210
msgid ""
"Return the function pointer stored in the given slot. If the result is "
"``NULL``, this indicates that either the slot is ``NULL``, or that the "
"function was called with invalid parameters. Callers will typically cast "
"the result pointer into the appropriate function type."
msgstr ""
"지정된 슬롯에 저장된 함수 포인터를 반환합니다. 결과가 ``NULL``\\이면, 슬롯이 ``NULL``\\이거나 함수가 유효하지 "
"않은 매개 변수로 호출되었음을 나타냅니다. 호출자는 일반적으로 결과 포인터를 적절한 함수 형으로 캐스팅합니다."

#: ../../c-api/type.rst:216
msgid ""
"See :c:member:`PyType_Slot.slot` for possible values of the *slot* "
"argument."
msgstr "*slot* 인자의 가능한 값은 :c:member:`PyType_Slot.slot`\\을 참조하십시오."

#: ../../c-api/type.rst:220
msgid ""
":c:func:`PyType_GetSlot` can now accept all types. Previously, it was "
"limited to :ref:`heap types <heap-types>`."
msgstr ""

#: ../../c-api/type.rst:226
msgid ""
"Return the module object associated with the given type when the type was"
" created using :c:func:`PyType_FromModuleAndSpec`."
msgstr ""
":c:func:`PyType_FromModuleAndSpec`\\를 사용하여 형을 만들 때 지정된 형과 관련된 모듈 객체를 "
"반환합니다."

#: ../../c-api/type.rst:229 ../../c-api/type.rst:249
msgid ""
"If no module is associated with the given type, sets "
":py:class:`TypeError` and returns ``NULL``."
msgstr "주어진 형과 연관된 모듈이 없으면, :py:class:`TypeError`\\를 설정하고 ``NULL``\\을 반환합니다."

#: ../../c-api/type.rst:232
msgid ""
"This function is usually used to get the module in which a method is "
"defined. Note that in such a method, ``PyType_GetModule(Py_TYPE(self))`` "
"may not return the intended result. ``Py_TYPE(self)`` may be a *subclass*"
" of the intended class, and subclasses are not necessarily defined in the"
" same module as their superclass. See :c:type:`PyCMethod` to get the "
"class that defines the method. See :c:func:`PyType_GetModuleByDef` for "
"cases when :c:type:`!PyCMethod` cannot be used."
msgstr ""
"이 함수는 일반적으로 메서드가 정의된 모듈을 가져오는 데 사용됩니다. 이러한 메서드에서, "
"``PyType_GetModule(Py_TYPE(self))``\\는 의도한 결과를 반환하지 않을 수 있음에 유의하십시오. "
"``Py_TYPE(self)``\\는 의도한 클래스의 *서브 클래스*\\일 수 있으며, 서브 클래스가 반드시 슈퍼 클래스와 같은 "
"모듈에 정의된 것은 아닙니다. 메서드를 정의하는 클래스를 얻으려면 :c:type:`PyCMethod`\\를 참조하십시오. "
":c:type:`!PyCMethod`\\를 사용할 수 없는 경우는 :c:func:`PyType_GetModuleByDef`\\를 "
"참조하세요."

#: ../../c-api/type.rst:245
msgid ""
"Return the state of the module object associated with the given type. "
"This is a shortcut for calling :c:func:`PyModule_GetState()` on the "
"result of :c:func:`PyType_GetModule`."
msgstr ""
"주어진 형과 관련된 모듈 객체의 상태를 반환합니다. :c:func:`PyType_GetModule` 결과에 "
":c:func:`PyModule_GetState()`\\를 호출하는 바로 가기입니다."

#: ../../c-api/type.rst:252
msgid ""
"If the *type* has an associated module but its state is ``NULL``, returns"
" ``NULL`` without setting an exception."
msgstr "*type*\\에 연관된 모듈이 있지만, 상태가 ``NULL``\\이면, 예외를 설정하지 않고 ``NULL``\\을 반환합니다."

#: ../../c-api/type.rst:259
msgid ""
"Find the first superclass whose module was created from the given "
":c:type:`PyModuleDef` *def*, and return that module."
msgstr ""

#: ../../c-api/type.rst:262
msgid ""
"If no module is found, raises a :py:class:`TypeError` and returns "
"``NULL``."
msgstr "모듈을 찾을 수 없으면, :py:class:`TypeError`\\를 발생시키고 ``NULL``\\을 반환합니다."

#: ../../c-api/type.rst:264
msgid ""
"This function is intended to be used together with "
":c:func:`PyModule_GetState()` to get module state from slot methods (such"
" as :c:member:`~PyTypeObject.tp_init` or "
":c:member:`~PyNumberMethods.nb_add`) and other places where a method's "
"defining class cannot be passed using the :c:type:`PyCMethod` calling "
"convention."
msgstr ""

#: ../../c-api/type.rst:274
msgid "Attempt to assign a version tag to the given type."
msgstr ""

#: ../../c-api/type.rst:276
msgid ""
"Returns 1 if the type already had a valid version tag or a new one was "
"assigned, or 0 if a new tag could not be assigned."
msgstr ""

#: ../../c-api/type.rst:283
msgid "Creating Heap-Allocated Types"
msgstr "힙에 할당된 형 만들기"

#: ../../c-api/type.rst:285
msgid ""
"The following functions and structs are used to create :ref:`heap types "
"<heap-types>`."
msgstr "다음 함수와 구조체는 :ref:`힙 형 <heap-types>`\\을 만드는 데 사용됩니다."

#: ../../c-api/type.rst:290
msgid ""
"Create and return a :ref:`heap type <heap-types>` from the *spec* (see "
":c:macro:`Py_TPFLAGS_HEAPTYPE`)."
msgstr ""
"*spec*\\으로 :ref:`힙 형 <heap-types>`\\을 만들고 반환합니다 "
"(:c:macro:`Py_TPFLAGS_HEAPTYPE`\\을 찹고하세요)."

#: ../../c-api/type.rst:293
msgid ""
"The metaclass *metaclass* is used to construct the resulting type object."
" When *metaclass* is ``NULL``, the metaclass is derived from *bases* (or "
"*Py_tp_base[s]* slots if *bases* is ``NULL``, see below)."
msgstr ""

#: ../../c-api/type.rst:297
msgid ""
"Metaclasses that override :c:member:`~PyTypeObject.tp_new` are not "
"supported, except if ``tp_new`` is ``NULL``. (For backwards "
"compatibility, other ``PyType_From*`` functions allow such metaclasses. "
"They ignore ``tp_new``, which may result in incomplete initialization. "
"This is deprecated and in Python 3.14+ such metaclasses will not be "
"supported.)"
msgstr ""

#: ../../c-api/type.rst:304
msgid ""
"The *bases* argument can be used to specify base classes; it can either "
"be only one class or a tuple of classes. If *bases* is ``NULL``, the "
"*Py_tp_bases* slot is used instead. If that also is ``NULL``, the "
"*Py_tp_base* slot is used instead. If that also is ``NULL``, the new type"
" derives from :class:`object`."
msgstr ""
"베이스 클래스를 지정하는 데 *bases* 인자를 사용할 수 있습니다; 하나의 클래스 또는 클래스의 튜플일 수 있습니다. "
"*bases*\\가 ``NULL``\\이면, *Py_tp_bases* 슬롯이 대신 사용됩니다. 그 또한 ``NULL``\\이면, "
"*Py_tp_base* 슬롯이 대신 사용됩니다. 그 또한 ``NULL``\\이면, 새 형은 :class:`object`\\에서 "
"파생됩니다."

#: ../../c-api/type.rst:310
msgid ""
"The *module* argument can be used to record the module in which the new "
"class is defined. It must be a module object or ``NULL``. If not "
"``NULL``, the module is associated with the new type and can later be "
"retrieved with :c:func:`PyType_GetModule`. The associated module is not "
"inherited by subclasses; it must be specified for each class "
"individually."
msgstr ""
"*module* 인자는 새 클래스가 정의된 모듈을 기록하는 데 사용할 수 있습니다. 모듈 객체나 ``NULL``\\이어야 합니다. "
"``NULL``\\이 아니면, 모듈은 새 형과 연관되며 나중에 :c:func:`PyType_GetModule`\\로 가져올 수 "
"있습니다. 연관된 모듈은 서브 클래스에 상속되지 않습니다; 각 클래스에 대해 개별적으로 지정해야 합니다."

#: ../../c-api/type.rst:317
msgid "This function calls :c:func:`PyType_Ready` on the new type."
msgstr "이 함수는 새로운 형에 :c:func:`PyType_Ready`\\를 호출합니다."

#: ../../c-api/type.rst:319
msgid ""
"Note that this function does *not* fully match the behavior of calling "
":py:class:`type() <type>` or using the :keyword:`class` statement. With "
"user-provided base types or metaclasses, prefer :ref:`calling <capi-"
"call>` :py:class:`type` (or the metaclass) over ``PyType_From*`` "
"functions. Specifically:"
msgstr ""

#: ../../c-api/type.rst:326
msgid ""
":py:meth:`~object.__new__` is not called on the new class (and it must be"
" set to ``type.__new__``)."
msgstr ""

#: ../../c-api/type.rst:328
msgid ":py:meth:`~object.__init__` is not called on the new class."
msgstr ""

#: ../../c-api/type.rst:329
msgid ":py:meth:`~object.__init_subclass__` is not called on any bases."
msgstr ""

#: ../../c-api/type.rst:330
msgid ":py:meth:`~object.__set_name__` is not called on new descriptors."
msgstr ""

#: ../../c-api/type.rst:336
msgid "Equivalent to ``PyType_FromMetaclass(NULL, module, spec, bases)``."
msgstr "``PyType_FromMetaclass(NULL, module, spec, bases)``\\와 동등합니다."

#: ../../c-api/type.rst:342
msgid ""
"The function now accepts a single class as the *bases* argument and "
"``NULL`` as the ``tp_doc`` slot."
msgstr ""

#: ../../c-api/type.rst:347 ../../c-api/type.rst:364
msgid ""
"The function now finds and uses a metaclass corresponding to the provided"
" base classes.  Previously, only :class:`type` instances were returned."
msgstr ""

#: ../../c-api/type.rst:350 ../../c-api/type.rst:367 ../../c-api/type.rst:383
msgid ""
"The :c:member:`~PyTypeObject.tp_new` of the metaclass is *ignored*. which"
" may result in incomplete initialization. Creating classes whose "
"metaclass overrides :c:member:`~PyTypeObject.tp_new` is deprecated and in"
" Python 3.14+ it will be no longer allowed."
msgstr ""

#: ../../c-api/type.rst:358
msgid "Equivalent to ``PyType_FromMetaclass(NULL, NULL, spec, bases)``."
msgstr "``PyType_FromMetaclass(NULL, NULL, spec, bases)``\\와 동등합니다."

#: ../../c-api/type.rst:375
msgid "Equivalent to ``PyType_FromMetaclass(NULL, NULL, spec, NULL)``."
msgstr "``PyType_FromMetaclass(NULL, NULL, spec, NULL)``\\와 동등합니다."

#: ../../c-api/type.rst:379
msgid ""
"The function now finds and uses a metaclass corresponding to the base "
"classes provided in *Py_tp_base[s]* slots. Previously, only :class:`type`"
" instances were returned."
msgstr ""

#: ../../c-api/type.rst:400
msgid "Structure defining a type's behavior."
msgstr "형의 행동을 정의하는 구조체."

#: ../../c-api/type.rst:404
msgid "Name of the type, used to set :c:member:`PyTypeObject.tp_name`."
msgstr "형의 이름, :c:member:`PyTypeObject.tp_name`\\을 설정하는 데 사용됩니다."

#: ../../c-api/type.rst:408
msgid ""
"If positive, specifies the size of the instance in bytes. It is used to "
"set :c:member:`PyTypeObject.tp_basicsize`."
msgstr ""
"양수면, 인스턴스의 바이트 수 크기를 지정합니다. :c:member:`PyTypeObject.tp_basicsize`\\를 설정하는"
" 데 사용됩니다."

#: ../../c-api/type.rst:411
msgid ""
"If zero, specifies that :c:member:`~PyTypeObject.tp_basicsize` should be "
"inherited."
msgstr ""

#: ../../c-api/type.rst:414
msgid ""
"If negative, the absolute value specifies how much space instances of the"
" class need *in addition* to the superclass. Use "
":c:func:`PyObject_GetTypeData` to get a pointer to subclass-specific "
"memory reserved this way. For negative :c:member:`!basicsize`, Python "
"will insert padding when needed to meet "
":c:member:`~PyTypeObject.tp_basicsize`'s alignment requirements."
msgstr ""

#: ../../c-api/type.rst:424
msgid "Previously, this field could not be negative."
msgstr ""

#: ../../c-api/type.rst:428
msgid ""
"Size of one element of a variable-size type, in bytes. Used to set "
":c:member:`PyTypeObject.tp_itemsize`. See ``tp_itemsize`` documentation "
"for caveats."
msgstr ""
"가변 크기 형의 한 요소의 바이트 수 크기. :c:member:`PyTypeObject.tp_itemsize`\\를 설정하는 데 "
"사용됩니다. 주의 사항은 ``tp_itemsize`` 설명서를 참조하세요."

#: ../../c-api/type.rst:432
msgid ""
"If zero, :c:member:`~PyTypeObject.tp_itemsize` is inherited. Extending "
"arbitrary variable-sized classes is dangerous, since some types use a "
"fixed offset for variable-sized memory, which can then overlap fixed-"
"sized memory used by a subclass. To help prevent mistakes, inheriting "
"``itemsize`` is only possible in the following situations:"
msgstr ""

#: ../../c-api/type.rst:439
msgid ""
"The base is not variable-sized (its "
":c:member:`~PyTypeObject.tp_itemsize`)."
msgstr "베이스는 가변 크기가 아닙니다 (:c:member:`~PyTypeObject.tp_itemsize` 입니다)."

#: ../../c-api/type.rst:441
msgid ""
"The requested :c:member:`PyType_Spec.basicsize` is positive, suggesting "
"that the memory layout of the base class is known."
msgstr ""

#: ../../c-api/type.rst:443
msgid ""
"The requested :c:member:`PyType_Spec.basicsize` is zero, suggesting that "
"the subclass does not access the instance's memory directly."
msgstr ""

#: ../../c-api/type.rst:446
msgid "With the :c:macro:`Py_TPFLAGS_ITEMS_AT_END` flag."
msgstr ""

#: ../../c-api/type.rst:450
msgid "Type flags, used to set :c:member:`PyTypeObject.tp_flags`."
msgstr "형 플래그, :c:member:`PyTypeObject.tp_flags`\\를 설정하는 데 사용됩니다."

#: ../../c-api/type.rst:452
msgid ""
"If the ``Py_TPFLAGS_HEAPTYPE`` flag is not set, "
":c:func:`PyType_FromSpecWithBases` sets it automatically."
msgstr ""
"``Py_TPFLAGS_HEAPTYPE`` 플래그가 설정되어 있지 않으면, "
":c:func:`PyType_FromSpecWithBases` 가 자동으로 플래그를 설정합니다."

#: ../../c-api/type.rst:457
#, python-brace-format
msgid ""
"Array of :c:type:`PyType_Slot` structures. Terminated by the special slot"
" value ``{0, NULL}``."
msgstr ":c:type:`PyType_Slot` 구조체의 배열. 특수 슬롯값 ``{0, NULL}``\\에 의해 종료됩니다."

#: ../../c-api/type.rst:460
msgid "Each slot ID should be specified at most once."
msgstr ""

#: ../../c-api/type.rst:470
msgid ""
"Structure defining optional functionality of a type, containing a slot ID"
" and a value pointer."
msgstr "형의 선택적 기능을 정의하는 구조체, 슬롯 ID와 값 포인터를 포함합니다."

#: ../../c-api/type.rst:475
msgid "A slot ID."
msgstr "슬롯 ID."

#: ../../c-api/type.rst:477
msgid ""
"Slot IDs are named like the field names of the structures "
":c:type:`PyTypeObject`, :c:type:`PyNumberMethods`, "
":c:type:`PySequenceMethods`, :c:type:`PyMappingMethods` and "
":c:type:`PyAsyncMethods` with an added ``Py_`` prefix. For example, use:"
msgstr ""
"슬롯 ID는 구조체 :c:type:`PyTypeObject`, :c:type:`PyNumberMethods`, "
":c:type:`PySequenceMethods`, :c:type:`PyMappingMethods` 및 "
":c:type:`PyAsyncMethods` 의 필드 이름에 ``Py_`` 접두사를 붙인 이름을 사용합니다. 예를 들어, :"

#: ../../c-api/type.rst:483
msgid "``Py_tp_dealloc`` to set :c:member:`PyTypeObject.tp_dealloc`"
msgstr ":c:member:`PyTypeObject.tp_dealloc`\\을 설정하는 ``Py_tp_dealloc``"

#: ../../c-api/type.rst:484
msgid "``Py_nb_add`` to set :c:member:`PyNumberMethods.nb_add`"
msgstr ":c:member:`PyNumberMethods.nb_add`\\를 설정하는 ``Py_nb_add``"

#: ../../c-api/type.rst:485
msgid "``Py_sq_length`` to set :c:member:`PySequenceMethods.sq_length`"
msgstr ":c:member:`PySequenceMethods.sq_length`\\를 설정하는 ``Py_sq_length``"

#: ../../c-api/type.rst:487
msgid "The following “offset” fields cannot be set using :c:type:`PyType_Slot`:"
msgstr "다음 “offset” 필드는 :c:type:`PyType_Slot`\\을 사용하여 설정할 수 없습니다:"

#: ../../c-api/type.rst:489
msgid ""
":c:member:`~PyTypeObject.tp_weaklistoffset` (use "
":c:macro:`Py_TPFLAGS_MANAGED_WEAKREF` instead if possible)"
msgstr ""
":c:member:`~PyTypeObject.tp_weaklistoffset` (가능하면 대신 "
":c:macro:`Py_TPFLAGS_MANAGED_WEAKREF`\\를 사용하세요)"

#: ../../c-api/type.rst:491
msgid ""
":c:member:`~PyTypeObject.tp_dictoffset` (use "
":c:macro:`Py_TPFLAGS_MANAGED_DICT` instead if possible)"
msgstr ""
":c:member:`~PyTypeObject.tp_dictoffset` (가능하면 대신 "
":c:macro:`Py_TPFLAGS_MANAGED_DICT`\\를 사용하세요)"

#: ../../c-api/type.rst:493
msgid ""
":c:member:`~PyTypeObject.tp_vectorcall_offset` (use "
"``\"__vectorcalloffset__\"`` in :ref:`PyMemberDef <pymemberdef-offsets>`)"
msgstr ""
":c:member:`~PyTypeObject.tp_vectorcall_offset` (:ref:`PyMemberDef "
"<pymemberdef-offsets>`\\에서 ``\"__vectorcalloffset__\"``\\를 사용하세요)"

#: ../../c-api/type.rst:497
msgid ""
"If it is not possible to switch to a ``MANAGED`` flag (for example, for "
"vectorcall or to support Python older than 3.12), specify the offset in "
":c:member:`Py_tp_members <PyTypeObject.tp_members>`. See "
":ref:`PyMemberDef documentation <pymemberdef-offsets>` for details."
msgstr ""

#: ../../c-api/type.rst:503
msgid "The following fields cannot be set at all when creating a heap type:"
msgstr "다음 필드는 힙 형을 만들 때 전혀 설정할 수 없습니다:"

#: ../../c-api/type.rst:505
msgid ""
":c:member:`~PyTypeObject.tp_vectorcall` (use "
":c:member:`~PyTypeObject.tp_new` and/or "
":c:member:`~PyTypeObject.tp_init`)"
msgstr ""
":c:member:`~PyTypeObject.tp_vectorcall` (:c:member:`~PyTypeObject.tp_new`"
" 와/또는 :c:member:`~PyTypeObject.tp_init`\\를 사용하세요)"

#: ../../c-api/type.rst:509
msgid ""
"Internal fields: :c:member:`~PyTypeObject.tp_dict`, "
":c:member:`~PyTypeObject.tp_mro`, :c:member:`~PyTypeObject.tp_cache`, "
":c:member:`~PyTypeObject.tp_subclasses`, and "
":c:member:`~PyTypeObject.tp_weaklist`."
msgstr ""
"내부 필드: :c:member:`~PyTypeObject.tp_dict`, "
":c:member:`~PyTypeObject.tp_mro`, :c:member:`~PyTypeObject.tp_cache`, "
":c:member:`~PyTypeObject.tp_subclasses` 및 "
":c:member:`~PyTypeObject.tp_weaklist`."

#: ../../c-api/type.rst:516
msgid ""
"Setting :c:data:`Py_tp_bases` or :c:data:`Py_tp_base` may be problematic "
"on some platforms. To avoid issues, use the *bases* argument of "
":c:func:`PyType_FromSpecWithBases` instead."
msgstr ""
"일부 플랫폼에서는 :c:data:`Py_tp_bases`\\나 :c:data:`Py_tp_base`\\를 설정하는 것이 문제가 될 "
"수 있습니다. 문제를 피하려면, 대신 :c:func:`PyType_FromSpecWithBases` 의 *bases* 인자를 "
"사용하십시오."

#: ../../c-api/type.rst:521
msgid "Slots in :c:type:`PyBufferProcs` may be set in the unlimited API."
msgstr ":c:type:`PyBufferProcs`\\의 슬롯은 제한 없는 API에서 설정할 수 있습니다."

#: ../../c-api/type.rst:524
msgid ""
":c:member:`~PyBufferProcs.bf_getbuffer` and "
":c:member:`~PyBufferProcs.bf_releasebuffer` are now available under the "
":ref:`limited API <limited-c-api>`."
msgstr ""

#: ../../c-api/type.rst:531
msgid ""
"The desired value of the slot. In most cases, this is a pointer to a "
"function."
msgstr "슬롯의 원하는 값입니다. 대부분 이것은 함수에 대한 포인터입니다."

#: ../../c-api/type.rst:534
msgid "Slots other than ``Py_tp_doc`` may not be ``NULL``."
msgstr ""

#: ../../c-api/type.rst:8
msgid "object"
msgstr "객체"

#: ../../c-api/type.rst:8
msgid "type"
msgstr "형"

#~ msgid "An exception is raised if *type* is not a heap type."
#~ msgstr "*type*\\이 힙 형이 아니면 예외가 발생합니다."

#~ msgid ""
#~ "If *bases* is a tuple, the created"
#~ " heap type contains all types "
#~ "contained in it as base types."
#~ msgstr "*bases*\\가 튜플이면, 생성된 힙 형에는 그것에 포함된 모든 형이 베이스형으로 포함됩니다."

#~ msgid ":c:member:`~PyTypeObject.tp_dict`"
#~ msgstr ":c:member:`~PyTypeObject.tp_dict`"

#~ msgid ":c:member:`~PyTypeObject.tp_mro`"
#~ msgstr ":c:member:`~PyTypeObject.tp_mro`"

#~ msgid ":c:member:`~PyTypeObject.tp_cache`"
#~ msgstr ":c:member:`~PyTypeObject.tp_cache`"

#~ msgid ":c:member:`~PyTypeObject.tp_subclasses`"
#~ msgstr ":c:member:`~PyTypeObject.tp_subclasses`"

#~ msgid ":c:member:`~PyTypeObject.tp_weaklist`"
#~ msgstr ":c:member:`~PyTypeObject.tp_weaklist`"

#~ msgid ":c:member:`~PyTypeObject.tp_vectorcall`"
#~ msgstr ":c:member:`~PyTypeObject.tp_vectorcall`"

#~ msgid ""
#~ "The following fields cannot be set "
#~ "using :c:type:`PyType_Spec` and "
#~ ":c:type:`PyType_Slot` under the limited API:"
#~ msgstr ""
#~ "다음 필드는 제한된 API에서 :c:type:`PyType_Spec`\\과 "
#~ ":c:type:`PyType_Slot`\\을 사용하여 설정할 수 없습니다:"

#~ msgid ":c:member:`~PyBufferProcs.bf_getbuffer`"
#~ msgstr ":c:member:`~PyBufferProcs.bf_getbuffer`"

#~ msgid ":c:member:`~PyBufferProcs.bf_releasebuffer`"
#~ msgstr ":c:member:`~PyBufferProcs.bf_releasebuffer`"

#~ msgid "May not be ``NULL``."
#~ msgstr "``NULL``\\이 아닐 수 있습니다."

