# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2017, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-04-17 23:44+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: Korean (https://python.flowdas.com)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.17.0\n"

#: ../../c-api/complex.rst:6
msgid "Complex Number Objects"
msgstr "복소수 객체"

#: ../../c-api/complex.rst:10
msgid ""
"Python's complex number objects are implemented as two distinct types "
"when viewed from the C API:  one is the Python object exposed to Python "
"programs, and the other is a C structure which represents the actual "
"complex number value. The API provides functions for working with both."
msgstr ""
"파이썬의 복소수 객체는 C API에서 볼 때 두 개의 다른 형으로 구현됩니다: 하나는 파이썬 프로그램에 노출된 파이썬 객체이고, "
"다른 하나는 실제 복소수 값을 나타내는 C 구조체입니다. API는 두 가지 모두도 작업할 수 있는 함수를 제공합니다."

#: ../../c-api/complex.rst:17
msgid "Complex Numbers as C Structures"
msgstr "C 구조체로서의 복소수"

#: ../../c-api/complex.rst:19
msgid ""
"Note that the functions which accept these structures as parameters and "
"return them as results do so *by value* rather than dereferencing them "
"through pointers.  This is consistent throughout the API."
msgstr ""
"매개 변수로 이러한 구조체를 받아들이고 결과로 반환하는 함수는 포인터를 통해 역참조하기보다는 *값으로* 다룹니다. 이는 API "
"전체에서 일관됩니다."

#: ../../c-api/complex.rst:26
msgid ""
"The C structure which corresponds to the value portion of a Python "
"complex number object.  Most of the functions for dealing with complex "
"number objects use structures of this type as input or output values, as "
"appropriate."
msgstr ""
"파이썬 복소수 객체의 값 부분에 해당하는 C 구조체. 복소수 객체를 다루는 대부분 함수는 이 형의 구조체를 입력 또는 출력값으로 "
"적절하게 사용합니다."

#: ../../c-api/complex.rst:33
msgid "The structure is defined as::"
msgstr "구조체는 다음과 같이 정의됩니다::"

#: ../../c-api/complex.rst:35
#, python-brace-format
msgid ""
"typedef struct {\n"
"    double real;\n"
"    double imag;\n"
"} Py_complex;"
msgstr ""
"typedef struct {\n"
"    double real;\n"
"    double imag;\n"
"} Py_complex;"

#: ../../c-api/complex.rst:43
msgid ""
"Return the sum of two complex numbers, using the C :c:type:`Py_complex` "
"representation."
msgstr "C :c:type:`Py_complex` 표현을 사용하여 두 복소수의 합을 반환합니다."

#: ../../c-api/complex.rst:49
msgid ""
"Return the difference between two complex numbers, using the C "
":c:type:`Py_complex` representation."
msgstr "C :c:type:`Py_complex` 표현을 사용하여 두 복소수의 차이를 반환합니다."

#: ../../c-api/complex.rst:55
msgid ""
"Return the negation of the complex number *num*, using the C "
":c:type:`Py_complex` representation."
msgstr "C :c:type:`Py_complex` 표현을 사용하여 복소수 *num*\\의 음의 값을 반환합니다."

#: ../../c-api/complex.rst:61
msgid ""
"Return the product of two complex numbers, using the C "
":c:type:`Py_complex` representation."
msgstr "C :c:type:`Py_complex` 표현을 사용하여 두 복소수의 곱을 반환합니다."

#: ../../c-api/complex.rst:67
msgid ""
"Return the quotient of two complex numbers, using the C "
":c:type:`Py_complex` representation."
msgstr "C :c:type:`Py_complex` 표현을 사용하여 두 복소수의 몫을 반환합니다."

#: ../../c-api/complex.rst:70
msgid ""
"If *divisor* is null, this method returns zero and sets :c:data:`errno` "
"to :c:macro:`!EDOM`."
msgstr ""
"*divisor*\\가 null이면, 이 메서드는 0을 반환하고, :c:data:`errno`\\를 "
":c:macro:`!EDOM`\\으로 설정합니다."

#: ../../c-api/complex.rst:76
msgid ""
"Return the exponentiation of *num* by *exp*, using the C "
":c:type:`Py_complex` representation."
msgstr "C :c:type:`Py_complex` 표현을 사용하여 *num*\\의 *exp* 거듭제곱을 반환합니다."

#: ../../c-api/complex.rst:79
msgid ""
"If *num* is null and *exp* is not a positive real number, this method "
"returns zero and sets :c:data:`errno` to :c:macro:`!EDOM`."
msgstr ""
"*num*\\이 null이고 *exp*\\가 양의 실수가 아니면, 이 메서드는 0을 반환하고 :c:data:`errno`\\를 "
":c:macro:`!EDOM`\\으로 설정합니다."

#: ../../c-api/complex.rst:84
msgid "Complex Numbers as Python Objects"
msgstr "파이썬 객체로서의 복소수"

#: ../../c-api/complex.rst:89
msgid ""
"This subtype of :c:type:`PyObject` represents a Python complex number "
"object."
msgstr "파이썬 복소수 객체를 나타내는 :c:type:`PyObject`\\의 서브 형."

#: ../../c-api/complex.rst:94
msgid ""
"This instance of :c:type:`PyTypeObject` represents the Python complex "
"number type. It is the same object as :class:`complex` in the Python "
"layer."
msgstr ""
"이 :c:type:`PyTypeObject` 인스턴스는 파이썬 복소수 형을 나타냅니다. 파이썬 계층의 "
":class:`complex`\\와 같은 객체입니다."

#: ../../c-api/complex.rst:100
msgid ""
"Return true if its argument is a :c:type:`PyComplexObject` or a subtype "
"of :c:type:`PyComplexObject`.  This function always succeeds."
msgstr ""
"인자가 :c:type:`PyComplexObject` 나 :c:type:`PyComplexObject`\\의 서브 형이면 참을 "
"반환합니다. 이 함수는 항상 성공합니다."

#: ../../c-api/complex.rst:106
msgid ""
"Return true if its argument is a :c:type:`PyComplexObject`, but not a "
"subtype of :c:type:`PyComplexObject`.  This function always succeeds."
msgstr ""
"인자가 :c:type:`PyComplexObject`\\이지만, :c:type:`PyComplexObject`\\의 서브 유형이 "
"아니면 참을 반환합니다. 이 함수는 항상 성공합니다."

#: ../../c-api/complex.rst:112
msgid ""
"Create a new Python complex number object from a C :c:type:`Py_complex` "
"value. Return ``NULL`` with an exception set on error."
msgstr ""
"C :c:type:`Py_complex` 값으로 새로운 파이썬 복소수 객체를 만듭니다. 에러면 예외를 설정하고 ``NULL``\\을"
" 반환합니다."

#: ../../c-api/complex.rst:118
msgid ""
"Return a new :c:type:`PyComplexObject` object from *real* and *imag*. "
"Return ``NULL`` with an exception set on error."
msgstr ""
"*real* 및 *imag*\\로 새로운 :c:type:`PyComplexObject` 객체를 반환합니다. 에러면 예외를 설정하고 "
"``NULL``\\을 반환합니다."

#: ../../c-api/complex.rst:124
msgid "Return the real part of *op* as a C :c:expr:`double`."
msgstr "*op*\\의 실수부를 C :c:expr:`double`\\로 반환합니다."

#: ../../c-api/complex.rst:126
msgid ""
"If *op* is not a Python complex number object but has a "
":meth:`~object.__complex__` method, this method will first be called to "
"convert *op* to a Python complex number object.  If :meth:`!__complex__` "
"is not defined then it falls back to call :c:func:`PyFloat_AsDouble` and "
"returns its result."
msgstr ""
"*op*\\가 파이썬 복소수 객체가 아니지만 :meth:`~object.__complex__` 메서드가 있으면, 이 메서드는 먼저 "
"*op*\\를 파이썬 복소수 객체로 변환하도록 그 메서드를 호출합니다. :meth:`!__complex__`\\가 정의되지 않았으면"
" :c:func:`PyFloat_AsDouble`\\을 호출하는 것으로 대체하고 그 결과를 반환합니다."

#: ../../c-api/complex.rst:132 ../../c-api/complex.rst:148
msgid ""
"Upon failure, this method returns ``-1.0`` with an exception set, so one "
"should call :c:func:`PyErr_Occurred` to check for errors."
msgstr ""
"실패하면, 이 메서드는 예외를 설정하고 ``-1.0``\\을 반환합니다. :c:func:`PyErr_Occurred`\\를 호출하여"
" 에러를 확인해야 합니다."

#: ../../c-api/complex.rst:135 ../../c-api/complex.rst:151
msgid "Use :meth:`~object.__complex__` if available."
msgstr "사용할 수 있다면 :meth:`~object.__complex__`\\를 사용합니다."

#: ../../c-api/complex.rst:140
msgid "Return the imaginary part of *op* as a C :c:expr:`double`."
msgstr "*op*\\의 허수부를 C :c:expr:`double`\\로 반환합니다."

#: ../../c-api/complex.rst:142
msgid ""
"If *op* is not a Python complex number object but has a "
":meth:`~object.__complex__` method, this method will first be called to "
"convert *op* to a Python complex number object.  If :meth:`!__complex__` "
"is not defined then it falls back to call :c:func:`PyFloat_AsDouble` and "
"returns ``0.0`` on success."
msgstr ""
"*op*\\가 파이썬 복소수 객체가 아니지만 :meth:`~object.__complex__` 메서드가 있으면, 이 메서드는 먼저 "
"*op*\\를 파이썬 복소수 객체로 변환하도록 그 메서드를 호출합니다. :meth:`!__complex__`\\가 정의되지 않았으면"
" :c:func:`PyFloat_AsDouble`\\을 호출하는 것으로 대체하고 성공할 때 ``0.0``\\을 반환합니다."

#: ../../c-api/complex.rst:156
msgid "Return the :c:type:`Py_complex` value of the complex number *op*."
msgstr "복소수 *op*\\의 :c:type:`Py_complex` 값을 반환합니다."

#: ../../c-api/complex.rst:158
msgid ""
"If *op* is not a Python complex number object but has a "
":meth:`~object.__complex__` method, this method will first be called to "
"convert *op* to a Python complex number object.  If :meth:`!__complex__` "
"is not defined then it falls back to :meth:`~object.__float__`.  If "
":meth:`!__float__` is not defined then it falls back to "
":meth:`~object.__index__`."
msgstr ""
"*op*\\가 파이썬 복소수 객체가 아니지만 :meth:`~object.__complex__` 메서드가 있으면, 이 메서드는 먼저 "
"*op*\\를 파이썬 복소수 객체로 변환하도록 그 메서드를 호출합니다. :meth:`!__complex__`\\가 정의되지 않았으면"
" :meth:`~object.__float__`\\로 대체합니다. :meth:`!__float__`\\가 정의되지 않았으면 "
":meth:`~object.__index__`\\로 대체합니다."

#: ../../c-api/complex.rst:164
msgid ""
"Upon failure, this method returns :c:type:`Py_complex` with "
":c:member:`~Py_complex.real` set to ``-1.0`` and with an exception set, "
"so one should call :c:func:`PyErr_Occurred` to check for errors."
msgstr ""
"실패하면, 이 메서드는 예외를 설정하고 :c:member:`~Py_complex.real`\\을 ``-1.0``\\으로 설정한 "
":c:type:`Py_complex`\\를 반환합니다. :c:func:`PyErr_Occurred`\\를 호출하여 에러를 확인해야 "
"합니다."

#: ../../c-api/complex.rst:168
msgid "Use :meth:`~object.__index__` if available."
msgstr "사용할 수 있다면 :meth:`~object.__index__`\\를 사용합니다."

#: ../../c-api/complex.rst:8
msgid "object"
msgstr "객체"

#: ../../c-api/complex.rst:8
msgid "complex number"
msgstr "복소수"

