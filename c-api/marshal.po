# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2017, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-04-17 23:44+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: Dong-gweon Oh <flowdas@gmail.com>\n"
"Language-Team: Korean (https://python.flowdas.com)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.17.0\n"

#: ../../c-api/marshal.rst:6
msgid "Data marshalling support"
msgstr "데이터 마샬링 지원"

#: ../../c-api/marshal.rst:8
msgid ""
"These routines allow C code to work with serialized objects using the "
"same data format as the :mod:`marshal` module.  There are functions to "
"write data into the serialization format, and additional functions that "
"can be used to read the data back.  Files used to store marshalled data "
"must be opened in binary mode."
msgstr ""
"이러한 루틴은 C 코드가 :mod:`marshal` 모듈과 같은 데이터 형식을 사용하여 직렬화된 객체로 작업 할 수 있도록 합니다."
" 직렬화 형식으로 데이터를 쓰는 함수와 데이터를 다시 읽는 데 사용할 수 있는 추가 함수가 있습니다. 마샬링 된 데이터를 저장하는 "
"데 사용되는 파일은 바이너리 모드로 열어야 합니다."

#: ../../c-api/marshal.rst:14
msgid "Numeric values are stored with the least significant byte first."
msgstr "숫자 값은 최하위 바이트가 먼저 저장됩니다."

#: ../../c-api/marshal.rst:16
msgid ""
"The module supports two versions of the data format: version 0 is the "
"historical version, version 1 shares interned strings in the file, and "
"upon unmarshalling.  Version 2 uses a binary format for floating-point "
"numbers. ``Py_MARSHAL_VERSION`` indicates the current file format "
"(currently 2)."
msgstr ""
"이 모듈은 두 가지 버전의 데이터 형식을 지원합니다: 버전 0은 역사적인 버전이고, 버전 1은 파일에서와 역 마샬링할 때 "
"인턴(intern) 된 문자열을 공유합니다. 버전 2는 부동 소수점 숫자에 대해 바이너리 형식을 사용합니다. "
"``Py_MARSHAL_VERSION``\\은 현재 파일 형식을 나타냅니다 (현재 2)."

#: ../../c-api/marshal.rst:24
msgid ""
"Marshal a :c:expr:`long` integer, *value*, to *file*.  This will only "
"write the least-significant 32 bits of *value*; regardless of the size of"
" the native :c:expr:`long` type.  *version* indicates the file format."
msgstr ""
":c:expr:`long` 정수 *value*\\를 *file*\\로 마샬합니다. *value*\\의 최하위 32비트 만 "
"기록합니다; 기본 :c:expr:`long` 형의 크기와 관계없이. *version*\\은 파일 형식을 나타냅니다."

#: ../../c-api/marshal.rst:28 ../../c-api/marshal.rst:36
msgid ""
"This function can fail, in which case it sets the error indicator. Use "
":c:func:`PyErr_Occurred` to check for that."
msgstr ""

#: ../../c-api/marshal.rst:33
msgid ""
"Marshal a Python object, *value*, to *file*. *version* indicates the file"
" format."
msgstr "파이썬 객체 *value*\\를 *file*\\로 마샬합니다. *version*\\은 파일 형식을 나타냅니다."

#: ../../c-api/marshal.rst:41
msgid ""
"Return a bytes object containing the marshalled representation of "
"*value*. *version* indicates the file format."
msgstr "마샬된 *value* 표현을 포함한 바이트열 객체를 반환합니다. *version*\\은 파일 형식을 나타냅니다."

#: ../../c-api/marshal.rst:45
msgid "The following functions allow marshalled values to be read back in."
msgstr "다음 함수를 사용하면 마샬된 값을 다시 읽을 수 있습니다."

#: ../../c-api/marshal.rst:50
msgid ""
"Return a C :c:expr:`long` from the data stream in a :c:expr:`FILE*` "
"opened for reading.  Only a 32-bit value can be read in using this "
"function, regardless of the native size of :c:expr:`long`."
msgstr ""
"읽기 위해 열린 :c:expr:`FILE*`\\의 데이터 스트림에서 C :c:expr:`long`\\을 반환합니다. 이 함수를 "
"사용하면 :c:expr:`long`\\의 기본 크기와 관계없이 32비트 값만 읽을 수 있습니다."

#: ../../c-api/marshal.rst:54 ../../c-api/marshal.rst:64
msgid ""
"On error, sets the appropriate exception (:exc:`EOFError`) and returns "
"``-1``."
msgstr "에러 시, 적절한 예외(:exc:`EOFError`)를 설정하고 ``-1``\\을 반환합니다."

#: ../../c-api/marshal.rst:60
msgid ""
"Return a C :c:expr:`short` from the data stream in a :c:expr:`FILE*` "
"opened for reading.  Only a 16-bit value can be read in using this "
"function, regardless of the native size of :c:expr:`short`."
msgstr ""
"읽기 위해 열린 :c:expr:`FILE*`\\의 데이터 스트림에서 C :c:expr:`short`\\를 반환합니다. 이 함수를 "
"사용하면 :c:expr:`short`\\의 기본 크기와 관계없이 16비트 값만 읽을 수 있습니다."

#: ../../c-api/marshal.rst:70
msgid ""
"Return a Python object from the data stream in a :c:expr:`FILE*` opened "
"for reading."
msgstr "읽기 위해 열린 :c:expr:`FILE*`\\의 데이터 스트림에서 파이썬 객체를 반환합니다."

#: ../../c-api/marshal.rst:73 ../../c-api/marshal.rst:87
#: ../../c-api/marshal.rst:96
msgid ""
"On error, sets the appropriate exception (:exc:`EOFError`, "
":exc:`ValueError` or :exc:`TypeError`) and returns ``NULL``."
msgstr ""
"에러 시, 적절한 예외(:exc:`EOFError`, :exc:`ValueError` 또는 :exc:`TypeError`)를 "
"설정하고 ``NULL``\\을 반환합니다."

#: ../../c-api/marshal.rst:79
msgid ""
"Return a Python object from the data stream in a :c:expr:`FILE*` opened "
"for reading.  Unlike :c:func:`PyMarshal_ReadObjectFromFile`, this "
"function assumes that no further objects will be read from the file, "
"allowing it to aggressively load file data into memory so that the de-"
"serialization can operate from data in memory rather than reading a byte "
"at a time from the file.  Only use these variant if you are certain that "
"you won't be reading anything else from the file."
msgstr ""
"읽기 위해 열린 :c:expr:`FILE*`\\의 데이터 스트림에서 파이썬 객체를 반환합니다. "
":c:func:`PyMarshal_ReadObjectFromFile`\\와 달리, 이 함수는 더는 파일에서 객체를 읽지 않을 "
"것이라고 가정함으로써, 파일 데이터를 메모리에 적극적으로 로드 할 수 있고, 파일에서 한 바이트씩 읽는 대신 메모리에 있는 "
"데이터에서 역 직렬화가 작동할 수 있습니다. 파일에서 어떤 것도 읽지 않을 것이라는 확신이 들 경우에만 이 변형을 사용하십시오."

#: ../../c-api/marshal.rst:93
msgid ""
"Return a Python object from the data stream in a byte buffer containing "
"*len* bytes pointed to by *data*."
msgstr "*data*\\가 가리키는 *len* 바이트를 포함하는 바이트 버퍼의 데이터 스트림에서 파이썬 객체를 반환합니다."

