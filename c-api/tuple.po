# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2017, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-04-17 23:44+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: Dong-gweon Oh <flowdas@gmail.com>\n"
"Language-Team: Korean (https://python.flowdas.com)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.17.0\n"

#: ../../c-api/tuple.rst:6
msgid "Tuple Objects"
msgstr "튜플 객체"

#: ../../c-api/tuple.rst:13
msgid "This subtype of :c:type:`PyObject` represents a Python tuple object."
msgstr "이 :c:type:`PyObject`\\의 서브 형은 파이썬 튜플 객체를 나타냅니다."

#: ../../c-api/tuple.rst:18
msgid ""
"This instance of :c:type:`PyTypeObject` represents the Python tuple type;"
" it is the same object as :class:`tuple` in the Python layer."
msgstr ""
"이 :c:type:`PyTypeObject` 인스턴스는 파이썬 튜플 형을 나타냅니다. 파이썬 계층의 :class:`tuple`\\과"
" 같은 객체입니다."

#: ../../c-api/tuple.rst:24
msgid ""
"Return true if *p* is a tuple object or an instance of a subtype of the "
"tuple type.  This function always succeeds."
msgstr "*p*\\가 튜플 객체이거나 튜플 형의 서브 형의 인스턴스면 참을 돌려줍니다. 이 함수는 항상 성공합니다."

#: ../../c-api/tuple.rst:30
msgid ""
"Return true if *p* is a tuple object, but not an instance of a subtype of"
" the tuple type.  This function always succeeds."
msgstr "*p*\\가 튜플 객체이지만, 튜플 형의 서브 형의 인스턴스는 아니면 참을 돌려줍니다. 이 함수는 항상 성공합니다."

#: ../../c-api/tuple.rst:36
msgid ""
"Return a new tuple object of size *len*, or ``NULL`` with an exception "
"set on failure."
msgstr "크기 *len* 인 튜플 객체나, 실패 시 예외를 설정하고 ``NULL``\\을 반환합니다."

#: ../../c-api/tuple.rst:42
msgid ""
"Return a new tuple object of size *n*, or ``NULL`` with an exception set "
"on failure. The tuple values are initialized to the subsequent *n* C "
"arguments pointing to Python objects. ``PyTuple_Pack(2, a, b)`` is "
"equivalent to ``Py_BuildValue(\"(OO)\", a, b)``."
msgstr ""
"크기 *n* 인 새 튜플 객체나, 실패 시 예외를 설정하고 ``NULL``\\을 반환합니다. 튜플 값은 파이썬 객체를 가리키는 후속"
" *n* 개의 C 인자로 초기화됩니다. ``PyTuple_Pack(2, a, b)``\\는 "
"``Py_BuildValue(\"(OO)\", a, b)``\\와 동등합니다."

#: ../../c-api/tuple.rst:50
msgid ""
"Take a pointer to a tuple object, and return the size of that tuple. On "
"error, return ``-1`` and with an exception set."
msgstr "튜플 객체에 대한 포인터를 받아서, 해당 튜플의 크기를 반환합니다. 에러가 발생하면, 예외를 설정하고 ``-1``\\을 반환합니다."

#: ../../c-api/tuple.rst:56
msgid "Like :c:func:`PyTuple_Size`, but without error checking."
msgstr ":c:func:`PyTuple_Size`\\와 비슷하지만, 에러 검사를 생략합니다."

#: ../../c-api/tuple.rst:61
msgid ""
"Return the object at position *pos* in the tuple pointed to by *p*.  If "
"*pos* is negative or out of bounds, return ``NULL`` and set an "
":exc:`IndexError` exception."
msgstr ""
"*p*\\가 가리키는 튜플의 *pos* 위치에 있는 객체를 반환합니다. *pos*\\가 음수이거나 범위를 벗어나면, "
"``NULL``\\을 반환하고 :exc:`IndexError` 예외를 설정합니다."

#: ../../c-api/tuple.rst:64
msgid ""
"The returned reference is borrowed from the tuple *p* (that is: it is "
"only valid as long as you hold a reference to *p*). To get a "
":term:`strong reference`, use :c:func:`Py_NewRef(PyTuple_GetItem(...)) "
"<Py_NewRef>` or :c:func:`PySequence_GetItem`."
msgstr ""

#: ../../c-api/tuple.rst:73
msgid "Like :c:func:`PyTuple_GetItem`, but does no checking of its arguments."
msgstr ":c:func:`PyTuple_GetItem`\\와 비슷하지만, 인자를 확인하지 않습니다."

#: ../../c-api/tuple.rst:78
msgid ""
"Return the slice of the tuple pointed to by *p* between *low* and *high*,"
" or ``NULL`` with an exception set on failure."
msgstr ""
"*p*\\가 가리키는 튜플의 *low*\\와 *high* 사이의 슬라이스를 반환하거나, 실패하면 예외를 설정하고 "
"``NULL``\\을 반환합니다."

#: ../../c-api/tuple.rst:81
msgid ""
"This is the equivalent of the Python expression ``p[low:high]``. Indexing"
" from the end of the tuple is not supported."
msgstr "이것은 파이썬 표현식 ``p[low:high]``\\와 동등합니다. 튜플 끝으로부터의 인덱싱은 지원되지 않습니다."

#: ../../c-api/tuple.rst:87
msgid ""
"Insert a reference to object *o* at position *pos* of the tuple pointed "
"to by *p*.  Return ``0`` on success.  If *pos* is out of bounds, return "
"``-1`` and set an :exc:`IndexError` exception."
msgstr ""
"*p*\\가 가리키는 튜플의 *pos* 위치에 객체 *o*\\에 대한 참조를 삽입합니다. 성공하면 ``0``\\을 반환합니다. "
"*pos*\\가 범위를 벗어나면, ``-1``\\을 반환하고 :exc:`IndexError` 예외를 설정합니다."

#: ../../c-api/tuple.rst:93
msgid ""
"This function \"steals\" a reference to *o* and discards a reference to "
"an item already in the tuple at the affected position."
msgstr ""
"이 함수는 *o*\\에 대한 참조를 \"훔치고\" 영향을 받는 위치에서 튜플에 이미 있는 항목에 대한 참조를 "
"버립니다(discard)."

#: ../../c-api/tuple.rst:99
msgid ""
"Like :c:func:`PyTuple_SetItem`, but does no error checking, and should "
"*only* be used to fill in brand new tuples."
msgstr ""
":c:func:`PyTuple_SetItem`\\과 비슷하지만, 에러 검사는 하지 않으며 새로운 튜플을 채울 때\\*만* 사용해야 "
"합니다."

#: ../../c-api/tuple.rst:102 ../../c-api/tuple.rst:218
#: ../../c-api/tuple.rst:236
msgid ""
"Bounds checking is performed as an assertion if Python is built in "
":ref:`debug mode <debug-build>` or :option:`with assertions <--with-"
"assertions>`."
msgstr ""

#: ../../c-api/tuple.rst:107
msgid ""
"This function \"steals\" a reference to *o*, and, unlike "
":c:func:`PyTuple_SetItem`, does *not* discard a reference to any item "
"that is being replaced; any reference in the tuple at position *pos* will"
" be leaked."
msgstr ""
"이 함수는 *o*\\에 대한 참조를 \"훔치고\", :c:func:`PyTuple_SetItem`\\와 달리, 교체 중인 항목에 "
"대한 참조를 버리지 *않습니다*; *pos* 위치에서 튜플의 모든 참조는 누수됩니다."

#: ../../c-api/tuple.rst:115
msgid ""
"Can be used to resize a tuple.  *newsize* will be the new length of the "
"tuple. Because tuples are *supposed* to be immutable, this should only be"
" used if there is only one reference to the object.  Do *not* use this if"
" the tuple may already be known to some other part of the code.  The "
"tuple will always grow or shrink at the end.  Think of this as destroying"
" the old tuple and creating a new one, only more efficiently.  Returns "
"``0`` on success. Client code should never assume that the resulting "
"value of ``*p`` will be the same as before calling this function. If the "
"object referenced by ``*p`` is replaced, the original ``*p`` is "
"destroyed.  On failure, returns ``-1`` and sets ``*p`` to ``NULL``, and "
"raises :exc:`MemoryError` or :exc:`SystemError`."
msgstr ""
"튜플 크기를 조정하는 데 사용할 수 있습니다. *newsize*\\는 튜플의 새로운 길이가 됩니다. 튜플은 불변이라고 "
"*여겨지므로*, 객체에 대해 참조가 하나만 있을 때만 사용해야 합니다. 튜플이 코드의 다른 부분에 이미 알려졌으면 이것을 사용하지 "
"*마십시오*. 튜플은 항상 끝에서 커지거나 줄어듭니다. 이것을 오래된 튜플을 파괴하고 새 튜플을 만드는 것으로 생각하십시오, 단지 "
"더 효율적일 뿐입니다. 성공하면 ``0``\\을 반환합니다. 클라이언트 코드는, ``*p``\\의 결괏값이 이 함수를 호출하기 전과"
" 같다고 가정해서는 안 됩니다. ``*p``\\가 참조하는 객체가 바뀌면 원래 ``*p``\\는 파괴됩니다. 실패하면, "
"``-1``\\을 반환하고, ``*p``\\를 ``NULL``\\로 설정하고, :exc:`MemoryError` 나 "
":exc:`SystemError`\\를 발생시킵니다."

#: ../../c-api/tuple.rst:130
msgid "Struct Sequence Objects"
msgstr "구조체 시퀀스 객체"

#: ../../c-api/tuple.rst:132
msgid ""
"Struct sequence objects are the C equivalent of "
":func:`~collections.namedtuple` objects, i.e. a sequence whose items can "
"also be accessed through attributes. To create a struct sequence, you "
"first have to create a specific struct sequence type."
msgstr ""
"구조체 시퀀스(struct sequence) 객체는 :func:`~collections.namedtuple` 객체의 C "
"등가물입니다, 즉 어트리뷰트를 통해 항목에 액세스할 수 있는 시퀀스입니다. 구조체 시퀀스를 만들려면, 먼저 특정 구조체 시퀀스 형을"
" 만들어야 합니다."

#: ../../c-api/tuple.rst:139
msgid ""
"Create a new struct sequence type from the data in *desc*, described "
"below. Instances of the resulting type can be created with "
":c:func:`PyStructSequence_New`."
msgstr ""
"아래에 설명된 *desc*\\의 데이터로 새로운 구조체 시퀀스 형을 만듭니다. 결과 형의 인스턴스는 "
":c:func:`PyStructSequence_New`\\로 만들 수 있습니다."

#: ../../c-api/tuple.rst:142 ../../c-api/tuple.rst:211
msgid "Return ``NULL`` with an exception set on failure."
msgstr "실패 시 예외를 설정하고 ``NULL``\\을 반환합니다."

#: ../../c-api/tuple.rst:147
msgid "Initializes a struct sequence type *type* from *desc* in place."
msgstr "*desc*\\로 구조체 시퀀스 형 *type*\\을 재자리에서 초기화합니다."

#: ../../c-api/tuple.rst:152
msgid ""
"Like :c:func:`PyStructSequence_InitType`, but returns ``0`` on success "
"and ``-1`` with an exception set on failure."
msgstr ""
":c:func:`PyStructSequence_InitType`\\와 비슷하지만, 성공하면 ``0``\\을, 실패하면 예외를 "
"설정하고 ``-1``\\을 반환합니다."

#: ../../c-api/tuple.rst:160
msgid "Contains the meta information of a struct sequence type to create."
msgstr "만들 구조체 시퀀스 형의 메타 정보를 포함합니다."

#: ../../c-api/tuple.rst:164
msgid ""
"Fully qualified name of the type; null-terminated UTF-8 encoded. The name"
" must contain the module name."
msgstr ""

#: ../../c-api/tuple.rst:169
msgid "Pointer to docstring for the type or ``NULL`` to omit."
msgstr "해당 형에 대한 독스트링에 대한 포인터나 생략하려면 ``NULL``."

#: ../../c-api/tuple.rst:173
msgid "Pointer to ``NULL``-terminated array with field names of the new type."
msgstr "새로운 형의 필드 이름을 가진 ``NULL``\\로 끝나는 배열에 대한 포인터."

#: ../../c-api/tuple.rst:177
msgid "Number of fields visible to the Python side (if used as tuple)."
msgstr "파이썬 측에서 볼 수 있는 필드 수 (튜플로 사용된 경우)."

#: ../../c-api/tuple.rst:182
msgid ""
"Describes a field of a struct sequence. As a struct sequence is modeled "
"as a tuple, all fields are typed as :c:expr:`PyObject*`.  The index in "
"the :c:member:`~PyStructSequence_Desc.fields` array of the "
":c:type:`PyStructSequence_Desc` determines which field of the struct "
"sequence is described."
msgstr ""
"구조체 시퀀스의 필드를 기술합니다. 구조체 시퀀스는 튜플로 모형화되므로, 모든 필드는 :c:expr:`PyObject*` 형을 "
"취합니다. :c:type:`PyStructSequence_Desc`\\의 "
":c:member:`~PyStructSequence_Desc.fields` 배열의 인덱스는 구조체 시퀀스의 어떤 필드가 기술되는지를"
" 결정합니다."

#: ../../c-api/tuple.rst:190
msgid ""
"Name for the field or ``NULL`` to end the list of named fields, set to "
":c:data:`PyStructSequence_UnnamedField` to leave unnamed."
msgstr ""
"필드의 이름. 또는 이름있는 필드의 목록을 끝내려면 ``NULL``, 이름이 없는 상태로 두려면 "
":c:data:`PyStructSequence_UnnamedField`\\로 설정합니다."

#: ../../c-api/tuple.rst:195
msgid "Field docstring or ``NULL`` to omit."
msgstr "필드 독스트링이나 생략하려면 ``NULL``."

#: ../../c-api/tuple.rst:200
msgid "Special value for a field name to leave it unnamed."
msgstr "이름 없는 상태로 남겨두기 위한 필드 이름의 특수 값."

#: ../../c-api/tuple.rst:202
msgid "The type was changed from ``char *``."
msgstr "형이 ``char *``\\에서 변경되었습니다."

#: ../../c-api/tuple.rst:208
msgid ""
"Creates an instance of *type*, which must have been created with "
":c:func:`PyStructSequence_NewType`."
msgstr ":c:func:`PyStructSequence_NewType`\\으로 만든 *type*\\의 인스턴스를 만듭니다."

#: ../../c-api/tuple.rst:216
msgid ""
"Return the object at position *pos* in the struct sequence pointed to by "
"*p*."
msgstr "*p*\\가 가리키는 구조체 시퀀스의 위치 *pos*\\에 있는 객체를 돌려줍니다."

#: ../../c-api/tuple.rst:224
msgid "Alias to :c:func:`PyStructSequence_GetItem`."
msgstr ":c:func:`PyStructSequence_GetItem`\\의 별칭."

#: ../../c-api/tuple.rst:226
msgid "Now implemented as an alias to :c:func:`PyStructSequence_GetItem`."
msgstr "이제 :c:func:`PyStructSequence_GetItem`\\의 별칭으로 구현됩니다."

#: ../../c-api/tuple.rst:232
msgid ""
"Sets the field at index *pos* of the struct sequence *p* to value *o*.  "
"Like :c:func:`PyTuple_SET_ITEM`, this should only be used to fill in "
"brand new instances."
msgstr ""
"구조체 시퀀스 *p*\\의 인덱스 *pos*\\에 있는 필드를 값 *o*\\로 설정합니다. "
":c:func:`PyTuple_SET_ITEM`\\과 마찬가지로, 이것은 새로운 인스턴스를 채울 때만 사용해야 합니다."

#: ../../c-api/tuple.rst:241
msgid "This function \"steals\" a reference to *o*."
msgstr "이 함수는 *o*\\에 대한 참조를 \"훔칩니다\"."

#: ../../c-api/tuple.rst:246
msgid "Alias to :c:func:`PyStructSequence_SetItem`."
msgstr ":c:func:`PyStructSequence_SetItem`\\의 별칭."

#: ../../c-api/tuple.rst:248
msgid "Now implemented as an alias to :c:func:`PyStructSequence_SetItem`."
msgstr "이제 :c:func:`PyStructSequence_SetItem`\\의 별칭으로 구현됩니다."

#: ../../c-api/tuple.rst:8
msgid "object"
msgstr "객체"

#: ../../c-api/tuple.rst:8
msgid "tuple"
msgstr "튜플"

