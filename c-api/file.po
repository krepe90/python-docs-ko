# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2017, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-04-17 23:44+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: Dong-gweon Oh <flowdas@gmail.com>\n"
"Language-Team: Korean (https://python.flowdas.com)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.17.0\n"

#: ../../c-api/file.rst:6
msgid "File Objects"
msgstr "파일 객체"

#: ../../c-api/file.rst:10
msgid ""
"These APIs are a minimal emulation of the Python 2 C API for built-in "
"file objects, which used to rely on the buffered I/O (:c:expr:`FILE*`) "
"support from the C standard library.  In Python 3, files and streams use "
"the new :mod:`io` module, which defines several layers over the low-level"
" unbuffered I/O of the operating system.  The functions described below "
"are convenience C wrappers over these new APIs, and meant mostly for "
"internal error reporting in the interpreter; third-party code is advised "
"to access the :mod:`io` APIs instead."
msgstr ""
"이 API는 C 표준 라이브러리의 버퍼링 된 I/O (:c:expr:`FILE*`) 지원에 의존하는 내장 파일 객체에 대한 파이썬 "
"2 C API의 최소 에뮬레이션입니다. 파이썬 3에서, 파일과 스트림은 새로운 :mod:`io` 모듈을 사용합니다. 이 모듈은 운영"
" 체제의 저수준 버퍼링 되지 않은 I/O 위에 여러 계층을 정의합니다. 아래에서 설명하는 함수는 이러한 새로운 API에 대한 편리한"
" C 래퍼이며, 주로 인터프리터의 내부 오류 보고를 위한 것입니다; 제삼자 코드는 대신 :mod:`io` API에 액세스하는 것이 "
"좋습니다."

#: ../../c-api/file.rst:22
msgid ""
"Create a Python file object from the file descriptor of an already opened"
" file *fd*.  The arguments *name*, *encoding*, *errors* and *newline* can"
" be ``NULL`` to use the defaults; *buffering* can be *-1* to use the "
"default. *name* is ignored and kept for backward compatibility. Return "
"``NULL`` on failure. For a more comprehensive description of the "
"arguments, please refer to the :func:`io.open` function documentation."
msgstr ""
"이미 열려있는 파일의 파일 기술자 *fd*\\로 파이썬 파일 객체를 만듭니다. 인자 *name*, *encoding*, "
"*errors* 및 *newline*\\은 기본값을 사용하기 위해 ``NULL`` 일 수 있습니다; *buffering*\\은 "
"기본값을 사용하기 위해 *-1* 일 수 있습니다. *name*\\은 무시되고, 이전 버전과의 호환성을 위해 유지됩니다. 실패 시 "
"``NULL``\\을 반환합니다. 인자에 대한 더 자세한 설명은 :func:`io.open` 함수 설명서를 참조하십시오."

#: ../../c-api/file.rst:31
msgid ""
"Since Python streams have their own buffering layer, mixing them with OS-"
"level file descriptors can produce various issues (such as unexpected "
"ordering of data)."
msgstr ""
"파이썬 스트림이 자체적인 버퍼링 계층을 가지고 있으므로, OS 수준의 파일 기술자와 혼합하면 여러 예기치 못한 문제가 발생할 수 "
"있습니다 (가령 데이터의 예상치 못한 순서)."

#: ../../c-api/file.rst:35
msgid "Ignore *name* attribute."
msgstr "*name* 어트리뷰트를 무시합니다."

#: ../../c-api/file.rst:41
msgid ""
"Return the file descriptor associated with *p* as an :c:expr:`int`.  If "
"the object is an integer, its value is returned.  If not, the object's "
":meth:`~io.IOBase.fileno` method is called if it exists; the method must "
"return an integer, which is returned as the file descriptor value.  Sets "
"an exception and returns ``-1`` on failure."
msgstr ""
"*p*\\와 관련된 파일 기술자를 :c:expr:`int`\\로 반환합니다. 객체가 정수면, 값이 반환됩니다. 그렇지 않으면 객체의"
" :meth:`~io.IOBase.fileno` 메서드가 있으면 호출됩니다; 메서드는 반드시 정수를 반환해야 하고, 그 값이 파일 "
"기술자 값으로 반환됩니다. 실패하면 예외를 설정하고 ``-1``\\을 반환합니다."

#: ../../c-api/file.rst:52
msgid ""
"Equivalent to ``p.readline([n])``, this function reads one line from the "
"object *p*.  *p* may be a file object or any object with a "
":meth:`~io.IOBase.readline` method.  If *n* is ``0``, exactly one line is"
" read, regardless of the length of the line.  If *n* is greater than "
"``0``, no more than *n* bytes will be read from the file; a partial line "
"can be returned.  In both cases, an empty string is returned if the end "
"of the file is reached immediately.  If *n* is less than ``0``, however, "
"one line is read regardless of length, but :exc:`EOFError` is raised if "
"the end of the file is reached immediately."
msgstr ""
"``p.readline([n])``\\과 동등합니다. 이 함수는 객체 *p*\\에서 한 줄을 읽습니다. *p*\\는 파일 객체나 "
":meth:`~io.IOBase.readline` 메서드가 있는 임의의 객체일 수 있습니다. *n*\\이 ``0``\\이면, 줄의 "
"길이와 관계없이 정확히 한 줄을 읽습니다. *n*\\이 ``0``\\보다 크면, *n* 바이트 이상을 파일에서 읽지 않습니다; "
"불완전한 줄이 반환될 수 있습니다. 두 경우 모두, 파일 끝에 즉시 도달하면 빈 문자열이 반환됩니다. 그러나 *n*\\이 "
"``0``\\보다 작으면, 길이와 관계없이 한 줄을 읽지만, 파일 끝에 즉시 도달하면 :exc:`EOFError`\\가 발생합니다."

#: ../../c-api/file.rst:65
msgid ""
"Overrides the normal behavior of :func:`io.open_code` to pass its "
"parameter through the provided handler."
msgstr "제공된 handler를 통해 매개 변수를 전달하도록 :func:`io.open_code`\\의 일반적인 동작을 재정의합니다."

#: ../../c-api/file.rst:68
msgid "The *handler* is a function of type:"
msgstr "*handler*\\는 다음과 같은 형의 함수입니다:"

#: ../../c-api/file.rst:73
msgid ""
"Equivalent of :c:expr:`PyObject *(\\*)(PyObject *path, void *userData)`, "
"where *path* is guaranteed to be :c:type:`PyUnicodeObject`."
msgstr ""
":c:expr:`PyObject *(\\*)(PyObject *path, void *userData)`\\와 동등합니다. 여기서 "
"*path*\\는 :c:type:`PyUnicodeObject` 임이 보장됩니다."

#: ../../c-api/file.rst:77
msgid ""
"The *userData* pointer is passed into the hook function. Since hook "
"functions may be called from different runtimes, this pointer should not "
"refer directly to Python state."
msgstr ""
"*userData* 포인터는 훅 함수로 전달됩니다. 훅 함수는 다른 런타임에서 호출될 수 있으므로, 이 포인터는 파이썬 상태를 직접"
" 참조하면 안 됩니다."

#: ../../c-api/file.rst:81
msgid ""
"As this hook is intentionally used during import, avoid importing new "
"modules during its execution unless they are known to be frozen or "
"available in ``sys.modules``."
msgstr ""
"이 훅은 의도적으로 임포트 중에 사용되므로, 고정되었거나(frozen) ``sys.modules``\\에 있다고 알려진 경우가 "
"아니라면 훅 실행 중에 새로운 모듈을 임포트하는 것을 피하십시오."

#: ../../c-api/file.rst:85
msgid ""
"Once a hook has been set, it cannot be removed or replaced, and later "
"calls to :c:func:`PyFile_SetOpenCodeHook` will fail. On failure, the "
"function returns -1 and sets an exception if the interpreter has been "
"initialized."
msgstr ""
"일단 훅이 설정되면, 제거하거나 교체할 수 없으며, 이후의 :c:func:`PyFile_SetOpenCodeHook`\\에 대한 "
"호출은 실패합니다. 실패 시, 함수는 -1을 반환하고 인터프리터가 초기화되었으면 예외를 설정합니다."

#: ../../c-api/file.rst:89
msgid "This function is safe to call before :c:func:`Py_Initialize`."
msgstr "이 함수는 :c:func:`Py_Initialize` 전에 호출해도 안전합니다."

#: ../../c-api/file.rst:91
msgid ""
"Raises an :ref:`auditing event <auditing>` ``setopencodehook`` with no "
"arguments."
msgstr "인자 없이 :ref:`감사 이벤트 <auditing>` ``setopencodehook``\\을 발생시킵니다."

#: ../../c-api/file.rst:101
msgid ""
"Write object *obj* to file object *p*.  The only supported flag for "
"*flags* is :c:macro:`Py_PRINT_RAW`; if given, the :func:`str` of the "
"object is written instead of the :func:`repr`.  Return ``0`` on success "
"or ``-1`` on failure; the appropriate exception will be set."
msgstr ""
"객체 *obj*\\를 파일 객체 *p*\\에 씁니다. *flags*\\에서 지원되는 유일한 플래그는 "
":c:macro:`Py_PRINT_RAW`\\입니다; 주어지면, :func:`repr` 대신 객체의 :func:`str`\\이 "
"기록됩니다. 성공하면 ``0``\\을, 실패하면 ``-1``\\을 반환합니다; 적절한 예외가 설정됩니다."

#: ../../c-api/file.rst:109
msgid ""
"Write string *s* to file object *p*.  Return ``0`` on success or ``-1`` "
"on failure; the appropriate exception will be set."
msgstr ""
"문자열 *s*\\를 파일 객체 *p*\\에 씁니다. 성공하면 ``0``\\을 반환하고, 실패하면 ``-1``\\을 반환합니다; "
"적절한 예외가 설정됩니다."

#: ../../c-api/file.rst:8
msgid "object"
msgstr "객체"

#: ../../c-api/file.rst:8
msgid "file"
msgstr "파일"

#: ../../c-api/file.rst:50
msgid "EOFError (built-in exception)"
msgstr "EOFError (내장 예외)"

#: ../../c-api/file.rst:99
msgid "Py_PRINT_RAW (C macro)"
msgstr "Py_PRINT_RAW (C 매크로)"

