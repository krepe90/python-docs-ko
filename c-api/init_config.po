# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2019, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-04-17 23:44+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: Dong-gweon Oh <flowdas@gmail.com>\n"
"Language-Team: Korean (https://python.flowdas.com)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.17.0\n"

#: ../../c-api/init_config.rst:7
msgid "Python Initialization Configuration"
msgstr "파이썬 초기화 구성"

#: ../../c-api/init_config.rst:11
msgid ""
"Python can be initialized with :c:func:`Py_InitializeFromConfig` and the "
":c:type:`PyConfig` structure. It can be preinitialized with "
":c:func:`Py_PreInitialize` and the :c:type:`PyPreConfig` structure."
msgstr ""

#: ../../c-api/init_config.rst:15
#, fuzzy
msgid "There are two kinds of configuration:"
msgstr "모든 파이썬 구성을 읽습니다."

#: ../../c-api/init_config.rst:17
msgid ""
"The :ref:`Python Configuration <init-python-config>` can be used to build"
" a customized Python which behaves as the regular Python. For example, "
"environment variables and command line arguments are used to configure "
"Python."
msgstr ""

#: ../../c-api/init_config.rst:22
msgid ""
"The :ref:`Isolated Configuration <init-isolated-conf>` can be used to "
"embed Python into an application. It isolates Python from the system. For"
" example, environment variables are ignored, the LC_CTYPE locale is left "
"unchanged and no signal handler is registered."
msgstr ""

#: ../../c-api/init_config.rst:27
msgid ""
"The :c:func:`Py_RunMain` function can be used to write a customized "
"Python program."
msgstr ""

#: ../../c-api/init_config.rst:30
msgid ""
"See also :ref:`Initialization, Finalization, and Threads "
"<initialization>`."
msgstr ":ref:`초기화, 파이널리제이션 및 스레드 <initialization>`\\도 참조하십시오."

#: ../../c-api/init_config.rst:33
msgid ":pep:`587` \"Python Initialization Configuration\"."
msgstr ":pep:`587` \"파이썬 초기화 구성\"."

#: ../../c-api/init_config.rst:37
#, fuzzy
msgid "Example"
msgstr "예::"

#: ../../c-api/init_config.rst:39
msgid "Example of customized Python always running in isolated mode::"
msgstr "항상 격리 모드에서 실행되는 사용자 정의 파이썬의 예::"

#: ../../c-api/init_config.rst:41
msgid ""
"int main(int argc, char **argv)\n"
"{\n"
"    PyStatus status;\n"
"\n"
"    PyConfig config;\n"
"    PyConfig_InitPythonConfig(&config);\n"
"    config.isolated = 1;\n"
"\n"
"    /* Decode command line arguments.\n"
"       Implicitly preinitialize Python (in isolated mode). */\n"
"    status = PyConfig_SetBytesArgv(&config, argc, argv);\n"
"    if (PyStatus_Exception(status)) {\n"
"        goto exception;\n"
"    }\n"
"\n"
"    status = Py_InitializeFromConfig(&config);\n"
"    if (PyStatus_Exception(status)) {\n"
"        goto exception;\n"
"    }\n"
"    PyConfig_Clear(&config);\n"
"\n"
"    return Py_RunMain();\n"
"\n"
"exception:\n"
"    PyConfig_Clear(&config);\n"
"    if (PyStatus_IsExit(status)) {\n"
"        return status.exitcode;\n"
"    }\n"
"    /* Display the error message and exit the process with\n"
"       non-zero exit code */\n"
"    Py_ExitStatusException(status);\n"
"}"
msgstr ""

#: ../../c-api/init_config.rst:76
msgid "PyWideStringList"
msgstr "PyWideStringList"

#: ../../c-api/init_config.rst:80
msgid "List of ``wchar_t*`` strings."
msgstr "``wchar_t*`` 문자열의 리스트."

#: ../../c-api/init_config.rst:82
msgid ""
"If *length* is non-zero, *items* must be non-``NULL`` and all strings "
"must be non-``NULL``."
msgstr ""
"*length*\\가 0이 아니면, *items*\\는 ``NULL``\\이 아니어야 하고 모든 문자열은 ``NULL``\\이 "
"아니어야 합니다."

#: ../../c-api/init_config.rst:87
msgid "Methods:"
msgstr "메서드:"

#: ../../c-api/init_config.rst:91
msgid "Append *item* to *list*."
msgstr "*item*\\을 *list*\\에 추가합니다."

#: ../../c-api/init_config.rst:93 ../../c-api/init_config.rst:104
msgid "Python must be preinitialized to call this function."
msgstr "이 함수를 호출하려면 파이썬을 사전 초기화해야 합니다."

#: ../../c-api/init_config.rst:97
msgid "Insert *item* into *list* at *index*."
msgstr "*item*\\을 *list*\\의 *index*\\에 삽입합니다."

#: ../../c-api/init_config.rst:99
msgid ""
"If *index* is greater than or equal to *list* length, append *item* to "
"*list*."
msgstr "*index*\\가 *list* 길이보다 크거나 같으면, *item*\\을 *list*\\에 추가(append)합니다."

#: ../../c-api/init_config.rst:102
#, fuzzy
msgid "*index* must be greater than or equal to ``0``."
msgstr "*index*\\는 0보다 크거나 같아야 합니다."

#: ../../c-api/init_config.rst:108 ../../c-api/init_config.rst:128
#: ../../c-api/init_config.rst:235 ../../c-api/init_config.rst:554
msgid "Structure fields:"
msgstr "구조체 필드:"

#: ../../c-api/init_config.rst:112
msgid "List length."
msgstr "리스트 길이."

#: ../../c-api/init_config.rst:116
msgid "List items."
msgstr "리스트 항목들."

#: ../../c-api/init_config.rst:119
msgid "PyStatus"
msgstr "PyStatus"

#: ../../c-api/init_config.rst:123
msgid ""
"Structure to store an initialization function status: success, error or "
"exit."
msgstr "초기화 함수 상태를 저장하는 구조체: 성공, 에러 또는 종료."

#: ../../c-api/init_config.rst:126
msgid "For an error, it can store the C function name which created the error."
msgstr "에러의 경우, 에러를 만든 C 함수 이름을 저장할 수 있습니다."

#: ../../c-api/init_config.rst:132
msgid "Exit code. Argument passed to ``exit()``."
msgstr "종료 코드. ``exit()``\\에 전달된 인자."

#: ../../c-api/init_config.rst:136
msgid "Error message."
msgstr "에러 메시지."

#: ../../c-api/init_config.rst:140
msgid "Name of the function which created an error, can be ``NULL``."
msgstr "에러를 만든 함수의 이름, ``NULL``\\일 수 있습니다."

#: ../../c-api/init_config.rst:144
msgid "Functions to create a status:"
msgstr "상태를 만드는 함수:"

#: ../../c-api/init_config.rst:148
msgid "Success."
msgstr "성공."

#: ../../c-api/init_config.rst:152
msgid "Initialization error with a message."
msgstr "메시지가 포함된 초기화 에러."

#: ../../c-api/init_config.rst:154
msgid "*err_msg* must not be ``NULL``."
msgstr ""

#: ../../c-api/init_config.rst:158
msgid "Memory allocation failure (out of memory)."
msgstr "메모리 할당 실패 (메모리 부족)."

#: ../../c-api/init_config.rst:162
msgid "Exit Python with the specified exit code."
msgstr "지정된 종료 코드로 파이썬을 종료합니다."

#: ../../c-api/init_config.rst:164
msgid "Functions to handle a status:"
msgstr "상태를 처리하는 함수:"

#: ../../c-api/init_config.rst:168
msgid ""
"Is the status an error or an exit? If true, the exception must be "
"handled; by calling :c:func:`Py_ExitStatusException` for example."
msgstr ""
"상태가 에러입니까? 아니면 종료입니까? 참이면, 예외를 처리해야 합니다; 예를 들어 "
":c:func:`Py_ExitStatusException` 을 호출하여."

#: ../../c-api/init_config.rst:173
msgid "Is the result an error?"
msgstr "결과가 에러입니까?"

#: ../../c-api/init_config.rst:177
msgid "Is the result an exit?"
msgstr "결과가 종료입니까?"

#: ../../c-api/init_config.rst:181
msgid ""
"Call ``exit(exitcode)`` if *status* is an exit. Print the error message "
"and exit with a non-zero exit code if *status* is an error.  Must only be"
" called if ``PyStatus_Exception(status)`` is non-zero."
msgstr ""
"*status*\\가 종료이면 ``exit(exitcode)``\\를 호출합니다. *status*\\가 에러이면 에러 메시지를 "
"인쇄하고 0이 아닌 종료 코드로 종료합니다. ``PyStatus_Exception(status)``\\가 0이 아닐 때만 호출해야 "
"합니다."

#: ../../c-api/init_config.rst:186
msgid ""
"Internally, Python uses macros which set ``PyStatus.func``, whereas "
"functions to create a status set ``func`` to ``NULL``."
msgstr ""
"내부적으로, 파이썬은 ``PyStatus.func``\\를 설정하는 데는 매크로를 사용하는 반면, ``func``\\가 "
"``NULL``\\로 설정된 상태를 만드는 데는 함수를 사용합니다."

#: ../../c-api/init_config.rst:189
msgid "Example::"
msgstr "예::"

#: ../../c-api/init_config.rst:191
msgid ""
"PyStatus alloc(void **ptr, size_t size)\n"
"{\n"
"    *ptr = PyMem_RawMalloc(size);\n"
"    if (*ptr == NULL) {\n"
"        return PyStatus_NoMemory();\n"
"    }\n"
"    return PyStatus_Ok();\n"
"}\n"
"\n"
"int main(int argc, char **argv)\n"
"{\n"
"    void *ptr;\n"
"    PyStatus status = alloc(&ptr, 16);\n"
"    if (PyStatus_Exception(status)) {\n"
"        Py_ExitStatusException(status);\n"
"    }\n"
"    PyMem_Free(ptr);\n"
"    return 0;\n"
"}"
msgstr ""

#: ../../c-api/init_config.rst:213
msgid "PyPreConfig"
msgstr "PyPreConfig"

#: ../../c-api/init_config.rst:217
#, fuzzy
msgid "Structure used to preinitialize Python."
msgstr "파이썬을 사전 초기화하는 데 사용되는 구조체:"

#: ../../c-api/init_config.rst:221
msgid "Function to initialize a preconfiguration:"
msgstr "사전 구성을 초기화하는 함수:"

#: ../../c-api/init_config.rst:225
msgid ""
"Initialize the preconfiguration with :ref:`Python Configuration <init-"
"python-config>`."
msgstr ":ref:`파이썬 구성 <init-python-config>`\\으로 사전 구성을 초기화합니다."

#: ../../c-api/init_config.rst:230
msgid ""
"Initialize the preconfiguration with :ref:`Isolated Configuration <init-"
"isolated-conf>`."
msgstr ":ref:`격리된 구성 <init-isolated-conf>`\\으로 사전 구성을 초기화합니다."

#: ../../c-api/init_config.rst:239
#, fuzzy
msgid "Name of the Python memory allocators:"
msgstr "메모리 할당자의 이름:"

#: ../../c-api/init_config.rst:241
#, fuzzy
msgid ""
"``PYMEM_ALLOCATOR_NOT_SET`` (``0``): don't change memory allocators (use "
"defaults)."
msgstr "``PYMEM_ALLOCATOR_NOT_SET`` (``0``): 메모리 할당자를 변경하지 않습니다 (기본값을 사용합니다)"

#: ../../c-api/init_config.rst:243
#, fuzzy
msgid ""
"``PYMEM_ALLOCATOR_DEFAULT`` (``1``): :ref:`default memory allocators "
"<default-memory-allocators>`."
msgstr "``PYMEM_ALLOCATOR_DEFAULT`` (``1``): 기본 메모리 할당자"

#: ../../c-api/init_config.rst:245
#, fuzzy
msgid ""
"``PYMEM_ALLOCATOR_DEBUG`` (``2``): :ref:`default memory allocators "
"<default-memory-allocators>` with :ref:`debug hooks <pymem-debug-hooks>`."
msgstr "``PYMEM_ALLOCATOR_DEBUG`` (``2``): 디버그 훅이 있는 기본 메모리 할당자"

#: ../../c-api/init_config.rst:248
#, fuzzy
msgid "``PYMEM_ALLOCATOR_MALLOC`` (``3``): use ``malloc()`` of the C library."
msgstr "``PYMEM_ALLOCATOR_MALLOC`` (``3``): ``malloc()``\\의 사용을 강제합니다"

#: ../../c-api/init_config.rst:249
#, fuzzy
msgid ""
"``PYMEM_ALLOCATOR_MALLOC_DEBUG`` (``4``): force usage of ``malloc()`` "
"with :ref:`debug hooks <pymem-debug-hooks>`."
msgstr ""
"``PYMEM_ALLOCATOR_MALLOC_DEBUG`` (``4``): 디버그 훅이 있는 ``malloc()``\\의 사용을 "
"강제합니다"

#: ../../c-api/init_config.rst:251
#, fuzzy
msgid ""
"``PYMEM_ALLOCATOR_PYMALLOC`` (``5``): :ref:`Python pymalloc memory "
"allocator <pymalloc>`."
msgstr ""
"``PYMEM_ALLOCATOR_PYMALLOC`` (``5``): :ref:`파이썬 pymalloc 메모리 할당자 "
"<pymalloc>`"

#: ../../c-api/init_config.rst:253
#, fuzzy
msgid ""
"``PYMEM_ALLOCATOR_PYMALLOC_DEBUG`` (``6``): :ref:`Python pymalloc memory "
"allocator <pymalloc>` with :ref:`debug hooks <pymem-debug-hooks>`."
msgstr ""
"``PYMEM_ALLOCATOR_PYMALLOC_DEBUG`` (``6``): 디버그 훅이 있는 :ref:`파이썬 pymalloc "
"메모리 할당자 <pymalloc>`"

#: ../../c-api/init_config.rst:256
#, fuzzy
msgid ""
"``PYMEM_ALLOCATOR_MIMALLOC`` (``6``): use ``mimalloc``, a fast malloc "
"replacement."
msgstr "``PYMEM_ALLOCATOR_MALLOC`` (``3``): ``malloc()``\\의 사용을 강제합니다"

#: ../../c-api/init_config.rst:258
#, fuzzy
msgid ""
"``PYMEM_ALLOCATOR_MIMALLOC_DEBUG`` (``7``): use ``mimalloc``, a fast "
"malloc replacement with :ref:`debug hooks <pymem-debug-hooks>`."
msgstr ""
"``PYMEM_ALLOCATOR_MALLOC_DEBUG`` (``4``): 디버그 훅이 있는 ``malloc()``\\의 사용을 "
"강제합니다"

#: ../../c-api/init_config.rst:262
#, fuzzy
msgid ""
"``PYMEM_ALLOCATOR_PYMALLOC`` and ``PYMEM_ALLOCATOR_PYMALLOC_DEBUG`` are "
"not supported if Python is :option:`configured using --without-pymalloc "
"<--without-pymalloc>`."
msgstr ""
"파이썬이 ``--without-pymalloc``\\을 사용하여 구성되면 ``PYMEM_ALLOCATOR_PYMALLOC``\\과 "
"``PYMEM_ALLOCATOR_PYMALLOC_DEBUG``\\은 지원되지 않습니다"

#: ../../c-api/init_config.rst:266
#, fuzzy
msgid ""
"``PYMEM_ALLOCATOR_MIMALLOC`` and ``PYMEM_ALLOCATOR_MIMALLOC_DEBUG`` are "
"not supported if Python is :option:`configured using --without-mimalloc "
"<--without-mimalloc>` or if the underlying atomic support isn't "
"available."
msgstr ""
"파이썬이 ``--without-pymalloc``\\을 사용하여 구성되면 ``PYMEM_ALLOCATOR_PYMALLOC``\\과 "
"``PYMEM_ALLOCATOR_PYMALLOC_DEBUG``\\은 지원되지 않습니다"

#: ../../c-api/init_config.rst:271
msgid "See :ref:`Memory Management <memory>`."
msgstr ":ref:`메모리 관리 <memory>`\\를 참조하십시오."

#: ../../c-api/init_config.rst:273
msgid "Default: ``PYMEM_ALLOCATOR_NOT_SET``."
msgstr ""

#: ../../c-api/init_config.rst:277
msgid "Set the LC_CTYPE locale to the user preferred locale."
msgstr ""

#: ../../c-api/init_config.rst:279
#, fuzzy
msgid ""
"If equals to ``0``, set :c:member:`~PyPreConfig.coerce_c_locale` and "
":c:member:`~PyPreConfig.coerce_c_locale_warn` members to ``0``."
msgstr ""
"LC_CTYPE 로케일을 사용자 선호 로케일로 설정합니까?? 0과 같으면, :c:member:`coerce_c_locale`\\과 "
":c:member:`coerce_c_locale_warn`\\을 0으로 설정합니다."

#: ../../c-api/init_config.rst:282 ../../c-api/init_config.rst:293
msgid "See the :term:`locale encoding`."
msgstr ""

#: ../../c-api/init_config.rst:284 ../../c-api/init_config.rst:339
#: ../../c-api/init_config.rst:710
msgid "Default: ``1`` in Python config, ``0`` in isolated config."
msgstr ""

#: ../../c-api/init_config.rst:288
msgid "If equals to ``2``, coerce the C locale."
msgstr ""

#: ../../c-api/init_config.rst:290
#, fuzzy
msgid ""
"If equals to ``1``, read the LC_CTYPE locale to decide if it should be "
"coerced."
msgstr "2와 같으면, C 로케일을 강제합니다; 1과 같으면, LC_CTYPE 로케일을 읽고 강제할지 결정합니다."

#: ../../c-api/init_config.rst:295 ../../c-api/init_config.rst:301
msgid "Default: ``-1`` in Python config, ``0`` in isolated config."
msgstr ""

#: ../../c-api/init_config.rst:299
msgid "If non-zero, emit a warning if the C locale is coerced."
msgstr "0이 아니면, C 로케일이 강제될 때 경고가 발생합니다."

#: ../../c-api/init_config.rst:305
#, fuzzy
msgid ""
":ref:`Python Development Mode <devmode>`: see "
":c:member:`PyConfig.dev_mode`."
msgstr ":c:member:`PyConfig.dev_mode`\\를 참조하십시오."

#: ../../c-api/init_config.rst:308 ../../c-api/init_config.rst:719
#: ../../c-api/init_config.rst:765 ../../c-api/init_config.rst:1244
msgid "Default: ``-1`` in Python mode, ``0`` in isolated mode."
msgstr ""

#: ../../c-api/init_config.rst:312
#, fuzzy
msgid "Isolated mode: see :c:member:`PyConfig.isolated`."
msgstr ":c:member:`PyConfig.isolated`\\를 참조하십시오."

#: ../../c-api/init_config.rst:314 ../../c-api/init_config.rst:921
msgid "Default: ``0`` in Python mode, ``1`` in isolated mode."
msgstr ""

#: ../../c-api/init_config.rst:318
msgid "If non-zero:"
msgstr ""

#: ../../c-api/init_config.rst:320
#, fuzzy
msgid "Set :c:member:`PyPreConfig.utf8_mode` to ``0``,"
msgstr ":c:member:`PyConfig.dev_mode`\\를 참조하십시오."

#: ../../c-api/init_config.rst:321
#, fuzzy
msgid "Set :c:member:`PyConfig.filesystem_encoding` to ``\"mbcs\"``,"
msgstr ":c:member:`PyConfig.use_environment`\\를 참조하십시오."

#: ../../c-api/init_config.rst:322
#, fuzzy
msgid "Set :c:member:`PyConfig.filesystem_errors` to ``\"replace\"``."
msgstr ":c:member:`PyConfig.isolated`\\를 참조하십시오."

#: ../../c-api/init_config.rst:324
#, fuzzy
msgid ""
"Initialized from the :envvar:`PYTHONLEGACYWINDOWSFSENCODING` environment "
"variable value."
msgstr "기본적으로 :envvar:`PYTHONHOME` 환경 변숫값에서 초기화됩니다."

#: ../../c-api/init_config.rst:327 ../../c-api/init_config.rst:935
msgid ""
"Only available on Windows. ``#ifdef MS_WINDOWS`` macro can be used for "
"Windows specific code."
msgstr "윈도우에서만 사용 가능합니다. ``#ifdef MS_WINDOWS`` 매크로는 윈도우 특정 코드에 사용할 수 있습니다."

#: ../../c-api/init_config.rst:330 ../../c-api/init_config.rst:658
#: ../../c-api/init_config.rst:665 ../../c-api/init_config.rst:732
#: ../../c-api/init_config.rst:843 ../../c-api/init_config.rst:857
#: ../../c-api/init_config.rst:871 ../../c-api/init_config.rst:938
#: ../../c-api/init_config.rst:952 ../../c-api/init_config.rst:1012
#: ../../c-api/init_config.rst:1064 ../../c-api/init_config.rst:1126
#: ../../c-api/init_config.rst:1180 ../../c-api/init_config.rst:1209
#: ../../c-api/init_config.rst:1298
msgid "Default: ``0``."
msgstr ""

#: ../../c-api/init_config.rst:334
msgid ""
"If non-zero, :c:func:`Py_PreInitializeFromArgs` and "
":c:func:`Py_PreInitializeFromBytesArgs` parse their ``argv`` argument the"
" same way the regular Python parses command line arguments: see "
":ref:`Command Line Arguments <using-on-cmdline>`."
msgstr ""
"0이 아니면, :c:func:`Py_PreInitializeFromArgs`\\와 "
":c:func:`Py_PreInitializeFromBytesArgs`\\는 일반 파이썬이 명령 줄 인자를 구문 분석하는 것과 같은"
" 방식으로 ``argv`` 인자를 구문 분석합니다. :ref:`명령 줄 인자 <using-on-cmdline>`\\를 참조하십시오."

#: ../../c-api/init_config.rst:343
#, fuzzy
msgid ""
"Use :ref:`environment variables <using-on-envvars>`? See "
":c:member:`PyConfig.use_environment`."
msgstr "0보다 크면, :ref:`환경 변수 <using-on-envvars>`\\를 사용합니다."

#: ../../c-api/init_config.rst:346 ../../c-api/init_config.rst:1272
msgid "Default: ``1`` in Python config and ``0`` in isolated config."
msgstr ""

#: ../../c-api/init_config.rst:350
#, fuzzy
msgid "If non-zero, enable the :ref:`Python UTF-8 Mode <utf8-mode>`."
msgstr "0이 아니면, :ref:`파이썬 개발 모드 <devmode>`\\를 활성화합니다."

#: ../../c-api/init_config.rst:352
msgid ""
"Set to ``0`` or ``1`` by the :option:`-X utf8 <-X>` command line option "
"and the :envvar:`PYTHONUTF8` environment variable."
msgstr ""

#: ../../c-api/init_config.rst:355
msgid "Also set to ``1`` if the ``LC_CTYPE`` locale is ``C`` or ``POSIX``."
msgstr ""

#: ../../c-api/init_config.rst:357
msgid "Default: ``-1`` in Python config and ``0`` in isolated config."
msgstr ""

#: ../../c-api/init_config.rst:363
#, fuzzy
msgid "Preinitialize Python with PyPreConfig"
msgstr "PyPreConfig를 사용한 사전 초기화"

#: ../../c-api/init_config.rst:365
#, fuzzy
msgid "The preinitialization of Python:"
msgstr "PyPreConfig를 사용한 사전 초기화"

#: ../../c-api/init_config.rst:367
#, fuzzy
msgid "Set the Python memory allocators (:c:member:`PyPreConfig.allocator`)"
msgstr "파이썬 메모리 할당자를 설정합니다"

#: ../../c-api/init_config.rst:368
#, fuzzy
msgid "Configure the LC_CTYPE locale (:term:`locale encoding`)"
msgstr "LC_CTYPE 로케일을 구성합니다"

#: ../../c-api/init_config.rst:369
msgid ""
"Set the :ref:`Python UTF-8 Mode <utf8-mode>` "
"(:c:member:`PyPreConfig.utf8_mode`)"
msgstr ""

#: ../../c-api/init_config.rst:372
#, fuzzy
msgid ""
"The current preconfiguration (``PyPreConfig`` type) is stored in "
"``_PyRuntime.preconfig``."
msgstr ""
"사전 구성(``PyPreConfig`` 형)은 ``_PyRuntime.preconfig``\\에 저장되고 "
"구성(``PyConfig`` 형)은 ``PyInterpreterState.config``\\에 저장됩니다."

#: ../../c-api/init_config.rst:375
msgid "Functions to preinitialize Python:"
msgstr "파이썬을 사전 초기화하는 함수:"

#: ../../c-api/init_config.rst:379 ../../c-api/init_config.rst:385
#: ../../c-api/init_config.rst:394
msgid "Preinitialize Python from *preconfig* preconfiguration."
msgstr "*preconfig* 사전 구성에서 파이썬을 사전 초기화합니다."

#: ../../c-api/init_config.rst:381 ../../c-api/init_config.rst:390
#: ../../c-api/init_config.rst:399
msgid "*preconfig* must not be ``NULL``."
msgstr ""

#: ../../c-api/init_config.rst:387
msgid ""
"Parse *argv* command line arguments (bytes strings) if "
":c:member:`~PyPreConfig.parse_argv` of *preconfig* is non-zero."
msgstr ""

#: ../../c-api/init_config.rst:396
msgid ""
"Parse *argv* command line arguments (wide strings) if "
":c:member:`~PyPreConfig.parse_argv` of *preconfig* is non-zero."
msgstr ""

#: ../../c-api/init_config.rst:401 ../../c-api/init_config.rst:1359
msgid ""
"The caller is responsible to handle exceptions (error or exit) using "
":c:func:`PyStatus_Exception` and :c:func:`Py_ExitStatusException`."
msgstr ""
"호출자는 :c:func:`PyStatus_Exception`\\과 :c:func:`Py_ExitStatusException` 을 "
"사용하여 예외(에러나 종료)를 처리해야 합니다."

#: ../../c-api/init_config.rst:404
#, fuzzy
msgid ""
"For :ref:`Python Configuration <init-python-config>` "
"(:c:func:`PyPreConfig_InitPythonConfig`), if Python is initialized with "
"command line arguments, the command line arguments must also be passed to"
" preinitialize Python, since they have an effect on the pre-configuration"
" like encodings. For example, the :option:`-X utf8 <-X>` command line "
"option enables the :ref:`Python UTF-8 Mode <utf8-mode>`."
msgstr ""
":ref:`파이썬 구성 <init-python-"
"config>`\\(:c:func:`PyPreConfig_InitPythonConfig`)의 경우, 명령 줄 인자로 파이썬을 "
"초기화하면, 인코딩과 같은 사전 구성에 영향을 주기 때문에, 파이썬을 사전 구성하기 위해 명령 줄 인자도 전달되어야 합니다. 예를 "
"들어, :option:`-X utf8 <-X>` 명령 줄 옵션은 UTF-8 모드를 활성화합니다."

#: ../../c-api/init_config.rst:411
msgid ""
"``PyMem_SetAllocator()`` can be called after :c:func:`Py_PreInitialize` "
"and before :c:func:`Py_InitializeFromConfig` to install a custom memory "
"allocator. It can be called before :c:func:`Py_PreInitialize` if "
":c:member:`PyPreConfig.allocator` is set to ``PYMEM_ALLOCATOR_NOT_SET``."
msgstr ""
"``PyMem_SetAllocator()``\\는 :c:func:`Py_PreInitialize` 이후에 "
":c:func:`Py_InitializeFromConfig` 이전에 호출하여 사용자 정의 메모리 할당자를 설치할 수 있습니다. "
":c:member:`PyPreConfig.allocator`\\가 ``PYMEM_ALLOCATOR_NOT_SET``\\으로 설정되면"
" :c:func:`Py_PreInitialize` 전에 호출할 수 있습니다."

#: ../../c-api/init_config.rst:416
#, fuzzy
msgid ""
"Python memory allocation functions like :c:func:`PyMem_RawMalloc` must "
"not be used before the Python preinitialization, whereas calling directly"
" ``malloc()`` and ``free()`` is always safe. :c:func:`Py_DecodeLocale` "
"must not be called before the Python preinitialization."
msgstr ""
":c:func:`PyMem_RawMalloc`\\과 같은 파이썬 메모리 할당 함수는 파이썬 사전 초기화 전에 사용해서는 안 되지만,"
" ``malloc()``\\과 ``free()``\\를 직접 호출하는 것은 항상 안전합니다. 사전 초기화 전에 "
":c:func:`Py_DecodeLocale`\\을 호출하면 안 됩니다."

#: ../../c-api/init_config.rst:421
#, fuzzy
msgid ""
"Example using the preinitialization to enable the :ref:`Python UTF-8 Mode"
" <utf8-mode>`::"
msgstr "UTF-8 모드를 활성화하기 위해 사전 초기화를 사용하는 예::"

#: ../../c-api/init_config.rst:424
#, python-brace-format
msgid ""
"PyStatus status;\n"
"PyPreConfig preconfig;\n"
"PyPreConfig_InitPythonConfig(&preconfig);\n"
"\n"
"preconfig.utf8_mode = 1;\n"
"\n"
"status = Py_PreInitialize(&preconfig);\n"
"if (PyStatus_Exception(status)) {\n"
"    Py_ExitStatusException(status);\n"
"}\n"
"\n"
"/* at this point, Python speaks UTF-8 */\n"
"\n"
"Py_Initialize();\n"
"/* ... use Python API here ... */\n"
"Py_Finalize();"
msgstr ""

#: ../../c-api/init_config.rst:443
msgid "PyConfig"
msgstr "PyConfig"

#: ../../c-api/init_config.rst:447
msgid "Structure containing most parameters to configure Python."
msgstr "파이썬을 구성하기 위한 대부분의 파라미터를 포함하는 구조체."

#: ../../c-api/init_config.rst:449
msgid ""
"When done, the :c:func:`PyConfig_Clear` function must be used to release "
"the configuration memory."
msgstr ""

#: ../../c-api/init_config.rst:454
msgid "Structure methods:"
msgstr "구조체 메서드:"

#: ../../c-api/init_config.rst:458
#, fuzzy
msgid ""
"Initialize configuration with the :ref:`Python Configuration <init-"
"python-config>`."
msgstr ":ref:`파이썬 구성 <init-python-config>`\\으로 구성을 초기화합니다."

#: ../../c-api/init_config.rst:463
#, fuzzy
msgid ""
"Initialize configuration with the :ref:`Isolated Configuration <init-"
"isolated-conf>`."
msgstr ":ref:`격리된 구성 <init-isolated-conf>`\\으로 구성을 초기화합니다."

#: ../../c-api/init_config.rst:468
msgid "Copy the wide character string *str* into ``*config_str``."
msgstr "와이드 문자열 *str*\\을 ``*config_str``\\로 복사합니다."

#: ../../c-api/init_config.rst:470 ../../c-api/init_config.rst:477
#: ../../c-api/init_config.rst:484 ../../c-api/init_config.rst:492
#: ../../c-api/init_config.rst:498 ../../c-api/init_config.rst:515
#, fuzzy
msgid ":ref:`Preinitialize Python <c-preinit>` if needed."
msgstr "필요하면 파이썬을 사전 초기화합니다."

#: ../../c-api/init_config.rst:474
#, fuzzy
msgid ""
"Decode *str* using :c:func:`Py_DecodeLocale` and set the result into "
"``*config_str``."
msgstr "``Py_DecodeLocale()``\\을 사용하여 *str*\\을 디코딩하고 결과를 ``*config_str``\\에 설정합니다."

#: ../../c-api/init_config.rst:481
#, fuzzy
msgid ""
"Set command line arguments (:c:member:`~PyConfig.argv` member of "
"*config*) from the *argv* list of wide character strings."
msgstr "와이드 문자열로 명령 줄 인자를 설정합니다."

#: ../../c-api/init_config.rst:488
#, fuzzy
msgid ""
"Set command line arguments (:c:member:`~PyConfig.argv` member of "
"*config*) from the *argv* list of bytes strings. Decode bytes using "
":c:func:`Py_DecodeLocale`."
msgstr "명령 줄 인자를 설정합니다: :c:func:`Py_DecodeLocale`\\를 사용하여 바이트열을 디코딩합니다."

#: ../../c-api/init_config.rst:496
msgid "Set the list of wide strings *list* to *length* and *items*."
msgstr "와이드 문자열 리스트 *list*\\를 *length*\\와 *items*\\로 설정합니다."

#: ../../c-api/init_config.rst:502
msgid "Read all Python configuration."
msgstr "모든 파이썬 구성을 읽습니다."

#: ../../c-api/init_config.rst:504
msgid "Fields which are already initialized are left unchanged."
msgstr "이미 초기화된 필드는 변경되지 않습니다."

#: ../../c-api/init_config.rst:506
msgid ""
"Fields for :ref:`path configuration <init-path-config>` are no longer "
"calculated or modified when calling this function, as of Python 3.11."
msgstr ""

#: ../../c-api/init_config.rst:509 ../../c-api/init_config.rst:1041
msgid ""
"The :c:func:`PyConfig_Read` function only parses "
":c:member:`PyConfig.argv` arguments once: :c:member:`PyConfig.parse_argv`"
" is set to ``2`` after arguments are parsed. Since Python arguments are "
"stripped from :c:member:`PyConfig.argv`, parsing arguments twice would "
"parse the application options as Python options."
msgstr ""

#: ../../c-api/init_config.rst:517
msgid ""
"The :c:member:`PyConfig.argv` arguments are now only parsed once, "
":c:member:`PyConfig.parse_argv` is set to ``2`` after arguments are "
"parsed, and arguments are only parsed if :c:member:`PyConfig.parse_argv` "
"equals ``1``."
msgstr ""

#: ../../c-api/init_config.rst:523
msgid ""
":c:func:`PyConfig_Read` no longer calculates all paths, and so fields "
"listed under :ref:`Python Path Configuration <init-path-config>` may no "
"longer be updated until :c:func:`Py_InitializeFromConfig` is called."
msgstr ""

#: ../../c-api/init_config.rst:531
msgid "Release configuration memory."
msgstr "구성 메모리를 해제합니다."

#: ../../c-api/init_config.rst:533
#, fuzzy
msgid ""
"Most ``PyConfig`` methods :ref:`preinitialize Python <c-preinit>` if "
"needed. In that case, the Python preinitialization configuration "
"(:c:type:`PyPreConfig`) in based on the :c:type:`PyConfig`. If "
"configuration fields which are in common with :c:type:`PyPreConfig` are "
"tuned, they must be set before calling a :c:type:`PyConfig` method:"
msgstr ""
"대부분의 ``PyConfig`` 메서드는 필요하면 파이썬을 사전 초기화합니다. 이 경우, :c:type:`PyConfig`\\를 "
"기반으로 하는 파이썬 사전 초기화 구성입니다. :c:type:`PyPreConfig`\\와 공통인 구성 필드가 조정되면, "
":c:type:`PyConfig` 메서드를 호출하기 전에 설정해야 합니다:"

#: ../../c-api/init_config.rst:539
#, fuzzy
msgid ":c:member:`PyConfig.dev_mode`"
msgstr ":c:member:`~PyConfig.dev_mode`"

#: ../../c-api/init_config.rst:540
#, fuzzy
msgid ":c:member:`PyConfig.isolated`"
msgstr ":c:member:`~PyConfig.isolated`"

#: ../../c-api/init_config.rst:541
#, fuzzy
msgid ":c:member:`PyConfig.parse_argv`"
msgstr ":c:member:`~PyConfig.parse_argv`"

#: ../../c-api/init_config.rst:542
#, fuzzy
msgid ":c:member:`PyConfig.use_environment`"
msgstr ":c:member:`~PyConfig.use_environment`"

#: ../../c-api/init_config.rst:544
#, fuzzy
msgid ""
"Moreover, if :c:func:`PyConfig_SetArgv` or "
":c:func:`PyConfig_SetBytesArgv` is used, this method must be called "
"before other methods, since the preinitialization configuration depends "
"on command line arguments (if :c:member:`~PyConfig.parse_argv` is non-"
"zero)."
msgstr ""
"또한, :c:func:`PyConfig_SetArgv`\\나 :c:func:`PyConfig_SetBytesArgv`\\가 "
"사용되면, 사전 초기화 구성이 명령 줄 인자 (:c:member:`parse_argv`\\가 0이 아니면)에 의존하기 때문에 다른 "
"메서드보다 먼저 이 메서드를 호출해야 합니다."

#: ../../c-api/init_config.rst:549
msgid ""
"The caller of these methods is responsible to handle exceptions (error or"
" exit) using ``PyStatus_Exception()`` and ``Py_ExitStatusException()``."
msgstr ""
"이 메서드의 호출자는 ``PyStatus_Exception()``\\과 ``Py_ExitStatusException()`` 을 "
"사용하여 예외(에러나 종료)를 처리해야 합니다."

#: ../../c-api/init_config.rst:562
msgid ""
"Set :data:`sys.argv` command line arguments based on "
":c:member:`~PyConfig.argv`.  These parameters are similar to those passed"
" to the program's :c:func:`main` function with the difference that the "
"first entry should refer to the script file to be executed rather than "
"the executable hosting the Python interpreter.  If there isn't a script "
"that will be run, the first entry in :c:member:`~PyConfig.argv` can be an"
" empty string."
msgstr ""

#: ../../c-api/init_config.rst:570
#, fuzzy
msgid ""
"Set :c:member:`~PyConfig.parse_argv` to ``1`` to parse "
":c:member:`~PyConfig.argv` the same way the regular Python parses Python "
"command line arguments and then to strip Python arguments from "
":c:member:`~PyConfig.argv`."
msgstr ""
"0이 아니면, 일반 파이썬 명령 줄 인자와 같은 방식으로 :c:member:`~PyConfig.argv`\\를 구문 분석하고, "
":c:member:`~PyConfig.argv`\\에서 파이썬 인자를 제거합니다: :ref:`명령 줄 인자 <using-on-"
"cmdline>`\\를 참조하십시오."

#: ../../c-api/init_config.rst:575
msgid ""
"If :c:member:`~PyConfig.argv` is empty, an empty string is added to "
"ensure that :data:`sys.argv` always exists and is never empty."
msgstr ""

#: ../../c-api/init_config.rst:578 ../../c-api/init_config.rst:605
#: ../../c-api/init_config.rst:619 ../../c-api/init_config.rst:629
#: ../../c-api/init_config.rst:739 ../../c-api/init_config.rst:750
#: ../../c-api/init_config.rst:832 ../../c-api/init_config.rst:982
#: ../../c-api/init_config.rst:1083 ../../c-api/init_config.rst:1102
#: ../../c-api/init_config.rst:1117 ../../c-api/init_config.rst:1134
#: ../../c-api/init_config.rst:1147 ../../c-api/init_config.rst:1155
#: ../../c-api/init_config.rst:1169
#, fuzzy
msgid "Default: ``NULL``."
msgstr "기본값은 ``default``\\입니다."

#: ../../c-api/init_config.rst:580
#, fuzzy
msgid "See also the :c:member:`~PyConfig.orig_argv` member."
msgstr ":c:member:`~PyConfig.parse_argv`"

#: ../../c-api/init_config.rst:584
msgid ""
"If equals to zero, ``Py_RunMain()`` prepends a potentially unsafe path to"
" :data:`sys.path` at startup:"
msgstr ""

#: ../../c-api/init_config.rst:587
msgid ""
"If :c:member:`argv[0] <PyConfig.argv>` is equal to ``L\"-m\"`` (``python "
"-m module``), prepend the current working directory."
msgstr ""

#: ../../c-api/init_config.rst:589
msgid ""
"If running a script (``python script.py``), prepend the script's "
"directory.  If it's a symbolic link, resolve symbolic links."
msgstr ""

#: ../../c-api/init_config.rst:591
msgid ""
"Otherwise (``python -c code`` and ``python``), prepend an empty string, "
"which means the current working directory."
msgstr ""

#: ../../c-api/init_config.rst:594
msgid ""
"Set to ``1`` by the :option:`-P` command line option and the "
":envvar:`PYTHONSAFEPATH` environment variable."
msgstr ""

#: ../../c-api/init_config.rst:597
msgid "Default: ``0`` in Python config, ``1`` in isolated config."
msgstr ""

#: ../../c-api/init_config.rst:603
msgid ":data:`sys.base_exec_prefix`."
msgstr ":data:`sys.base_exec_prefix`."

#: ../../c-api/init_config.rst:607 ../../c-api/init_config.rst:621
#: ../../c-api/init_config.rst:631 ../../c-api/init_config.rst:741
#: ../../c-api/init_config.rst:752 ../../c-api/init_config.rst:999
#: ../../c-api/init_config.rst:1085
#, fuzzy
msgid "Part of the :ref:`Python Path Configuration <init-path-config>` output."
msgstr ":ref:`경로 구성 <init-path-config>`\\을 적용합니다;"

#: ../../c-api/init_config.rst:609
#, fuzzy
msgid "See also :c:member:`PyConfig.exec_prefix`."
msgstr ":c:member:`PyConfig.exec_prefix`"

#: ../../c-api/init_config.rst:613
#, fuzzy
msgid "Python base executable: :data:`sys._base_executable`."
msgstr ":data:`sys.executable`."

#: ../../c-api/init_config.rst:615
#, fuzzy
msgid "Set by the :envvar:`__PYVENV_LAUNCHER__` environment variable."
msgstr "``__PYVENV_LAUNCHER__`` 환경 변수"

#: ../../c-api/init_config.rst:617
#, fuzzy
msgid "Set from :c:member:`PyConfig.executable` if ``NULL``."
msgstr ":c:member:`PyConfig.executable`"

#: ../../c-api/init_config.rst:623
#, fuzzy
msgid "See also :c:member:`PyConfig.executable`."
msgstr ":c:member:`PyConfig.executable`"

#: ../../c-api/init_config.rst:627
msgid ":data:`sys.base_prefix`."
msgstr ":data:`sys.base_prefix`."

#: ../../c-api/init_config.rst:633
#, fuzzy
msgid "See also :c:member:`PyConfig.prefix`."
msgstr ":c:member:`PyConfig.prefix`"

#: ../../c-api/init_config.rst:637
msgid ""
"If equals to ``0`` and :c:member:`~PyConfig.configure_c_stdio` is non-"
"zero, disable buffering on the C streams stdout and stderr."
msgstr ""

#: ../../c-api/init_config.rst:640
msgid ""
"Set to ``0`` by the :option:`-u` command line option and the "
":envvar:`PYTHONUNBUFFERED` environment variable."
msgstr ""

#: ../../c-api/init_config.rst:643
msgid "stdin is always opened in buffered mode."
msgstr "stdin은 항상 버퍼링 모드로 열립니다."

#: ../../c-api/init_config.rst:645 ../../c-api/init_config.rst:678
#: ../../c-api/init_config.rst:1197 ../../c-api/init_config.rst:1330
msgid "Default: ``1``."
msgstr ""

#: ../../c-api/init_config.rst:649
#, fuzzy
msgid ""
"If equals to ``1``, issue a warning when comparing :class:`bytes` or "
":class:`bytearray` with :class:`str`, or comparing :class:`bytes` with "
":class:`int`."
msgstr ""
"1과 같으면, :class:`bytes`\\나 :class:`bytearray`\\를 :class:`str`\\와 비교하거나, 또는"
" :class:`bytes`\\를 :class:`int`\\와 비교할 때 경고를 발행합니다. 2 이상이면, "
":exc:`BytesWarning` 예외를 발생시킵니다."

#: ../../c-api/init_config.rst:653
msgid ""
"If equal or greater to ``2``, raise a :exc:`BytesWarning` exception in "
"these cases."
msgstr ""

#: ../../c-api/init_config.rst:656
#, fuzzy
msgid "Incremented by the :option:`-b` command line option."
msgstr ":option:`-X showrefcount <-X>` 명령 줄 옵션으로 1로 설정됩니다."

#: ../../c-api/init_config.rst:662
msgid ""
"If non-zero, emit a :exc:`EncodingWarning` warning when "
":class:`io.TextIOWrapper` uses its default encoding. See :ref:`io-"
"encoding-warning` for details."
msgstr ""

#: ../../c-api/init_config.rst:671
msgid ""
"If equals to ``0``, disables the inclusion of the end line and column "
"mappings in code objects. Also disables traceback printing carets to "
"specific error locations."
msgstr ""

#: ../../c-api/init_config.rst:675
msgid ""
"Set to ``0`` by the :envvar:`PYTHONNODEBUGRANGES` environment variable "
"and by the :option:`-X no_debug_ranges <-X>` command line option."
msgstr ""

#: ../../c-api/init_config.rst:684
#, fuzzy
msgid ""
"Control the validation behavior of hash-based ``.pyc`` files: value of "
"the :option:`--check-hash-based-pycs` command line option."
msgstr ""
"해시 기반 ``.pyc`` 파일의 유효성 검증 동작을 제어합니다 (:pep:`552`\\를 참조하십시오): :option"
":`--check-hash-based-pycs` 명령 줄 옵션 값."

#: ../../c-api/init_config.rst:687
msgid "Valid values:"
msgstr ""

#: ../../c-api/init_config.rst:689
msgid ""
"``L\"always\"``: Hash the source file for invalidation regardless of "
"value of the 'check_source' flag."
msgstr ""

#: ../../c-api/init_config.rst:691
msgid "``L\"never\"``: Assume that hash-based pycs always are valid."
msgstr ""

#: ../../c-api/init_config.rst:692
msgid ""
"``L\"default\"``: The 'check_source' flag in hash-based pycs determines "
"invalidation."
msgstr ""

#: ../../c-api/init_config.rst:695
#, fuzzy
msgid "Default: ``L\"default\"``."
msgstr "기본값은 ``default``\\입니다."

#: ../../c-api/init_config.rst:697
msgid "See also :pep:`552` \"Deterministic pycs\"."
msgstr ""

#: ../../c-api/init_config.rst:701
msgid "If non-zero, configure C standard streams:"
msgstr ""

#: ../../c-api/init_config.rst:703
msgid ""
"On Windows, set the binary mode (``O_BINARY``) on stdin, stdout and "
"stderr."
msgstr ""

#: ../../c-api/init_config.rst:705
msgid ""
"If :c:member:`~PyConfig.buffered_stdio` equals zero, disable buffering of"
" stdin, stdout and stderr streams."
msgstr ""

#: ../../c-api/init_config.rst:707
msgid ""
"If :c:member:`~PyConfig.interactive` is non-zero, enable stream buffering"
" on stdin and stdout (only stdout on Windows)."
msgstr ""

#: ../../c-api/init_config.rst:714
msgid "If non-zero, enable the :ref:`Python Development Mode <devmode>`."
msgstr "0이 아니면, :ref:`파이썬 개발 모드 <devmode>`\\를 활성화합니다."

#: ../../c-api/init_config.rst:716
#, fuzzy
msgid ""
"Set to ``1`` by the :option:`-X dev <-X>` option and the "
":envvar:`PYTHONDEVMODE` environment variable."
msgstr ":option:`-X oldparser <-X>`\\와 :envvar:`PYTHONOLDPARSER`\\로 0으로 설정합니다."

#: ../../c-api/init_config.rst:723
msgid "Dump Python references?"
msgstr ""

#: ../../c-api/init_config.rst:725
msgid "If non-zero, dump all objects which are still alive at exit."
msgstr "0이 아니면, 종료 시 여전히 활성 상태인 모든 객체를 덤프합니다."

#: ../../c-api/init_config.rst:727
#, fuzzy
msgid "Set to ``1`` by the :envvar:`PYTHONDUMPREFS` environment variable."
msgstr "기본적으로 :envvar:`PYTHONHOME` 환경 변숫값에서 초기화됩니다."

#: ../../c-api/init_config.rst:729
msgid ""
"Needs a special build of Python with the ``Py_TRACE_REFS`` macro defined:"
" see the :option:`configure --with-trace-refs option <--with-trace-"
"refs>`."
msgstr ""

#: ../../c-api/init_config.rst:736
msgid ""
"The site-specific directory prefix where the platform-dependent Python "
"files are installed: :data:`sys.exec_prefix`."
msgstr ""

#: ../../c-api/init_config.rst:743
#, fuzzy
msgid "See also :c:member:`PyConfig.base_exec_prefix`."
msgstr ":c:member:`PyConfig.base_exec_prefix`"

#: ../../c-api/init_config.rst:747
msgid ""
"The absolute path of the executable binary for the Python interpreter: "
":data:`sys.executable`."
msgstr ""

#: ../../c-api/init_config.rst:754
#, fuzzy
msgid "See also :c:member:`PyConfig.base_executable`."
msgstr ":c:member:`PyConfig.base_executable`"

#: ../../c-api/init_config.rst:758
msgid "Enable faulthandler?"
msgstr ""

#: ../../c-api/init_config.rst:760
msgid "If non-zero, call :func:`faulthandler.enable` at startup."
msgstr "0이 아니면, 시작 시 :func:`faulthandler.enable`\\을 호출합니다."

#: ../../c-api/init_config.rst:762
#, fuzzy
msgid ""
"Set to ``1`` by :option:`-X faulthandler <-X>` and the "
":envvar:`PYTHONFAULTHANDLER` environment variable."
msgstr ":option:`-X oldparser <-X>`\\와 :envvar:`PYTHONOLDPARSER`\\로 0으로 설정합니다."

#: ../../c-api/init_config.rst:769
#, fuzzy
msgid ""
":term:`Filesystem encoding <filesystem encoding and error handler>`: "
":func:`sys.getfilesystemencoding`."
msgstr "파일 시스템 인코딩, :func:`sys.getfilesystemencoding`."

#: ../../c-api/init_config.rst:772
msgid "On macOS, Android and VxWorks: use ``\"utf-8\"`` by default."
msgstr ""

#: ../../c-api/init_config.rst:774
msgid ""
"On Windows: use ``\"utf-8\"`` by default, or ``\"mbcs\"`` if "
":c:member:`~PyPreConfig.legacy_windows_fs_encoding` of "
":c:type:`PyPreConfig` is non-zero."
msgstr ""

#: ../../c-api/init_config.rst:778
msgid "Default encoding on other platforms:"
msgstr ""

#: ../../c-api/init_config.rst:780
#, fuzzy
msgid "``\"utf-8\"`` if :c:member:`PyPreConfig.utf8_mode` is non-zero."
msgstr ":c:member:`~PyConfig.isolated`\\가 0이면:"

#: ../../c-api/init_config.rst:781
msgid ""
"``\"ascii\"`` if Python detects that ``nl_langinfo(CODESET)`` announces "
"the ASCII encoding, whereas the ``mbstowcs()`` function decodes from a "
"different encoding (usually Latin1)."
msgstr ""

#: ../../c-api/init_config.rst:784
msgid "``\"utf-8\"`` if ``nl_langinfo(CODESET)`` returns an empty string."
msgstr ""

#: ../../c-api/init_config.rst:785
msgid ""
"Otherwise, use the :term:`locale encoding`: ``nl_langinfo(CODESET)`` "
"result."
msgstr ""

#: ../../c-api/init_config.rst:788
msgid ""
"At Python startup, the encoding name is normalized to the Python codec "
"name. For example, ``\"ANSI_X3.4-1968\"`` is replaced with ``\"ascii\"``."
msgstr ""

#: ../../c-api/init_config.rst:791
#, fuzzy
msgid "See also the :c:member:`~PyConfig.filesystem_errors` member."
msgstr ":c:member:`PyConfig.use_environment`\\를 참조하십시오."

#: ../../c-api/init_config.rst:795
#, fuzzy
msgid ""
":term:`Filesystem error handler <filesystem encoding and error handler>`:"
" :func:`sys.getfilesystemencodeerrors`."
msgstr "파일 시스템 인코딩 에러, :func:`sys.getfilesystemencodeerrors`."

#: ../../c-api/init_config.rst:798
msgid ""
"On Windows: use ``\"surrogatepass\"`` by default, or ``\"replace\"``  if "
":c:member:`~PyPreConfig.legacy_windows_fs_encoding` of "
":c:type:`PyPreConfig` is non-zero."
msgstr ""

#: ../../c-api/init_config.rst:802
msgid "On other platforms: use ``\"surrogateescape\"`` by default."
msgstr ""

#: ../../c-api/init_config.rst:804
msgid "Supported error handlers:"
msgstr ""

#: ../../c-api/init_config.rst:806
msgid "``\"strict\"``"
msgstr ""

#: ../../c-api/init_config.rst:807
msgid "``\"surrogateescape\"``"
msgstr ""

#: ../../c-api/init_config.rst:808
msgid "``\"surrogatepass\"`` (only supported with the UTF-8 encoding)"
msgstr ""

#: ../../c-api/init_config.rst:810
#, fuzzy
msgid "See also the :c:member:`~PyConfig.filesystem_encoding` member."
msgstr ":c:member:`PyConfig.use_environment`\\를 참조하십시오."

#: ../../c-api/init_config.rst:815
msgid "Randomized hash function seed."
msgstr "무작위 해시 함수 시드."

#: ../../c-api/init_config.rst:817
#, fuzzy
msgid ""
"If :c:member:`~PyConfig.use_hash_seed` is zero, a seed is chosen randomly"
" at Python startup, and :c:member:`~PyConfig.hash_seed` is ignored."
msgstr ""
":c:member:`~PyConfig.use_hash_seed`\\가 0이면, 파이썬 시작 시 시드가 무작위로 선택되고, "
":c:member:`~PyConfig.hash_seed`\\는 무시됩니다."

#: ../../c-api/init_config.rst:820
#, fuzzy
msgid "Set by the :envvar:`PYTHONHASHSEED` environment variable."
msgstr "기본적으로 :envvar:`PYTHONPATH` 환경 변숫값에서 초기화됩니다."

#: ../../c-api/init_config.rst:822
msgid ""
"Default *use_hash_seed* value: ``-1`` in Python mode, ``0`` in isolated "
"mode."
msgstr ""

#: ../../c-api/init_config.rst:827
msgid ""
"Set the default Python \"home\" directory, that is, the location of the "
"standard Python libraries (see :envvar:`PYTHONHOME`)."
msgstr ""

#: ../../c-api/init_config.rst:830
#, fuzzy
msgid "Set by the :envvar:`PYTHONHOME` environment variable."
msgstr "기본적으로 :envvar:`PYTHONHOME` 환경 변숫값에서 초기화됩니다."

#: ../../c-api/init_config.rst:834 ../../c-api/init_config.rst:964
#: ../../c-api/init_config.rst:984 ../../c-api/init_config.rst:1073
#: ../../c-api/init_config.rst:1104
#, fuzzy
msgid "Part of the :ref:`Python Path Configuration <init-path-config>` input."
msgstr ":ref:`경로 구성 <init-path-config>`\\을 적용합니다;"

#: ../../c-api/init_config.rst:838
msgid "If non-zero, profile import time."
msgstr "0이 아니면, 임포트 시간을 프로파일 합니다."

#: ../../c-api/init_config.rst:840
#, fuzzy
msgid ""
"Set the ``1`` by the :option:`-X importtime <-X>` option and the "
":envvar:`PYTHONPROFILEIMPORTTIME` environment variable."
msgstr ":option:`-X oldparser <-X>`\\와 :envvar:`PYTHONOLDPARSER`\\로 0으로 설정합니다."

#: ../../c-api/init_config.rst:847
msgid "Enter interactive mode after executing a script or a command."
msgstr "스크립트나 명령을 실행한 후 대화식 모드로 들어갑니다."

#: ../../c-api/init_config.rst:849
msgid ""
"If greater than ``0``, enable inspect: when a script is passed as first "
"argument or the -c option is used, enter interactive mode after executing"
" the script or the command, even when :data:`sys.stdin` does not appear "
"to be a terminal."
msgstr ""

#: ../../c-api/init_config.rst:854
msgid ""
"Incremented by the :option:`-i` command line option. Set to ``1`` if the "
":envvar:`PYTHONINSPECT` environment variable is non-empty."
msgstr ""

#: ../../c-api/init_config.rst:861
#, fuzzy
msgid "Install Python signal handlers?"
msgstr "시그널 처리기를 설치합니까?"

#: ../../c-api/init_config.rst:863 ../../c-api/init_config.rst:1047
#: ../../c-api/init_config.rst:1071 ../../c-api/init_config.rst:1282
msgid "Default: ``1`` in Python mode, ``0`` in isolated mode."
msgstr ""

#: ../../c-api/init_config.rst:867
#, fuzzy
msgid "If greater than ``0``, enable the interactive mode (REPL)."
msgstr "0보다 크면, 격리 모드를 활성화합니다:"

#: ../../c-api/init_config.rst:869
#, fuzzy
msgid "Incremented by the :option:`-i` command line option."
msgstr ":option:`-X showrefcount <-X>` 명령 줄 옵션으로 1로 설정됩니다."

#: ../../c-api/init_config.rst:875
msgid ""
"Configures the :ref:`integer string conversion length limitation "
"<int_max_str_digits>`.  An initial value of ``-1`` means the value will "
"be taken from the command line or environment or otherwise default to "
"4300 (:data:`sys.int_info.default_max_str_digits`).  A value of ``0`` "
"disables the limitation.  Values greater than zero but less than 640 "
"(:data:`sys.int_info.str_digits_check_threshold`) are unsupported and "
"will produce an error."
msgstr ""

#: ../../c-api/init_config.rst:883
msgid ""
"Configured by the :option:`-X int_max_str_digits <-X>` command line flag "
"or the :envvar:`PYTHONINTMAXSTRDIGITS` environment variable."
msgstr ""

#: ../../c-api/init_config.rst:886
msgid ""
"Default: ``-1`` in Python mode.  4300 "
"(:data:`sys.int_info.default_max_str_digits`) in isolated mode."
msgstr ""

#: ../../c-api/init_config.rst:893
msgid ""
"If the value of :c:member:`~PyConfig.cpu_count` is not ``-1`` then it "
"will override the return values of :func:`os.cpu_count`, "
":func:`os.process_cpu_count`, and :func:`multiprocessing.cpu_count`."
msgstr ""

#: ../../c-api/init_config.rst:897
#, python-brace-format
msgid ""
"Configured by the :samp:`-X cpu_count={n|default}` command line flag or "
"the :envvar:`PYTHON_CPU_COUNT` environment variable."
msgstr ""

#: ../../c-api/init_config.rst:900 ../../c-api/init_config.rst:1259
msgid "Default: ``-1``."
msgstr ""

#: ../../c-api/init_config.rst:906
#, fuzzy
msgid "If greater than ``0``, enable isolated mode:"
msgstr "0보다 크면, 격리 모드를 활성화합니다:"

#: ../../c-api/init_config.rst:908
msgid ""
"Set :c:member:`~PyConfig.safe_path` to ``1``: don't prepend a potentially"
" unsafe path to :data:`sys.path` at Python startup, such as the current "
"directory, the script's directory or an empty string."
msgstr ""

#: ../../c-api/init_config.rst:912
#, fuzzy
msgid ""
"Set :c:member:`~PyConfig.use_environment` to ``0``: ignore ``PYTHON`` "
"environment variables."
msgstr ":c:member:`PyConfig.use_environment`\\를 참조하십시오."

#: ../../c-api/init_config.rst:914
#, fuzzy
msgid ""
"Set :c:member:`~PyConfig.user_site_directory` to ``0``: don't add the "
"user site directory to :data:`sys.path`."
msgstr ""
":c:member:`~PyConfig.run_filename`\\이 설정되면, 파일명의 디렉터리를 :data:`sys.path` "
"앞에 추가합니다."

#: ../../c-api/init_config.rst:916
msgid ""
"Python REPL doesn't import :mod:`readline` nor enable default readline "
"configuration on interactive prompts."
msgstr ""
"파이썬 REPL은 대화식 프롬프트에서 :mod:`readline`\\을 임포트 하지도 기본 readline 구성을 활성화하지도 "
"않습니다."

#: ../../c-api/init_config.rst:919
#, fuzzy
msgid "Set to ``1`` by the :option:`-I` command line option."
msgstr ":option:`-X showrefcount <-X>` 명령 줄 옵션으로 1로 설정됩니다."

#: ../../c-api/init_config.rst:923
#, fuzzy
msgid ""
"See also the :ref:`Isolated Configuration <init-isolated-conf>` and "
":c:member:`PyPreConfig.isolated`."
msgstr ":ref:`격리된 구성 <init-isolated-conf>`\\으로 구성을 초기화합니다."

#: ../../c-api/init_config.rst:928
#, fuzzy
msgid ""
"If non-zero, use :class:`io.FileIO` instead of "
":class:`!io._WindowsConsoleIO` for :data:`sys.stdin`, :data:`sys.stdout` "
"and :data:`sys.stderr`."
msgstr ""
"0이 아니면, :data:`sys.stdin`, :data:`sys.stdout` 및 :data:`sys.stderr`\\에 "
":class:`io.WindowsConsoleIO` 대신 :class:`io.FileIO`\\를 사용합니다."

#: ../../c-api/init_config.rst:932
msgid ""
"Set to ``1`` if the :envvar:`PYTHONLEGACYWINDOWSSTDIO` environment "
"variable is set to a non-empty string."
msgstr ""

#: ../../c-api/init_config.rst:940
msgid "See also the :pep:`528` (Change Windows console encoding to UTF-8)."
msgstr ""

#: ../../c-api/init_config.rst:944
msgid ""
"If non-zero, dump statistics on :ref:`Python pymalloc memory allocator "
"<pymalloc>` at exit."
msgstr "0이 아니면, 종료 시 :ref:`파이썬 pymalloc 메모리 할당자 <pymalloc>`\\에 대한 통계를 덤프합니다."

#: ../../c-api/init_config.rst:947
msgid "Set to ``1`` by the :envvar:`PYTHONMALLOCSTATS` environment variable."
msgstr ""

#: ../../c-api/init_config.rst:949
#, fuzzy
msgid ""
"The option is ignored if Python is :option:`configured using the "
"--without-pymalloc option <--without-pymalloc>`."
msgstr "파이썬이 ``--without-pymalloc``\\을 사용하여 빌드되면 이 옵션은 무시됩니다."

#: ../../c-api/init_config.rst:956
msgid "Platform library directory name: :data:`sys.platlibdir`."
msgstr ""

#: ../../c-api/init_config.rst:958
#, fuzzy
msgid "Set by the :envvar:`PYTHONPLATLIBDIR` environment variable."
msgstr "기본적으로 :envvar:`PYTHONPATH` 환경 변숫값에서 초기화됩니다."

#: ../../c-api/init_config.rst:960
msgid ""
"Default: value of the ``PLATLIBDIR`` macro which is set by the "
":option:`configure --with-platlibdir option <--with-platlibdir>` "
"(default: ``\"lib\"``, or ``\"DLLs\"`` on Windows)."
msgstr ""

#: ../../c-api/init_config.rst:968
msgid ""
"This macro is now used on Windows to locate the standard library "
"extension modules, typically under ``DLLs``. However, for compatibility, "
"note that this value is ignored for any non-standard layouts, including "
"in-tree builds and virtual environments."
msgstr ""

#: ../../c-api/init_config.rst:977
#, fuzzy
msgid ""
"Module search paths (:data:`sys.path`) as a string separated by ``DELIM``"
" (:data:`os.pathsep`)."
msgstr "``DELIM``\\(:data:`os.path.pathsep`)으로 구분된 문자열로 표현된 모듈 검색 경로."

#: ../../c-api/init_config.rst:980
#, fuzzy
msgid "Set by the :envvar:`PYTHONPATH` environment variable."
msgstr "기본적으로 :envvar:`PYTHONPATH` 환경 변숫값에서 초기화됩니다."

#: ../../c-api/init_config.rst:989
msgid "Module search paths: :data:`sys.path`."
msgstr ""

#: ../../c-api/init_config.rst:991
#, fuzzy
msgid ""
"If :c:member:`~PyConfig.module_search_paths_set` is equal to ``0``, "
":c:func:`Py_InitializeFromConfig` will replace "
":c:member:`~PyConfig.module_search_paths` and sets "
":c:member:`~PyConfig.module_search_paths_set` to ``1``."
msgstr ""
"적어도 하나의 \"출력 필드\"가 설정되어 있지 않으면, 파이썬은 설정되지 않은 필드를 채우기 위해 경로 구성을 계산합니다. "
":c:member:`~PyConfig.module_search_paths_set`\\이 0이면, "
":c:member:`~PyConfig.module_search_paths`\\가 재정의되고 "
":c:member:`~PyConfig.module_search_paths_set`\\이 1로 설정됩니다."

#: ../../c-api/init_config.rst:996
msgid ""
"Default: empty list (``module_search_paths``) and ``0`` "
"(``module_search_paths_set``)."
msgstr ""

#: ../../c-api/init_config.rst:1003
msgid "Compilation optimization level:"
msgstr "컴파일 최적화 수준:"

#: ../../c-api/init_config.rst:1005
#, fuzzy
msgid "``0``: Peephole optimizer, set ``__debug__`` to ``True``."
msgstr "0: 틈 구멍 최적화기(Peephole optimizer) (그리고 ``__debug__``\\이 ``True``\\로 설정됩니다)"

#: ../../c-api/init_config.rst:1006
#, fuzzy
msgid "``1``: Level 0, remove assertions, set ``__debug__`` to ``False``."
msgstr "1: 어서션을 제거합니다, ``__debug__``\\을 ``False``\\로 설정합니다"

#: ../../c-api/init_config.rst:1007
#, fuzzy
msgid "``2``: Level 1, strip docstrings."
msgstr "2: 독스트링을 제거합니다"

#: ../../c-api/init_config.rst:1009
msgid ""
"Incremented by the :option:`-O` command line option. Set to the "
":envvar:`PYTHONOPTIMIZE` environment variable value."
msgstr ""

#: ../../c-api/init_config.rst:1016
#, fuzzy
msgid ""
"The list of the original command line arguments passed to the Python "
"executable: :data:`sys.orig_argv`."
msgstr "파이썬이 수정하기 전의, 원래 명령 줄 인자를 가져옵니다."

#: ../../c-api/init_config.rst:1019
msgid ""
"If :c:member:`~PyConfig.orig_argv` list is empty and "
":c:member:`~PyConfig.argv` is not a list only containing an empty string,"
" :c:func:`PyConfig_Read` copies :c:member:`~PyConfig.argv` into "
":c:member:`~PyConfig.orig_argv` before modifying "
":c:member:`~PyConfig.argv` (if :c:member:`~PyConfig.parse_argv` is non-"
"zero)."
msgstr ""

#: ../../c-api/init_config.rst:1026
msgid ""
"See also the :c:member:`~PyConfig.argv` member and the "
":c:func:`Py_GetArgcArgv` function."
msgstr ""

#: ../../c-api/init_config.rst:1029 ../../c-api/init_config.rst:1317
#: ../../c-api/init_config.rst:1336
msgid "Default: empty list."
msgstr ""

#: ../../c-api/init_config.rst:1035
msgid "Parse command line arguments?"
msgstr ""

#: ../../c-api/init_config.rst:1037
#, fuzzy
msgid ""
"If equals to ``1``, parse :c:member:`~PyConfig.argv` the same way the "
"regular Python parses :ref:`command line arguments <using-on-cmdline>`, "
"and strip Python arguments from :c:member:`~PyConfig.argv`."
msgstr ""
"0이 아니면, 일반 파이썬 명령 줄 인자와 같은 방식으로 :c:member:`~PyConfig.argv`\\를 구문 분석하고, "
":c:member:`~PyConfig.argv`\\에서 파이썬 인자를 제거합니다: :ref:`명령 줄 인자 <using-on-"
"cmdline>`\\를 참조하십시오."

#: ../../c-api/init_config.rst:1049
msgid ""
"The :c:member:`PyConfig.argv` arguments are now only parsed if "
":c:member:`PyConfig.parse_argv` equals to ``1``."
msgstr ""

#: ../../c-api/init_config.rst:1055
#, fuzzy
msgid ""
"Parser debug mode. If greater than ``0``, turn on parser debugging output"
" (for expert only, depending on compilation options)."
msgstr "0이 아니면, 구문 분석기 디버깅 출력을 켭니다 (컴파일 옵션에 따라, 전문가용입니다)."

#: ../../c-api/init_config.rst:1058
msgid ""
"Incremented by the :option:`-d` command line option. Set to the "
":envvar:`PYTHONDEBUG` environment variable value."
msgstr ""

#: ../../c-api/init_config.rst:1061 ../../c-api/init_config.rst:1166
#, fuzzy
msgid ""
"Needs a :ref:`debug build of Python <debug-build>` (the ``Py_DEBUG`` "
"macro must be defined)."
msgstr "파이썬의 디버그 빌드가 필요합니다 (``Py_REF_DEBUG`` 매크로를 정의해야 합니다)."

#: ../../c-api/init_config.rst:1068
msgid ""
"If non-zero, calculation of path configuration is allowed to log warnings"
" into ``stderr``. If equals to ``0``, suppress these warnings."
msgstr ""

#: ../../c-api/init_config.rst:1075
msgid "Now also applies on Windows."
msgstr ""

#: ../../c-api/init_config.rst:1080
msgid ""
"The site-specific directory prefix where the platform independent Python "
"files are installed: :data:`sys.prefix`."
msgstr ""

#: ../../c-api/init_config.rst:1087
#, fuzzy
msgid "See also :c:member:`PyConfig.base_prefix`."
msgstr ":c:member:`PyConfig.base_prefix`"

#: ../../c-api/init_config.rst:1091
#, fuzzy
msgid ""
"Program name used to initialize :c:member:`~PyConfig.executable` and in "
"early error messages during Python initialization."
msgstr ""
"프로그램 이름. :c:member:`~PyConfig.executable`\\을 초기화하는 데 사용되며, 초기 에러 메시지에서도 "
"사용됩니다."

#: ../../c-api/init_config.rst:1094
#, fuzzy
msgid "On macOS, use :envvar:`PYTHONEXECUTABLE` environment variable if set."
msgstr "기본적으로 :envvar:`PYTHONPATH` 환경 변숫값에서 초기화됩니다."

#: ../../c-api/init_config.rst:1095
msgid ""
"If the ``WITH_NEXT_FRAMEWORK`` macro is defined, use "
":envvar:`__PYVENV_LAUNCHER__` environment variable if set."
msgstr ""

#: ../../c-api/init_config.rst:1097
msgid "Use ``argv[0]`` of :c:member:`~PyConfig.argv` if available and non-empty."
msgstr ""

#: ../../c-api/init_config.rst:1099
msgid ""
"Otherwise, use ``L\"python\"`` on Windows, or ``L\"python3\"`` on other "
"platforms."
msgstr ""

#: ../../c-api/init_config.rst:1108
msgid ""
"Directory where cached ``.pyc`` files are written: "
":data:`sys.pycache_prefix`."
msgstr ""

#: ../../c-api/init_config.rst:1111
msgid ""
"Set by the :option:`-X pycache_prefix=PATH <-X>` command line option and "
"the :envvar:`PYTHONPYCACHEPREFIX` environment variable. The command-line "
"option takes precedence."
msgstr ""

#: ../../c-api/init_config.rst:1115
msgid "If ``NULL``, :data:`sys.pycache_prefix` is set to ``None``."
msgstr "``NULL``\\이면, :data:`sys.pycache_prefix`\\는 ``None``\\으로 설정됩니다."

#: ../../c-api/init_config.rst:1121
#, fuzzy
msgid ""
"Quiet mode. If greater than ``0``, don't display the copyright and "
"version at Python startup in interactive mode."
msgstr "침묵 모드. 예를 들어, 대화식 모드에서 저작권과 버전 메시지를 표시하지 않습니다."

#: ../../c-api/init_config.rst:1124
#, fuzzy
msgid "Incremented by the :option:`-q` command line option."
msgstr ":option:`-X showrefcount <-X>` 명령 줄 옵션으로 1로 설정됩니다."

#: ../../c-api/init_config.rst:1130
#, fuzzy
msgid "Value of the :option:`-c` command line option."
msgstr ":option:`-X showrefcount <-X>` 명령 줄 옵션으로 1로 설정됩니다."

#: ../../c-api/init_config.rst:1132 ../../c-api/init_config.rst:1153
#, fuzzy
msgid "Used by :c:func:`Py_RunMain`."
msgstr ":c:func:`Py_RunMain`"

#: ../../c-api/init_config.rst:1138
msgid ""
"Filename passed on the command line: trailing command line argument "
"without :option:`-c` or :option:`-m`. It is used by the "
":c:func:`Py_RunMain` function."
msgstr ""

#: ../../c-api/init_config.rst:1142
msgid ""
"For example, it is set to ``script.py`` by the ``python3 script.py arg`` "
"command line."
msgstr ""

#: ../../c-api/init_config.rst:1145
#, fuzzy
msgid "See also the :c:member:`PyConfig.skip_source_first_line` option."
msgstr ":c:member:`PyConfig.isolated`\\를 참조하십시오."

#: ../../c-api/init_config.rst:1151
#, fuzzy
msgid "Value of the :option:`-m` command line option."
msgstr ":option:`-X showrefcount <-X>` 명령 줄 옵션으로 1로 설정됩니다."

#: ../../c-api/init_config.rst:1159
msgid ""
"``package.module`` path to module that should be imported before "
"``site.py`` is run."
msgstr ""

#: ../../c-api/init_config.rst:1162
msgid ""
"Set by the :option:`-X presite=package.module <-X>` command-line option "
"and the :envvar:`PYTHON_PRESITE` environment variable. The command-line "
"option takes precedence."
msgstr ""

#: ../../c-api/init_config.rst:1173
#, fuzzy
msgid "Show total reference count at exit (excluding :term:`immortal` objects)?"
msgstr "종료 시 총 참조 횟수를 표시합니까?"

#: ../../c-api/init_config.rst:1175
#, fuzzy
msgid "Set to ``1`` by :option:`-X showrefcount <-X>` command line option."
msgstr ":option:`-X showrefcount <-X>` 명령 줄 옵션으로 1로 설정됩니다."

#: ../../c-api/init_config.rst:1177
#, fuzzy
msgid ""
"Needs a :ref:`debug build of Python <debug-build>` (the ``Py_REF_DEBUG`` "
"macro must be defined)."
msgstr "파이썬의 디버그 빌드가 필요합니다 (``Py_REF_DEBUG`` 매크로를 정의해야 합니다)."

#: ../../c-api/init_config.rst:1184
msgid "Import the :mod:`site` module at startup?"
msgstr "시작할 때 :mod:`site` 모듈을 임포트 합니까?"

#: ../../c-api/init_config.rst:1186
msgid ""
"If equal to zero, disable the import of the module site and the site-"
"dependent manipulations of :data:`sys.path` that it entails."
msgstr ""

#: ../../c-api/init_config.rst:1189
msgid ""
"Also disable these manipulations if the :mod:`site` module is explicitly "
"imported later (call :func:`site.main` if you want them to be triggered)."
msgstr ""

#: ../../c-api/init_config.rst:1192
#, fuzzy
msgid "Set to ``0`` by the :option:`-S` command line option."
msgstr ":option:`-X showrefcount <-X>` 명령 줄 옵션으로 1로 설정됩니다."

#: ../../c-api/init_config.rst:1194
#, fuzzy
msgid ""
":data:`sys.flags.no_site <sys.flags>` is set to the inverted value of "
":c:member:`~PyConfig.site_import`."
msgstr ""
":data:`sys.dont_write_bytecode`\\는 "
":c:member:`~PyConfig.write_bytecode`\\의 반전된 값으로 초기화됩니다."

#: ../../c-api/init_config.rst:1201
msgid ""
"If non-zero, skip the first line of the :c:member:`PyConfig.run_filename`"
" source."
msgstr ""

#: ../../c-api/init_config.rst:1204
msgid ""
"It allows the usage of non-Unix forms of ``#!cmd``. This is intended for "
"a DOS specific hack only."
msgstr ""

#: ../../c-api/init_config.rst:1207
#, fuzzy
msgid "Set to ``1`` by the :option:`-x` command line option."
msgstr ":option:`-X showrefcount <-X>` 명령 줄 옵션으로 1로 설정됩니다."

#: ../../c-api/init_config.rst:1214
#, fuzzy
msgid ""
"Encoding and encoding errors of :data:`sys.stdin`, :data:`sys.stdout` and"
" :data:`sys.stderr` (but :data:`sys.stderr` always uses "
"``\"backslashreplace\"`` error handler)."
msgstr ":data:`sys.stdin`, :data:`sys.stdout` 및 :data:`sys.stderr`\\의 인코딩과 인코딩 에러."

#: ../../c-api/init_config.rst:1218
#, fuzzy
msgid ""
"Use the :envvar:`PYTHONIOENCODING` environment variable if it is non-"
"empty."
msgstr "기본적으로 :envvar:`PYTHONHOME` 환경 변숫값에서 초기화됩니다."

#: ../../c-api/init_config.rst:1221
msgid "Default encoding:"
msgstr ""

#: ../../c-api/init_config.rst:1223
#, fuzzy
msgid "``\"UTF-8\"`` if :c:member:`PyPreConfig.utf8_mode` is non-zero."
msgstr ":c:member:`~PyConfig.isolated`\\가 0이면:"

#: ../../c-api/init_config.rst:1224
msgid "Otherwise, use the :term:`locale encoding`."
msgstr ""

#: ../../c-api/init_config.rst:1226
msgid "Default error handler:"
msgstr ""

#: ../../c-api/init_config.rst:1228
msgid "On Windows: use ``\"surrogateescape\"``."
msgstr ""

#: ../../c-api/init_config.rst:1229
msgid ""
"``\"surrogateescape\"`` if :c:member:`PyPreConfig.utf8_mode` is non-zero,"
" or if the LC_CTYPE locale is \"C\" or \"POSIX\"."
msgstr ""

#: ../../c-api/init_config.rst:1231
msgid "``\"strict\"`` otherwise."
msgstr ""

#: ../../c-api/init_config.rst:1233
#, fuzzy
msgid "See also :c:member:`PyConfig.legacy_windows_stdio`."
msgstr ":c:member:`PyConfig.isolated`\\를 참조하십시오."

#: ../../c-api/init_config.rst:1237
msgid "Enable tracemalloc?"
msgstr ""

#: ../../c-api/init_config.rst:1239
msgid "If non-zero, call :func:`tracemalloc.start` at startup."
msgstr "0이 아니면, 시작 시 :func:`tracemalloc.start`\\를 호출합니다."

#: ../../c-api/init_config.rst:1241
msgid ""
"Set by :option:`-X tracemalloc=N <-X>` command line option and by the "
":envvar:`PYTHONTRACEMALLOC` environment variable."
msgstr ""

#: ../../c-api/init_config.rst:1248
msgid "Enable compatibility mode with the perf profiler?"
msgstr ""

#: ../../c-api/init_config.rst:1250
msgid ""
"If non-zero, initialize the perf trampoline. See :ref:`perf_profiling` "
"for more information."
msgstr ""

#: ../../c-api/init_config.rst:1253
msgid ""
"Set by :option:`-X perf <-X>` command-line option and by the "
":envvar:`PYTHON_PERF_JIT_SUPPORT` environment variable for perf support "
"with stack pointers and :option:`-X perf_jit <-X>` command-line option "
"and by the :envvar:`PYTHON_PERF_JIT_SUPPORT` environment variable for "
"perf support with DWARF JIT information."
msgstr ""

#: ../../c-api/init_config.rst:1265
#, fuzzy
msgid "Use :ref:`environment variables <using-on-envvars>`?"
msgstr "0보다 크면, :ref:`환경 변수 <using-on-envvars>`\\를 사용합니다."

#: ../../c-api/init_config.rst:1267
#, fuzzy
msgid ""
"If equals to zero, ignore the :ref:`environment variables <using-on-"
"envvars>`."
msgstr "0보다 크면, :ref:`환경 변수 <using-on-envvars>`\\를 사용합니다."

#: ../../c-api/init_config.rst:1270
msgid "Set to ``0`` by the :option:`-E` environment variable."
msgstr ""

#: ../../c-api/init_config.rst:1276
#, fuzzy
msgid "If non-zero, add the user site directory to :data:`sys.path`."
msgstr "0이 아니면, 사용자 사이트 디렉터리를 :data:`sys.path`\\에 추가합니다."

#: ../../c-api/init_config.rst:1278
#, fuzzy
msgid "Set to ``0`` by the :option:`-s` and :option:`-I` command line options."
msgstr ":option:`-X showrefcount <-X>` 명령 줄 옵션으로 1로 설정됩니다."

#: ../../c-api/init_config.rst:1280
msgid "Set to ``0`` by the :envvar:`PYTHONNOUSERSITE` environment variable."
msgstr ""

#: ../../c-api/init_config.rst:1286
msgid ""
"Verbose mode. If greater than ``0``, print a message each time a module "
"is imported, showing the place (filename or built-in module) from which "
"it is loaded."
msgstr ""

#: ../../c-api/init_config.rst:1290
msgid ""
"If greater than or equal to ``2``, print a message for each file that is "
"checked for when searching for a module. Also provides information on "
"module cleanup at exit."
msgstr ""

#: ../../c-api/init_config.rst:1294
#, fuzzy
msgid "Incremented by the :option:`-v` command line option."
msgstr ":option:`-X showrefcount <-X>` 명령 줄 옵션으로 1로 설정됩니다."

#: ../../c-api/init_config.rst:1296
#, fuzzy
msgid "Set by the :envvar:`PYTHONVERBOSE` environment variable value."
msgstr "기본적으로 :envvar:`PYTHONHOME` 환경 변숫값에서 초기화됩니다."

#: ../../c-api/init_config.rst:1302
#, fuzzy
msgid ""
"Options of the :mod:`warnings` module to build warnings filters, lowest "
"to highest priority: :data:`sys.warnoptions`."
msgstr ""
":data:`sys.warnoptions`: 경고 필터를 빌드하기 위한 :mod:`warnings` 모듈의 옵션: 가장 낮은 것에서"
" 가장 높은 우선순위로."

#: ../../c-api/init_config.rst:1305
msgid ""
"The :mod:`warnings` module adds :data:`sys.warnoptions` in the reverse "
"order: the last :c:member:`PyConfig.warnoptions` item becomes the first "
"item of :data:`warnings.filters` which is checked first (highest "
"priority)."
msgstr ""
":mod:`warnings` 모듈은 :data:`sys.warnoptions`\\를 역순으로 추가합니다: 마지막 "
":c:member:`PyConfig.warnoptions` 항목은 가장 먼저 검사되는 "
":data:`warnings.filters`\\의 첫 번째 항목이 됩니다 (가장 높은 우선순위)."

#: ../../c-api/init_config.rst:1310
msgid ""
"The :option:`-W` command line options adds its value to "
":c:member:`~PyConfig.warnoptions`, it can be used multiple times."
msgstr ""

#: ../../c-api/init_config.rst:1313
msgid ""
"The :envvar:`PYTHONWARNINGS` environment variable can also be used to add"
" warning options. Multiple options can be specified, separated by commas "
"(``,``)."
msgstr ""

#: ../../c-api/init_config.rst:1321
msgid ""
"If equal to ``0``, Python won't try to write ``.pyc`` files on the import"
" of source modules."
msgstr ""

#: ../../c-api/init_config.rst:1324
msgid ""
"Set to ``0`` by the :option:`-B` command line option and the "
":envvar:`PYTHONDONTWRITEBYTECODE` environment variable."
msgstr ""

#: ../../c-api/init_config.rst:1327
msgid ""
":data:`sys.dont_write_bytecode` is initialized to the inverted value of "
":c:member:`~PyConfig.write_bytecode`."
msgstr ""
":data:`sys.dont_write_bytecode`\\는 "
":c:member:`~PyConfig.write_bytecode`\\의 반전된 값으로 초기화됩니다."

#: ../../c-api/init_config.rst:1334
msgid "Values of the :option:`-X` command line options: :data:`sys._xoptions`."
msgstr ""

#: ../../c-api/init_config.rst:1338
#, fuzzy
msgid ""
"If :c:member:`~PyConfig.parse_argv` is non-zero, "
":c:member:`~PyConfig.argv` arguments are parsed the same way the regular "
"Python parses :ref:`command line arguments <using-on-cmdline>`, and "
"Python arguments are stripped from :c:member:`~PyConfig.argv`."
msgstr ""
"``parse_argv``\\가 0이 아니면, 일반 파이썬이 명령 줄 인자를 구문 분석하는 것과 같은 방식으로 ``argv`` "
"인자가 구문 분석되고, ``argv``\\에서 파이썬 인자가 제거됩니다: :ref:`명령 줄 인자 <using-on-"
"cmdline>`\\를 참조하십시오."

#: ../../c-api/init_config.rst:1343
#, fuzzy
msgid ""
"The :c:member:`~PyConfig.xoptions` options are parsed to set other "
"options: see the :option:`-X` command line option."
msgstr "``xoptions`` 옵션은 다른 옵션을 설정하기 위해 구문 분석됩니다: :option:`-X` 옵션을 참조하십시오."

#: ../../c-api/init_config.rst:1348
msgid "The ``show_alloc_count`` field has been removed."
msgstr "``show_alloc_count`` 필드가 제거되었습니다."

#: ../../c-api/init_config.rst:1354
msgid "Initialization with PyConfig"
msgstr "PyConfig를 사용한 초기화"

#: ../../c-api/init_config.rst:1356
msgid ""
"Initializing the interpreter from a populated configuration struct is "
"handled by calling :c:func:`Py_InitializeFromConfig`."
msgstr ""

#: ../../c-api/init_config.rst:1362
#, fuzzy
msgid ""
"If :c:func:`PyImport_FrozenModules`, :c:func:`PyImport_AppendInittab` or "
":c:func:`PyImport_ExtendInittab` are used, they must be set or called "
"after Python preinitialization and before the Python initialization. If "
"Python is initialized multiple times, :c:func:`PyImport_AppendInittab` or"
" :c:func:`PyImport_ExtendInittab` must be called before each Python "
"initialization."
msgstr ""
"``PyImport_FrozenModules``, ``PyImport_AppendInittab()`` 또는 "
"``PyImport_ExtendInittab()`` 을 사용하면, 파이썬 사전 초기화 후에 그리고 파이썬 초기화 전에 설정하거나 "
"호출해야 합니다."

#: ../../c-api/init_config.rst:1369
#, fuzzy
msgid ""
"The current configuration (``PyConfig`` type) is stored in "
"``PyInterpreterState.config``."
msgstr ""
"사전 구성(``PyPreConfig`` 형)은 ``_PyRuntime.preconfig``\\에 저장되고 "
"구성(``PyConfig`` 형)은 ``PyInterpreterState.config``\\에 저장됩니다."

#: ../../c-api/init_config.rst:1372
msgid "Example setting the program name::"
msgstr "프로그램 이름을 설정하는 예::"

#: ../../c-api/init_config.rst:1374
msgid ""
"void init_python(void)\n"
"{\n"
"    PyStatus status;\n"
"\n"
"    PyConfig config;\n"
"    PyConfig_InitPythonConfig(&config);\n"
"\n"
"    /* Set the program name. Implicitly preinitialize Python. */\n"
"    status = PyConfig_SetString(&config, &config.program_name,\n"
"                                L\"/path/to/my_program\");\n"
"    if (PyStatus_Exception(status)) {\n"
"        goto exception;\n"
"    }\n"
"\n"
"    status = Py_InitializeFromConfig(&config);\n"
"    if (PyStatus_Exception(status)) {\n"
"        goto exception;\n"
"    }\n"
"    PyConfig_Clear(&config);\n"
"    return;\n"
"\n"
"exception:\n"
"    PyConfig_Clear(&config);\n"
"    Py_ExitStatusException(status);\n"
"}"
msgstr ""

#: ../../c-api/init_config.rst:1400
msgid ""
"More complete example modifying the default configuration, read the "
"configuration, and then override some parameters. Note that since 3.11, "
"many parameters are not calculated until initialization, and so values "
"cannot be read from the configuration structure. Any values set before "
"initialize is called will be left unchanged by initialization::"
msgstr ""

#: ../../c-api/init_config.rst:1407
msgid ""
"PyStatus init_python(const char *program_name)\n"
"{\n"
"    PyStatus status;\n"
"\n"
"    PyConfig config;\n"
"    PyConfig_InitPythonConfig(&config);\n"
"\n"
"    /* Set the program name before reading the configuration\n"
"       (decode byte string from the locale encoding).\n"
"\n"
"       Implicitly preinitialize Python. */\n"
"    status = PyConfig_SetBytesString(&config, &config.program_name,\n"
"                                     program_name);\n"
"    if (PyStatus_Exception(status)) {\n"
"        goto done;\n"
"    }\n"
"\n"
"    /* Read all configuration at once */\n"
"    status = PyConfig_Read(&config);\n"
"    if (PyStatus_Exception(status)) {\n"
"        goto done;\n"
"    }\n"
"\n"
"    /* Specify sys.path explicitly */\n"
"    /* If you want to modify the default set of paths, finish\n"
"       initialization first and then use PySys_GetObject(\"path\") */\n"
"    config.module_search_paths_set = 1;\n"
"    status = PyWideStringList_Append(&config.module_search_paths,\n"
"                                     L\"/path/to/stdlib\");\n"
"    if (PyStatus_Exception(status)) {\n"
"        goto done;\n"
"    }\n"
"    status = PyWideStringList_Append(&config.module_search_paths,\n"
"                                     L\"/path/to/more/modules\");\n"
"    if (PyStatus_Exception(status)) {\n"
"        goto done;\n"
"    }\n"
"\n"
"    /* Override executable computed by PyConfig_Read() */\n"
"    status = PyConfig_SetString(&config, &config.executable,\n"
"                                L\"/path/to/my_executable\");\n"
"    if (PyStatus_Exception(status)) {\n"
"        goto done;\n"
"    }\n"
"\n"
"    status = Py_InitializeFromConfig(&config);\n"
"\n"
"done:\n"
"    PyConfig_Clear(&config);\n"
"    return status;\n"
"}"
msgstr ""

#: ../../c-api/init_config.rst:1463
msgid "Isolated Configuration"
msgstr "격리된 구성"

#: ../../c-api/init_config.rst:1465
msgid ""
":c:func:`PyPreConfig_InitIsolatedConfig` and "
":c:func:`PyConfig_InitIsolatedConfig` functions create a configuration to"
" isolate Python from the system. For example, to embed Python into an "
"application."
msgstr ""
":c:func:`PyPreConfig_InitIsolatedConfig`\\와 "
":c:func:`PyConfig_InitIsolatedConfig` 함수는 시스템에서 파이썬을 격리하는 구성을 만듭니다. 예를 "
"들어, 파이썬을 응용 프로그램에 내장하기 위해."

#: ../../c-api/init_config.rst:1470
#, fuzzy
msgid ""
"This configuration ignores global configuration variables, environment "
"variables, command line arguments (:c:member:`PyConfig.argv` is not "
"parsed) and user site directory. The C standard streams (ex: ``stdout``) "
"and the LC_CTYPE locale are left unchanged. Signal handlers are not "
"installed."
msgstr ""
"이 구성은 전역 구성 변수, 환경 변수, 명령 줄 인자 (:c:member:`PyConfig.argv`\\가 구문 분석되지 "
"않습니다) 및 사용자 사이트 디렉터리를 무시합니다. C 표준 스트림(예를 들어 ``stdout``)과 LC_CTYPE 로케일은 "
"변경되지 않습니다. 시그널 처리기가 설치되지 않습니다."

#: ../../c-api/init_config.rst:1475
#, fuzzy
msgid ""
"Configuration files are still used with this configuration to determine "
"paths that are unspecified. Ensure :c:member:`PyConfig.home` is specified"
" to avoid computing the default path configuration."
msgstr ""
"구성 파일은 여전히 이 구성에 사용됩니다. 이러한 구성 파일을 무시하고 기본 경로 구성을 계산하는 함수를 피하려면 :ref:`경로 "
"구성 <init-path-config>`\\( \"출력 필드\") 을 설정하십시오."

#: ../../c-api/init_config.rst:1483
msgid "Python Configuration"
msgstr "파이썬 구성"

#: ../../c-api/init_config.rst:1485
msgid ""
":c:func:`PyPreConfig_InitPythonConfig` and "
":c:func:`PyConfig_InitPythonConfig` functions create a configuration to "
"build a customized Python which behaves as the regular Python."
msgstr ""
":c:func:`PyPreConfig_InitPythonConfig`\\와 "
":c:func:`PyConfig_InitPythonConfig` 함수는 일반 파이썬처럼 동작하는 사용자 정의된 파이썬을 빌드하기 "
"위한 구성을 만듭니다."

#: ../../c-api/init_config.rst:1489
msgid ""
"Environments variables and command line arguments are used to configure "
"Python, whereas global configuration variables are ignored."
msgstr "환경 변수와 명령 줄 인자는 파이썬을 구성하는 데 사용되는 반면, 전역 구성 변수는 무시됩니다."

#: ../../c-api/init_config.rst:1492
#, fuzzy
msgid ""
"This function enables C locale coercion (:pep:`538`) and :ref:`Python "
"UTF-8 Mode <utf8-mode>` (:pep:`540`) depending on the LC_CTYPE locale, "
":envvar:`PYTHONUTF8` and :envvar:`PYTHONCOERCECLOCALE` environment "
"variables."
msgstr ""
"이 함수는 LC_CTYPE 로케일, :envvar:`PYTHONUTF8` 및 :envvar:`PYTHONCOERCECLOCALE` "
"환경 변수에 따라 C 로케일 강제(:pep:`538`)와 UTF-8 모드(:pep:`540`)를 활성화합니다."

#: ../../c-api/init_config.rst:1501
#, fuzzy
msgid "Python Path Configuration"
msgstr "파이썬 구성"

#: ../../c-api/init_config.rst:1503
msgid ":c:type:`PyConfig` contains multiple fields for the path configuration:"
msgstr ":c:type:`PyConfig`\\에는 경로 구성을 위한 여러 필드가 포함되어 있습니다:"

#: ../../c-api/init_config.rst:1505
msgid "Path configuration inputs:"
msgstr "경로 구성 입력:"

#: ../../c-api/init_config.rst:1507
msgid ":c:member:`PyConfig.home`"
msgstr ":c:member:`PyConfig.home`"

#: ../../c-api/init_config.rst:1508
msgid ":c:member:`PyConfig.platlibdir`"
msgstr ":c:member:`PyConfig.platlibdir`"

#: ../../c-api/init_config.rst:1509
msgid ":c:member:`PyConfig.pathconfig_warnings`"
msgstr ":c:member:`PyConfig.pathconfig_warnings`"

#: ../../c-api/init_config.rst:1510
msgid ":c:member:`PyConfig.program_name`"
msgstr ":c:member:`PyConfig.program_name`"

#: ../../c-api/init_config.rst:1511
msgid ":c:member:`PyConfig.pythonpath_env`"
msgstr ":c:member:`PyConfig.pythonpath_env`"

#: ../../c-api/init_config.rst:1512
msgid "current working directory: to get absolute paths"
msgstr "현재 작업 디렉터리: 절대 경로를 얻기 위해"

#: ../../c-api/init_config.rst:1513
msgid ""
"``PATH`` environment variable to get the program full path (from "
":c:member:`PyConfig.program_name`)"
msgstr "(:c:member:`PyConfig.program_name`\\에서) 프로그램 전체 경로를 얻기 위한 ``PATH`` 환경 변수"

#: ../../c-api/init_config.rst:1515
msgid "``__PYVENV_LAUNCHER__`` environment variable"
msgstr "``__PYVENV_LAUNCHER__`` 환경 변수"

#: ../../c-api/init_config.rst:1516
msgid ""
"(Windows only) Application paths in the registry under "
"\"Software\\Python\\PythonCore\\X.Y\\PythonPath\" of HKEY_CURRENT_USER "
"and HKEY_LOCAL_MACHINE (where X.Y is the Python version)."
msgstr ""
"(윈도우 전용) HKEY_CURRENT_USER와 HKEY_LOCAL_MACHINE의 "
"\"Software\\Python\\PythonCore\\X.Y\\PythonPath\" 아래에 있는 레지스트리의 응용 프로그램 "
"경로 (여기서 X.Y는 파이썬 버전입니다)."

#: ../../c-api/init_config.rst:1520
msgid "Path configuration output fields:"
msgstr "경로 구성 출력 필드:"

#: ../../c-api/init_config.rst:1522
msgid ":c:member:`PyConfig.base_exec_prefix`"
msgstr ":c:member:`PyConfig.base_exec_prefix`"

#: ../../c-api/init_config.rst:1523
msgid ":c:member:`PyConfig.base_executable`"
msgstr ":c:member:`PyConfig.base_executable`"

#: ../../c-api/init_config.rst:1524
msgid ":c:member:`PyConfig.base_prefix`"
msgstr ":c:member:`PyConfig.base_prefix`"

#: ../../c-api/init_config.rst:1525
msgid ":c:member:`PyConfig.exec_prefix`"
msgstr ":c:member:`PyConfig.exec_prefix`"

#: ../../c-api/init_config.rst:1526
msgid ":c:member:`PyConfig.executable`"
msgstr ":c:member:`PyConfig.executable`"

#: ../../c-api/init_config.rst:1527
msgid ""
":c:member:`PyConfig.module_search_paths_set`, "
":c:member:`PyConfig.module_search_paths`"
msgstr ""
":c:member:`PyConfig.module_search_paths_set`, "
":c:member:`PyConfig.module_search_paths`"

#: ../../c-api/init_config.rst:1529
msgid ":c:member:`PyConfig.prefix`"
msgstr ":c:member:`PyConfig.prefix`"

#: ../../c-api/init_config.rst:1531
#, fuzzy
msgid ""
"If at least one \"output field\" is not set, Python calculates the path "
"configuration to fill unset fields. If "
":c:member:`~PyConfig.module_search_paths_set` is equal to ``0``, "
":c:member:`~PyConfig.module_search_paths` is overridden and "
":c:member:`~PyConfig.module_search_paths_set` is set to ``1``."
msgstr ""
"적어도 하나의 \"출력 필드\"가 설정되어 있지 않으면, 파이썬은 설정되지 않은 필드를 채우기 위해 경로 구성을 계산합니다. "
":c:member:`~PyConfig.module_search_paths_set`\\이 0이면, "
":c:member:`~PyConfig.module_search_paths`\\가 재정의되고 "
":c:member:`~PyConfig.module_search_paths_set`\\이 1로 설정됩니다."

#: ../../c-api/init_config.rst:1537
#, fuzzy
msgid ""
"It is possible to completely ignore the function calculating the default "
"path configuration by setting explicitly all path configuration output "
"fields listed above. A string is considered as set even if it is non-"
"empty. ``module_search_paths`` is considered as set if "
"``module_search_paths_set`` is set to ``1``. In this case, "
"``module_search_paths`` will be used without modification."
msgstr ""
"위에 나열된 모든 경로 구성 출력 필드를 명시적으로 설정하여 기본 경로 구성을 계산하는 함수를 완전히 무시할 수 있습니다. 비어 "
"있지 않아도 문자열은 설정된 것으로 간주합니다. ``module_search_paths_set``\\이 1로 설정되면 "
"``module_search_paths``\\는 설정된 것으로 간주합니다. 이 경우, 경로 구성 입력 필드도 무시됩니다."

#: ../../c-api/init_config.rst:1544
#, fuzzy
msgid ""
"Set :c:member:`~PyConfig.pathconfig_warnings` to ``0`` to suppress "
"warnings when calculating the path configuration (Unix only, Windows does"
" not log any warning)."
msgstr ""
"경로 구성을 계산할 때 경고를 억제하려면 :c:member:`~PyConfig.pathconfig_warnings`\\를 0으로 "
"설정하십시오 (유닉스 전용, 윈도우는 어떤 경고도 로그 하지 않습니다)."

#: ../../c-api/init_config.rst:1547
msgid ""
"If :c:member:`~PyConfig.base_prefix` or "
":c:member:`~PyConfig.base_exec_prefix` fields are not set, they inherit "
"their value from :c:member:`~PyConfig.prefix` and "
":c:member:`~PyConfig.exec_prefix` respectively."
msgstr ""
":c:member:`~PyConfig.base_prefix`\\나 "
":c:member:`~PyConfig.base_exec_prefix` 필드가 설정되지 않으면, 각각 "
":c:member:`~PyConfig.prefix`\\와 :c:member:`~PyConfig.exec_prefix`\\의 값을 "
"상속합니다."

#: ../../c-api/init_config.rst:1551
msgid ":c:func:`Py_RunMain` and :c:func:`Py_Main` modify :data:`sys.path`:"
msgstr ":c:func:`Py_RunMain`\\과 :c:func:`Py_Main`\\은 :data:`sys.path`\\를 수정합니다:"

#: ../../c-api/init_config.rst:1553
msgid ""
"If :c:member:`~PyConfig.run_filename` is set and is a directory which "
"contains a ``__main__.py`` script, prepend "
":c:member:`~PyConfig.run_filename` to :data:`sys.path`."
msgstr ""
":c:member:`~PyConfig.run_filename`\\이 설정되고 ``__main__.py`` 스크립트를 포함하는 "
"디렉터리이면, :c:member:`~PyConfig.run_filename`\\을 :data:`sys.path` 앞에 추가합니다."

#: ../../c-api/init_config.rst:1556
msgid "If :c:member:`~PyConfig.isolated` is zero:"
msgstr ":c:member:`~PyConfig.isolated`\\가 0이면:"

#: ../../c-api/init_config.rst:1558
msgid ""
"If :c:member:`~PyConfig.run_module` is set, prepend the current directory"
" to :data:`sys.path`. Do nothing if the current directory cannot be read."
msgstr ""
":c:member:`~PyConfig.run_module`\\이 설정되면, 현재 디렉터리를 :data:`sys.path` 앞에 "
"추가합니다. 현재 디렉터리를 읽을 수 없으면 아무것도 하지 않습니다."

#: ../../c-api/init_config.rst:1560
msgid ""
"If :c:member:`~PyConfig.run_filename` is set, prepend the directory of "
"the filename to :data:`sys.path`."
msgstr ""
":c:member:`~PyConfig.run_filename`\\이 설정되면, 파일명의 디렉터리를 :data:`sys.path` "
"앞에 추가합니다."

#: ../../c-api/init_config.rst:1562
msgid "Otherwise, prepend an empty string to :data:`sys.path`."
msgstr "그렇지 않으면, 빈 문자열을 :data:`sys.path` 앞에 추가합니다."

#: ../../c-api/init_config.rst:1564
msgid ""
"If :c:member:`~PyConfig.site_import` is non-zero, :data:`sys.path` can be"
" modified by the :mod:`site` module. If "
":c:member:`~PyConfig.user_site_directory` is non-zero and the user's "
"site-package directory exists, the :mod:`site` module appends the user's "
"site-package directory to :data:`sys.path`."
msgstr ""
":c:member:`~PyConfig.site_import`\\가 0이 아니면, :mod:`site` 모듈이 "
":data:`sys.path`\\를 수정할 수 있습니다. "
":c:member:`~PyConfig.user_site_directory`\\가 0이 아니고 사용자의 site-package "
"디렉터리가 존재하면, :mod:`site` 모듈은 사용자의 site-package 디렉터리를 :data:`sys.path`\\에 "
"추가합니다."

#: ../../c-api/init_config.rst:1570
msgid "The following configuration files are used by the path configuration:"
msgstr "다음과 같은 구성 파일이 경로 구성에 사용됩니다:"

#: ../../c-api/init_config.rst:1572
msgid "``pyvenv.cfg``"
msgstr "``pyvenv.cfg``"

#: ../../c-api/init_config.rst:1573
msgid "``._pth`` file (ex: ``python._pth``)"
msgstr ""

#: ../../c-api/init_config.rst:1574
msgid "``pybuilddir.txt`` (Unix only)"
msgstr "``pybuilddir.txt`` (유닉스 전용)"

#: ../../c-api/init_config.rst:1576
msgid "If a ``._pth`` file is present:"
msgstr ""

#: ../../c-api/init_config.rst:1578
#, fuzzy
msgid "Set :c:member:`~PyConfig.isolated` to ``1``."
msgstr ":c:member:`PyConfig.isolated`\\를 참조하십시오."

#: ../../c-api/init_config.rst:1579
#, fuzzy
msgid "Set :c:member:`~PyConfig.use_environment` to ``0``."
msgstr ":c:member:`PyConfig.use_environment`\\를 참조하십시오."

#: ../../c-api/init_config.rst:1580
#, fuzzy
msgid "Set :c:member:`~PyConfig.site_import` to ``0``."
msgstr ":c:member:`PyConfig.dev_mode`\\를 참조하십시오."

#: ../../c-api/init_config.rst:1581
#, fuzzy
msgid "Set :c:member:`~PyConfig.safe_path` to ``1``."
msgstr ":c:member:`PyConfig.isolated`\\를 참조하십시오."

#: ../../c-api/init_config.rst:1583
#, fuzzy
msgid ""
"The ``__PYVENV_LAUNCHER__`` environment variable is used to set "
":c:member:`PyConfig.base_executable`."
msgstr ""
"``__PYVENV_LAUNCHER__`` 환경 변수는 :c:member:`PyConfig.base_executable`\\을 "
"설정하는 데 사용됩니다"

#: ../../c-api/init_config.rst:1588
msgid "Py_GetArgcArgv()"
msgstr "Py_GetArgcArgv()"

#: ../../c-api/init_config.rst:1592
msgid "Get the original command line arguments, before Python modified them."
msgstr "파이썬이 수정하기 전의, 원래 명령 줄 인자를 가져옵니다."

#: ../../c-api/init_config.rst:1594
#, fuzzy
msgid "See also :c:member:`PyConfig.orig_argv` member."
msgstr ":c:member:`PyConfig.isolated`\\를 참조하십시오."

#: ../../c-api/init_config.rst:1598
msgid "Multi-Phase Initialization Private Provisional API"
msgstr "다단계 초기화 비공개 잠정적 API"

#: ../../c-api/init_config.rst:1600
#, fuzzy
msgid ""
"This section is a private provisional API introducing multi-phase "
"initialization, the core feature of :pep:`432`:"
msgstr "이 섹션은 :pep:`432`\\의 핵심 기능인 다단계 초기화를 소개하는 비공개 잠정적 API입니다:"

#: ../../c-api/init_config.rst:1603
msgid "\"Core\" initialization phase, \"bare minimum Python\":"
msgstr "\"핵심(Core)\" 초기화 단계, \"최소한의 파이썬\":"

#: ../../c-api/init_config.rst:1605
msgid "Builtin types;"
msgstr "내장형;"

#: ../../c-api/init_config.rst:1606
msgid "Builtin exceptions;"
msgstr "내장 예외;"

#: ../../c-api/init_config.rst:1607
msgid "Builtin and frozen modules;"
msgstr "내장과 프로즌 모듈(frozen modules);"

#: ../../c-api/init_config.rst:1608
msgid ""
"The :mod:`sys` module is only partially initialized (ex: :data:`sys.path`"
" doesn't exist yet)."
msgstr ":mod:`sys` 모듈은 부분적으로만 초기화됩니다 (예를 들어: :data:`sys.path`\\는 아직 존재하지 않습니다)."

#: ../../c-api/init_config.rst:1611
msgid "\"Main\" initialization phase, Python is fully initialized:"
msgstr "\"주(Main)\" 초기화 단계, 파이썬이 완전히 초기화됩니다:"

#: ../../c-api/init_config.rst:1613
msgid "Install and configure :mod:`importlib`;"
msgstr ":mod:`importlib`\\를 설치하고 구성합니다;"

#: ../../c-api/init_config.rst:1614
msgid "Apply the :ref:`Path Configuration <init-path-config>`;"
msgstr ":ref:`경로 구성 <init-path-config>`\\을 적용합니다;"

#: ../../c-api/init_config.rst:1615
msgid "Install signal handlers;"
msgstr "시그널 처리기를 설치합니다;"

#: ../../c-api/init_config.rst:1616
msgid ""
"Finish :mod:`sys` module initialization (ex: create :data:`sys.stdout` "
"and :data:`sys.path`);"
msgstr ""
":mod:`sys` 모듈 초기화를 완료합니다 (예를 들어: :data:`sys.stdout`\\과 "
":data:`sys.path`\\를 만듭니다);"

#: ../../c-api/init_config.rst:1618
msgid "Enable optional features like :mod:`faulthandler` and :mod:`tracemalloc`;"
msgstr ":mod:`faulthandler`\\와 :mod:`tracemalloc`\\과 같은 선택적 기능을 활성화합니다;"

#: ../../c-api/init_config.rst:1619
msgid "Import the :mod:`site` module;"
msgstr ":mod:`site` 모듈을 임포트 합니다;"

#: ../../c-api/init_config.rst:1620
msgid "etc."
msgstr "등등"

#: ../../c-api/init_config.rst:1622
msgid "Private provisional API:"
msgstr "비공개 잠정적 API:"

#: ../../c-api/init_config.rst:1624
#, fuzzy
msgid ""
":c:member:`PyConfig._init_main`: if set to ``0``, "
":c:func:`Py_InitializeFromConfig` stops at the \"Core\" initialization "
"phase."
msgstr ""
":c:member:`PyConfig._init_main`: 0으로 설정되면, "
":c:func:`Py_InitializeFromConfig`\\는 \"핵심\" 초기화 단계에서 중단합니다."

#: ../../c-api/init_config.rst:1629
msgid ""
"Move to the \"Main\" initialization phase, finish the Python "
"initialization."
msgstr "\"주\" 초기화 단계로 이동하여, 파이썬 초기화를 완료합니다."

#: ../../c-api/init_config.rst:1631
msgid ""
"No module is imported during the \"Core\" phase and the ``importlib`` "
"module is not configured: the :ref:`Path Configuration <init-path-"
"config>` is only applied during the \"Main\" phase. It may allow to "
"customize Python in Python to override or tune the :ref:`Path "
"Configuration <init-path-config>`, maybe install a custom "
":data:`sys.meta_path` importer or an import hook, etc."
msgstr ""
"\"핵심\" 단계에서는 아무런 모듈도 임포트 하지 않고 ``importlib`` 모듈이 구성되지 않습니다: :ref:`경로 구성 "
"<init-path-config>`\\은 \"주\" 단계에서만 적용됩니다. :ref:`경로 구성 <init-path-"
"config>`\\을 재정의하거나 조정하기 위해 파이썬에서 파이썬을 사용자 정의할 수 있으며, 사용자 정의 "
":data:`sys.meta_path` 임포터(importer)나 임포트 훅 등을 설치할 수 있습니다."

#: ../../c-api/init_config.rst:1637
#, fuzzy
msgid ""
"It may become possible to calculate the :ref:`Path Configuration <init-"
"path-config>` in Python, after the Core phase and before the Main phase, "
"which is one of the :pep:`432` motivation."
msgstr ""
"핵심 단계 이후에 주 단계 이전에 파이썬에서 :ref:`경로 구성 <init-path-config>`\\을 계산할 수 있게 될 수 "
"있고, 이것이 :pep:`432`\\의 동기 중 하나입니다."

#: ../../c-api/init_config.rst:1641
msgid ""
"The \"Core\" phase is not properly defined: what should be and what "
"should not be available at this phase is not specified yet. The API is "
"marked as private and provisional: the API can be modified or even be "
"removed anytime until a proper public API is designed."
msgstr ""
"\"핵심\" 단계가 제대로 정의되지 않았습니다: 이 단계에서 무엇을 사용할 수 있고, 무엇이 그렇지 않아야 하는지는 아직 지정되지 "
"않았습니다. API는 비공개이자 잠정적인 것으로 표시됩니다: 적절한 공개 API가 설계될 때까지 언제든지 API를 수정하거나 제거할"
" 수 있습니다."

#: ../../c-api/init_config.rst:1646
msgid ""
"Example running Python code between \"Core\" and \"Main\" initialization "
"phases::"
msgstr "\"핵심\"과 \"주\" 초기화 단계 사이에서 파이썬 코드를 실행하는 예제::"

#: ../../c-api/init_config.rst:1649
msgid ""
"void init_python(void)\n"
"{\n"
"    PyStatus status;\n"
"\n"
"    PyConfig config;\n"
"    PyConfig_InitPythonConfig(&config);\n"
"    config._init_main = 0;\n"
"\n"
"    /* ... customize 'config' configuration ... */\n"
"\n"
"    status = Py_InitializeFromConfig(&config);\n"
"    PyConfig_Clear(&config);\n"
"    if (PyStatus_Exception(status)) {\n"
"        Py_ExitStatusException(status);\n"
"    }\n"
"\n"
"    /* Use sys.stderr because sys.stdout is only created\n"
"       by _Py_InitializeMain() */\n"
"    int res = PyRun_SimpleString(\n"
"        \"import sys; \"\n"
"        \"print('Run Python code before _Py_InitializeMain', \"\n"
"               \"file=sys.stderr)\");\n"
"    if (res < 0) {\n"
"        exit(1);\n"
"    }\n"
"\n"
"    /* ... put more configuration code here ... */\n"
"\n"
"    status = _Py_InitializeMain();\n"
"    if (PyStatus_Exception(status)) {\n"
"        Py_ExitStatusException(status);\n"
"    }\n"
"}"
msgstr ""

#: ../../c-api/init_config.rst:558
#, fuzzy
msgid "main()"
msgstr "Py_RunMain()"

#: ../../c-api/init_config.rst:558
msgid "argv (in module sys)"
msgstr ""

#~ msgid "Structures:"
#~ msgstr "구조체:"

#~ msgid ":c:type:`PyConfig`"
#~ msgstr ":c:type:`PyConfig`"

#~ msgid ":c:type:`PyPreConfig`"
#~ msgstr ":c:type:`PyPreConfig`"

#~ msgid ":c:type:`PyStatus`"
#~ msgstr ":c:type:`PyStatus`"

#~ msgid ":c:type:`PyWideStringList`"
#~ msgstr ":c:type:`PyWideStringList`"

#~ msgid "Functions:"
#~ msgstr "함수:"

#~ msgid ":c:func:`PyConfig_Clear`"
#~ msgstr ":c:func:`PyConfig_Clear`"

#~ msgid ":c:func:`PyConfig_InitIsolatedConfig`"
#~ msgstr ":c:func:`PyConfig_InitIsolatedConfig`"

#~ msgid ":c:func:`PyConfig_InitPythonConfig`"
#~ msgstr ":c:func:`PyConfig_InitPythonConfig`"

#~ msgid ":c:func:`PyConfig_Read`"
#~ msgstr ":c:func:`PyConfig_Read`"

#~ msgid ":c:func:`PyConfig_SetArgv`"
#~ msgstr ":c:func:`PyConfig_SetArgv`"

#~ msgid ":c:func:`PyConfig_SetBytesArgv`"
#~ msgstr ":c:func:`PyConfig_SetBytesArgv`"

#~ msgid ":c:func:`PyConfig_SetBytesString`"
#~ msgstr ":c:func:`PyConfig_SetBytesString`"

#~ msgid ":c:func:`PyConfig_SetString`"
#~ msgstr ":c:func:`PyConfig_SetString`"

#~ msgid ":c:func:`PyConfig_SetWideStringList`"
#~ msgstr ":c:func:`PyConfig_SetWideStringList`"

#~ msgid ":c:func:`PyPreConfig_InitIsolatedConfig`"
#~ msgstr ":c:func:`PyPreConfig_InitIsolatedConfig`"

#~ msgid ":c:func:`PyPreConfig_InitPythonConfig`"
#~ msgstr ":c:func:`PyPreConfig_InitPythonConfig`"

#~ msgid ":c:func:`PyStatus_Error`"
#~ msgstr ":c:func:`PyStatus_Error`"

#~ msgid ":c:func:`PyStatus_Exception`"
#~ msgstr ":c:func:`PyStatus_Exception`"

#~ msgid ":c:func:`PyStatus_Exit`"
#~ msgstr ":c:func:`PyStatus_Exit`"

#~ msgid ":c:func:`PyStatus_IsError`"
#~ msgstr ":c:func:`PyStatus_IsError`"

#~ msgid ":c:func:`PyStatus_IsExit`"
#~ msgstr ":c:func:`PyStatus_IsExit`"

#~ msgid ":c:func:`PyStatus_NoMemory`"
#~ msgstr ":c:func:`PyStatus_NoMemory`"

#~ msgid ":c:func:`PyStatus_Ok`"
#~ msgstr ":c:func:`PyStatus_Ok`"

#~ msgid ":c:func:`PyWideStringList_Append`"
#~ msgstr ":c:func:`PyWideStringList_Append`"

#~ msgid ":c:func:`PyWideStringList_Insert`"
#~ msgstr ":c:func:`PyWideStringList_Insert`"

#~ msgid ":c:func:`Py_ExitStatusException`"
#~ msgstr ":c:func:`Py_ExitStatusException`"

#~ msgid ":c:func:`Py_InitializeFromConfig`"
#~ msgstr ":c:func:`Py_InitializeFromConfig`"

#~ msgid ":c:func:`Py_PreInitialize`"
#~ msgstr ":c:func:`Py_PreInitialize`"

#~ msgid ":c:func:`Py_PreInitializeFromArgs`"
#~ msgstr ":c:func:`Py_PreInitializeFromArgs`"

#~ msgid ":c:func:`Py_PreInitializeFromBytesArgs`"
#~ msgstr ":c:func:`Py_PreInitializeFromBytesArgs`"

#~ msgid ":c:func:`Py_GetArgcArgv`"
#~ msgstr ":c:func:`Py_GetArgcArgv`"

#~ msgid "Set the UTF-8 mode"
#~ msgstr "UTF-8 모드를 설정합니다"

#~ msgid ""
#~ "If non-zero, disable UTF-8 Mode, "
#~ "set the Python filesystem encoding to"
#~ " ``mbcs``, set the filesystem error "
#~ "handler to ``replace``."
#~ msgstr ""
#~ "0이 아니면, UTF-8 모드를 비활성화하고, 파이썬 파일"
#~ " 시스템 인코딩을 ``mbcs``\\로 설정하고, 파일 시스템"
#~ " 에러 처리기를 ``replace``\\로 설정합니다."

#~ msgid "If non-zero, enable the UTF-8 mode."
#~ msgstr "0이 아니면, UTF-8 모드를 활성화합니다."

#~ msgid ""
#~ "Preinitialize Python from *preconfig* "
#~ "preconfiguration and command line arguments"
#~ " (bytes strings)."
#~ msgstr "*preconfig* 사전 구성과 명령 줄 인자(바이트 문자열)에서 파이썬을 사전 초기화합니다."

#~ msgid ""
#~ "Preinitialize Python from *preconfig* "
#~ "preconfiguration and command line arguments"
#~ " (wide strings)."
#~ msgstr "*preconfig* 사전 구성과 명령 줄 인자(와이드 문자열)에서 파이썬을 사전 초기화합니다."

#~ msgid ""
#~ "Command line arguments, :data:`sys.argv`. See"
#~ " :c:member:`~PyConfig.parse_argv` to parse "
#~ ":c:member:`~PyConfig.argv` the same way the"
#~ " regular Python parses Python command "
#~ "line arguments. If :c:member:`~PyConfig.argv` "
#~ "is empty, an empty string is added"
#~ " to ensure that :data:`sys.argv` always "
#~ "exists and is never empty."
#~ msgstr ""
#~ "명령 줄 인자, :data:`sys.argv`. 일반 파이썬이 "
#~ "파이썬 명령 줄 인자를 구문 분석하는 것과 같은"
#~ " 방식으로 :c:member:`~PyConfig.argv`\\를 구문 분석하려면 "
#~ ":c:member:`~PyConfig.parse_argv`\\를 참조하십시오. "
#~ ":c:member:`~PyConfig.argv`\\가 비어 있으면, 빈 문자열이"
#~ " 추가되어 :data:`sys.argv`\\가 항상 존재하고 절대로 "
#~ "비어 있지 않도록 합니다."

#~ msgid ""
#~ ":data:`sys._base_executable`: ``__PYVENV_LAUNCHER__`` "
#~ "environment variable value, or copy of"
#~ " :c:member:`PyConfig.executable`."
#~ msgstr ""
#~ ":data:`sys._base_executable`: ``__PYVENV_LAUNCHER__`` 환경"
#~ " 변숫값, 또는 :c:member:`PyConfig.executable`\\의 사본."

#~ msgid ""
#~ ":data:`sys.platlibdir`: platform library directory"
#~ " name, set at configure time by "
#~ "``--with-platlibdir``, overrideable by the "
#~ "``PYTHONPLATLIBDIR`` environment variable."
#~ msgstr ""
#~ ":data:`sys.platlibdir`: 플랫폼 라이브러리 디렉터리 이름, "
#~ "``--with-platlibdir``\\로 구성 시간에 설정됩니다, "
#~ "``PYTHONPLATLIBDIR`` 환경 변수로 재정의할 수 있습니다."

#~ msgid ""
#~ "If equals to 0, enable unbuffered "
#~ "mode, making the stdout and stderr "
#~ "streams unbuffered."
#~ msgstr "0과 같으면, 버퍼링 되지 않는 모드를 활성화하여, stdout과 stderr 스트림을 버퍼링하지 않도록 합니다."

#~ msgid "Valid values: ``always``, ``never`` and ``default``."
#~ msgstr "유효한 값: ``always``, ``never`` 및 ``default``."

#~ msgid ""
#~ "If non-zero, configure C standard "
#~ "streams (``stdio``, ``stdout``, ``stdout``). "
#~ "For example, set their mode to "
#~ "``O_BINARY`` on Windows."
#~ msgstr ""
#~ "0이 아니면, C 표준 스트림(``stdio``, ``stdout``,"
#~ " ``stdout``)을 구성합니다. 예를 들어, 윈도우에서 해당"
#~ " 모드를 ``O_BINARY``\\로 설정합니다."

#~ msgid "``Py_TRACE_REFS`` macro must be defined in build."
#~ msgstr "``Py_TRACE_REFS`` 매크로가 빌드에서 정의되어야 합니다."

#~ msgid ":data:`sys.exec_prefix`."
#~ msgstr ":data:`sys.exec_prefix`."

#~ msgid "Python home directory."
#~ msgstr "파이썬 홈 디렉터리."

#~ msgid "Interactive mode."
#~ msgstr "대화식 모드."

#~ msgid ""
#~ ":data:`sys.path` contains neither the script's"
#~ " directory (computed from ``argv[0]`` or"
#~ " the current directory) nor the "
#~ "user's site-packages directory."
#~ msgstr ""
#~ ":data:`sys.path`\\에는 스크립트 디렉터리(``argv[0]``\\이나 현재"
#~ " 디렉터리에서 계산됩니다)도 사용자의 site-packages "
#~ "디렉터리도 없습니다."

#~ msgid ""
#~ "Set :c:member:`~PyConfig.use_environment` and "
#~ ":c:member:`~PyConfig.user_site_directory` to 0."
#~ msgstr ""
#~ ":c:member:`~PyConfig.use_environment`\\와 "
#~ ":c:member:`~PyConfig.user_site_directory`\\를 0으로 설정합니다."

#~ msgid ""
#~ ":data:`sys.path`. If "
#~ ":c:member:`~PyConfig.module_search_paths_set` is equal "
#~ "to 0, the :c:member:`~PyConfig.module_search_paths`"
#~ " is overridden by the function "
#~ "calculating the :ref:`Path Configuration "
#~ "<init-path-config>`."
#~ msgstr ""
#~ ":data:`sys.path`. "
#~ ":c:member:`~PyConfig.module_search_paths_set`\\이 0과 같으면,"
#~ " :ref:`경로 구성 <init-path-config>`\\을 "
#~ "계산하는 함수가 :c:member:`~PyConfig.module_search_paths`\\를 "
#~ "재정의합니다."

#~ msgid ""
#~ "If equal to 0, suppress warnings "
#~ "when calculating the :ref:`Path Configuration"
#~ " <init-path-config>` (Unix only, "
#~ "Windows does not log any warning). "
#~ "Otherwise, warnings are written into "
#~ "``stderr``."
#~ msgstr ""
#~ "0과 같으면, :ref:`경로 구성 <init-path-"
#~ "config>`\\을 계산할 때 경고를 억제합니다 (유닉스 "
#~ "전용, 윈도우는 아무런 경고도 로그 하지 않습니다). "
#~ "그렇지 않으면, 경고가 ``stderr``\\에 기록됩니다."

#~ msgid ":data:`sys.prefix`."
#~ msgstr ":data:`sys.prefix`."

#~ msgid ":data:`sys.pycache_prefix`: ``.pyc`` cache prefix."
#~ msgstr ":data:`sys.pycache_prefix`: ``.pyc`` 캐시 접두사."

#~ msgid "``python3 -c COMMAND`` argument. Used by :c:func:`Py_RunMain`."
#~ msgstr "``python3 -c COMMAND`` 인자. :c:func:`Py_RunMain`\\에서 사용합니다."

#~ msgid "``python3 FILENAME`` argument. Used by :c:func:`Py_RunMain`."
#~ msgstr "``python3 FILENAME`` 인자. :c:func:`Py_RunMain`\\에서 사용합니다."

#~ msgid "``python3 -m MODULE`` argument. Used by :c:func:`Py_RunMain`."
#~ msgstr "``python3 -m MODULE`` 인자. :c:func:`Py_RunMain`\\에서 사용합니다."

#~ msgid "Skip the first line of the source?"
#~ msgstr "소스의 첫 줄을 건너뜁니까?"

#~ msgid "If non-zero, enable verbose mode."
#~ msgstr "0이 아니면, 상세 모드를 활성화합니다."

#~ msgid "If non-zero, write ``.pyc`` files."
#~ msgstr "0이 아니면, ``.pyc`` 파일을 기록합니다."

#~ msgid ":data:`sys._xoptions`."
#~ msgstr ":data:`sys._xoptions`."

#~ msgid "Enable PEG parser? Default: 1."
#~ msgstr "PEG 구문 분석기를 활성화합니까? 기본값: 1."

#~ msgid "See also :pep:`617`."
#~ msgstr ":pep:`617`\\도 참조하십시오."

#~ msgid "Function to initialize Python:"
#~ msgstr "파이썬을 초기화하는 함수:"

#~ msgid "Initialize Python from *config* configuration."
#~ msgstr "*config* 구성에서 파이썬을 초기화합니다."

#~ msgid ""
#~ "More complete example modifying the "
#~ "default configuration, read the configuration,"
#~ " and then override some parameters::"
#~ msgstr "기본 구성을 수정하는 더 완전한 예, 구성을 읽은 다음 일부 파라미터를 대체합니다::"

#~ msgid "Path Configuration"
#~ msgstr "경로 구성"

#~ msgid "``python._pth`` (Windows only)"
#~ msgstr "``python._pth`` (윈도우 전용)"

#~ msgid ""
#~ "Execute the command "
#~ "(:c:member:`PyConfig.run_command`), the script "
#~ "(:c:member:`PyConfig.run_filename`) or the module"
#~ " (:c:member:`PyConfig.run_module`) specified on "
#~ "the command line or in the "
#~ "configuration."
#~ msgstr ""
#~ "명령 줄이나 구성에서 지정된 명령 "
#~ "(:c:member:`PyConfig.run_command`), 스크립트 "
#~ "(:c:member:`PyConfig.run_filename`) 또는 모듈 "
#~ "(:c:member:`PyConfig.run_module`)을 실행합니다."

#~ msgid "By default and when if :option:`-i` option is used, run the REPL."
#~ msgstr "기본적으로, 그리고 :option:`-i` 옵션을 사용할 때, REPL을 실행합니다."

#~ msgid ""
#~ "Finally, finalizes Python and returns an"
#~ " exit status that can be passed "
#~ "to the ``exit()`` function."
#~ msgstr "마지막으로, 파이썬을 파이널라이즈 하고 ``exit()`` 함수에 전달할 수 있는 종료 상태를 반환합니다."

#~ msgid ""
#~ "See :ref:`Python Configuration <init-"
#~ "python-config>` for an example of "
#~ "customized Python always running in "
#~ "isolated mode using :c:func:`Py_RunMain`."
#~ msgstr ""
#~ ":c:func:`Py_RunMain`\\을 사용하여 항상 격리 모드에서 "
#~ "실행되는 사용자 정의 파이썬의 예는 :ref:`파이썬 구성"
#~ " <init-python-config>`\\을 참조하십시오."

#~ msgid ""
#~ ":c:member:`PyConfig._isolated_interpreter`: if non-"
#~ "zero, disallow threads, subprocesses and "
#~ "fork."
#~ msgstr ""
#~ ":c:member:`PyConfig._isolated_interpreter`: 0이 아니면, "
#~ "스레드, 서브 프로세스 및 포크를 허용하지 않습니다."

