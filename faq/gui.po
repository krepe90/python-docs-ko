# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2017, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-04-17 23:44+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: Dong-gweon Oh <flowdas@gmail.com>\n"
"Language-Team: Korean (https://python.flowdas.com)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.17.0\n"

#: ../../faq/gui.rst:5
msgid "Graphic User Interface FAQ"
msgstr "그래픽 사용자 인터페이스 FAQ"

#: ../../faq/gui.rst:8
msgid "Contents"
msgstr "목차"

#: ../../faq/gui.rst:15
msgid "General GUI Questions"
msgstr "일반적인 GUI 질문"

#: ../../faq/gui.rst:18
#, fuzzy
msgid "What GUI toolkits exist for Python?"
msgstr "파이썬에 어떤 플랫폼 특정 GUI 툴킷이 있습니까?"

#: ../../faq/gui.rst:20
#, fuzzy
msgid ""
"Standard builds of Python include an object-oriented interface to the "
"Tcl/Tk widget set, called :ref:`tkinter <Tkinter>`.  This is probably the"
" easiest to install (since it comes included with most `binary "
"distributions <https://www.python.org/downloads/>`_ of Python) and use. "
"For more info about Tk, including pointers to the source, see the `Tcl/Tk"
" home page <https://www.tcl.tk>`_.  Tcl/Tk is fully portable to the "
"macOS, Windows, and Unix platforms."
msgstr ""
"파이썬의 표준 빌드에는 Tcl/Tk 위젯 집합에 대한 객체 지향 인터페이스가 포함되는데, :ref:`tkinter "
"<Tkinter>`\\라고 불립니다. 이것이 아마도 가장 (파이썬의 대부분 `바이너리 배포 "
"<https://www.python.org/downloads/>`_\\에 포함되어 있으므로) 설치하고 사용하기 쉽습니다. 소스에 "
"대한 안내를 포함하는 Tk에 대한 자세한 내용은 `Tcl/Tk 홈페이지 <https://www.tcl.tk>`_\\를 참조하십시오."
" Tcl/Tk는 맥 OS X, 윈도우 및 유닉스 플랫폼에 완벽하게 호환됩니다."

#: ../../faq/gui.rst:28
msgid ""
"Depending on what platform(s) you are aiming at, there are also several "
"alternatives. A `list of cross-platform "
"<https://wiki.python.org/moin/GuiProgramming#Cross-Platform_Frameworks>`_"
" and `platform-specific <https://wiki.python.org/moin/GuiProgramming"
"#Platform-specific_Frameworks>`_ GUI frameworks can be found on the "
"python wiki."
msgstr ""

#: ../../faq/gui.rst:36
msgid "Tkinter questions"
msgstr "Tkinter 질문"

#: ../../faq/gui.rst:39
msgid "How do I freeze Tkinter applications?"
msgstr "Tkinter 응용 프로그램을 어떻게 고정(freeze)합니까?"

#: ../../faq/gui.rst:41
msgid ""
"Freeze is a tool to create stand-alone applications.  When freezing "
"Tkinter applications, the applications will not be truly stand-alone, as "
"the application will still need the Tcl and Tk libraries."
msgstr ""
"Freeze는 독립 실행형 응용 프로그램을 만드는 도구입니다. Tkinter 응용 프로그램을 고정할 때, 응용 프로그램은 여전히 "
"Tcl과 Tk 라이브러리가 필요하므로 진정한 독립 실행형이 아닙니다."

#: ../../faq/gui.rst:45
#, fuzzy
msgid ""
"One solution is to ship the application with the Tcl and Tk libraries, "
"and point to them at run-time using the :envvar:`!TCL_LIBRARY` and "
":envvar:`!TK_LIBRARY` environment variables."
msgstr ""
"한 가지 해결책은 응용 프로그램을 Tcl과 Tk 라이브러리와 함께 제공하고, 그것들을 실행 시간에 "
":envvar:`TCL_LIBRARY`\\와 :envvar:`TK_LIBRARY` 환경 변수를 사용하여 가리키는 것입니다."

#: ../../faq/gui.rst:49
msgid ""
"Various third-party freeze libraries such as py2exe and cx_Freeze have "
"handling for Tkinter applications built-in."
msgstr ""

#: ../../faq/gui.rst:54
msgid "Can I have Tk events handled while waiting for I/O?"
msgstr "I/O를 기다리는 동안 Tk 이벤트를 처리하도록 할 수 있습니까?"

#: ../../faq/gui.rst:56
#, fuzzy
msgid ""
"On platforms other than Windows, yes, and you don't even need threads!  "
"But you'll have to restructure your I/O code a bit.  Tk has the "
"equivalent of Xt's :c:func:`!XtAddInput` call, which allows you to "
"register a callback function which will be called from the Tk mainloop "
"when I/O is possible on a file descriptor.  See :ref:`tkinter-file-"
"handlers`."
msgstr ""
"윈도우 이외의 다른 플랫폼에서라면, 그렇습니다, 그리고 스레드가 필요하지도 않습니다! 그러나 I/O 코드를 약간 재구성해야 합니다."
" Tk는 Xt의 :c:func:`XtAddInput()` 호출과 동등한 것을 갖고 있는데, 파일 기술자에서 I/O가 가능할 때 Tk"
" 메인 루프에서 호출할 콜백 함수를 등록할 수 있도록 합니다. :ref:`tkinter-file-handlers`\\를 "
"참조하십시오."

#: ../../faq/gui.rst:64
msgid "I can't get key bindings to work in Tkinter: why?"
msgstr "Tkinter에서 키 바인딩이 동작하지 않습니다: 이유가 무엇입니까?"

#: ../../faq/gui.rst:66
#, fuzzy
msgid ""
"An often-heard complaint is that event handlers :ref:`bound <bindings-"
"and-events>` to events with the :meth:`!bind` method don't get handled "
"even when the appropriate key is pressed."
msgstr "자주 들리는 불만은 적절한 키를 눌러도 :meth:`bind` 메서드로 이벤트에 연결된 이벤트 처리기가 처리되지 않는다는 것입니다."

#: ../../faq/gui.rst:70
msgid ""
"The most common cause is that the widget to which the binding applies "
"doesn't have \"keyboard focus\".  Check out the Tk documentation for the "
"focus command. Usually a widget is given the keyboard focus by clicking "
"in it (but not for labels; see the takefocus option)."
msgstr ""
"가장 흔한 원인은 바인딩이 적용되는 위젯에 \"키보드 포커스\"가 없는 것입니다. focus 명령에 대한 Tk 설명서를 "
"확인하십시오. 보통 위젯은 그것을 클릭할 때 키보드 포커스를 받습니다 (레이블은 그렇지 않습니다; takefocus 옵션을 "
"보십시오)."

#~ msgid "What platform-independent GUI toolkits exist for Python?"
#~ msgstr "파이썬에 어떤 플랫폼 독립적인 GUI 툴킷이 있습니까?"

#~ msgid ""
#~ "Depending on what platform(s) you are"
#~ " aiming at, there are several.  Some"
#~ " of them haven't been ported to "
#~ "Python 3 yet.  At least `Tkinter`_ "
#~ "and `Qt`_ are known to be Python"
#~ " 3-compatible."
#~ msgstr ""
#~ "여러분이 목표로 하는 플랫폼에 따라, 몇 가지가 "
#~ "있습니다. 그들 중 일부는 아직 파이썬 3에 "
#~ "이식되지 않았습니다. 적어도 `Tkinter`_\\와 `Qt`_\\는 "
#~ "파이썬 3과 호환되는 것으로 알려져 있습니다."

#~ msgid "Tkinter"
#~ msgstr "Tkinter"

#~ msgid "wxWidgets"
#~ msgstr "wxWidgets"

#~ msgid ""
#~ "wxWidgets (https://www.wxwidgets.org) is a "
#~ "free, portable GUI class library written"
#~ " in C++ that provides a native "
#~ "look and feel on a number of "
#~ "platforms, with Windows, Mac OS X, "
#~ "GTK, X11, all listed as current "
#~ "stable targets.  Language bindings are "
#~ "available for a number of languages "
#~ "including Python, Perl, Ruby, etc."
#~ msgstr ""
#~ "wxWidgets(https://www.wxwidgets.org)는 C++로 작성된 무료이고"
#~ " 이식성 있는 GUI 클래스 라이브러리인데, 많은 "
#~ "플랫폼에서 네이티브 룩앤필을 제공합니다. 윈도우, 맥 OS"
#~ " X, GTK, X11 가 모두 현재 안정 "
#~ "타깃에 포함됩니다. 파이썬, 펄, 루비등 다양한 언어에서"
#~ " 언어 바인딩을 사용할 수 있습니다."

#~ msgid ""
#~ "`wxPython <https://www.wxpython.org>`_ is the "
#~ "Python binding for wxwidgets.  While it"
#~ " often lags slightly behind the "
#~ "official wxWidgets releases, it also "
#~ "offers a number of features via "
#~ "pure Python extensions that are not "
#~ "available in other language bindings.  "
#~ "There is an active wxPython user "
#~ "and developer community."
#~ msgstr ""
#~ "`wxPython <https://www.wxpython.org>`_\\은 wxwidgets의 "
#~ "파이썬 바인딩입니다. 공식 wxWidgets 배포보다 약간 "
#~ "뒤떨어 지지기는 하지만, 순수 파이썬 확장을 통해 "
#~ "다른 언어 바인딩에서는 사용할 수 없는 많은 기능을"
#~ " 제공하기도 합니다. 활발한 wxPython 사용자와 개발자 "
#~ "커뮤니티가 있습니다."

#~ msgid ""
#~ "Both wxWidgets and wxPython are free,"
#~ " open source, software with permissive "
#~ "licences that allow their use in "
#~ "commercial products as well as in "
#~ "freeware or shareware."
#~ msgstr ""
#~ "wxWidgets와 wxPython은 모두 프리웨어나 셰어웨어뿐만 아니라"
#~ " 상업용 제품에서의 사용을 허락하는 관대한 라이센스가 "
#~ "있는 무료 공개 소스 소프트웨어입니다."

#~ msgid "Qt"
#~ msgstr "Qt"

#~ msgid ""
#~ "There are bindings available for the "
#~ "Qt toolkit (using either `PyQt "
#~ "<https://riverbankcomputing.com/software/pyqt/intro>`_ or "
#~ "`PySide <https://wiki.qt.io/PySide>`_) and for "
#~ "KDE (`PyKDE4 "
#~ "<https://techbase.kde.org/Languages/Python/Using_PyKDE_4>`__). "
#~ "PyQt is currently more mature than "
#~ "PySide, but you must buy a PyQt"
#~ " license from `Riverbank Computing "
#~ "<https://www.riverbankcomputing.com/commercial/license-faq>`_"
#~ " if you want to write proprietary "
#~ "applications.  PySide is free for all"
#~ " applications."
#~ msgstr ""
#~ "Qt 툴킷(`PyQt "
#~ "<https://riverbankcomputing.com/software/pyqt/intro>`_\\나 "
#~ "`PySide <https://wiki.qt.io/PySide>`_\\를 사용하는)이나 "
#~ "KDE(`PyKDE4 "
#~ "<https://techbase.kde.org/Languages/Python/Using_PyKDE_4>`__)를 "
#~ "위한 바인딩을 사용할 수 있습니다. PyQt는 현재 "
#~ "PySide보다 더 성숙하지만, 독점 응용 프로그램을 "
#~ "작성하려면 `Riverbank Computing "
#~ "<https://www.riverbankcomputing.com/commercial/license-"
#~ "faq>`_\\에서 PyQt 라이센스를 사야 합니다. PySide는"
#~ " 모든 응용 프로그램에서 무료입니다."

#~ msgid ""
#~ "Qt 4.5 upwards is licensed under "
#~ "the LGPL license; also, commercial "
#~ "licenses are available from `The Qt "
#~ "Company <https://www.qt.io/licensing/>`_."
#~ msgstr ""
#~ "Qt 4.5 이상은 LGPL 라이센스에 따라 라이센스가 "
#~ "부여됩니다; 또한, 상용 라이센스는 `The Qt "
#~ "Company <https://www.qt.io/licensing/>`_\\에서 제공됩니다."

#~ msgid "Gtk+"
#~ msgstr "Gtk+"

#~ msgid ""
#~ "The `GObject introspection bindings "
#~ "<https://wiki.gnome.org/Projects/PyGObject>`_ for Python"
#~ " allow you to write GTK+ 3 "
#~ "applications.  There is also a `Python"
#~ " GTK+ 3 Tutorial <https://python-"
#~ "gtk-3-tutorial.readthedocs.io>`_."
#~ msgstr ""
#~ "파이썬용 `GObject 인트로스펙션 바인딩 "
#~ "<https://wiki.gnome.org/Projects/PyGObject>`_\\를 사용하면 GTK+"
#~ " 3 응용 프로그램을 작성할 수 있습니다. `파이썬"
#~ " GTK+ 3 자습서 <https://python-"
#~ "gtk-3-tutorial.readthedocs.io>`_\\도 있습니다."

#~ msgid ""
#~ "The older PyGtk bindings for the "
#~ "`Gtk+ 2 toolkit <https://www.gtk.org>`_ have"
#~ " been implemented by James Henstridge; "
#~ "see <http://www.pygtk.org>."
#~ msgstr ""
#~ "`Gtk+ 2 툴킷 <https://www.gtk.org>`_\\을 위한 "
#~ "이전 PyGtk 바인딩은 James Henstridge가 구현했습니다;"
#~ " <http://www.pygtk.org>\\를 보세요."

#~ msgid "Kivy"
#~ msgstr "Kivy"

#~ msgid ""
#~ "`Kivy <https://kivy.org/>`_ is a cross-"
#~ "platform GUI library supporting both "
#~ "desktop operating systems (Windows, macOS, "
#~ "Linux) and mobile devices (Android, "
#~ "iOS).  It is written in Python and"
#~ " Cython, and can use a range of"
#~ " windowing backends."
#~ msgstr ""
#~ "`Kivy <https://kivy.org/>`_\\는 데스크톱 운영 체제(윈도우,"
#~ " macOS, 리눅스)와 모바일 장치(안드로이드, iOS)를 모두"
#~ " 지원하는 교차 플랫폼 GUI 라이브러리입니다. 이것은 "
#~ "파이썬과 Cython으로 작성되었으며 다양한 범위의 윈도우 백"
#~ " 엔드를 사용할 수 있습니다."

#~ msgid ""
#~ "Kivy is free and open source "
#~ "software distributed under the MIT "
#~ "license."
#~ msgstr "Kivy는 MIT 라이선스에 따라 배포되는 무료 공개 소스 소프트웨어입니다."

#~ msgid "FLTK"
#~ msgstr "FLTK"

#~ msgid ""
#~ "Python bindings for `the FLTK toolkit"
#~ " <http://www.fltk.org>`_, a simple yet "
#~ "powerful and mature cross-platform "
#~ "windowing system, are available from "
#~ "`the PyFLTK project "
#~ "<http://pyfltk.sourceforge.net>`_."
#~ msgstr ""
#~ "간단하면서도 강력하고 성숙한 교차 플랫폼 윈도우 시스템인"
#~ " `FLTK 툴킷 <http://www.fltk.org>`_\\용 파이썬 "
#~ "바인딩이 `PyFLTK 프로젝트 "
#~ "<http://pyfltk.sourceforge.net>`_\\에서 제공됩니다."

#~ msgid "OpenGL"
#~ msgstr "OpenGL"

#~ msgid "For OpenGL bindings, see `PyOpenGL <http://pyopengl.sourceforge.net>`_."
#~ msgstr "OpenGL 바인딩은 `PyOpenGL <http://pyopengl.sourceforge.net>`_\\을 참조하십시오."

#~ msgid ""
#~ "By installing the `PyObjc Objective-C "
#~ "bridge <https://pypi.org/project/pyobjc/>`_, Python "
#~ "programs can use Mac OS X's Cocoa"
#~ " libraries."
#~ msgstr ""
#~ "`PyObjc Objective-C 브리지 "
#~ "<https://pypi.org/project/pyobjc/>`_\\를 설치함으로써, 파이썬 "
#~ "프로그램은 맥 OS X의 Cocoa 라이브러리를 사용할 "
#~ "수 있습니다."

#~ msgid ""
#~ ":ref:`Pythonwin <windows-faq>` by Mark "
#~ "Hammond includes an interface to the "
#~ "Microsoft Foundation Classes and a "
#~ "Python programming environment that's written"
#~ " mostly in Python using the MFC "
#~ "classes."
#~ msgstr ""
#~ "Mark Hammond의 :ref:`Pythonwin <windows-"
#~ "faq>`\\에는 Microsoft Foundation Classes에 대한 "
#~ "인터페이스와 주로 파이썬으로 MFC 클래스를 사용하여 작성된"
#~ " 파이썬 프로그래밍 환경이 포함되어 있습니다."

#~ msgid ""
#~ "To get truly stand-alone applications,"
#~ " the Tcl scripts that form the "
#~ "library have to be integrated into "
#~ "the application as well. One tool "
#~ "supporting that is SAM (stand-alone "
#~ "modules), which is part of the Tix"
#~ " distribution (http://tix.sourceforge.net/)."
#~ msgstr ""
#~ "진정한 독립 실행형 응용 프로그램을 얻으려면, 라이브러리를"
#~ " 구성하는 Tcl 스크립트도 응용 프로그램에 통합해야 "
#~ "합니다. 이를 지원하는 한 가지 도구는 Tix "
#~ "배포판 (http://tix.sourceforge.net/)의 일부인 SAM(독립 "
#~ "실행형 모듈)입니다."

#~ msgid ""
#~ "Build Tix with SAM enabled, perform "
#~ "the appropriate call to :c:func:`Tclsam_init`,"
#~ " etc. inside Python's "
#~ ":file:`Modules/tkappinit.c`, and link with "
#~ "libtclsam and libtksam (you might "
#~ "include the Tix libraries as well)."
#~ msgstr ""
#~ "SAM이 활성화된 Tix를 빌드하고, 파이썬의 "
#~ ":file:`Modules/tkappinit.c` 내부에서 :c:func:`Tclsam_init` "
#~ "등을 적절하게 호출하고, libtclsam과 libtksam과 링크합니다"
#~ " (Tix 라이브러리도 포함할 수 있습니다)."

