# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2017, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-04-17 23:44+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: Dong-gweon Oh <flowdas@gmail.com>\n"
"Language-Team: Korean (https://python.flowdas.com)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.17.0\n"

#: ../../tutorial/stdlib.rst:5
msgid "Brief Tour of the Standard Library"
msgstr "표준 라이브러리 둘러보기"

#: ../../tutorial/stdlib.rst:11
msgid "Operating System Interface"
msgstr "운영 체제 인터페이스"

#: ../../tutorial/stdlib.rst:13
msgid ""
"The :mod:`os` module provides dozens of functions for interacting with "
"the operating system::"
msgstr ":mod:`os` 모듈은 운영 체제와 상호 작용하기 위한 수십 가지 함수들을 제공합니다::"

#: ../../tutorial/stdlib.rst:16
msgid ""
">>> import os\n"
">>> os.getcwd()      # Return the current working directory\n"
"'C:\\\\Python313'\n"
">>> os.chdir('/server/accesslogs')   # Change current working directory\n"
">>> os.system('mkdir today')   # Run the command mkdir in the system "
"shell\n"
"0"
msgstr ""

#: ../../tutorial/stdlib.rst:23
msgid ""
"Be sure to use the ``import os`` style instead of ``from os import *``.  "
"This will keep :func:`os.open` from shadowing the built-in :func:`open` "
"function which operates much differently."
msgstr ""
"``from os import *`` 대신에 ``import os`` 스타일을 사용해야 합니다. 그래야 :func:`os.open`"
" 이 내장 :func:`open` 을 가리는 것을 피할 수 있는데, 두 함수는 아주 다르게 동작합니다."

#: ../../tutorial/stdlib.rst:29
msgid ""
"The built-in :func:`dir` and :func:`help` functions are useful as "
"interactive aids for working with large modules like :mod:`os`::"
msgstr ""
":mod:`os` 와 같은 큰 모듈과 작업할 때, 내장 :func:`dir` 과 :func:`help` 함수는 대화형 도우미로 "
"쓸모가 있습니다."

#: ../../tutorial/stdlib.rst:32
msgid ""
">>> import os\n"
">>> dir(os)\n"
"<returns a list of all module functions>\n"
">>> help(os)\n"
"<returns an extensive manual page created from the module's docstrings>"
msgstr ""

#: ../../tutorial/stdlib.rst:38
msgid ""
"For daily file and directory management tasks, the :mod:`shutil` module "
"provides a higher level interface that is easier to use::"
msgstr "일상적인 파일과 디렉터리 관리 작업을 위해, :mod:`shutil` 모듈은 사용하기 쉬운 더 고수준의 인터페이스를 제공합니다::"

#: ../../tutorial/stdlib.rst:41
msgid ""
">>> import shutil\n"
">>> shutil.copyfile('data.db', 'archive.db')\n"
"'archive.db'\n"
">>> shutil.move('/build/executables', 'installdir')\n"
"'installdir'"
msgstr ""

#: ../../tutorial/stdlib.rst:51
msgid "File Wildcards"
msgstr "파일 와일드카드"

#: ../../tutorial/stdlib.rst:53
msgid ""
"The :mod:`glob` module provides a function for making file lists from "
"directory wildcard searches::"
msgstr ":mod:`glob` 모듈은 디렉터리 와일드카드 검색으로 파일 목록을 만드는 함수를 제공합니다::"

#: ../../tutorial/stdlib.rst:56
msgid ""
">>> import glob\n"
">>> glob.glob('*.py')\n"
"['primes.py', 'random.py', 'quote.py']"
msgstr ""

#: ../../tutorial/stdlib.rst:64
msgid "Command Line Arguments"
msgstr "명령행 인자"

#: ../../tutorial/stdlib.rst:66
#, fuzzy
msgid ""
"Common utility scripts often need to process command line arguments. "
"These arguments are stored in the :mod:`sys` module's *argv* attribute as"
" a list.  For instance, let's take the following :file:`demo.py` file::"
msgstr ""
"일반적인 유틸리티 스크립트는 종종 명령행 인자를 처리해야 할 필요가 있습니다. 이 인자들은 :mod:`sys` 모듈의 *argv* "
"어트리뷰트에 리스트로 저장됩니다. 예를 들어, 명령행에서 ``python demo.py one two three`` 를 실행하면 "
"다음과 같은 결과가 출력됩니다::"

#: ../../tutorial/stdlib.rst:70
msgid ""
"# File demo.py\n"
"import sys\n"
"print(sys.argv)"
msgstr ""

#: ../../tutorial/stdlib.rst:74
msgid ""
"Here is the output from running ``python demo.py one two three`` at the "
"command line::"
msgstr ""

#: ../../tutorial/stdlib.rst:77
msgid "['demo.py', 'one', 'two', 'three']"
msgstr ""

#: ../../tutorial/stdlib.rst:79
msgid ""
"The :mod:`argparse` module provides a more sophisticated mechanism to "
"process command line arguments.  The following script extracts one or "
"more filenames and an optional number of lines to be displayed::"
msgstr ""
":mod:`argparse` 모듈은 명령 줄 인자를 처리하는 더 정교한 메커니즘을 제공합니다. 다음 스크립트는 하나 이상의 파일명과"
" 선택적으로 표시할 줄 수를 추출합니다::"

#: ../../tutorial/stdlib.rst:83
msgid ""
"import argparse\n"
"\n"
"parser = argparse.ArgumentParser(\n"
"    prog='top',\n"
"    description='Show top lines from each file')\n"
"parser.add_argument('filenames', nargs='+')\n"
"parser.add_argument('-l', '--lines', type=int, default=10)\n"
"args = parser.parse_args()\n"
"print(args)"
msgstr ""

#: ../../tutorial/stdlib.rst:93
msgid ""
"When run at the command line with ``python top.py --lines=5 alpha.txt "
"beta.txt``, the script sets ``args.lines`` to ``5`` and "
"``args.filenames`` to ``['alpha.txt', 'beta.txt']``."
msgstr ""
"``python top.py --lines=5 alpha.txt beta.txt``\\를 사용하여 명령 줄에서 실행할 때, "
"스크립트는 ``args.lines``\\를 ``5``\\로, ``args.filenames``\\를 ``['alpha.txt', "
"'beta.txt']``\\로 설정합니다."

#: ../../tutorial/stdlib.rst:101
msgid "Error Output Redirection and Program Termination"
msgstr "에러 출력 리디렉션과 프로그램 종료"

#: ../../tutorial/stdlib.rst:103
msgid ""
"The :mod:`sys` module also has attributes for *stdin*, *stdout*, and "
"*stderr*. The latter is useful for emitting warnings and error messages "
"to make them visible even when *stdout* has been redirected::"
msgstr ""
":mod:`sys` 모듈은 *stdin*, *stdout*, *stderr* 어트리뷰트도 갖고 있습니다. 가장 마지막 것은 "
"*stdout* 이 리디렉트 되었을 때도 볼 수 있는 경고와 에러 메시지들을 출력하는데 쓸모가 있습니다::"

#: ../../tutorial/stdlib.rst:107
msgid ""
">>> sys.stderr.write('Warning, log file not found starting a new one\\n')"
"\n"
"Warning, log file not found starting a new one"
msgstr ""

#: ../../tutorial/stdlib.rst:110
msgid "The most direct way to terminate a script is to use ``sys.exit()``."
msgstr "스크립트를 종료하는 가장 직접적인 방법은 ``sys.exit()`` 를 쓰는 것입니다."

#: ../../tutorial/stdlib.rst:116
msgid "String Pattern Matching"
msgstr "문자열 패턴 매칭"

#: ../../tutorial/stdlib.rst:118
msgid ""
"The :mod:`re` module provides regular expression tools for advanced "
"string processing. For complex matching and manipulation, regular "
"expressions offer succinct, optimized solutions::"
msgstr ""
":mod:`re` 모듈은 고급 문자열 처리를 위한 정규식 도구들을 제공합니다. 복잡한 매칭과 조작을 위해, 정규식은 간결하고 "
"최적화된 솔루션을 제공합니다::"

#: ../../tutorial/stdlib.rst:122
msgid ""
">>> import re\n"
">>> re.findall(r'\\bf[a-z]*', 'which foot or hand fell fastest')\n"
"['foot', 'fell', 'fastest']\n"
">>> re.sub(r'(\\b[a-z]+) \\1', r'\\1', 'cat in the the hat')\n"
"'cat in the hat'"
msgstr ""

#: ../../tutorial/stdlib.rst:128
msgid ""
"When only simple capabilities are needed, string methods are preferred "
"because they are easier to read and debug::"
msgstr "단지 간단한 기능만 필요한 경우에는, 문자열 메서드들이 선호되는데 읽기 쉽고 디버깅이 쉽기 때문입니다::"

#: ../../tutorial/stdlib.rst:131
msgid ""
">>> 'tea for too'.replace('too', 'two')\n"
"'tea for two'"
msgstr ""

#: ../../tutorial/stdlib.rst:138
msgid "Mathematics"
msgstr "수학"

#: ../../tutorial/stdlib.rst:140
#, fuzzy
msgid ""
"The :mod:`math` module gives access to the underlying C library functions"
" for floating-point math::"
msgstr ":mod:`math` 모듈은 부동 소수점 연산을 위한 하부 C 라이브러리 함수들에 대한 액세스를 제공합니다."

#: ../../tutorial/stdlib.rst:143
msgid ""
">>> import math\n"
">>> math.cos(math.pi / 4)\n"
"0.70710678118654757\n"
">>> math.log(1024, 2)\n"
"10.0"
msgstr ""

#: ../../tutorial/stdlib.rst:149
msgid "The :mod:`random` module provides tools for making random selections::"
msgstr ":mod:`random` 모듈은 무작위 선택을 할 수 있는 도구들을 제공합니다::"

#: ../../tutorial/stdlib.rst:151
msgid ""
">>> import random\n"
">>> random.choice(['apple', 'pear', 'banana'])\n"
"'apple'\n"
">>> random.sample(range(100), 10)   # sampling without replacement\n"
"[30, 83, 16, 4, 8, 81, 41, 50, 18, 33]\n"
">>> random.random()    # random float from the interval [0.0, 1.0)\n"
"0.17970987693706186\n"
">>> random.randrange(6)    # random integer chosen from range(6)\n"
"4"
msgstr ""

#: ../../tutorial/stdlib.rst:161
msgid ""
"The :mod:`statistics` module calculates basic statistical properties (the"
" mean, median, variance, etc.) of numeric data::"
msgstr ":mod:`statistics` 모듈은 수치 데이터의 기본적인 통계적 특성들을 (평균, 중간값, 분산, 등등) 계산합니다."

#: ../../tutorial/stdlib.rst:164
msgid ""
">>> import statistics\n"
">>> data = [2.75, 1.75, 1.25, 0.25, 0.5, 1.25, 3.5]\n"
">>> statistics.mean(data)\n"
"1.6071428571428572\n"
">>> statistics.median(data)\n"
"1.25\n"
">>> statistics.variance(data)\n"
"1.3720238095238095"
msgstr ""

#: ../../tutorial/stdlib.rst:173
msgid ""
"The SciPy project <https://scipy.org> has many other modules for "
"numerical computations."
msgstr "SciPy 프로젝트 <https://scipy.org> 는 다른 수치 계산용 모듈들을 많이 갖고 있습니다."

#: ../../tutorial/stdlib.rst:179
msgid "Internet Access"
msgstr "인터넷 액세스"

#: ../../tutorial/stdlib.rst:181
msgid ""
"There are a number of modules for accessing the internet and processing "
"internet protocols. Two of the simplest are :mod:`urllib.request` for "
"retrieving data from URLs and :mod:`smtplib` for sending mail::"
msgstr ""
"인터넷을 액세스하고 인터넷 프로토콜들을 처리하는 많은 모듈이 있습니다. 가장 간단한 두 개는 URL에서 데이터를 읽어오는 "
":mod:`urllib.request` 와 메일을 보내는 :mod:`smtplib` 입니다::"

#: ../../tutorial/stdlib.rst:185
msgid ""
">>> from urllib.request import urlopen\n"
">>> with urlopen('http://worldtimeapi.org/api/timezone/etc/UTC.txt') as "
"response:\n"
"...     for line in response:\n"
"...         line = line.decode()             # Convert bytes to a str\n"
"...         if line.startswith('datetime'):\n"
"...             print(line.rstrip())         # Remove trailing newline\n"
"...\n"
"datetime: 2022-01-01T01:36:47.689215+00:00\n"
"\n"
">>> import smtplib\n"
">>> server = smtplib.SMTP('localhost')\n"
">>> server.sendmail('soothsayer@example.org', 'jcaesar@example.org',\n"
"... \"\"\"To: jcaesar@example.org\n"
"... From: soothsayer@example.org\n"
"...\n"
"... Beware the Ides of March.\n"
"... \"\"\")\n"
">>> server.quit()"
msgstr ""

#: ../../tutorial/stdlib.rst:204
msgid "(Note that the second example needs a mailserver running on localhost.)"
msgstr "(두 번째 예는 localhost 에서 메일 서버가 실행되고 있어야 한다는 것에 주의하세요.)"

#: ../../tutorial/stdlib.rst:210
msgid "Dates and Times"
msgstr "날짜와 시간"

#: ../../tutorial/stdlib.rst:212
msgid ""
"The :mod:`datetime` module supplies classes for manipulating dates and "
"times in both simple and complex ways. While date and time arithmetic is "
"supported, the focus of the implementation is on efficient member "
"extraction for output formatting and manipulation.  The module also "
"supports objects that are timezone aware. ::"
msgstr ""
":mod:`datetime` 모듈은 날짜와 시간을 조작하는 클래스들을 제공하는데, 간단한 방법과 복잡한 방법 모두 제공합니다. "
"날짜와 시간 산술이 지원되지만, 구현의 초점은 출력 포매팅과 조작을 위해 효율적으로 멤버를 추출하는 데에 맞춰져 있습니다. 모듈은 "
"시간대를 고려하는 객체들도 지원합니다. ::"

#: ../../tutorial/stdlib.rst:218
#, python-format
msgid ""
">>> # dates are easily constructed and formatted\n"
">>> from datetime import date\n"
">>> now = date.today()\n"
">>> now\n"
"datetime.date(2003, 12, 2)\n"
">>> now.strftime(\"%m-%d-%y. %d %b %Y is a %A on the %d day of %B.\")\n"
"'12-02-03. 02 Dec 2003 is a Tuesday on the 02 day of December.'\n"
"\n"
">>> # dates support calendar arithmetic\n"
">>> birthday = date(1964, 7, 31)\n"
">>> age = now - birthday\n"
">>> age.days\n"
"14368"
msgstr ""

#: ../../tutorial/stdlib.rst:236
msgid "Data Compression"
msgstr "데이터 압축"

#: ../../tutorial/stdlib.rst:238
msgid ""
"Common data archiving and compression formats are directly supported by "
"modules including: :mod:`zlib`, :mod:`gzip`, :mod:`bz2`, :mod:`lzma`, "
":mod:`zipfile` and :mod:`tarfile`. ::"
msgstr ""
"일반적인 데이터 보관 및 압축 형식들을 다음과 같은 모듈들이 직접 지원합니다: :mod:`zlib`, :mod:`gzip`, "
":mod:`bz2`, :mod:`lzma`, :mod:`zipfile`, :mod:`tarfile`. ::"

#: ../../tutorial/stdlib.rst:242
msgid ""
">>> import zlib\n"
">>> s = b'witch which has which witches wrist watch'\n"
">>> len(s)\n"
"41\n"
">>> t = zlib.compress(s)\n"
">>> len(t)\n"
"37\n"
">>> zlib.decompress(t)\n"
"b'witch which has which witches wrist watch'\n"
">>> zlib.crc32(s)\n"
"226805979"
msgstr ""

#: ../../tutorial/stdlib.rst:258
msgid "Performance Measurement"
msgstr "성능 측정"

#: ../../tutorial/stdlib.rst:260
msgid ""
"Some Python users develop a deep interest in knowing the relative "
"performance of different approaches to the same problem. Python provides "
"a measurement tool that answers those questions immediately."
msgstr ""
"일부 파이썬 사용자들은 같은 문제에 대한 다른 접근법들의 상대적인 성능을 파악하는데 깊은 관심을 두고 있습니다. 파이썬은 이런 "
"질문들에 즉시 답을 주는 측정 도구를 제공합니다."

#: ../../tutorial/stdlib.rst:264
msgid ""
"For example, it may be tempting to use the tuple packing and unpacking "
"feature instead of the traditional approach to swapping arguments. The "
":mod:`timeit` module quickly demonstrates a modest performance "
"advantage::"
msgstr ""
"예를 들어, 인자들을 맞교환하는 전통적인 방식 대신에, 튜플 패킹과 언 패킹을 사용하고자 하는 유혹을 느낄 수 있습니다. "
":mod:`timeit` 모듈은 적당한 성능 이점을 신속하게 보여줍니다::"

#: ../../tutorial/stdlib.rst:268
msgid ""
">>> from timeit import Timer\n"
">>> Timer('t=a; a=b; b=t', 'a=1; b=2').timeit()\n"
"0.57535828626024577\n"
">>> Timer('a,b = b,a', 'a=1; b=2').timeit()\n"
"0.54962537085770791"
msgstr ""

#: ../../tutorial/stdlib.rst:274
msgid ""
"In contrast to :mod:`timeit`'s fine level of granularity, the "
":mod:`profile` and :mod:`pstats` modules provide tools for identifying "
"time critical sections in larger blocks of code."
msgstr ""
":mod:`timeit` 의 정밀도와는 대조적으로, :mod:`profile` 과 :mod:`pstats` 모듈은 큰 블록의 "
"코드에서 시간 임계 섹션을 식별하기 위한 도구들을 제공합니다."

#: ../../tutorial/stdlib.rst:282
msgid "Quality Control"
msgstr "품질 관리"

#: ../../tutorial/stdlib.rst:284
msgid ""
"One approach for developing high quality software is to write tests for "
"each function as it is developed and to run those tests frequently during"
" the development process."
msgstr ""
"고품질의 소프트웨어를 개발하는 한 가지 접근법은 개발되는 각 함수에 대한 테스트를 작성하고, 그것들을 개발 프로세스 중에 자주 "
"실행하는 것입니다."

#: ../../tutorial/stdlib.rst:288
msgid ""
"The :mod:`doctest` module provides a tool for scanning a module and "
"validating tests embedded in a program's docstrings.  Test construction "
"is as simple as cutting-and-pasting a typical call along with its results"
" into the docstring. This improves the documentation by providing the "
"user with an example and it allows the doctest module to make sure the "
"code remains true to the documentation::"
msgstr ""
":mod:`doctest` 모듈은 모듈을 훑어보고 프로그램의 독스트링들에 내장된 테스트들을 검사하는 도구를 제공합니다. 테스트 "
"만들기는 평범한 호출을 그 결과와 함께 독스트링으로 복사해서 붙여넣기를 하는 수준으로 간단해집니다. 사용자에게 예제를 함께 제공해서"
" 설명서를 개선하고, doctest 모듈이 설명서에서 코드가 여전히 사실인지 확인하도록 합니다."

#: ../../tutorial/stdlib.rst:295
msgid ""
"def average(values):\n"
"    \"\"\"Computes the arithmetic mean of a list of numbers.\n"
"\n"
"    >>> print(average([20, 30, 70]))\n"
"    40.0\n"
"    \"\"\"\n"
"    return sum(values) / len(values)\n"
"\n"
"import doctest\n"
"doctest.testmod()   # automatically validate the embedded tests"
msgstr ""

#: ../../tutorial/stdlib.rst:306
msgid ""
"The :mod:`unittest` module is not as effortless as the :mod:`doctest` "
"module, but it allows a more comprehensive set of tests to be maintained "
"in a separate file::"
msgstr ""
":mod:`unittest` 모듈은 :mod:`doctest` 모듈만큼 쉬운 것은 아니지만, 더욱 포괄적인 테스트 집합을 별도의 "
"파일로 관리할 수 있게 합니다::"

#: ../../tutorial/stdlib.rst:310
msgid ""
"import unittest\n"
"\n"
"class TestStatisticalFunctions(unittest.TestCase):\n"
"\n"
"    def test_average(self):\n"
"        self.assertEqual(average([20, 30, 70]), 40.0)\n"
"        self.assertEqual(round(average([1, 5, 7]), 1), 4.3)\n"
"        with self.assertRaises(ZeroDivisionError):\n"
"            average([])\n"
"        with self.assertRaises(TypeError):\n"
"            average(20, 30, 70)\n"
"\n"
"unittest.main()  # Calling from the command line invokes all tests"
msgstr ""

#: ../../tutorial/stdlib.rst:328
msgid "Batteries Included"
msgstr "배터리가 포함됩니다"

#: ../../tutorial/stdlib.rst:330
msgid ""
"Python has a \"batteries included\" philosophy.  This is best seen "
"through the sophisticated and robust capabilities of its larger packages."
" For example:"
msgstr ""
"파이썬은 \"배터리가 포함됩니다\" 철학을 갖고 있습니다. 이는 더 큰 패키지의 정교하고 강력한 기능을 통해 가장 잘 나타납니다. "
"예를 들어:"

#: ../../tutorial/stdlib.rst:333
#, fuzzy
msgid ""
"The :mod:`xmlrpc.client` and :mod:`xmlrpc.server` modules make "
"implementing remote procedure calls into an almost trivial task.  Despite"
" the modules' names, no direct knowledge or handling of XML is needed."
msgstr ""
":mod:`xmlrpc.client` 와 :mod:`xmlrpc.server` 모듈은 원격 프로시저 호출을 구현하는 일을 거의 "
"사소한 일로 만듭니다. 모듈의 이름에도 불구하고, XML에 대한 직접적인 지식이나 처리가 필요하지 않습니다."

#: ../../tutorial/stdlib.rst:337
msgid ""
"The :mod:`email` package is a library for managing email messages, "
"including MIME and other :rfc:`2822`-based message documents. Unlike "
":mod:`smtplib` and :mod:`poplib` which actually send and receive "
"messages, the email package has a complete toolset for building or "
"decoding complex message structures (including attachments) and for "
"implementing internet encoding and header protocols."
msgstr ""
":mod:`email` 패키지는 MIME 및 기타 :rfc:`2822` 기반 메시지 문서를 포함하는 전자 메일 메시지를 관리하기 "
"위한 라이브러리입니다. 실제로 메시지를 보내고 받는 :mod:`smtplib` 와 :mod:`poplib` 와는 달리, email "
"패키지는 복잡한 메시지 구조 (첨부 파일 포함) 를 작성하거나 해독하고 인터넷 인코딩과 헤더 프로토콜을 구현하기 위한 완벽한 도구 "
"상자를 가지고 있습니다."

#: ../../tutorial/stdlib.rst:344
msgid ""
"The :mod:`json` package provides robust support for parsing this popular "
"data interchange format.  The :mod:`csv` module supports direct reading "
"and writing of files in Comma-Separated Value format, commonly supported "
"by databases and spreadsheets.  XML processing is supported by the "
":mod:`xml.etree.ElementTree`, :mod:`xml.dom` and :mod:`xml.sax` packages."
" Together, these modules and packages greatly simplify data interchange "
"between Python applications and other tools."
msgstr ""
":mod:`json` 패키지는 널리 사용되는 데이터 교환 형식을 파싱하기위한 강력한 지원을 제공합니다. :mod:`csv` 모듈은 "
"데이터베이스와 스프레드시트에서 일반적으로 지원되는 쉼표로 구분된 값 형식으로 파일을 직접 읽고 쓸 수 있도록 지원합니다. XML "
"처리는 :mod:`xml.etree.ElementTree`, :mod:`xml.dom` 및 :mod:`xml.sax` 패키지에 의해"
" 지원됩니다. 이러한 모듈과 패키지를 함께 사용하면 파이썬 응용 프로그램과 다른 도구 간의 데이터 교환이 크게 단순해집니다."

#: ../../tutorial/stdlib.rst:353
msgid ""
"The :mod:`sqlite3` module is a wrapper for the SQLite database library, "
"providing a persistent database that can be updated and accessed using "
"slightly nonstandard SQL syntax."
msgstr ""
":mod:`sqlite3` 모듈은 SQLite 데이터베이스 라이브러리의 래퍼인데, 약간 비표준 SQL 구문을 사용하여 업데이트되고 "
"액세스 될 수 있는 퍼시스턴트 데이터베이스를 제공합니다."

#: ../../tutorial/stdlib.rst:357
msgid ""
"Internationalization is supported by a number of modules including "
":mod:`gettext`, :mod:`locale`, and the :mod:`codecs` package."
msgstr ""
"국제화는 :mod:`gettext`, :mod:`locale`, 그리고 :mod:`codecs` 패키지를 포함한 많은 모듈에 의해 "
"지원됩니다."

#: ../../tutorial/stdlib.rst:27
msgid "built-in function"
msgstr ""

#: ../../tutorial/stdlib.rst:27
msgid "help"
msgstr ""

