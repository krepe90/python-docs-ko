# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2017, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-04-17 23:44+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: Dong-gweon Oh <flowdas@gmail.com>\n"
"Language-Team: Korean (https://python.flowdas.com)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.17.0\n"

#: ../../library/socketserver.rst:2
msgid ":mod:`!socketserver` --- A framework for network servers"
msgstr ":mod:`!socketserver` --- 네트워크 서버를 위한 프레임워크"

#: ../../library/socketserver.rst:7
msgid "**Source code:** :source:`Lib/socketserver.py`"
msgstr "**소스 코드:** :source:`Lib/socketserver.py`"

#: ../../library/socketserver.rst:11
msgid ""
"The :mod:`socketserver` module simplifies the task of writing network "
"servers."
msgstr ":mod:`socketserver` 모듈은 네트워크 서버 작성 작업을 단순화합니다."

#: ../../includes/wasm-notavail.rst:3
msgid "Availability"
msgstr "가용성"

#: ../../includes/wasm-notavail.rst:5
msgid ""
"This module does not work or is not available on WebAssembly. See :ref"
":`wasm-availability` for more information."
msgstr ""
"이 모듈은 웹어셈블리에서 작동하지 않거나 제공되지 않습니다. 자세한 내용은 :ref:`wasm-availability`\\을 "
"참조하세요."

#: ../../library/socketserver.rst:15
msgid "There are four basic concrete server classes:"
msgstr "다음과 같은 네 가지 기본 구상 서버 클래스가 있습니다:"

#: ../../library/socketserver.rst:20
msgid ""
"This uses the internet TCP protocol, which provides for continuous "
"streams of data between the client and server. If *bind_and_activate* is "
"true, the constructor automatically attempts to invoke "
":meth:`~BaseServer.server_bind` and :meth:`~BaseServer.server_activate`."
"  The other parameters are passed to the :class:`BaseServer` base class."
msgstr ""
"클라이언트와 서버 간에 연속적인 데이터 스트림을 제공하는 인터넷 TCP 프로토콜을 사용합니다. "
"*bind_and_activate*\\가 참이면, 생성자는 자동으로 :meth:`~BaseServer.server_bind`\\와 "
":meth:`~BaseServer.server_activate`\\를 호출하려고 시도합니다. 다른 매개 변수는 "
":class:`BaseServer` 베이스 클래스로 전달됩니다."

#: ../../library/socketserver.rst:30
msgid ""
"This uses datagrams, which are discrete packets of information that may "
"arrive out of order or be lost while in transit.  The parameters are the "
"same as for :class:`TCPServer`."
msgstr ""
"순서가 잘못되거나 전송 중 손실될 수 있는 이산적 정보 패킷인 데이터 그램을 사용합니다. 매개 변수는 "
":class:`TCPServer`\\와 같습니다."

#: ../../library/socketserver.rst:38
msgid ""
"These more infrequently used classes are similar to the TCP and UDP "
"classes, but use Unix domain sockets; they're not available on non-Unix "
"platforms.  The parameters are the same as for :class:`TCPServer`."
msgstr ""
"TCP와 UDP 클래스와 비슷하지만, 유닉스 도메인 소켓을 사용하는 자주 사용되지 않는 클래스입니다; 유닉스 이외의 플랫폼에서는 "
"사용할 수 없습니다. 매개 변수는 :class:`TCPServer`\\와 같습니다."

#: ../../library/socketserver.rst:44
msgid ""
"These four classes process requests :dfn:`synchronously`; each request "
"must be completed before the next request can be started.  This isn't "
"suitable if each request takes a long time to complete, because it "
"requires a lot of computation, or because it returns a lot of data which "
"the client is slow to process.  The solution is to create a separate "
"process or thread to handle each request; the :class:`ForkingMixIn` and "
":class:`ThreadingMixIn` mix-in classes can be used to support "
"asynchronous behaviour."
msgstr ""
"이 네 가지 클래스는 :dfn:`동기적으로 (synchronously)` 요청을 처리합니다; 다음 요청을 시작하기 전에 각 요청을 "
"완료해야 합니다. 계산이 많이 필요하거나 클라이언트가 처리하는 속도가 느리도록 데이터를 많이 반환하기 때문에 각 요청을 완료하는 데"
" 시간이 오래 걸리면 적합하지 않습니다. 해결책은 각 요청을 처리하기 위해 별도의 프로세스나 스레드를 만드는 것입니다; "
":class:`ForkingMixIn`\\과 :class:`ThreadingMixIn` 믹스인 클래스를 사용하여 비동기 동작을 "
"지원할 수 있습니다."

#: ../../library/socketserver.rst:52
msgid ""
"Creating a server requires several steps.  First, you must create a "
"request handler class by subclassing the :class:`BaseRequestHandler` "
"class and overriding its :meth:`~BaseRequestHandler.handle` method; this "
"method will process incoming requests.  Second, you must instantiate one "
"of the server classes, passing it the server's address and the request "
"handler class. It is recommended to use the server in a :keyword:`with` "
"statement. Then call the :meth:`~BaseServer.handle_request` or "
":meth:`~BaseServer.serve_forever` method of the server object to process "
"one or many requests.  Finally, call :meth:`~BaseServer.server_close` to "
"close the socket (unless you used a :keyword:`!with` statement)."
msgstr ""
"서버를 만들려면 몇 가지 단계가 필요합니다. 먼저, :class:`BaseRequestHandler` 클래스를 서브 클래싱하고 "
":meth:`~BaseRequestHandler.handle` 메서드를 재정의하여 요청 처리기 클래스를 만들어야 합니다; 이 "
"메서드는 들어오는 요청을 처리합니다. 둘째, 서버 주소와 요청 처리기 클래스를 전달하여 서버 클래스 중 하나를 인스턴스 화해야 "
"합니다. :keyword:`with` 문에서 서버를 사용하는 것이 좋습니다. 그런 다음 서버 객체의 "
":meth:`~BaseServer.handle_request`\\나 :meth:`~BaseServer.serve_forever` "
"메서드를 호출하여 하나 이상의 요청을 처리합니다. 마지막으로, (:keyword:`!with` 문을 사용하지 않았다면) "
":meth:`~BaseServer.server_close`\\를 호출하여 소켓을 닫습니다."

#: ../../library/socketserver.rst:64
msgid ""
"When inheriting from :class:`ThreadingMixIn` for threaded connection "
"behavior, you should explicitly declare how you want your threads to "
"behave on an abrupt shutdown.  The :class:`ThreadingMixIn` class defines "
"an attribute *daemon_threads*, which indicates whether or not the server "
"should wait for thread termination.  You should set the flag explicitly "
"if you would like threads to behave autonomously; the default is "
":const:`False`, meaning that Python will not exit until all threads "
"created by :class:`ThreadingMixIn` have exited."
msgstr ""
"스레드 연결 동작을 위해 :class:`ThreadingMixIn`\\에서 상속할 때, 갑작스러운 종료 시 스레드 작동 방식을 "
"명시적으로 선언해야 합니다. :class:`ThreadingMixIn` 클래스는 서버가 스레드 종료를 기다려야 하는지를 가리키는 "
"*daemon_threads* 어트리뷰트를 정의합니다. 스레드가 자율적으로 동작하게 하려면 플래그를 명시적으로 설정해야 합니다; "
"기본값은 :const:`False`\\인데, :class:`ThreadingMixIn`\\으로 만들어진 모든 스레드가 종료될 때까지"
" 파이썬이 종료되지 않음을 뜻합니다."

#: ../../library/socketserver.rst:73
msgid ""
"Server classes have the same external methods and attributes, no matter "
"what network protocol they use."
msgstr "서버 클래스는 사용하는 네트워크 프로토콜과 관계없이 같은 외부 메서드와 어트리뷰트를 갖습니다."

#: ../../library/socketserver.rst:78
msgid "Server Creation Notes"
msgstr "서버 생성 노트"

#: ../../library/socketserver.rst:80
msgid ""
"There are five classes in an inheritance diagram, four of which represent"
" synchronous servers of four types::"
msgstr "상속 다이어그램에는 5개의 클래스가 있으며, 그중 4개는 4가지 유형의 동기 서버를 나타냅니다::"

#: ../../library/socketserver.rst:83
msgid ""
"+------------+\n"
"| BaseServer |\n"
"+------------+\n"
"      |\n"
"      v\n"
"+-----------+        +------------------+\n"
"| TCPServer |------->| UnixStreamServer |\n"
"+-----------+        +------------------+\n"
"      |\n"
"      v\n"
"+-----------+        +--------------------+\n"
"| UDPServer |------->| UnixDatagramServer |\n"
"+-----------+        +--------------------+"
msgstr ""
"+------------+\n"
"| BaseServer |\n"
"+------------+\n"
"      |\n"
"      v\n"
"+-----------+        +------------------+\n"
"| TCPServer |------->| UnixStreamServer |\n"
"+-----------+        +------------------+\n"
"      |\n"
"      v\n"
"+-----------+        +--------------------+\n"
"| UDPServer |------->| UnixDatagramServer |\n"
"+-----------+        +--------------------+"

#: ../../library/socketserver.rst:97
msgid ""
"Note that :class:`UnixDatagramServer` derives from :class:`UDPServer`, "
"not from :class:`UnixStreamServer` --- the only difference between an IP "
"and a Unix server is the address family."
msgstr ""
":class:`UnixDatagramServer`\\는 :class:`UnixStreamServer`\\가 아니라 "
":class:`UDPServer`\\에서 파생됨에 유의하십시오 --- IP와 유닉스 서버의 유일한 차이점은 주소 패밀리입니다."

#: ../../library/socketserver.rst:105
msgid ""
"Forking and threading versions of each type of server can be created "
"using these mix-in classes.  For instance, :class:`ThreadingUDPServer` is"
" created as follows::"
msgstr ""
"이러한 믹스인 클래스를 사용하여 각 서버 유형의 포킹(forking)과 스레딩(threading) 버전을 만들 수 있습니다. 예를 "
"들어, :class:`ThreadingUDPServer`\\는 다음과 같이 만듭니다::"

#: ../../library/socketserver.rst:109
msgid ""
"class ThreadingUDPServer(ThreadingMixIn, UDPServer):\n"
"    pass"
msgstr ""
"class ThreadingUDPServer(ThreadingMixIn, UDPServer):\n"
"    pass"

#: ../../library/socketserver.rst:112
msgid ""
"The mix-in class comes first, since it overrides a method defined in "
":class:`UDPServer`.  Setting the various attributes also changes the "
"behavior of the underlying server mechanism."
msgstr ""
":class:`UDPServer`\\에 정의된 메서드를 재정의하므로, 믹스인 클래스가 먼저 옵니다. 다양한 어트리뷰트를 설정하면 "
"하부 서버 메커니즘의 동작도 변경됩니다."

#: ../../library/socketserver.rst:116
msgid ""
":class:`ForkingMixIn` and the Forking classes mentioned below are only "
"available on POSIX platforms that support :func:`~os.fork`."
msgstr ""
"아래 언급된 :class:`ForkingMixIn`\\과 Forking 클래스들은 :func:`~os.fork`\\를 지원하는 "
"POSIX 플랫폼에서만 사용할 수 있습니다."

#: ../../library/socketserver.rst:121
msgid ""
":meth:`ForkingMixIn.server_close <BaseServer.server_close>` waits until "
"all child processes complete, except if :attr:`block_on_close` attribute "
"is ``False``."
msgstr ""
":meth:`ForkingMixIn.server_close <BaseServer.server_close>`\\는 "
":attr:`block_on_close` 어트리뷰트가 ``False``\\인 경우를 제외하고 모든 자식 프로세스가 완료될 때까지 "
"대기합니다."

#: ../../library/socketserver.rst:125
msgid ""
":meth:`ThreadingMixIn.server_close <BaseServer.server_close>` waits until"
" all non-daemon threads complete, except if :attr:`block_on_close` "
"attribute is ``False``."
msgstr ""
":meth:`ThreadingMixIn.server_close <BaseServer.server_close>`\\는 "
":attr:`block_on_close` 어트리뷰트가 ``False``\\인 경우를 제외하고 모든 비 데몬 스레드가 완료될 때까지 "
"대기합니다."

#: ../../library/socketserver.rst:131
msgid ""
"For :class:`ThreadingMixIn` use daemonic threads by setting "
":data:`ThreadingMixIn.daemon_threads <daemon_threads>` to ``True`` to not"
" wait until threads complete."
msgstr ""

#: ../../library/socketserver.rst:137
msgid ""
":meth:`ForkingMixIn.server_close <BaseServer.server_close>` and "
":meth:`ThreadingMixIn.server_close <BaseServer.server_close>` now waits "
"until all child processes and non-daemonic threads complete. Add a new "
":attr:`ForkingMixIn.block_on_close <block_on_close>` class attribute to "
"opt-in for the pre-3.7 behaviour."
msgstr ""
":meth:`ForkingMixIn.server_close <BaseServer.server_close>`\\와 "
":meth:`ThreadingMixIn.server_close <BaseServer.server_close>`\\는 이제 모든 자식"
" 프로세스와 비 데몬 스레드가 완료될 때까지 대기합니다. 3.7 이전의 동작을 옵트인 하기 위해 새 "
":attr:`ForkingMixIn.block_on_close <block_on_close>` 클래스 어트리뷰트를 추가합니다."

#: ../../library/socketserver.rst:153
msgid "These classes are pre-defined using the mix-in classes."
msgstr "이 클래스들이 믹스인 클래스를 사용하여 미리 정의됩니다."

#: ../../library/socketserver.rst:155
msgid ""
"The ``ForkingUnixStreamServer`` and ``ForkingUnixDatagramServer`` classes"
" were added."
msgstr ""

#: ../../library/socketserver.rst:159
msgid ""
"To implement a service, you must derive a class from "
":class:`BaseRequestHandler` and redefine its "
":meth:`~BaseRequestHandler.handle` method. You can then run various "
"versions of the service by combining one of the server classes with your "
"request handler class.  The request handler class must be different for "
"datagram or stream services.  This can be hidden by using the handler "
"subclasses :class:`StreamRequestHandler` or "
":class:`DatagramRequestHandler`."
msgstr ""
"서비스를 구현하려면, :class:`BaseRequestHandler`\\에서 클래스를 파생시키고 "
":meth:`~BaseRequestHandler.handle` 메서드를 재정의해야 합니다. 그런 다음 서버 클래스 중 하나와 "
"여러분의 요청 처리기 클래스를 결합하여 다양한 버전의 서비스를 실행할 수 있습니다. 요청 처리기 클래스는 데이터 그램과 스트림 "
"서비스에서 달라야 합니다. 처리기 서브 클래스 :class:`StreamRequestHandler` 나 "
":class:`DatagramRequestHandler`\\를 사용하여 이 차이를 숨길 수 있습니다."

#: ../../library/socketserver.rst:167
msgid ""
"Of course, you still have to use your head!  For instance, it makes no "
"sense to use a forking server if the service contains state in memory "
"that can be modified by different requests, since the modifications in "
"the child process would never reach the initial state kept in the parent "
"process and passed to each child.  In this case, you can use a threading "
"server, but you will probably have to use locks to protect the integrity "
"of the shared data."
msgstr ""
"물론, 여전히 머리를 사용해야 합니다! 예를 들어, 서비스가 다른 요청으로 수정될 수 있는 메모리상의 상태를 포함할 때 포킹 서버를"
" 사용하는 것은 의미가 없습니다. 자식 프로세스에의 수정은 부모 프로세스에 유지된 초기 상태에 도달하여 각 자식에 전달되지 못하기 "
"때문입니다. 이 경우, 스레딩 서버를 사용할 수 있지만, 아마도 공유 데이터의 무결성을 보호하기 위해 록을 사용해야 합니다."

#: ../../library/socketserver.rst:174
msgid ""
"On the other hand, if you are building an HTTP server where all data is "
"stored externally (for instance, in the file system), a synchronous class"
" will essentially render the service \"deaf\" while one request is being "
"handled -- which may be for a very long time if a client is slow to "
"receive all the data it has requested.  Here a threading or forking "
"server is appropriate."
msgstr ""
"반면, 모든 데이터가 외부(예를 들어, 파일 시스템)에 저장되는 HTTP 서버를 구축한다면, 동기 클래스는 하나의 요청이 처리되는 "
"동안 실질적으로 서비스가 \"듣지 못하게\" 만듭니다 -- 클라이언트가 요청한 모든 데이터를 받는 속도가 느리다면 매우 오랜 시간이"
" 걸릴 수 있습니다. 이럴 때는 스레딩이나 포킹 서버가 적합합니다."

#: ../../library/socketserver.rst:180
msgid ""
"In some cases, it may be appropriate to process part of a request "
"synchronously, but to finish processing in a forked child depending on "
"the request data.  This can be implemented by using a synchronous server "
"and doing an explicit fork in the request handler class "
":meth:`~BaseRequestHandler.handle` method."
msgstr ""
"때에 따라, 요청의 일부를 동기적으로 처리하는 것이 좋지만, 요청 데이터에 따라 포크 된 자식에서 처리를 완료하는 것이 적절할 수 "
"있습니다. 이는 동기 서버를 사용하고 요청 처리기 클래스 :meth:`~BaseRequestHandler.handle` 메서드에서 "
"명시적 포크를 수행하여 구현할 수 있습니다."

#: ../../library/socketserver.rst:185
msgid ""
"Another approach to handling multiple simultaneous requests in an "
"environment that supports neither threads nor :func:`~os.fork` (or where "
"these are too expensive or inappropriate for the service) is to maintain "
"an explicit table of partially finished requests and to use "
":mod:`selectors` to decide which request to work on next (or whether to "
"handle a new incoming request).  This is particularly important for "
"stream services where each client can potentially be connected for a long"
" time (if threads or subprocesses cannot be used)."
msgstr ""
"스레드도 :func:`~os.fork`\\도 지원하지 않는 (또는 이것들이 서비스에 너무 비싸거나 부적절한) 환경에서 여러 동시 "
"요청을 처리하는 또 다른 방법은 부분적으로 완료된 요청의 명시적인 테이블을 유지하고 :mod:`selectors`\\를 사용하여 "
"다음에 작업할 요청을 (또는 새로 들어온 요청을 처리할지를) 결정하는 것입니다. 이는 (스레드나 서브 프로세스를 사용할 수 없다면)"
" 각 클라이언트가 오랫동안 연결될 수 있는 스트림 서비스에 특히 중요합니다."

#: ../../library/socketserver.rst:198
msgid "Server Objects"
msgstr "서버 객체"

#: ../../library/socketserver.rst:202
msgid ""
"This is the superclass of all Server objects in the module.  It defines "
"the interface, given below, but does not implement most of the methods, "
"which is done in subclasses.  The two parameters are stored in the "
"respective :attr:`server_address` and :attr:`RequestHandlerClass` "
"attributes."
msgstr ""
"이것은 모듈에 있는 모든 서버 객체의 슈퍼 클래스입니다. 아래에 주어진 인터페이스를 정의하지만, 대부분의 메서드를 구현하지 않고, "
"서브 클래스에서 구현됩니다. 두 개의 매개 변수는 각각 :attr:`server_address`\\와 "
":attr:`RequestHandlerClass` 어트리뷰트에 저장됩니다."

#: ../../library/socketserver.rst:210
msgid ""
"Return an integer file descriptor for the socket on which the server is "
"listening.  This function is most commonly passed to :mod:`selectors`, to"
" allow monitoring multiple servers in the same process."
msgstr ""
"서버가 리스닝 중인 소켓의 정수 파일 디스크립터를 반환합니다. 이 함수는 가장 일반적으로 같은 프로세스에서 여러 서버를 모니터링할 "
"수 있도록 :mod:`selectors`\\에 전달됩니다."

#: ../../library/socketserver.rst:217
msgid ""
"Process a single request.  This function calls the following methods in "
"order: :meth:`get_request`, :meth:`verify_request`, and "
":meth:`process_request`.  If the user-provided "
":meth:`~BaseRequestHandler.handle` method of the handler class raises an "
"exception, the server's :meth:`handle_error` method will be called.  If "
"no request is received within :attr:`timeout` seconds, "
":meth:`handle_timeout` will be called and :meth:`handle_request` will "
"return."
msgstr ""
"단일 요청을 처리합니다. 이 함수는 다음 메서드들을 차례로 호출합니다: :meth:`get_request`, "
":meth:`verify_request` 및 :meth:`process_request`. 처리기 클래스의 사용자 제공 "
":meth:`~BaseRequestHandler.handle` 메서드에서 예외가 발생하면, 서버의 "
":meth:`handle_error` 메서드가 호출됩니다. :attr:`timeout` 초 내에 요청이 수신되지 않으면, "
":meth:`handle_timeout`\\이 호출되고 :meth:`handle_request`\\는 반환합니다."

#: ../../library/socketserver.rst:229
msgid ""
"Handle requests until an explicit :meth:`shutdown` request.  Poll for "
"shutdown every *poll_interval* seconds. Ignores the :attr:`timeout` "
"attribute.  It also calls :meth:`service_actions`, which may be used by a"
" subclass or mixin to provide actions specific to a given service.  For "
"example, the :class:`ForkingMixIn` class uses :meth:`service_actions` to "
"clean up zombie child processes."
msgstr ""
"명시적인 :meth:`shutdown` 요청이 있을 때까지 요청을 처리합니다. *poll_interval* 초마다 shutdown을"
" 확인합니다. :attr:`timeout` 어트리뷰트를 무시합니다. 또한 :meth:`service_actions`\\를 "
"호출하는데, 서브 클래스나 믹스인이 주어진 서비스에 특정한 동작을 제공하기 위해 사용할 수 있습니다. 예를 들어, "
":class:`ForkingMixIn` 클래스는 :meth:`service_actions`\\를 사용하여 좀비 자식 프로세스를 "
"정리합니다."

#: ../../library/socketserver.rst:237
msgid "Added ``service_actions`` call to the ``serve_forever`` method."
msgstr "``serve_forever`` 메서드에 ``service_actions`` 호출을 추가했습니다."

#: ../../library/socketserver.rst:243
msgid ""
"This is called in the :meth:`serve_forever` loop. This method can be "
"overridden by subclasses or mixin classes to perform actions specific to "
"a given service, such as cleanup actions."
msgstr ""
":meth:`serve_forever` 루프에서 호출됩니다. 이 메서드는 서브 클래스나 믹스인 클래스에서 재정의되어 정리 조치와 "
"같은 지정된 서비스에 특정한 조치를 수행할 수 있습니다."

#: ../../library/socketserver.rst:251
msgid ""
"Tell the :meth:`serve_forever` loop to stop and wait until it does. "
":meth:`shutdown` must be called while :meth:`serve_forever` is running in"
" a different thread otherwise it will deadlock."
msgstr ""
":meth:`serve_forever` 루프가 정지하도록 하고 정지할 때까지 기다립니다. "
":meth:`serve_forever`\\가 다른 스레드에서 실행되는 동안 :meth:`shutdown`\\을 호출해야 합니다. "
"그렇지 않으면 교착 상태가 됩니다."

#: ../../library/socketserver.rst:258
msgid "Clean up the server. May be overridden."
msgstr "서버를 정리합니다. 재정의될 수 있습니다."

#: ../../library/socketserver.rst:263
msgid ""
"The family of protocols to which the server's socket belongs.  Common "
"examples are :const:`socket.AF_INET`, :const:`socket.AF_INET6`, and "
":const:`socket.AF_UNIX`.  Subclass the TCP or UDP server classes in this "
"module with class attribute ``address_family = AF_INET6`` set if you want"
" IPv6 server classes."
msgstr ""
"서버 소켓이 속한 프로토콜 패밀리. 일반적인 예는 :const:`socket.AF_INET`, "
":const:`socket.AF_INET6` 및 :const:`socket.AF_UNIX`\\입니다. IPv6 서버 클래스를 원하면"
" 클래스 어트리뷰트 ``address_family = AF_INET6``\\을 설정하여 이 모듈의 TCP 나 UDP 서버 클래스의 "
"서브클래스를 만드세요."

#: ../../library/socketserver.rst:272
msgid ""
"The user-provided request handler class; an instance of this class is "
"created for each request."
msgstr "사용자 제공 요청 처리기 클래스; 요청마다 이 클래스의 인스턴스가 만들어집니다."

#: ../../library/socketserver.rst:278
msgid ""
"The address on which the server is listening.  The format of addresses "
"varies depending on the protocol family; see the documentation for the "
":mod:`socket` module for details.  For internet protocols, this is a "
"tuple containing a string giving the address, and an integer port number:"
" ``('127.0.0.1', 80)``, for example."
msgstr ""
"서버가 리스닝 중인 주소. 주소 형식은 프로토콜 패밀리에 따라 다릅니다; 자세한 내용은 :mod:`socket` 모듈 설명서를 "
"참조하십시오. 인터넷 프로토콜의 경우, 주소를 제공하는 문자열과 정수 포트 번호를 포함하는 튜플입니다: ``('127.0.0.1',"
" 80)``, 예를 들어."

#: ../../library/socketserver.rst:287
msgid "The socket object on which the server will listen for incoming requests."
msgstr "서버가 들어오는 요청을 리스닝 할 소켓 객체."

#: ../../library/socketserver.rst:290
msgid "The server classes support the following class variables:"
msgstr "서버 클래스는 다음 클래스 변수를 지원합니다:"

#: ../../library/socketserver.rst:296
msgid ""
"Whether the server will allow the reuse of an address.  This defaults to "
":const:`False`, and can be set in subclasses to change the policy."
msgstr ""
"서버가 주소를 재사용하도록 허락하는지 여부. 기본값은 :const:`False`\\이며, 정책을 변경하기 위해 서브 클래스에서 "
"설정할 수 있습니다."

#: ../../library/socketserver.rst:302
msgid ""
"The size of the request queue.  If it takes a long time to process a "
"single request, any requests that arrive while the server is busy are "
"placed into a queue, up to :attr:`request_queue_size` requests.  Once the"
" queue is full, further requests from clients will get a \"Connection "
"denied\" error.  The default value is usually 5, but this can be "
"overridden by subclasses."
msgstr ""
"요청 큐의 크기. 단일 요청을 처리하는 데 시간이 오래 걸리면, 서버가 바쁠 때 도착한 요청은 최대 "
":attr:`request_queue_size` 요청까지 큐에 배치됩니다. 큐가 가득 차면, 클라이언트의 추가 요청은 \"연결 "
"거부(Connection denied)\" 에러를 받게 됩니다. 기본값은 일반적으로 5이지만, 서브 클래스가 재정의할 수 있습니다."

#: ../../library/socketserver.rst:311
msgid ""
"The type of socket used by the server; :const:`socket.SOCK_STREAM` and "
":const:`socket.SOCK_DGRAM` are two common values."
msgstr ""
"서버가 사용하는 소켓의 유형. :const:`socket.SOCK_STREAM`\\과 "
":const:`socket.SOCK_DGRAM`\\은 두 가지 흔한 값입니다."

#: ../../library/socketserver.rst:317
msgid ""
"Timeout duration, measured in seconds, or :const:`None` if no timeout is "
"desired.  If :meth:`handle_request` receives no incoming requests within "
"the timeout period, the :meth:`handle_timeout` method is called."
msgstr ""
"초 단위의 시간제한 기간, 또는 시간제한이 필요하지 않으면 :const:`None`. :meth:`handle_request`\\가"
" timeout 기간 내에 들어오는 요청을 받지 못하면, :meth:`handle_timeout` 메서드가 호출됩니다."

#: ../../library/socketserver.rst:322
msgid ""
"There are various server methods that can be overridden by subclasses of "
"base server classes like :class:`TCPServer`; these methods aren't useful "
"to external users of the server object."
msgstr ""
":class:`TCPServer`\\와 같은 베이스 서버 클래스의 서브 클래스가 재정의할 수 있는 다양한 서버 메서드가 있습니다; "
"이러한 메서드는 서버 객체의 외부 사용자에게는 유용하지 않습니다."

#: ../../library/socketserver.rst:331
msgid ""
"Actually processes the request by instantiating "
":attr:`RequestHandlerClass` and calling its "
":meth:`~BaseRequestHandler.handle` method."
msgstr ""
":attr:`RequestHandlerClass`\\를 인스턴스화하고 :meth:`~BaseRequestHandler.handle`"
" 메서드를 호출하여 실제로 요청을 처리합니다."

#: ../../library/socketserver.rst:337
msgid ""
"Must accept a request from the socket, and return a 2-tuple containing "
"the *new* socket object to be used to communicate with the client, and "
"the client's address."
msgstr ""
"소켓으로부터의 요청을 받아들이고, 클라이언트와 통신하는 데 사용될 *새* 소켓 객체와 클라이언트 주소를 포함하는 2-튜플을 반환해야"
" 합니다."

#: ../../library/socketserver.rst:344
msgid ""
"This function is called if the :meth:`~BaseRequestHandler.handle` method "
"of a :attr:`RequestHandlerClass` instance raises an exception.  The "
"default action is to print the traceback to standard error and continue "
"handling further requests."
msgstr ""
":attr:`RequestHandlerClass` 인스턴스의 :meth:`~BaseRequestHandler.handle` "
"메서드에서 예외가 발생하면 이 함수가 호출됩니다. 기본 액션은 표준 에러로 트레이스백을 인쇄하고 추가 요청을 계속 처리하는 "
"것입니다."

#: ../../library/socketserver.rst:349
msgid "Now only called for exceptions derived from the :exc:`Exception` class."
msgstr "이제 :exc:`Exception` 클래스에서 파생된 예외에 대해서만 호출됩니다."

#: ../../library/socketserver.rst:356
msgid ""
"This function is called when the :attr:`timeout` attribute has been set "
"to a value other than :const:`None` and the timeout period has passed "
"with no requests being received.  The default action for forking servers "
"is to collect the status of any child processes that have exited, while "
"in threading servers this method does nothing."
msgstr ""
"이 함수는 :attr:`timeout` 어트리뷰트가 :const:`None` 이외의 값으로 설정되고 요청이 수신되지 않은 채로 "
"시간제한 기간이 지나면 호출됩니다. 포킹 서버에서의 기본 액션은 종료한 모든 자식 프로세스의 상태를 수집하는 것이고, 반면에 스레딩"
" 서버에서는 이 메서드가 아무 작업도 수행하지 않습니다."

#: ../../library/socketserver.rst:365
msgid ""
"Calls :meth:`finish_request` to create an instance of the "
":attr:`RequestHandlerClass`.  If desired, this function can create a new "
"process or thread to handle the request; the :class:`ForkingMixIn` and "
":class:`ThreadingMixIn` classes do this."
msgstr ""
":meth:`finish_request`\\를 호출하여 :attr:`RequestHandlerClass` 의 인스턴스를 만듭니다. "
"원한다면, 이 함수는 요청을 처리하기 위해 새 프로세스나 스레드를 만들 수 있습니다; :class:`ForkingMixIn`\\과 "
":class:`ThreadingMixIn` 클래스가 그렇게 합니다."

#: ../../library/socketserver.rst:377
msgid ""
"Called by the server's constructor to activate the server.  The default "
"behavior for a TCP server just invokes :meth:`~socket.socket.listen` on "
"the server's socket.  May be overridden."
msgstr ""
"서버를 활성화하기 위해 서버의 생성자가 호출합니다. TCP 서버의 기본 동작은 단지 서버의 소켓에 대해 "
":meth:`~socket.socket.listen`\\을 호출합니다. 재정의될 수 있습니다."

#: ../../library/socketserver.rst:384
msgid ""
"Called by the server's constructor to bind the socket to the desired "
"address. May be overridden."
msgstr "소켓을 원하는 주소에 바인딩하기 위해 서버의 생성자가 호출합니다. 재정의될 수 있습니다."

#: ../../library/socketserver.rst:390
msgid ""
"Must return a Boolean value; if the value is :const:`True`, the request "
"will be processed, and if it's :const:`False`, the request will be "
"denied.  This function can be overridden to implement access controls for"
" a server. The default implementation always returns :const:`True`."
msgstr ""
"불리언 값을 반환해야 합니다; 값이 :const:`True`\\이면, 요청이 처리되고, :const:`False`\\이면, 요청이 "
"거부됩니다. 서버에 대한 액세스 제어를 구현하기 위해 이 함수를 재정의할 수 있습니다. 기본 구현은 항상 "
":const:`True`\\를 반환합니다."

#: ../../library/socketserver.rst:396
msgid ""
"Support for the :term:`context manager` protocol was added.  Exiting the "
"context manager is equivalent to calling :meth:`server_close`."
msgstr ""
":term:`컨텍스트 관리자 <context manager>` 프로토콜에 대한 지원이 추가되었습니다. 컨텍스트 관리자를 벗어나는 "
"것은 :meth:`server_close`\\를 호출하는 것과 동등합니다."

#: ../../library/socketserver.rst:402
msgid "Request Handler Objects"
msgstr "요청 처리기 객체"

#: ../../library/socketserver.rst:406
msgid ""
"This is the superclass of all request handler objects.  It defines the "
"interface, given below.  A concrete request handler subclass must define "
"a new :meth:`handle` method, and can override any of the other methods.  "
"A new instance of the subclass is created for each request."
msgstr ""
"이것은 모든 요청 처리기 객체의 슈퍼 클래스입니다. 아래에 주어진 인터페이스를 정의합니다. 구상 요청 처리기 서브 클래스는 새 "
":meth:`handle` 메서드를 정의해야 하며, 다른 메서드를 재정의할 수 있습니다. 각 요청에 대해 서브 클래스의 새 "
"인스턴스가 만들어집니다."

#: ../../library/socketserver.rst:415
msgid ""
"Called before the :meth:`handle` method to perform any initialization "
"actions required.  The default implementation does nothing."
msgstr "필요한 초기화 액션을 수행하기 위해 :meth:`handle` 메서드 전에 호출됩니다. 기본 구현은 아무것도 수행하지 않습니다."

#: ../../library/socketserver.rst:421
msgid ""
"This function must do all the work required to service a request.  The "
"default implementation does nothing.  Several instance attributes are "
"available to it; the request is available as :attr:`request`; the client "
"address as :attr:`client_address`; and the server instance as "
":attr:`server`, in case it needs access to per-server information."
msgstr ""
"이 함수는 요청을 서비스하는 데 필요한 모든 작업을 수행해야 합니다. 기본 구현은 아무것도 수행하지 않습니다. 몇 가지 인스턴스 "
"어트리뷰트를 사용할 수 있습니다; 요청은 :attr:`request`\\로 제공됩니다; 클라이언트 주소는 "
":attr:`client_address`\\로 제공됩니다; 서버별 정보에 액세스해야 하는 경우를 위해 서버 인스턴스는 "
":attr:`server`\\로 제공됩니다."

#: ../../library/socketserver.rst:427
msgid ""
"The type of :attr:`request` is different for datagram or stream services."
"  For stream services, :attr:`request` is a socket object; for datagram "
"services, :attr:`request` is a pair of string and socket."
msgstr ""
":attr:`request`\\의 형은 데이터 그램과 스트림 서비스에서 다릅니다. 스트림 서비스의 경우, "
":attr:`request`\\는 소켓 객체입니다; 데이터 그램 서비스의 경우, :attr:`request`\\는 문자열과 소켓 "
"쌍입니다."

#: ../../library/socketserver.rst:434
msgid ""
"Called after the :meth:`handle` method to perform any clean-up actions "
"required.  The default implementation does nothing.  If :meth:`setup` "
"raises an exception, this function will not be called."
msgstr ""
"필요한 정리 액션을 수행하기 위해 :meth:`handle` 메서드 이후에 호출됩니다. 기본 구현은 아무것도 수행하지 않습니다. "
":meth:`setup`\\에서 예외가 발생하면, 이 함수가 호출되지 않습니다."

#: ../../library/socketserver.rst:441
msgid ""
"The *new* :class:`socket.socket` object to be used to communicate with "
"the client."
msgstr ""

#: ../../library/socketserver.rst:447
msgid "Client address returned by :meth:`BaseServer.get_request`."
msgstr ""

#: ../../library/socketserver.rst:452
msgid ":class:`BaseServer` object used for handling the request."
msgstr ""

#: ../../library/socketserver.rst:458
msgid ""
"These :class:`BaseRequestHandler` subclasses override the "
":meth:`~BaseRequestHandler.setup` and :meth:`~BaseRequestHandler.finish` "
"methods, and provide :attr:`rfile` and :attr:`wfile` attributes."
msgstr ""
"이 :class:`BaseRequestHandler` 서브 클래스는 "
":meth:`~BaseRequestHandler.setup`\\과 :meth:`~BaseRequestHandler.finish` "
"메서드를 재정의하고, :attr:`rfile`\\과 :attr:`wfile` 어트리뷰트를 제공합니다."

#: ../../library/socketserver.rst:464
msgid ""
"A file object from which receives the request is read. Support the "
":class:`io.BufferedIOBase` readable interface."
msgstr "읽어서 요청을 수신할 파일 객체. :class:`io.BufferedIOBase` 읽기 가능 인터페이스를 지원합니다."

#: ../../library/socketserver.rst:469
msgid ""
"A file object to which the reply is written. Support the "
":class:`io.BufferedIOBase` writable interface"
msgstr "응답을 기록할 파일 객체. :class:`io.BufferedIOBase` 쓰기 가능 인터페이스를 지원합니다."

#: ../../library/socketserver.rst:473
msgid ""
":attr:`wfile` also supports the :class:`io.BufferedIOBase` writable "
"interface."
msgstr ":attr:`wfile` 도 :class:`io.BufferedIOBase` 쓰기 가능 인터페이스를 지원합니다."

#: ../../library/socketserver.rst:479
msgid "Examples"
msgstr "예"

#: ../../library/socketserver.rst:482
msgid ":class:`socketserver.TCPServer` Example"
msgstr ":class:`socketserver.TCPServer` 예"

#: ../../library/socketserver.rst:484 ../../library/socketserver.rst:595
msgid "This is the server side::"
msgstr "이것은 서버 쪽입니다::"

#: ../../library/socketserver.rst:486
#, python-brace-format
msgid ""
"import socketserver\n"
"\n"
"class MyTCPHandler(socketserver.BaseRequestHandler):\n"
"    \"\"\"\n"
"    The request handler class for our server.\n"
"\n"
"    It is instantiated once per connection to the server, and must\n"
"    override the handle() method to implement communication to the\n"
"    client.\n"
"    \"\"\"\n"
"\n"
"    def handle(self):\n"
"        # self.request is the TCP socket connected to the client\n"
"        pieces = [b'']\n"
"        total = 0\n"
"        while b'\\n' not in pieces[-1] and total < 10_000:\n"
"            pieces.append(self.request.recv(2000))\n"
"            total += len(pieces[-1])\n"
"        self.data = b''.join(pieces)\n"
"        print(f\"Received from {self.client_address[0]}:\")\n"
"        print(self.data.decode(\"utf-8\"))\n"
"        # just send back the same data, but upper-cased\n"
"        self.request.sendall(self.data.upper())\n"
"        # after we return, the socket will be closed.\n"
"\n"
"if __name__ == \"__main__\":\n"
"    HOST, PORT = \"localhost\", 9999\n"
"\n"
"    # Create the server, binding to localhost on port 9999\n"
"    with socketserver.TCPServer((HOST, PORT), MyTCPHandler) as server:\n"
"        # Activate the server; this will keep running until you\n"
"        # interrupt the program with Ctrl-C\n"
"        server.serve_forever()"
msgstr ""
"import socketserver\n"
"\n"
"class MyTCPHandler(socketserver.BaseRequestHandler):\n"
"    \"\"\"\n"
"    서버의 요청 처리기 클래스.\n"
"\n"
"    서버 연결마다 한 번 인스턴스화되며, 클라이언트와의\n"
"    통신을 구현하기 위해 handle() 메서드를 재정의해야\n"
"    합니다.\n"
"    \"\"\"\n"
"\n"
"    def handle(self):\n"
"        # self.request는 클라이언트에 연결된 TCP 소켓입니다\n"
"        pieces = [b'']\n"
"        total = 0\n"
"        while b'\\n' not in pieces[-1] and total < 10_000:\n"
"            pieces.append(self.request.recv(2000))\n"
"            total += len(pieces[-1])\n"
"        self.data = b''.join(pieces)\n"
"        print(f\"Received from {self.client_address[0]}:\")\n"
"        print(self.data.decode(\"utf-8\"))\n"
"        # 단지 같은 데이터를 다시 보내지만, 대문자로 변환합니다\n"
"        self.request.sendall(self.data.upper())\n"
"        # 반환 후에, 소켓은 닫힙니다.\n"
"\n"
"if __name__ == \"__main__\":\n"
"    HOST, PORT = \"localhost\", 9999\n"
"\n"
"    # 포트 9999에서 localhost에 바인딩하여 서버를 만듭니다\n"
"    with socketserver.TCPServer((HOST, PORT), MyTCPHandler) as server:\n"
"        # 서버를 활성화합니다; Ctrl-C를 사용하여 프로그램을 중단할 때까지 계속\n"
"        # 실행됩니다.\n"
"        server.serve_forever()"

#: ../../library/socketserver.rst:520
msgid ""
"An alternative request handler class that makes use of streams (file-like"
" objects that simplify communication by providing the standard file "
"interface)::"
msgstr "스트림(표준 파일 인터페이스를 제공하여 통신을 단순화하는 파일류 객체)을 사용하는 대체 요청 처리기 클래스::"

#: ../../library/socketserver.rst:523
#, python-brace-format
msgid ""
"class MyTCPHandler(socketserver.StreamRequestHandler):\n"
"\n"
"    def handle(self):\n"
"        # self.rfile is a file-like object created by the handler.\n"
"        # We can now use e.g. readline() instead of raw recv() calls.\n"
"        # We limit ourselves to 10000 bytes to avoid abuse by the sender."
"\n"
"        self.data = self.rfile.readline(10000).rstrip()\n"
"        print(f\"{self.client_address[0]} wrote:\")\n"
"        print(self.data.decode(\"utf-8\"))\n"
"        # Likewise, self.wfile is a file-like object used to write back\n"
"        # to the client\n"
"        self.wfile.write(self.data.upper())"
msgstr ""
"class MyTCPHandler(socketserver.StreamRequestHandler):\n"
"\n"
"    def handle(self):\n"
"        # self.rfile은 처리기에 의해 만들어진 파일류 객체입니다.\n"
"        # 이제 예를 들어 원시 recv() 호출 대신 readline()을 사용할 수 있습니다\n"
"        # 발신자의 악용을 방지하기 위해 10000 바이트로 제한합니다.\n"
"        self.data = self.rfile.readline(10000).rstrip()\n"
"        print(f\"{self.client_address[0]} wrote:\")\n"
"        print(self.data.decode(\"utf-8\"))\n"
"        # 마찬가지로, self.wfile은 클라이언트로 다시 쓰는 데\n"
"        # 사용되는 파일류 객체입니다\n"
"        self.wfile.write(self.data.upper())"

#: ../../library/socketserver.rst:536
msgid ""
"The difference is that the ``readline()`` call in the second handler will"
" call ``recv()`` multiple times until it encounters a newline character, "
"while the the first handler had to use a ``recv()`` loop to accumulate "
"data until a newline itself.  If it had just used a single ``recv()`` "
"without the loop it would just have returned what has been received so "
"far from the client. TCP is stream based: data arrives in the order it "
"was sent, but there no correlation between client ``send()`` or "
"``sendall()`` calls and the number of ``recv()`` calls on the server "
"required to receive it."
msgstr ""

#: ../../library/socketserver.rst:546 ../../library/socketserver.rst:619
msgid "This is the client side::"
msgstr "이것은 클라이언트 쪽입니다::"

#: ../../library/socketserver.rst:548
msgid ""
"import socket\n"
"import sys\n"
"\n"
"HOST, PORT = \"localhost\", 9999\n"
"data = \" \".join(sys.argv[1:])\n"
"\n"
"# Create a socket (SOCK_STREAM means a TCP socket)\n"
"with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:\n"
"    # Connect to server and send data\n"
"    sock.connect((HOST, PORT))\n"
"    sock.sendall(bytes(data, \"utf-8\"))\n"
"    sock.sendall(b\"\\n\")\n"
"\n"
"    # Receive data from the server and shut down\n"
"    received = str(sock.recv(1024), \"utf-8\")\n"
"\n"
"print(\"Sent:    \", data)\n"
"print(\"Received:\", received)"
msgstr ""
"import socket\n"
"import sys\n"
"\n"
"HOST, PORT = \"localhost\", 9999\n"
"data = \" \".join(sys.argv[1:])\n"
"\n"
"# 소켓을 만듭니다 (SOCK_STREAM은 TCP 소켓을 의미합니다)\n"
"with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:\n"
"    # 서버에 연결하고 데이터를 전송합니다\n"
"    sock.connect((HOST, PORT))\n"
"    sock.sendall(bytes(data, \"utf-8\"))\n"
"    sock.sendall(b\"\\n\")\n"
"\n"
"    # 서버에서 데이터를 수신하고 종료합니다\n"
"    received = str(sock.recv(1024), \"utf-8\")\n"
"\n"
"print(\"Sent:    \", data)\n"
"print(\"Received:\", received)"

#: ../../library/socketserver.rst:568 ../../library/socketserver.rst:694
msgid "The output of the example should look something like this:"
msgstr "예제의 결과는 다음과 같아야 합니다:"

#: ../../library/socketserver.rst:570
msgid "Server:"
msgstr "서버:"

#: ../../library/socketserver.rst:572
msgid ""
"$ python TCPServer.py\n"
"127.0.0.1 wrote:\n"
"b'hello world with TCP'\n"
"127.0.0.1 wrote:\n"
"b'python is nice'"
msgstr ""
"$ python TCPServer.py\n"
"127.0.0.1 wrote:\n"
"b'hello world with TCP'\n"
"127.0.0.1 wrote:\n"
"b'python is nice'"

#: ../../library/socketserver.rst:580
msgid "Client:"
msgstr "클라이언트:"

#: ../../library/socketserver.rst:582
msgid ""
"$ python TCPClient.py hello world with TCP\n"
"Sent:     hello world with TCP\n"
"Received: HELLO WORLD WITH TCP\n"
"$ python TCPClient.py python is nice\n"
"Sent:     python is nice\n"
"Received: PYTHON IS NICE"
msgstr ""
"$ python TCPClient.py hello world with TCP\n"
"Sent:     hello world with TCP\n"
"Received: HELLO WORLD WITH TCP\n"
"$ python TCPClient.py python is nice\n"
"Sent:     python is nice\n"
"Received: PYTHON IS NICE"

#: ../../library/socketserver.rst:593
msgid ":class:`socketserver.UDPServer` Example"
msgstr ":class:`socketserver.UDPServer` 예"

#: ../../library/socketserver.rst:597
#, python-brace-format
msgid ""
"import socketserver\n"
"\n"
"class MyUDPHandler(socketserver.BaseRequestHandler):\n"
"    \"\"\"\n"
"    This class works similar to the TCP handler class, except that\n"
"    self.request consists of a pair of data and client socket, and since\n"
"    there is no connection the client address must be given explicitly\n"
"    when sending data back via sendto().\n"
"    \"\"\"\n"
"\n"
"    def handle(self):\n"
"        data = self.request[0].strip()\n"
"        socket = self.request[1]\n"
"        print(f\"{self.client_address[0]} wrote:\")\n"
"        print(data)\n"
"        socket.sendto(data.upper(), self.client_address)\n"
"\n"
"if __name__ == \"__main__\":\n"
"    HOST, PORT = \"localhost\", 9999\n"
"    with socketserver.UDPServer((HOST, PORT), MyUDPHandler) as server:\n"
"        server.serve_forever()"
msgstr ""
"import socketserver\n"
"\n"
"class MyUDPHandler(socketserver.BaseRequestHandler):\n"
"    \"\"\"\n"
"    self.request가 데이터와 클라이언트 소켓의 쌍으로 구성되고 연결이\n"
"    없기 때문에 sendto()를 통해 데이터를 다시 보낼 때 클라이언트 주소를\n"
"    명시적으로 제공해야 한다는 점을 제외하면, 이 클래스는 TCP 처리기 클래스와\n"
"    유사하게 작동합니다.\n"
"    \"\"\"\n"
"\n"
"    def handle(self):\n"
"        data = self.request[0].strip()\n"
"        socket = self.request[1]\n"
"        print(f\"{self.client_address[0]} wrote:\")\n"
"        print(data)\n"
"        socket.sendto(data.upper(), self.client_address)\n"
"\n"
"if __name__ == \"__main__\":\n"
"    HOST, PORT = \"localhost\", 9999\n"
"    with socketserver.UDPServer((HOST, PORT), MyUDPHandler) as server:\n"
"        server.serve_forever()"

#: ../../library/socketserver.rst:621
msgid ""
"import socket\n"
"import sys\n"
"\n"
"HOST, PORT = \"localhost\", 9999\n"
"data = \" \".join(sys.argv[1:])\n"
"\n"
"# SOCK_DGRAM is the socket type to use for UDP sockets\n"
"sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n"
"\n"
"# As you can see, there is no connect() call; UDP has no connections.\n"
"# Instead, data is directly sent to the recipient via sendto().\n"
"sock.sendto(bytes(data + \"\\n\", \"utf-8\"), (HOST, PORT))\n"
"received = str(sock.recv(1024), \"utf-8\")\n"
"\n"
"print(\"Sent:    \", data)\n"
"print(\"Received:\", received)"
msgstr ""
"import socket\n"
"import sys\n"
"\n"
"HOST, PORT = \"localhost\", 9999\n"
"data = \" \".join(sys.argv[1:])\n"
"\n"
"# SOCK_DGRAM은 UDP 소켓으로 사용할 소켓 유형입니다\n"
"sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n"
"\n"
"# 보시다시피, connect() 호출은 없습니다; UDP는 연결이 없습니다.\n"
"# 대신, sendto()를 통해 데이터를 수신자에게 직접 보냅니다.\n"
"sock.sendto(bytes(data + \"\\n\", \"utf-8\"), (HOST, PORT))\n"
"received = str(sock.recv(1024), \"utf-8\")\n"
"\n"
"print(\"Sent:    \", data)\n"
"print(\"Received:\", received)"

#: ../../library/socketserver.rst:638
msgid ""
"The output of the example should look exactly like for the TCP server "
"example."
msgstr "예제의 출력은 TCP 서버 예제와 정확히 같아야 합니다."

#: ../../library/socketserver.rst:642
msgid "Asynchronous Mixins"
msgstr "비동기 믹스인"

#: ../../library/socketserver.rst:644
msgid ""
"To build asynchronous handlers, use the :class:`ThreadingMixIn` and "
":class:`ForkingMixIn` classes."
msgstr ""
"비동기 처리기를 구축하려면, :class:`ThreadingMixIn` 과 :class:`ForkingMixIn` 클래스를 "
"사용하십시오."

#: ../../library/socketserver.rst:647
msgid "An example for the :class:`ThreadingMixIn` class::"
msgstr ":class:`ThreadingMixIn` 클래스의 예::"

#: ../../library/socketserver.rst:649
#, python-brace-format
msgid ""
"import socket\n"
"import threading\n"
"import socketserver\n"
"\n"
"class ThreadedTCPRequestHandler(socketserver.BaseRequestHandler):\n"
"\n"
"    def handle(self):\n"
"        data = str(self.request.recv(1024), 'ascii')\n"
"        cur_thread = threading.current_thread()\n"
"        response = bytes(\"{}: {}\".format(cur_thread.name, data), "
"'ascii')\n"
"        self.request.sendall(response)\n"
"\n"
"class ThreadedTCPServer(socketserver.ThreadingMixIn, "
"socketserver.TCPServer):\n"
"    pass\n"
"\n"
"def client(ip, port, message):\n"
"    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:\n"
"        sock.connect((ip, port))\n"
"        sock.sendall(bytes(message, 'ascii'))\n"
"        response = str(sock.recv(1024), 'ascii')\n"
"        print(\"Received: {}\".format(response))\n"
"\n"
"if __name__ == \"__main__\":\n"
"    # Port 0 means to select an arbitrary unused port\n"
"    HOST, PORT = \"localhost\", 0\n"
"\n"
"    server = ThreadedTCPServer((HOST, PORT), ThreadedTCPRequestHandler)\n"
"    with server:\n"
"        ip, port = server.server_address\n"
"\n"
"        # Start a thread with the server -- that thread will then start "
"one\n"
"        # more thread for each request\n"
"        server_thread = threading.Thread(target=server.serve_forever)\n"
"        # Exit the server thread when the main thread terminates\n"
"        server_thread.daemon = True\n"
"        server_thread.start()\n"
"        print(\"Server loop running in thread:\", server_thread.name)\n"
"\n"
"        client(ip, port, \"Hello World 1\")\n"
"        client(ip, port, \"Hello World 2\")\n"
"        client(ip, port, \"Hello World 3\")\n"
"\n"
"        server.shutdown()"
msgstr ""
"import socket\n"
"import threading\n"
"import socketserver\n"
"\n"
"class ThreadedTCPRequestHandler(socketserver.BaseRequestHandler):\n"
"\n"
"    def handle(self):\n"
"        data = str(self.request.recv(1024), 'ascii')\n"
"        cur_thread = threading.current_thread()\n"
"        response = bytes(\"{}: {}\".format(cur_thread.name, data), "
"'ascii')\n"
"        self.request.sendall(response)\n"
"\n"
"class ThreadedTCPServer(socketserver.ThreadingMixIn, "
"socketserver.TCPServer):\n"
"    pass\n"
"\n"
"def client(ip, port, message):\n"
"    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:\n"
"        sock.connect((ip, port))\n"
"        sock.sendall(bytes(message, 'ascii'))\n"
"        response = str(sock.recv(1024), 'ascii')\n"
"        print(\"Received: {}\".format(response))\n"
"\n"
"if __name__ == \"__main__\":\n"
"    # 포트 0은 임의의 미사용 포트를 선택하는 것을 의미합니다\n"
"    HOST, PORT = \"localhost\", 0\n"
"\n"
"    server = ThreadedTCPServer((HOST, PORT), ThreadedTCPRequestHandler)\n"
"    with server:\n"
"        ip, port = server.server_address\n"
"\n"
"        # 서버로 스레드를 시작합니다 -- 그런 다음 그 스레드가 요청마다 스레드를 하나씩 더\n"
"        # 시작합니다\n"
"        server_thread = threading.Thread(target=server.serve_forever)\n"
"        # 메인 스레드가 종료할 때 서버 스레드를 종료합니다\n"
"        server_thread.daemon = True\n"
"        server_thread.start()\n"
"        print(\"Server loop running in thread:\", server_thread.name)\n"
"\n"
"        client(ip, port, \"Hello World 1\")\n"
"        client(ip, port, \"Hello World 2\")\n"
"        client(ip, port, \"Hello World 3\")\n"
"\n"
"        server.shutdown()"

#: ../../library/socketserver.rst:696
msgid ""
"$ python ThreadedTCPServer.py\n"
"Server loop running in thread: Thread-1\n"
"Received: Thread-2: Hello World 1\n"
"Received: Thread-3: Hello World 2\n"
"Received: Thread-4: Hello World 3"
msgstr ""
"$ python ThreadedTCPServer.py\n"
"Server loop running in thread: Thread-1\n"
"Received: Thread-2: Hello World 1\n"
"Received: Thread-3: Hello World 2\n"
"Received: Thread-4: Hello World 3"

#: ../../library/socketserver.rst:705
msgid ""
"The :class:`ForkingMixIn` class is used in the same way, except that the "
"server will spawn a new process for each request. Available only on POSIX"
" platforms that support :func:`~os.fork`."
msgstr ""
":class:`ForkingMixIn` 클래스는 서버가 요청마다 새 프로세스를 생성한다는 점을 제외하고 같은 방식으로 사용됩니다. "
":func:`~os.fork`\\를 지원하는 POSIX 플랫폼에서만 사용 가능합니다."

#~ msgid ""
#~ ":meth:`socketserver.ThreadingMixIn.server_close` waits "
#~ "until all non-daemon threads complete,"
#~ " except if "
#~ ":attr:`socketserver.ThreadingMixIn.block_on_close` attribute "
#~ "is false. Use daemonic threads by "
#~ "setting :data:`ThreadingMixIn.daemon_threads` to "
#~ "``True`` to not wait until threads "
#~ "complete."
#~ msgstr ""
#~ ":meth:`socketserver.ThreadingMixIn.server_close`\\는 "
#~ ":attr:`socketserver.ThreadingMixIn.block_on_close` 어트리뷰트가 "
#~ "거짓인 경우를 제외하고 모든 비 데몬 스레드가 "
#~ "완료될 때까지 대기합니다. 스레드가 완료될 때까지 기다리지"
#~ " 않도록 하려면 :data:`ThreadingMixIn.daemon_threads`\\를 "
#~ "``True``\\로 설정하여 데몬 스레드를 사용하십시오."

#~ msgid ""
#~ "The :attr:`rfile` attributes of both "
#~ "classes support the :class:`io.BufferedIOBase` "
#~ "readable interface, and "
#~ ":attr:`DatagramRequestHandler.wfile` supports the "
#~ ":class:`io.BufferedIOBase` writable interface."
#~ msgstr ""
#~ "두 클래스의 :attr:`rfile` 어트리뷰트는 "
#~ ":class:`io.BufferedIOBase` 읽기 가능 인터페이스를 지원하고,"
#~ " :attr:`DatagramRequestHandler.wfile`\\은 "
#~ ":class:`io.BufferedIOBase` 쓰기 가능 인터페이스를 지원합니다."

#~ msgid ""
#~ "The difference is that the "
#~ "``readline()`` call in the second "
#~ "handler will call ``recv()`` multiple "
#~ "times until it encounters a newline "
#~ "character, while the single ``recv()`` "
#~ "call in the first handler will "
#~ "just return what has been sent "
#~ "from the client in one ``sendall()`` "
#~ "call."
#~ msgstr ""
#~ "차이점은 첫 번째 처리기에서는 단일 ``recv()`` 호출이"
#~ " 클라이언트에서 한 번의 ``sendall()`` 호출로 보낸"
#~ " 것을 반환하는 반면, 두 번째 처리기의 "
#~ "``readline()`` 호출은 줄 바꿈 문자를 만날 때까지"
#~ " ``recv()``\\를 여러 번 호출한다는 것입니다."

