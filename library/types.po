# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2017, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-04-17 23:44+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: Dong-gweon Oh <flowdas@gmail.com>\n"
"Language-Team: Korean (https://python.flowdas.com)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.17.0\n"

#: ../../library/types.rst:2
msgid ":mod:`!types` --- Dynamic type creation and names for built-in types"
msgstr ":mod:`!types` --- 동적 형 생성과 내장형 이름"

#: ../../library/types.rst:7
msgid "**Source code:** :source:`Lib/types.py`"
msgstr "**소스 코드:** :source:`Lib/types.py`"

#: ../../library/types.rst:11
msgid ""
"This module defines utility functions to assist in dynamic creation of "
"new types."
msgstr "이 모듈은 새로운 형의 동적 생성을 지원하는 유틸리티 함수를 정의합니다."

#: ../../library/types.rst:14
msgid ""
"It also defines names for some object types that are used by the standard"
" Python interpreter, but not exposed as builtins like :class:`int` or "
":class:`str` are."
msgstr ""
"표준 파이썬 인터프리터가 사용하지만, :class:`int`\\나 :class:`str`\\처럼 내장으로 노출되지 않는 일부 객체 "
"형의 이름도 정의합니다."

#: ../../library/types.rst:18
msgid ""
"Finally, it provides some additional type-related utility classes and "
"functions that are not fundamental enough to be builtins."
msgstr "마지막으로, 내장되기에 충분히 기본적이지 않은 몇 가지 추가 형 관련 유틸리티 클래스와 함수를 제공합니다."

#: ../../library/types.rst:23
msgid "Dynamic Type Creation"
msgstr "동적 형 생성"

#: ../../library/types.rst:27
msgid "Creates a class object dynamically using the appropriate metaclass."
msgstr "적절한 메타 클래스를 사용하여 동적으로 클래스 객체를 만듭니다."

#: ../../library/types.rst:29
msgid ""
"The first three arguments are the components that make up a class "
"definition header: the class name, the base classes (in order), the "
"keyword arguments (such as ``metaclass``)."
msgstr ""
"처음 세 개의 인자는 클래스 정의 헤더를 구성하는 요소들입니다: 클래스 이름, 베이스 클래스 (순서대로), 키워드 인자 (가령 "
"``metaclass``)."

#: ../../library/types.rst:33
msgid ""
"The *exec_body* argument is a callback that is used to populate the "
"freshly created class namespace. It should accept the class namespace as "
"its sole argument and update the namespace directly with the class "
"contents. If no callback is provided, it has the same effect as passing "
"in ``lambda ns: None``."
msgstr ""
"*exec_body* 인자는 새로 만들어진 클래스 이름 공간을 채우는 데 사용되는 콜백입니다. 클래스 이름 공간을 유일한 인자로 "
"받아들이고 클래스 내용으로 이름 공간을 직접 갱신해야 합니다. 콜백이 제공되지 않으면, ``lambda ns: None``\\를 "
"전달하는 것과 같은 효과가 있습니다."

#: ../../library/types.rst:43
msgid "Calculates the appropriate metaclass and creates the class namespace."
msgstr "적절한 메타 클래스를 계산하고 클래스 이름 공간을 만듭니다."

#: ../../library/types.rst:45
msgid ""
"The arguments are the components that make up a class definition header: "
"the class name, the base classes (in order) and the keyword arguments "
"(such as ``metaclass``)."
msgstr ""
"인자는 클래스 정의 헤더를 구성하는 요소들입니다: 클래스 이름, 베이스 클래스 (순서대로) 및 키워드 인자 (가령 "
"``metaclass``)."

#: ../../library/types.rst:49
msgid "The return value is a 3-tuple: ``metaclass, namespace, kwds``"
msgstr "반환 값은 3-튜플입니다: ``metaclass, namespace, kwds``"

#: ../../library/types.rst:51
msgid ""
"*metaclass* is the appropriate metaclass, *namespace* is the prepared "
"class namespace and *kwds* is an updated copy of the passed in *kwds* "
"argument with any ``'metaclass'`` entry removed. If no *kwds* argument is"
" passed in, this will be an empty dict."
msgstr ""
"*metaclass*\\는 적절한 메타 클래스이고, *namespace*\\는 준비된 클래스 이름 공간이며 *kwds*\\는 "
"``'metaclass'`` 항목이 제거된 전달된 *kwds* 인자의 갱신된 사본입니다. *kwds* 인자가 전달되지 않으면, 빈 "
"딕셔너리가 됩니다."

#: ../../library/types.rst:60
msgid ""
"The default value for the ``namespace`` element of the returned tuple has"
" changed.  Now an insertion-order-preserving mapping is used when the "
"metaclass does not have a ``__prepare__`` method."
msgstr ""
"반환된 튜플의 ``namespace`` 요소의 기본값이 변경되었습니다. 이제 메타 클래스에 ``__prepare__`` 메서드가 "
"없으면 삽입 순서 보존 맵핑이 사용됩니다."

#: ../../library/types.rst:66
msgid ":ref:`metaclasses`"
msgstr ":ref:`metaclasses`"

#: ../../library/types.rst:67
msgid "Full details of the class creation process supported by these functions"
msgstr "이 함수들이 지원하는 클래스 생성 절차에 대한 자세한 내용"

#: ../../library/types.rst:69
msgid ":pep:`3115` - Metaclasses in Python 3000"
msgstr ":pep:`3115` - 파이썬 3000의 메타 클래스"

#: ../../library/types.rst:70
msgid "Introduced the ``__prepare__`` namespace hook"
msgstr "``__prepare__`` 이름 공간 훅을 도입했습니다"

#: ../../library/types.rst:74
msgid "Resolve MRO entries dynamically as specified by :pep:`560`."
msgstr ":pep:`560`\\의 명세에 따라 MRO 항목을 동적으로 결정합니다."

#: ../../library/types.rst:76
msgid ""
"This function looks for items in *bases* that are not instances of "
":class:`type`, and returns a tuple where each such object that has an "
":meth:`~object.__mro_entries__` method is replaced with an unpacked "
"result of calling this method.  If a *bases* item is an instance of "
":class:`type`, or it doesn't have an :meth:`!__mro_entries__` method, "
"then it is included in the return tuple unchanged."
msgstr ""
"이 함수는 :class:`type`\\의 인스턴스가 아닌 항목들을 *bases*\\에서 찾고, "
":meth:`~object.__mro_entries__` 메서드가 있는 각 객체가 이 메서드 호출의 언 패킹 된 결과로 대체된 "
"튜플을 반환합니다. *bases* 항목이 :class:`type`\\의 인스턴스이거나, :meth:`!__mro_entries__`"
" 메서드가 없으면, 반환 튜플에 변경되지 않은 상태로 포함됩니다."

#: ../../library/types.rst:87
msgid ""
"Return the tuple of objects originally given as the bases of *cls* before"
" the :meth:`~object.__mro_entries__` method has been called on any bases "
"(following the mechanisms laid out in :pep:`560`). This is useful for "
"introspecting :ref:`Generics <user-defined-generics>`."
msgstr ""

#: ../../library/types.rst:92
msgid ""
"For classes that have an ``__orig_bases__`` attribute, this function "
"returns the value of ``cls.__orig_bases__``. For classes without the "
"``__orig_bases__`` attribute, :attr:`cls.__bases__ <type.__bases__>` is "
"returned."
msgstr ""

#: ../../library/types.rst:97
msgid "Examples::"
msgstr "예제::"

#: ../../library/types.rst:99
#, python-brace-format
msgid ""
"from typing import TypeVar, Generic, NamedTuple, TypedDict\n"
"\n"
"T = TypeVar(\"T\")\n"
"class Foo(Generic[T]): ...\n"
"class Bar(Foo[int], float): ...\n"
"class Baz(list[str]): ...\n"
"Eggs = NamedTuple(\"Eggs\", [(\"a\", int), (\"b\", str)])\n"
"Spam = TypedDict(\"Spam\", {\"a\": int, \"b\": str})\n"
"\n"
"assert Bar.__bases__ == (Foo, float)\n"
"assert get_original_bases(Bar) == (Foo[int], float)\n"
"\n"
"assert Baz.__bases__ == (list,)\n"
"assert get_original_bases(Baz) == (list[str],)\n"
"\n"
"assert Eggs.__bases__ == (tuple,)\n"
"assert get_original_bases(Eggs) == (NamedTuple,)\n"
"\n"
"assert Spam.__bases__ == (dict,)\n"
"assert get_original_bases(Spam) == (TypedDict,)\n"
"\n"
"assert int.__bases__ == (object,)\n"
"assert get_original_bases(int) == (object,)"
msgstr ""
"from typing import TypeVar, Generic, NamedTuple, TypedDict\n"
"\n"
"T = TypeVar(\"T\")\n"
"class Foo(Generic[T]): ...\n"
"class Bar(Foo[int], float): ...\n"
"class Baz(list[str]): ...\n"
"Eggs = NamedTuple(\"Eggs\", [(\"a\", int), (\"b\", str)])\n"
"Spam = TypedDict(\"Spam\", {\"a\": int, \"b\": str})\n"
"\n"
"assert Bar.__bases__ == (Foo, float)\n"
"assert get_original_bases(Bar) == (Foo[int], float)\n"
"\n"
"assert Baz.__bases__ == (list,)\n"
"assert get_original_bases(Baz) == (list[str],)\n"
"\n"
"assert Eggs.__bases__ == (tuple,)\n"
"assert get_original_bases(Eggs) == (NamedTuple,)\n"
"\n"
"assert Spam.__bases__ == (dict,)\n"
"assert get_original_bases(Spam) == (TypedDict,)\n"
"\n"
"assert int.__bases__ == (object,)\n"
"assert get_original_bases(int) == (object,)"

#: ../../library/types.rst:127
msgid ":pep:`560` - Core support for typing module and generic types"
msgstr ":pep:`560` - typing 모듈과 제네릭 형에 대한 코어 지원"

#: ../../library/types.rst:131
msgid "Standard Interpreter Types"
msgstr "표준 인터프리터 형"

#: ../../library/types.rst:133
msgid ""
"This module provides names for many of the types that are required to "
"implement a Python interpreter. It deliberately avoids including some of "
"the types that arise only incidentally during processing such as the "
"``listiterator`` type."
msgstr ""
"이 모듈은 파이썬 인터프리터를 구현하는 데 필요한 많은 형의 이름을 제공합니다. ``listiterator`` 형과 같이 처리 중에"
" 우연히 발생하는 일부 형은 의도적으로 포함하지 않았습니다."

#: ../../library/types.rst:138
msgid ""
"Typical use of these names is for :func:`isinstance` or "
":func:`issubclass` checks."
msgstr "이러한 이름의 일반적인 용도는 :func:`isinstance`\\나 :func:`issubclass` 검사입니다."

#: ../../library/types.rst:142
msgid ""
"If you instantiate any of these types, note that signatures may vary "
"between Python versions."
msgstr "이러한 형을 인스턴스 화할 때는 서명이 파이썬 버전마다 다를 수 있음에 유의해야 합니다."

#: ../../library/types.rst:144
msgid "Standard names are defined for the following types:"
msgstr "다음과 같은 형들에 대해 표준 이름이 정의됩니다:"

#: ../../library/types.rst:148
msgid "The type of :data:`None`."
msgstr ""

#: ../../library/types.rst:156
msgid ""
"The type of user-defined functions and functions created by "
":keyword:`lambda`  expressions."
msgstr "사용자 정의 함수와 :keyword:`lambda` 표현식이 만든 함수의 형."

#: ../../library/types.rst:159
msgid ""
"Raises an :ref:`auditing event <auditing>` ``function.__new__`` with "
"argument ``code``."
msgstr "인자 ``code``\\로 :ref:`감사 이벤트 <auditing>` ``function.__new__``\\를 발생시킵니다."

#: ../../library/types.rst:161
msgid ""
"The audit event only occurs for direct instantiation of function objects,"
" and is not raised for normal compilation."
msgstr "감사 이벤트는 함수 객체의 직접 인스턴스 화에서만 발생하며, 일반 컴파일에서는 발생하지 않습니다."

#: ../../library/types.rst:167
msgid ""
"The type of :term:`generator`-iterator objects, created by generator "
"functions."
msgstr "제너레이터 함수가 만든, :term:`제너레이터 <generator>`-이터레이터 객체의 형."

#: ../../library/types.rst:173
msgid ""
"The type of :term:`coroutine` objects, created by :keyword:`async def` "
"functions."
msgstr ":keyword:`async def` 함수가 만든 :term:`코루틴 <coroutine>` 객체의 형."

#: ../../library/types.rst:181
msgid ""
"The type of :term:`asynchronous generator`-iterator objects, created by "
"asynchronous generator functions."
msgstr "비동기 제너레이터 함수가 만든, :term:`비동기 제너레이터 <asynchronous generator>`-이터레이터 객체의 형."

#: ../../library/types.rst:191
msgid ""
"The type of :ref:`code objects <code-objects>` such as returned by "
":func:`compile`."
msgstr ":func:`compile`\\이 반환하는 것과 같은 :ref:`코드 객체 <code-objects>`\\의 형."

#: ../../library/types.rst:193
msgid ""
"Raises an :ref:`auditing event <auditing>` ``code.__new__`` with "
"arguments ``code``, ``filename``, ``name``, ``argcount``, "
"``posonlyargcount``, ``kwonlyargcount``, ``nlocals``, ``stacksize``, "
"``flags``."
msgstr ""
"인자 ``code``, ``filename``, ``name``, ``argcount``, ``posonlyargcount``, "
"``kwonlyargcount``, ``nlocals``, ``stacksize``, ``flags``\\로 :ref:`감사 이벤트"
" <auditing>` ``code.__new__``\\를 발생시킵니다."

#: ../../library/types.rst:195
msgid ""
"Note that the audited arguments may not match the names or positions "
"required by the initializer.  The audit event only occurs for direct "
"instantiation of code objects, and is not raised for normal compilation."
msgstr ""
"감사된 인자는 초기화자가 요구하는 이름이나 위치와 일치하지 않을 수 있음에 유의하십시오. 감사 이벤트는 코드 객체의 직접 인스턴스 "
"화에서만 발생하며, 일반 컴파일에서는 발생하지 않습니다."

#: ../../library/types.rst:201
msgid ""
"The type for cell objects: such objects are used as containers for a "
"function's :term:`closure variables <closure variable>`."
msgstr "셀 객체의 형: 이러한 객체는 함수의 :term:`클로저 변수 <closure variable>`\\에 대한 컨테이너로 사용됩니다."

#: ../../library/types.rst:209
msgid "The type of methods of user-defined class instances."
msgstr "사용자 정의 클래스 인스턴스의 메서드 형."

#: ../../library/types.rst:215
msgid ""
"The type of built-in functions like :func:`len` or :func:`sys.exit`, and "
"methods of built-in classes.  (Here, the term \"built-in\" means "
"\"written in C\".)"
msgstr ""
":func:`len`\\이나 :func:`sys.exit` 와 같은 내장 함수와 내장 클래스의 메서드의 형. (여기서, "
"\"내장\"이라는 용어는 \"C로 작성된\"을 의미합니다.)"

#: ../../library/types.rst:222
msgid ""
"The type of methods of some built-in data types and base classes such as "
":meth:`object.__init__` or :meth:`object.__lt__`."
msgstr ""
":meth:`object.__init__`\\나 :meth:`object.__lt__`\\와 같은, 일부 내장 데이터형과 베이스 "
"클래스의 메서드의 형."

#: ../../library/types.rst:230
msgid ""
"The type of *bound* methods of some built-in data types and base classes."
" For example it is the type of :code:`object().__str__`."
msgstr ""
"일부 내장 데이터형과 베이스 클래스의 *연결된(bound)* 메서드의 형. 예를 들어 "
":code:`object().__str__`\\의 형입니다."

#: ../../library/types.rst:238
msgid "The type of :data:`NotImplemented`."
msgstr ""

#: ../../library/types.rst:245
msgid "The type of methods of some built-in data types such as :meth:`str.join`."
msgstr ":meth:`str.join`\\과 같은 일부 내장 데이터형의 메서드의 형."

#: ../../library/types.rst:252
msgid ""
"The type of *unbound* class methods of some built-in data types such as "
"``dict.__dict__['fromkeys']``."
msgstr ""
"``dict.__dict__['fromkeys']``\\와 같은 일부 내장 데이터형의 *연결되지 않은(unbound)* 클래스 "
"메서드의 형."

#: ../../library/types.rst:260
msgid ""
"The type of :term:`modules <module>`. The constructor takes the name of "
"the module to be created and optionally its :term:`docstring`."
msgstr ""
":term:`모듈 <module>`\\의 형. 생성자는 만들 모듈의 이름과 선택적으로 :term:`독스트링 "
"<docstring>`\\을 취합니다."

#: ../../library/types.rst:265
msgid ":ref:`Documentation on module objects <module-objects>`"
msgstr ""

#: ../../library/types.rst:266
msgid ""
"Provides details on the special attributes that can be found on instances"
" of :class:`!ModuleType`."
msgstr ""

#: ../../library/types.rst:269
msgid ":func:`importlib.util.module_from_spec`"
msgstr ":func:`importlib.util.module_from_spec`"

#: ../../library/types.rst:270
msgid ""
"Modules created using the :class:`!ModuleType` constructor are created "
"with many of their special attributes unset or set to default values. "
":func:`!module_from_spec` provides a more robust way of creating "
":class:`!ModuleType` instances which ensures the various attributes are "
"set appropriately."
msgstr ""

#: ../../library/types.rst:278
msgid "The type of :data:`Ellipsis`."
msgstr ""

#: ../../library/types.rst:284
msgid ""
"The type of :ref:`parameterized generics <types-genericalias>` such as "
"``list[int]``."
msgstr "``list[int]``\\와 같은 :ref:`매개 변수화된 제네릭 <types-genericalias>`\\의 형입니다."

#: ../../library/types.rst:287
msgid ""
"``t_origin`` should be a non-parameterized generic class, such as "
"``list``, ``tuple`` or ``dict``.  ``t_args`` should be a :class:`tuple` "
"(possibly of length 1) of types which parameterize ``t_origin``::"
msgstr ""
"``t_origin``\\은 ``list``, ``tuple`` 또는 ``dict``\\와 같이 매개 변수화되지 않은 제네릭 "
"클래스여야 합니다. ``t_args``\\는 ``t_origin``\\을 매개 변수화하는 형의 :class:`tuple`\\(길이 "
"1일 수 있습니다)이어야 합니다::"

#: ../../library/types.rst:291
msgid ""
">>> from types import GenericAlias\n"
"\n"
">>> list[int] == GenericAlias(list, (int,))\n"
"True\n"
">>> dict[str, int] == GenericAlias(dict, (str, int))\n"
"True"
msgstr ""
">>> from types import GenericAlias\n"
"\n"
">>> list[int] == GenericAlias(list, (int,))\n"
"True\n"
">>> dict[str, int] == GenericAlias(dict, (str, int))\n"
"True"

#: ../../library/types.rst:300
msgid "This type can now be subclassed."
msgstr "이 형은 이제 서브 클래싱 할 수 있습니다."

#: ../../library/types.rst:305
msgid ":ref:`Generic Alias Types<types-genericalias>`"
msgstr ""

#: ../../library/types.rst:306
msgid "In-depth documentation on instances of :class:`!types.GenericAlias`"
msgstr ""

#: ../../library/types.rst:308
msgid ":pep:`585` - Type Hinting Generics In Standard Collections"
msgstr ""

#: ../../library/types.rst:309
msgid "Introducing the :class:`!types.GenericAlias` class"
msgstr ""

#: ../../library/types.rst:313
msgid "The type of :ref:`union type expressions<types-union>`."
msgstr ""

#: ../../library/types.rst:319
msgid ""
"The type of traceback objects such as found in "
"``sys.exception().__traceback__``."
msgstr "``sys.exception().__traceback__``\\에서 발견되는 것과 같은 트레이스백 객체의 형."

#: ../../library/types.rst:321
msgid ""
"See :ref:`the language reference <traceback-objects>` for details of the "
"available attributes and operations, and guidance on creating tracebacks "
"dynamically."
msgstr ""
"사용 가능한 어트리뷰트와 연산에 대한 세부 사항 및 동적으로 트레이스백을 만드는 것에 대한 지침은 :ref:`언어 레퍼런스 "
"<traceback-objects>`\\를 참조하십시오."

#: ../../library/types.rst:328
msgid ""
"The type of :ref:`frame objects <frame-objects>` such as found in "
":attr:`tb.tb_frame <traceback.tb_frame>` if ``tb`` is a traceback object."
msgstr ""
"``tb``\\가 트레이스백 객체일 때 :attr:`tb.tb_frame <traceback.tb_frame>`\\에서 발견되는 "
"것과 같은 :ref:`프레임 객체 <frame-objects>`\\의 형."

#: ../../library/types.rst:334
msgid ""
"The type of objects defined in extension modules with ``PyGetSetDef``, "
"such as :attr:`FrameType.f_locals <frame.f_locals>` or "
"``array.array.typecode``. This type is used as descriptor for object "
"attributes; it has the same purpose as the :class:`property` type, but "
"for classes defined in extension modules."
msgstr ""
":attr:`FrameType.f_locals <frame.f_locals>`\\나 "
"``array.array.typecode``\\와 같은, ``PyGetSetDef``\\가 있는 확장 모듈에서 정의된 객체의 형. "
"이 형은 객체 어트리뷰트에 대한 디스크립터로 사용됩니다. :class:`property` 형과 같은 목적을 갖지만, 확장 모듈에 "
"정의된 클래스에 사용됩니다."

#: ../../library/types.rst:343
msgid ""
"The type of objects defined in extension modules with ``PyMemberDef``, "
"such as ``datetime.timedelta.days``.  This type is used as descriptor for"
" simple C data members which use standard conversion functions; it has "
"the same purpose as the :class:`property` type, but for classes defined "
"in extension modules."
msgstr ""
"``datetime.timedelta.days``\\와 같은, ``PyMemberDef``\\가 있는 확장 모듈에서 정의된 객체의 "
"형. 이 형은 표준 변환 함수를 사용하는 간단한 C 데이터 멤버의 디스크립터로 사용됩니다; :class:`property` 형과 "
"같은 목적을 갖지만, 확장 모듈에 정의된 클래스를 위한 것입니다."

#: ../../library/types.rst:348
msgid ""
"In addition, when a class is defined with a :attr:`~object.__slots__` "
"attribute, then for each slot, an instance of "
":class:`!MemberDescriptorType` will be added as an attribute on the "
"class. This allows the slot to appear in the class's "
":attr:`~type.__dict__`."
msgstr ""

#: ../../library/types.rst:354
msgid ""
"In other implementations of Python, this type may be identical to "
"``GetSetDescriptorType``."
msgstr "파이썬의 다른 구현에서, 이 형은 ``GetSetDescriptorType``\\과 같을 수 있습니다."

#: ../../library/types.rst:359
msgid ""
"Read-only proxy of a mapping. It provides a dynamic view on the mapping's"
" entries, which means that when the mapping changes, the view reflects "
"these changes."
msgstr "매핑의 읽기 전용 프락시. 매핑 항목에 대한 동적 뷰를 제공하는데, 매핑이 변경될 때 뷰가 이러한 변경 사항을 반영함을 의미합니다."

#: ../../library/types.rst:367
msgid ""
"Updated to support the new union (``|``) operator from :pep:`584`, which "
"simply delegates to the underlying mapping."
msgstr ":pep:`584`\\의 새 병합 (``|``) 연산자를 지원하도록 갱신되었습니다. 단순히 하부 매핑에 위임합니다."

#: ../../library/types.rst:372
msgid "Return ``True`` if the underlying mapping has a key *key*, else ``False``."
msgstr "하부 매핑에 키 *key*\\가 있으면 ``True``\\를, 그렇지 않으면 ``False``\\를 반환합니다."

#: ../../library/types.rst:377
msgid ""
"Return the item of the underlying mapping with key *key*.  Raises a "
":exc:`KeyError` if *key* is not in the underlying mapping."
msgstr ""
"키 *key*\\를 사용하여 하부 매핑의 항목을 반환합니다. *key*\\가 하부 매핑에 없으면 :exc:`KeyError`\\를 "
"발생시킵니다."

#: ../../library/types.rst:382
msgid ""
"Return an iterator over the keys of the underlying mapping.  This is a "
"shortcut for ``iter(proxy.keys())``."
msgstr "하부 매핑의 키에 대한 이터레이터를 반환합니다. 이것은 ``iter(proxy.keys())``\\의 줄임 표현입니다."

#: ../../library/types.rst:387
msgid "Return the number of items in the underlying mapping."
msgstr "하부 매핑의 항목 수를 반환합니다."

#: ../../library/types.rst:391
msgid "Return a shallow copy of the underlying mapping."
msgstr "하부 매핑의 얕은 사본을 반환합니다."

#: ../../library/types.rst:395
msgid ""
"Return the value for *key* if *key* is in the underlying mapping, else "
"*default*.  If *default* is not given, it defaults to ``None``, so that "
"this method never raises a :exc:`KeyError`."
msgstr ""
"*key*\\가 하부 매핑에 있으면 *key*\\의 값을, 그렇지 않으면 *default*\\를 반환합니다. *default*\\를"
" 지정하지 않으면, 기본적으로 ``None``\\으로 설정되므로, 이 메서드는 절대 :exc:`KeyError`\\를 발생시키지 "
"않습니다."

#: ../../library/types.rst:401
msgid ""
"Return a new view of the underlying mapping's items (``(key, value)`` "
"pairs)."
msgstr "하부 매핑의 항목(items)(``(key, value)`` 쌍)의 새 뷰를 반환합니다."

#: ../../library/types.rst:406
msgid "Return a new view of the underlying mapping's keys."
msgstr "하부 매핑의 키(keys)의 새로운 뷰를 반환합니다."

#: ../../library/types.rst:410
msgid "Return a new view of the underlying mapping's values."
msgstr "하부 매핑의 값(values)의 새 뷰를 반환합니다."

#: ../../library/types.rst:414
msgid "Return a reverse iterator over the keys of the underlying mapping."
msgstr "하부 매핑의 키(keys)에 대한 역 이터레이터를 반환합니다."

#: ../../library/types.rst:420
msgid "Return a hash of the underlying mapping."
msgstr "하부 매핑의 해시를 반환합니다."

#: ../../library/types.rst:426
msgid "The type of :ref:`capsule objects <capsules>`."
msgstr ""

#: ../../library/types.rst:432
msgid "Additional Utility Classes and Functions"
msgstr "추가 유틸리티 클래스와 함수"

#: ../../library/types.rst:436
msgid ""
"A simple :class:`object` subclass that provides attribute access to its "
"namespace, as well as a meaningful repr."
msgstr "이름 공간에 대한 어트리뷰트 액세스와 의미 있는 repr을 제공하는 간단한 :class:`object` 서브 클래스."

#: ../../library/types.rst:439
msgid ""
"Unlike :class:`object`, with :class:`!SimpleNamespace` you can add and "
"remove attributes."
msgstr ""

#: ../../library/types.rst:442
msgid ""
":py:class:`SimpleNamespace` objects may be initialized in the same way as"
" :class:`dict`: either with keyword arguments, with a single positional "
"argument, or with both. When initialized with keyword arguments, those "
"are directly added to the underlying namespace. Alternatively, when "
"initialized with a positional argument, the underlying namespace will be "
"updated with key-value pairs from that argument (either a mapping object "
"or an :term:`iterable` object producing key-value pairs). All such keys "
"must be strings."
msgstr ""

#: ../../library/types.rst:453
msgid "The type is roughly equivalent to the following code::"
msgstr "형은 다음 코드와 대략 동등합니다::"

#: ../../library/types.rst:455
#, python-brace-format
msgid ""
"class SimpleNamespace:\n"
"    def __init__(self, mapping_or_iterable=(), /, **kwargs):\n"
"        self.__dict__.update(mapping_or_iterable)\n"
"        self.__dict__.update(kwargs)\n"
"\n"
"    def __repr__(self):\n"
"        items = (f\"{k}={v!r}\" for k, v in self.__dict__.items())\n"
"        return \"{}({})\".format(type(self).__name__, \", \".join(items))"
"\n"
"\n"
"    def __eq__(self, other):\n"
"        if isinstance(self, SimpleNamespace) and isinstance(other, "
"SimpleNamespace):\n"
"           return self.__dict__ == other.__dict__\n"
"        return NotImplemented"
msgstr ""
"class SimpleNamespace:\n"
"    def __init__(self, mapping_or_iterable=(), /, **kwargs):\n"
"        self.__dict__.update(mapping_or_iterable)\n"
"        self.__dict__.update(kwargs)\n"
"\n"
"    def __repr__(self):\n"
"        items = (f\"{k}={v!r}\" for k, v in self.__dict__.items())\n"
"        return \"{}({})\".format(type(self).__name__, \", \".join(items))"
"\n"
"\n"
"    def __eq__(self, other):\n"
"        if isinstance(self, SimpleNamespace) and isinstance(other, "
"SimpleNamespace):\n"
"           return self.__dict__ == other.__dict__\n"
"        return NotImplemented"

#: ../../library/types.rst:469
msgid ""
"``SimpleNamespace`` may be useful as a replacement for ``class NS: "
"pass``. However, for a structured record type use "
":func:`~collections.namedtuple` instead."
msgstr ""
"``SimpleNamespace``\\는 ``class NS: pass``\\의 대체품으로 유용할 수 있습니다. 하지만, 구조화된 "
"레코드형에는 :func:`~collections.namedtuple`\\을 대신 사용하십시오."

#: ../../library/types.rst:473
msgid ":class:`!SimpleNamespace` objects are supported by :func:`copy.replace`."
msgstr ""

#: ../../library/types.rst:477
msgid ""
"Attribute order in the repr changed from alphabetical to insertion (like "
"``dict``)."
msgstr "repr의 어트리뷰트 순서가 알파벳순에서 삽입 순으로 변경되었습니다 (``dict``\\처럼)."

#: ../../library/types.rst:481
msgid "Added support for an optional positional argument."
msgstr ""

#: ../../library/types.rst:486
msgid "Route attribute access on a class to __getattr__."
msgstr "클래스의 어트리뷰트 액세스를 __getattr__ 로 보냅니다."

#: ../../library/types.rst:488
msgid ""
"This is a descriptor, used to define attributes that act differently when"
" accessed through an instance and through a class.  Instance access "
"remains normal, but access to an attribute through a class will be routed"
" to the class's __getattr__ method; this is done by raising "
"AttributeError."
msgstr ""
"디스크립터이며, 인스턴스와 클래스를 통해 액세스할 때 다르게 작동하는 어트리뷰트를 정의하는 데 사용됩니다. 인스턴스 액세스는 "
"정상적으로 유지되지만, 클래스를 통한 어트리뷰트 액세스는 클래스의 __getattr__ 메서드로 보냅니다; 이는 "
"AttributeError를 발생 시켜 수행됩니다."

#: ../../library/types.rst:493
msgid ""
"This allows one to have properties active on an instance, and have "
"virtual attributes on the class with the same name (see "
":class:`enum.Enum` for an example)."
msgstr ""
"이를 통해 인스턴스에서 활성화된 프로퍼티를 가짐과 동시에, 클래스에서 같은 이름을 가진 가상 어트리뷰트를 가질 수 있습니다 (예제는"
" :class:`enum.Enum`\\을 참조하십시오)."

#: ../../library/types.rst:500
msgid "Coroutine Utility Functions"
msgstr "코루틴 유틸리티 함수"

#: ../../library/types.rst:504
msgid ""
"This function transforms a :term:`generator` function into a "
":term:`coroutine function` which returns a generator-based coroutine. The"
" generator-based coroutine is still a :term:`generator iterator`, but is "
"also considered to be a :term:`coroutine` object and is "
":term:`awaitable`.  However, it may not necessarily implement the "
":meth:`~object.__await__` method."
msgstr ""
"이 함수는 :term:`제너레이터 <generator>` 함수를 제너레이터 기반 코루틴을 반환하는 :term:`코루틴 함수 "
"<coroutine function>`\\로 변환합니다. 제너레이터 기반 코루틴은 여전히 :term:`제너레이터 이터레이터 "
"<generator iterator>`\\이지만, :term:`코루틴 <coroutine>` 객체로도 간주하며 "
":term:`어웨이터블 <awaitable>`\\입니다. 그러나, 반드시 :meth:`~object.__await__` 메서드를 "
"구현할 필요는 없습니다."

#: ../../library/types.rst:511
msgid "If *gen_func* is a generator function, it will be modified in-place."
msgstr "*gen_func*\\가 제너레이터 함수면 제자리(in-place)에서 수정됩니다."

#: ../../library/types.rst:513
msgid ""
"If *gen_func* is not a generator function, it will be wrapped. If it "
"returns an instance of :class:`collections.abc.Generator`, the instance "
"will be wrapped in an *awaitable* proxy object.  All other types of "
"objects will be returned as is."
msgstr ""
"*gen_func*\\가 제너레이터 함수가 아니면, 래핑 됩니다. "
":class:`collections.abc.Generator`\\의 인스턴스를 반환하면, 인스턴스는 *어웨이터블* 프락시 객체로 "
"래핑 됩니다. 다른 모든 형의 객체는 그대로 반환됩니다."

#: ../../library/types.rst:189
msgid "built-in function"
msgstr "내장 함수"

#: ../../library/types.rst:189
msgid "compile"
msgstr "컴파일"

#~ msgid ""
#~ "Return a copy of the code object"
#~ " with new values for the specified"
#~ " fields."
#~ msgstr "지정된 필드에 새로운 값을 가지는 코드 객체의 사본을 반환합니다."

#~ msgid ""
#~ "Use :func:`importlib.util.module_from_spec` to "
#~ "create a new module if you wish"
#~ " to set the various import-controlled"
#~ " attributes."
#~ msgstr ""
#~ "다양한 임포트 제어 어트리뷰트를 설정하려면 "
#~ ":func:`importlib.util.module_from_spec`\\을 사용하여 새 "
#~ "모듈을 만드십시오."

#~ msgid "The :term:`docstring` of the module. Defaults to ``None``."
#~ msgstr "모듈의 :term:`독스트링 <docstring>`. 기본값은 ``None``."

#~ msgid "The :term:`loader` which loaded the module. Defaults to ``None``."
#~ msgstr "모듈을 로드한 :term:`로더 <loader>`. 기본값은 ``None``."

#~ msgid ""
#~ "This attribute is to match "
#~ ":attr:`importlib.machinery.ModuleSpec.loader` as stored"
#~ " in the attr:`__spec__` object."
#~ msgstr ""
#~ "이 어트리뷰트는 attr:`__spec__` 객체에 저장된 "
#~ ":attr:`importlib.machinery.ModuleSpec.loader`\\와 일치합니다."

#~ msgid ""
#~ "A future version of Python may "
#~ "stop setting this attribute by default."
#~ " To guard against this potential "
#~ "change, preferrably read from the "
#~ ":attr:`__spec__` attribute instead or use "
#~ "``getattr(module, \"__loader__\", None)`` if "
#~ "you explicitly need to use this "
#~ "attribute."
#~ msgstr ""
#~ "향후 버전의 파이썬은 기본적으로 이 어트리뷰트 설정을 "
#~ "중지 할 수 있습니다. 이러한 잠재적인 변경에 "
#~ "대비하려면, 이 어트리뷰트를 명시적으로 사용해야 하는 경우"
#~ " 대신 :attr:`__spec__` 어트리뷰트에서 읽거나 "
#~ "``getattr(module, \"__loader__\", None)``\\를 사용하십시오."

#~ msgid "Defaults to ``None``. Previously the attribute was optional."
#~ msgstr "기본값은 ``None``. 이전에는 어트리뷰트가 선택적이었습니다."

#~ msgid ""
#~ "The name of the module. Expected "
#~ "to match :attr:`importlib.machinery.ModuleSpec.name`."
#~ msgstr "모듈의 이름. :attr:`importlib.machinery.ModuleSpec.name`\\과 일치할 것으로 기대됩니다."

#~ msgid ""
#~ "Which :term:`package` a module belongs "
#~ "to. If the module is top-level "
#~ "(i.e. not a part of any specific"
#~ " package) then the attribute should "
#~ "be set to ``''``, else it should"
#~ " be set to the name of the "
#~ "package (which can be :attr:`__name__` "
#~ "if the module is a package "
#~ "itself). Defaults to ``None``."
#~ msgstr ""
#~ "모듈이 속한 :term:`패키지 <package>`. 모듈이 최상위"
#~ " 수준이면 (즉, 특정 패키지의 일부가 아니면) "
#~ "어트리뷰트를 ``''``\\로 설정해야 하며, 그렇지 않으면 "
#~ "패키지 이름으로 설정해야 합니다 (모듈이 패키지 자체이면"
#~ " :attr:`__name__` 일 수 있습니다). 기본값은 "
#~ "``None``."

#~ msgid ""
#~ "This attribute is to match "
#~ ":attr:`importlib.machinery.ModuleSpec.parent` as stored"
#~ " in the attr:`__spec__` object."
#~ msgstr ""
#~ "이 어트리뷰트는 attr:`__spec__` 객체에 저장된 "
#~ ":attr:`importlib.machinery.ModuleSpec.parent`\\와 일치합니다."

#~ msgid ""
#~ "A future version of Python may "
#~ "stop setting this attribute by default."
#~ " To guard against this potential "
#~ "change, preferrably read from the "
#~ ":attr:`__spec__` attribute instead or use "
#~ "``getattr(module, \"__package__\", None)`` if "
#~ "you explicitly need to use this "
#~ "attribute."
#~ msgstr ""
#~ "향후 버전의 파이썬은 기본적으로 이 어트리뷰트 설정을 "
#~ "중지 할 수 있습니다. 이러한 잠재적인 변경에 "
#~ "대비하려면, 이 어트리뷰트를 명시적으로 사용해야 하는 경우"
#~ " 대신 :attr:`__spec__` 어트리뷰트에서 읽거나 "
#~ "``getattr(module, \"__package__\", None)``\\를 "
#~ "사용하십시오."

#~ msgid ""
#~ "A record of the the module's "
#~ "import-system-related state. Expected to"
#~ " be an instance of "
#~ ":class:`importlib.machinery.ModuleSpec`."
#~ msgstr ""
#~ "모듈의 임포트 시스템 관련 상태에 대한 레코드. "
#~ ":class:`importlib.machinery.ModuleSpec`\\의 인스턴스일 것으로 "
#~ "기대됩니다."

#~ msgid ""
#~ "See :ref:`the language reference <frame-"
#~ "objects>` for details of the available"
#~ " attributes and operations."
#~ msgstr "사용 가능한 어트리뷰트와 연산에 대한 자세한 내용은 :ref:`언어 레퍼런스 <frame-objects>`\\를 참조하십시오."

#~ msgid ""
#~ "Unlike :class:`object`, with ``SimpleNamespace`` "
#~ "you can add and remove attributes.  "
#~ "If a ``SimpleNamespace`` object is "
#~ "initialized with keyword arguments, those "
#~ "are directly added to the underlying "
#~ "namespace."
#~ msgstr ""
#~ ":class:`object`\\와 달리, ``SimpleNamespace``\\를 사용하면"
#~ " 어트리뷰트를 추가하고 제거할 수 있습니다. "
#~ "``SimpleNamespace`` 객체가 키워드 인자로 초기화되면, "
#~ "하부 이름 공간에 직접 추가됩니다."

