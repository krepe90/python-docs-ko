# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2017, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-04-17 23:44+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: Dong-gweon Oh <flowdas@gmail.com>\n"
"Language-Team: Korean (https://python.flowdas.com)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.17.0\n"

#: ../../library/modulefinder.rst:2
msgid ":mod:`!modulefinder` --- Find modules used by a script"
msgstr ":mod:`!modulefinder` --- 스크립트에서 사용되는 모듈 찾기"

#: ../../library/modulefinder.rst:9
msgid "**Source code:** :source:`Lib/modulefinder.py`"
msgstr "**소스 코드:** :source:`Lib/modulefinder.py`"

#: ../../library/modulefinder.rst:13
msgid ""
"This module provides a :class:`ModuleFinder` class that can be used to "
"determine the set of modules imported by a script. ``modulefinder.py`` "
"can also be run as a script, giving the filename of a Python script as "
"its argument, after which a report of the imported modules will be "
"printed."
msgstr ""
"이 모듈은 스크립트가 임포트 한 모듈 집합을 판단하는 데 사용할 수 있는 :class:`ModuleFinder` 클래스를 "
"제공합니다. ``modulefinder.py``\\는 스크립트로 실행될 수도 있습니다, 인자로 파이썬 스크립트의 파일 이름을 "
"지정하면, 임포트 된 모듈의 보고서가 인쇄됩니다."

#: ../../library/modulefinder.rst:21
msgid ""
"Record that the package named *pkg_name* can be found in the specified "
"*path*."
msgstr "지정된 *path*\\에서 *pkg_name* 패키지를 찾을 수 있음을 기록합니다."

#: ../../library/modulefinder.rst:26
msgid ""
"Allows specifying that the module named *oldname* is in fact the package "
"named *newname*."
msgstr "*oldname* 라는 이름의 모듈이 실제로는 *newname*\\라는 이름의 패키지라는 것을 지정할 수 있도록 합니다."

#: ../../library/modulefinder.rst:32
msgid ""
"This class provides :meth:`run_script` and :meth:`report` methods to "
"determine the set of modules imported by a script. *path* can be a list "
"of directories to search for modules; if not specified, ``sys.path`` is "
"used.  *debug* sets the debugging level; higher values make the class "
"print debugging messages about what it's doing. *excludes* is a list of "
"module names to exclude from the analysis. *replace_paths* is a list of "
"``(oldpath, newpath)`` tuples that will be replaced in module paths."
msgstr ""
"이 클래스는 스크립트가 임포트하는 모듈 집합을 판단하는 :meth:`run_script` 와 :meth:`report` 메서드를 "
"제공합니다. *path*\\는 모듈을 검색할 디렉터리 리스트일 수 있습니다; 지정되지 않으면, ``sys.path``\\가 "
"사용됩니다. *debug*\\는 디버깅 수준을 설정합니다; 값이 크면 클래스가 수행 중인 작업에 대한 디버깅 메시지를 인쇄합니다. "
"*excludes*\\는 분석에서 제외할 모듈 이름 리스트입니다. *replace_paths*\\는 모듈 경로에서 교체될 "
"``(oldpath, newpath)`` 튜플의 리스트입니다."

#: ../../library/modulefinder.rst:43
msgid ""
"Print a report to standard output that lists the modules imported by the "
"script and their paths, as well as modules that are missing or seem to be"
" missing."
msgstr ""
"빠지거나 빠진 것으로 보이는 모듈뿐 아니라, 스크립트가 임포트하는 모듈과 그들의 경로의 목록에 관한 보고서를 표준 출력으로 "
"인쇄합니다."

#: ../../library/modulefinder.rst:49
msgid ""
"Analyze the contents of the *pathname* file, which must contain Python "
"code."
msgstr "파이썬 코드를 포함하는, *pathname* 파일의 내용을 분석합니다."

#: ../../library/modulefinder.rst:54
msgid ""
"A dictionary mapping module names to modules. See :ref:`modulefinder-"
"example`."
msgstr "모듈 이름을 모듈에 매핑하는 딕셔너리. :ref:`modulefinder-example`\\를 참조하십시오."

#: ../../library/modulefinder.rst:61
msgid "Example usage of :class:`ModuleFinder`"
msgstr ":class:`ModuleFinder`\\의 사용 예"

#: ../../library/modulefinder.rst:63
msgid "The script that is going to get analyzed later on (bacon.py)::"
msgstr "나중에 분석할 스크립트 (bacon.py)::"

#: ../../library/modulefinder.rst:65
msgid ""
"import re, itertools\n"
"\n"
"try:\n"
"    import baconhameggs\n"
"except ImportError:\n"
"    pass\n"
"\n"
"try:\n"
"    import guido.python.ham\n"
"except ImportError:\n"
"    pass"
msgstr ""
"import re, itertools\n"
"\n"
"try:\n"
"    import baconhameggs\n"
"except ImportError:\n"
"    pass\n"
"\n"
"try:\n"
"    import guido.python.ham\n"
"except ImportError:\n"
"    pass"

#: ../../library/modulefinder.rst:78
msgid "The script that will output the report of bacon.py::"
msgstr "bacon.py의 보고서를 출력하는 스크립트::"

#: ../../library/modulefinder.rst:80
#, python-format
msgid ""
"from modulefinder import ModuleFinder\n"
"\n"
"finder = ModuleFinder()\n"
"finder.run_script('bacon.py')\n"
"\n"
"print('Loaded modules:')\n"
"for name, mod in finder.modules.items():\n"
"    print('%s: ' % name, end='')\n"
"    print(','.join(list(mod.globalnames.keys())[:3]))\n"
"\n"
"print('-'*50)\n"
"print('Modules not imported:')\n"
"print('\\n'.join(finder.badmodules.keys()))"
msgstr ""
"from modulefinder import ModuleFinder\n"
"\n"
"finder = ModuleFinder()\n"
"finder.run_script('bacon.py')\n"
"\n"
"print('Loaded modules:')\n"
"for name, mod in finder.modules.items():\n"
"    print('%s: ' % name, end='')\n"
"    print(','.join(list(mod.globalnames.keys())[:3]))\n"
"\n"
"print('-'*50)\n"
"print('Modules not imported:')\n"
"print('\\n'.join(finder.badmodules.keys()))"

#: ../../library/modulefinder.rst:94
msgid "Sample output (may vary depending on the architecture)::"
msgstr "표본 출력(아키텍처에 따라 다를 수 있습니다)::"

#: ../../library/modulefinder.rst:96
msgid ""
"Loaded modules:\n"
"_types:\n"
"copyreg:  _inverted_registry,_slotnames,__all__\n"
"re._compiler:  isstring,_sre,_optimize_unicode\n"
"_sre:\n"
"re._constants:  REPEAT_ONE,makedict,AT_END_LINE\n"
"sys:\n"
"re:  __module__,finditer,_expand\n"
"itertools:\n"
"__main__:  re,itertools,baconhameggs\n"
"re._parser:  _PATTERNENDERS,SRE_FLAG_UNICODE\n"
"array:\n"
"types:  __module__,IntType,TypeType\n"
"---------------------------------------------------\n"
"Modules not imported:\n"
"guido.python.ham\n"
"baconhameggs"
msgstr ""
"Loaded modules:\n"
"_types:\n"
"copyreg:  _inverted_registry,_slotnames,__all__\n"
"re._compiler:  isstring,_sre,_optimize_unicode\n"
"_sre:\n"
"re._constants:  REPEAT_ONE,makedict,AT_END_LINE\n"
"sys:\n"
"re:  __module__,finditer,_expand\n"
"itertools:\n"
"__main__:  re,itertools,baconhameggs\n"
"re._parser:  _PATTERNENDERS,SRE_FLAG_UNICODE\n"
"array:\n"
"types:  __module__,IntType,TypeType\n"
"---------------------------------------------------\n"
"Modules not imported:\n"
"guido.python.ham\n"
"baconhameggs"

