# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2017, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-04-17 23:44+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: Dong-gweon Oh <flowdas@gmail.com>\n"
"Language-Team: Korean (https://python.flowdas.com)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.17.0\n"

#: ../../library/sched.rst:2
msgid ":mod:`!sched` --- Event scheduler"
msgstr ":mod:`!sched` --- 이벤트 스케줄러"

#: ../../library/sched.rst:9
msgid "**Source code:** :source:`Lib/sched.py`"
msgstr "**소스 코드:** :source:`Lib/sched.py`"

#: ../../library/sched.rst:15
msgid ""
"The :mod:`sched` module defines a class which implements a general "
"purpose event scheduler:"
msgstr ":mod:`sched` 모듈은 범용 이벤트 스케줄러를 구현하는 클래스를 정의합니다:"

#: ../../library/sched.rst:20
msgid ""
"The :class:`scheduler` class defines a generic interface to scheduling "
"events. It needs two functions to actually deal with the \"outside "
"world\" --- *timefunc* should be callable without arguments, and return  "
"a number (the \"time\", in any units whatsoever).  The *delayfunc* "
"function should be callable with one argument, compatible with the output"
" of *timefunc*, and should delay that many time units. *delayfunc* will "
"also be called with the argument ``0`` after each event is run to allow "
"other threads an opportunity to run in multi-threaded applications."
msgstr ""
":class:`scheduler` 클래스는 이벤트 스케줄링을 위한 일반적인 인터페이스를 정의합니다. \"외부 세계\"를 실제로 "
"다루기 위해 두 개의 함수를 요구합니다 --- *timefunc*\\는 인자 없이 호출할 수 있어야 하고, 숫자(단위가 무엇이든, "
"\"시간\")를 반환합니다. *delayfunc* 함수는 하나의 인자로 호출 가능해야 하며, *timefunc*\\의 출력과 "
"호환되어야 하고, 그 시간 동안 지연시켜야 합니다. *delayfunc*\\는 다중 스레드 응용 프로그램에서 다른 스레드가 실행할 "
"기회를 주기 위해 각 이벤트가 실행된 후 ``0`` 인자로 호출되기도 합니다."

#: ../../library/sched.rst:29
msgid "*timefunc* and *delayfunc* parameters are optional."
msgstr "*timefunc* 와 *delayfunc* 매개 변수는 선택적입니다."

#: ../../library/sched.rst:32
msgid ""
":class:`scheduler` class can be safely used in multi-threaded "
"environments."
msgstr ":class:`scheduler` 클래스는 다중 스레드 환경에서 안전하게 사용할 수 있습니다."

#: ../../library/sched.rst:36
msgid "Example::"
msgstr "예제::"

#: ../../library/sched.rst:38
#, python-brace-format
msgid ""
">>> import sched, time\n"
">>> s = sched.scheduler(time.time, time.sleep)\n"
">>> def print_time(a='default'):\n"
"...     print(\"From print_time\", time.time(), a)\n"
"...\n"
">>> def print_some_times():\n"
"...     print(time.time())\n"
"...     s.enter(10, 1, print_time)\n"
"...     s.enter(5, 2, print_time, argument=('positional',))\n"
"...     # despite having higher priority, 'keyword' runs after "
"'positional' as enter() is relative\n"
"...     s.enter(5, 1, print_time, kwargs={'a': 'keyword'})\n"
"...     s.enterabs(1_650_000_000, 10, print_time, argument=(\"first "
"enterabs\",))\n"
"...     s.enterabs(1_650_000_000, 5, print_time, argument=(\"second "
"enterabs\",))\n"
"...     s.run()\n"
"...     print(time.time())\n"
"...\n"
">>> print_some_times()\n"
"1652342830.3640375\n"
"From print_time 1652342830.3642538 second enterabs\n"
"From print_time 1652342830.3643398 first enterabs\n"
"From print_time 1652342835.3694863 positional\n"
"From print_time 1652342835.3696074 keyword\n"
"From print_time 1652342840.369612 default\n"
"1652342840.3697174"
msgstr ""
">>> import sched, time\n"
">>> s = sched.scheduler(time.time, time.sleep)\n"
">>> def print_time(a='default'):\n"
"...     print(\"From print_time\", time.time(), a)\n"
"...\n"
">>> def print_some_times():\n"
"...     print(time.time())\n"
"...     s.enter(10, 1, print_time)\n"
"...     s.enter(5, 2, print_time, argument=('positional',))\n"
"...     # 우선순위가 더 높음에도 불구하고, enter() 가 상대적이라서 'keyword' 는 'positional' "
"다음에 실행됩니다\n"
"...     s.enter(5, 1, print_time, kwargs={'a': 'keyword'})\n"
"...     s.enterabs(1_650_000_000, 10, print_time, argument=(\"first "
"enterabs\",))\n"
"...     s.enterabs(1_650_000_000, 5, print_time, argument=(\"second "
"enterabs\",))\n"
"...     s.run()\n"
"...     print(time.time())\n"
"...\n"
">>> print_some_times()\n"
"1652342830.3640375\n"
"From print_time 1652342830.3642538 second enterabs\n"
"From print_time 1652342830.3643398 first enterabs\n"
"From print_time 1652342835.3694863 positional\n"
"From print_time 1652342835.3696074 keyword\n"
"From print_time 1652342840.369612 default\n"
"1652342840.3697174"

#: ../../library/sched.rst:67
msgid "Scheduler Objects"
msgstr "스케줄러 객체"

#: ../../library/sched.rst:69
msgid ":class:`scheduler` instances have the following methods and attributes:"
msgstr ":class:`scheduler` 인스턴스에는 다음과 같은 메서드와 어트리뷰트가 있습니다:"

#: ../../library/sched.rst:74
msgid ""
"Schedule a new event. The *time* argument should be a numeric type "
"compatible with the return value of the *timefunc* function passed  to "
"the constructor. Events scheduled for the same *time* will be executed in"
" the order of their *priority*. A lower number represents a higher "
"priority."
msgstr ""
"새 이벤트를 예약합니다. *time* 인자는 생성자에 전달된 *timefunc* 함수의 반환 값과 호환되는 숫자 형이어야 합니다. "
"같은 *time*\\으로 예약된 이벤트는 *priority* 순으로 실행됩니다. 낮은 숫자는 높은 우선순위를 나타냅니다."

#: ../../library/sched.rst:79
msgid ""
"Executing the event means executing ``action(*argument, **kwargs)``. "
"*argument* is a sequence holding the positional arguments for *action*. "
"*kwargs* is a dictionary holding the keyword arguments for *action*."
msgstr ""
"이벤트를 실행하는 것은 ``action(*argument, **kwargs)``\\를 실행하는 것을 의미합니다. "
"*argument*\\는 *action*\\에 대한 위치 인자가 들어있는 시퀀스입니다. *kwargs*\\는 *action*\\에 "
"대한 키워드 인자가 들어있는 딕셔너리입니다."

#: ../../library/sched.rst:83
msgid ""
"Return value is an event which may be used for later cancellation of the "
"event (see :meth:`cancel`)."
msgstr "반환 값은 나중에 이벤트를 취소하는 데 사용할 수 있는 이벤트입니다 (:meth:`cancel` 참조)."

#: ../../library/sched.rst:86 ../../library/sched.rst:99
msgid "*argument* parameter is optional."
msgstr "*argument* 매개 변수는 선택적입니다."

#: ../../library/sched.rst:89 ../../library/sched.rst:102
msgid "*kwargs* parameter was added."
msgstr "*kwargs* 매개 변수가 추가되었습니다."

#: ../../library/sched.rst:95
msgid ""
"Schedule an event for *delay* more time units. Other than the relative "
"time, the other arguments, the effect and the return value are the same "
"as those for :meth:`enterabs`."
msgstr ""
"*delay* 시간 단위 후로 이벤트를 예약합니다. 상대 시간 이외의 다른 인자, 효과 및 반환 값은 "
":meth:`enterabs`\\와 같습니다."

#: ../../library/sched.rst:107
msgid ""
"Remove the event from the queue. If *event* is not an event currently in "
"the queue, this method will raise a :exc:`ValueError`."
msgstr "큐에서 이벤트를 제거합니다. *event*\\가 현재 큐에 없으면, 이 메서드는 :exc:`ValueError`\\를 발생시킵니다."

#: ../../library/sched.rst:113
msgid "Return ``True`` if the event queue is empty."
msgstr "이벤트 큐가 비어있으면 ``True``\\를 반환합니다."

#: ../../library/sched.rst:118
msgid ""
"Run all scheduled events. This method will wait  (using the *delayfunc* "
"function passed to the constructor) for the next event, then execute it "
"and so on until there are no more scheduled events."
msgstr ""
"모든 예약된 이벤트를 실행합니다. 이 메서드는 다음 이벤트를 (생성자에 전달된 *delayfunc* 함수를 사용하여) 기다린 다음 "
"예약된 이벤트가 소진될 때까지 계속 실행합니다."

#: ../../library/sched.rst:122
msgid ""
"If *blocking* is false executes the scheduled events due to expire "
"soonest (if any) and then return the deadline of the next scheduled call "
"in the scheduler (if any)."
msgstr ""
"*blocking*\\이 거짓이면 시간이 도래한 (있다면) 예약된 이벤트를 모두 실행한 다음, 스케줄러에서 다음 예약된 호출까지의 "
"(있다면) 대기시간을 반환합니다 ."

#: ../../library/sched.rst:126
msgid ""
"Either *action* or *delayfunc* can raise an exception.  In either case, "
"the scheduler will maintain a consistent state and propagate the "
"exception.  If an exception is raised by *action*, the event will not be "
"attempted in future calls to :meth:`run`."
msgstr ""
"*action* 이나 *delayfunc*\\는 예외를 발생시킬 수 있습니다. 두 경우 모두, 스케줄러는 일관된 상태를 유지하고 "
"예외를 전파합니다. *action*\\에 의해 예외가 발생하면, 이후에 :meth:`run`\\을 호출할 때 이벤트를 실행하려고 "
"하지 않습니다."

#: ../../library/sched.rst:131
msgid ""
"If a sequence of events takes longer to run than the time available "
"before the next event, the scheduler will simply fall behind.  No events "
"will be dropped; the calling code is responsible for canceling  events "
"which are no longer pertinent."
msgstr ""
"일련의 이벤트가 다음 이벤트 이전에 사용 가능한 시간보다 실행하는 데 더 오래 걸리면, 스케줄러는 단순히 지연됩니다. 어떤 이벤트도"
" 삭제되지 않습니다; 더는 적절하지 않은 이벤트를 취소할 책임은 호출 코드에 있습니다."

#: ../../library/sched.rst:136
msgid "*blocking* parameter was added."
msgstr "*blocking* 매개 변수가 추가되었습니다."

#: ../../library/sched.rst:141
msgid ""
"Read-only attribute returning a list of upcoming events in the order they"
" will be run.  Each event is shown as a :term:`named tuple` with the "
"following fields:  time, priority, action, argument, kwargs."
msgstr ""
"남은 이벤트의 리스트를 실행될 순서대로 반환하는 읽기 전용 어트리뷰트입니다. 각 이벤트는 다음과 같은 필드를 갖는 "
":term:`네임드 튜플 <named tuple>`\\로 표시됩니다: time, priority, action, argument, "
"kwargs."

#: ../../library/sched.rst:11
msgid "event scheduling"
msgstr "이벤트 스케줄링"

