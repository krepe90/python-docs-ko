# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2017, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-04-17 23:44+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: Dong-gweon Oh <flowdas@gmail.com>\n"
"Language-Team: Korean (https://python.flowdas.com)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.17.0\n"

#: ../../library/posix.rst:2
msgid ":mod:`!posix` --- The most common POSIX system calls"
msgstr ":mod:`!posix` --- 가장 일반적인 POSIX 시스템 호출"

#: ../../library/posix.rst:10
msgid ""
"This module provides access to operating system functionality that is "
"standardized by the C Standard and the POSIX standard (a thinly disguised"
" Unix interface)."
msgstr "이 모듈은 C 표준과 POSIX 표준(얇게 위장한 유닉스 인터페이스)에 의해 표준화된 운영 체제 기능에 대한 액세스를 제공합니다."

#: ../../library/posix.rst:14
msgid "Availability"
msgstr ""

#: ../../library/posix.rst:18
msgid ""
"**Do not import this module directly.**  Instead, import the module "
":mod:`os`, which provides a *portable* version of this interface.  On "
"Unix, the :mod:`os` module provides a superset of the :mod:`posix` "
"interface.  On non-Unix operating systems the :mod:`posix` module is not "
"available, but a subset is always available through the :mod:`os` "
"interface.  Once :mod:`os` is imported, there is *no* performance penalty"
" in using it instead of :mod:`posix`.  In addition, :mod:`os` provides "
"some additional functionality, such as automatically calling "
":func:`~os.putenv` when an entry in ``os.environ`` is changed."
msgstr ""
"**이 모듈을 직접 임포트 하지 마십시오.** 대신, 이 인터페이스의 *이식성 있는* 버전을 제공하는 모듈 :mod:`os`\\를 "
"임포트 하십시오. 유닉스에서, :mod:`os` 모듈은 :mod:`posix` 인터페이스의 상위집합을 제공합니다. 비 유닉스 운영 "
"체제에서는 :mod:`posix` 모듈을 사용할 수 없지만, :mod:`os` 인터페이스를 통해 항상 부분집합을 사용할 수 "
"있습니다. 일단 :mod:`os`\\를 임포트하면, :mod:`posix` 대신 사용해도 성능 저하가 *없습니다*. 또한, "
":mod:`os`\\는 ``os.environ``\\의 항목이 변경될 때 자동으로 :func:`~os.putenv`\\를 호출하는 "
"등의 몇 가지 추가 기능을 제공합니다."

#: ../../library/posix.rst:27
msgid ""
"Errors are reported as exceptions; the usual exceptions are given for "
"type errors, while errors reported by the system calls raise "
":exc:`OSError`."
msgstr ""
"에러는 예외로 보고됩니다; 보통 예외는 형 에러로 인한 것입니다만, 시스템 호출 때문에 보고되는 에러는 "
":exc:`OSError`\\를 발생시킵니다."

#: ../../library/posix.rst:34
msgid "Large File Support"
msgstr "대용량 파일 지원"

#: ../../library/posix.rst:42
msgid ""
"Several operating systems (including AIX and Solaris) provide support for"
" files that are larger than 2 GiB from a C programming model where "
":c:expr:`int` and :c:expr:`long` are 32-bit values. This is typically "
"accomplished by defining the relevant size and offset types as 64-bit "
"values. Such files are sometimes referred to as :dfn:`large files`."
msgstr ""
"여러 운영 체제(AIX 와 Solaris 포함)는 :c:expr:`int`\\와 :c:expr:`long`\\이 32비트 값인 C "
"프로그래밍 모델로 인한 2 GiB보다 큰 파일에 대한 지원을 제공합니다. 이것은 일반적으로 관련 크기 및 오프셋 형을 64비트 "
"값으로 정의하여 수행됩니다. 이러한 파일을 때로 :dfn:`대용량 파일 (large files)`\\이라고 합니다."

#: ../../library/posix.rst:48
msgid ""
"Large file support is enabled in Python when the size of an "
":c:type:`off_t` is larger than a :c:expr:`long` and the :c:expr:`long "
"long` is at least as large as an :c:type:`off_t`. It may be necessary to "
"configure and compile Python with certain compiler flags to enable this "
"mode. For example, with Solaris 2.6 and 2.7 you need to do something "
"like::"
msgstr ""
":c:type:`off_t`\\의 크기가 :c:expr:`long`\\보다 크고 :c:expr:`long long`\\이 적어도 "
":c:type:`off_t`\\만큼 크면 파이썬에서 대용량 파일 지원이 활성화됩니다. 이 모드를 활성화하려면 특정 컴파일러 플래그로"
" 파이썬을 구성하고 컴파일해야 할 수도 있습니다. 예를 들어, Solaris 2.6과 2.7에서는 다음과 같은 작업이 필요합니다::"

#: ../../library/posix.rst:55
msgid ""
"CFLAGS=\"`getconf LFS_CFLAGS`\" OPT=\"-g -O2 $CFLAGS\" \\\n"
"        ./configure"
msgstr ""
"CFLAGS=\"`getconf LFS_CFLAGS`\" OPT=\"-g -O2 $CFLAGS\" \\\n"
"        ./configure"

#: ../../library/posix.rst:58
msgid "On large-file-capable Linux systems, this might work::"
msgstr "대용량 파일을 사용할 수 있는 리눅스 시스템에서, 이렇게 할 수 있습니다::"

#: ../../library/posix.rst:60
msgid ""
"CFLAGS='-D_LARGEFILE64_SOURCE -D_FILE_OFFSET_BITS=64' OPT=\"-g -O2 "
"$CFLAGS\" \\\n"
"        ./configure"
msgstr ""
"CFLAGS='-D_LARGEFILE64_SOURCE -D_FILE_OFFSET_BITS=64' OPT=\"-g -O2 "
"$CFLAGS\" \\\n"
"        ./configure"

#: ../../library/posix.rst:67
msgid "Notable Module Contents"
msgstr "주목할만한 모듈 내용"

#: ../../library/posix.rst:69
msgid ""
"In addition to many functions described in the :mod:`os` module "
"documentation, :mod:`posix` defines the following data item:"
msgstr ":mod:`os` 모듈 설명서에서 설명된 많은 함수 외에도, :mod:`posix`\\는 다음 데이터 항목을 정의합니다:"

#: ../../library/posix.rst:74
msgid ""
"A dictionary representing the string environment at the time the "
"interpreter was started. Keys and values are bytes on Unix and str on "
"Windows. For example, ``environ[b'HOME']`` (``environ['HOME']`` on "
"Windows) is the pathname of your home directory, equivalent to "
"``getenv(\"HOME\")`` in C."
msgstr ""
"인터프리터가 시작될 때 문자열 환경을 나타내는 딕셔너리. 키와 값은 유닉스에서는 바이트열이고 윈도우에서는 str입니다. 예를 들어,"
" ``environ[b'HOME']``\\(윈도우에서는 ``environ['HOME']``)은 홈 디렉터리의 경로명이며, C의 "
"``getenv(\"HOME\")``\\와 동등합니다."

#: ../../library/posix.rst:79
msgid ""
"Modifying this dictionary does not affect the string environment passed "
"on by :func:`~os.execv`, :func:`~os.popen` or :func:`~os.system`; if you "
"need to change the environment, pass ``environ`` to :func:`~os.execve` or"
" add variable assignments and export statements to the command string for"
" :func:`~os.system` or :func:`~os.popen`."
msgstr ""
"이 딕셔너리를 수정해도 :func:`~os.execv`, :func:`~os.popen` 또는 "
":func:`~os.system`\\에 전달되는 문자열 환경에는 영향을 주지 않습니다; 환경을 변경해야 하는 경우 "
"``environ``\\을 :func:`~os.execve`\\로 전달하거나, :func:`~os.system` 이나 "
":func:`~os.popen`\\의 명령 문자열에 변수 대입과 export 문장을 추가하십시오."

#: ../../library/posix.rst:85
msgid "On Unix, keys and values are bytes."
msgstr "유닉스에서, 키와 값은 바이트열입니다."

#: ../../library/posix.rst:90
msgid ""
"The :mod:`os` module provides an alternate implementation of ``environ`` "
"which updates the environment on modification. Note also that updating "
":data:`os.environ` will render this dictionary obsolete. Use of the "
":mod:`os` module version of this is recommended over direct access to the"
" :mod:`posix` module."
msgstr ""
":mod:`os` 모듈은 수정 시 환경을 갱신하는 ``environ``\\의 대체 구현을 제공합니다. "
":data:`os.environ`\\를 갱신하면 이 딕셔너리를 쓸모없게 만드는 것에 유의하십시오. :mod:`os` 모듈 버전을 "
"사용하는 것이 :mod:`posix` 모듈에 직접 액세스하는 것보다 권장됩니다."

#: ../../library/posix.rst:16
msgid "module"
msgstr ""

#: ../../library/posix.rst:16
msgid "os"
msgstr ""

#: ../../library/posix.rst:36
msgid "large files"
msgstr ""

#: ../../library/posix.rst:36
msgid "file"
msgstr ""

