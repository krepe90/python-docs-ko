# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2017, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-04-17 23:44+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: Dong-gweon Oh <flowdas@gmail.com>\n"
"Language-Team: Korean (https://python.flowdas.com)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.17.0\n"

#: ../../library/email.mime.rst:2
msgid ":mod:`!email.mime`: Creating email and MIME objects from scratch"
msgstr ":mod:`!email.mime`: 처음부터 이메일과 MIME 객체 만들기"

#: ../../library/email.mime.rst:7
msgid "**Source code:** :source:`Lib/email/mime/`"
msgstr "**소스 코드:** :source:`Lib/email/mime/`"

#: ../../library/email.mime.rst:11
msgid ""
"This module is part of the legacy (``Compat32``) email API.  Its "
"functionality is partially replaced by the :mod:`~email.contentmanager` "
"in the new API, but in certain applications these classes may still be "
"useful, even in non-legacy code."
msgstr ""
"이 모듈은 레거시 (``Compat32``) 이메일 API의 일부입니다. 새로운 API에서는 기능이 "
":mod:`~email.contentmanager`\\로 부분적으로 대체되지만, 특정 응용 프로그램에서는 이 클래스들이 레거시 "
"코드가 아닌 곳에서도 여전히 유용할 수 있습니다."

#: ../../library/email.mime.rst:16
msgid ""
"Ordinarily, you get a message object structure by passing a file or some "
"text to a parser, which parses the text and returns the root message "
"object.  However you can also build a complete message structure from "
"scratch, or even individual :class:`~email.message.Message` objects by "
"hand.  In fact, you can also take an existing structure and add new "
":class:`~email.message.Message` objects, move them around, etc.  This "
"makes a very convenient interface for slicing-and-dicing MIME messages."
msgstr ""
"일반적으로, 파일이나 일부 텍스트를, 텍스트를 구문 분석하고 루트 메시지 객체를 반환하는 구문 분석기에 전달하여 메시지 객체 구조를"
" 얻습니다. 그러나 처음부터 완전한 메시지 구조를 만들거나, 개별 :class:`~email.message.Message` 객체를 "
"직접 만들 수도 있습니다. 실제로, 기존 구조를 가져와서 새로운 :class:`~email.message.Message` 객체를 "
"추가하거나 이동시킬 수도 있습니다. 이렇게 하면 MIME 메시지를 잘게 자르고 재배치하는 매우 편리한 인터페이스가 만들어집니다."

#: ../../library/email.mime.rst:24
msgid ""
"You can create a new object structure by creating "
":class:`~email.message.Message` instances, adding attachments and all the"
" appropriate headers manually.  For MIME messages though, the "
":mod:`email` package provides some convenient subclasses to make things "
"easier."
msgstr ""
":class:`~email.message.Message` 인스턴스를 만들고 첨부 파일과 모든 적절한 헤더를 수동으로 추가하여 새 "
"객체 구조를 만들 수 있습니다. 그러나 MIME 메시지의 경우, :mod:`email` 패키지는 작업을 쉽게 하기 위해 편리한 서브"
" 클래스를 제공합니다."

#: ../../library/email.mime.rst:29
msgid "Here are the classes:"
msgstr "클래스는 다음과 같습니다:"

#: ../../library/email.mime.rst:35
msgid "Module: :mod:`email.mime.base`"
msgstr "모듈: :mod:`email.mime.base`"

#: ../../library/email.mime.rst:37
msgid ""
"This is the base class for all the MIME-specific subclasses of "
":class:`~email.message.Message`.  Ordinarily you won't create instances "
"specifically of :class:`MIMEBase`, although you could.  :class:`MIMEBase`"
" is provided primarily as a convenient base class for more specific MIME-"
"aware subclasses."
msgstr ""
"이것은 :class:`~email.message.Message`\\의 모든 MIME 특정 서브 클래스의 베이스 클래스입니다. "
"일반적으로, 할 수는 있지만, :class:`MIMEBase`\\의 인스턴스를 만들지는 않습니다. "
":class:`MIMEBase`\\는 주로 더 구체적인 MIME 인식 서브 클래스를 위한 편리한 베이스 클래스로 제공됩니다."

#: ../../library/email.mime.rst:43
msgid ""
"*_maintype* is the :mailheader:`Content-Type` major type (e.g. "
":mimetype:`text` or :mimetype:`image`), and *_subtype* is the :mailheader"
":`Content-Type` minor type  (e.g. :mimetype:`plain` or :mimetype:`gif`)."
"  *_params* is a parameter key/value dictionary and is passed directly to"
" :meth:`Message.add_header <email.message.Message.add_header>`."
msgstr ""
"*_maintype*\\은 :mailheader:`Content-Type` 주 유형(예를 들어 :mimetype:`text`\\나 "
":mimetype:`image`)이고, *_subtype*\\은 :mailheader:`Content-Type` 부 유형(예를 들어"
" :mimetype:`plain`\\이나 :mimetype:`gif`)입니다. *_params*\\는 매개 변수 키/값 딕셔너리이며"
" :meth:`Message.add_header <email.message.Message.add_header>`\\로 직접 "
"전달됩니다."

#: ../../library/email.mime.rst:49
msgid ""
"If *policy* is specified, (defaults to the :class:`compat32 "
"<email.policy.Compat32>` policy) it will be passed to "
":class:`~email.message.Message`."
msgstr ""
"*policy*\\가 지정되면 (기본값은 :class:`compat32 <email.policy.Compat32>` 정책입니다), "
":class:`~email.message.Message`\\로 전달됩니다."

#: ../../library/email.mime.rst:53
msgid ""
"The :class:`MIMEBase` class always adds a :mailheader:`Content-Type` "
"header (based on *_maintype*, *_subtype*, and *_params*), and a "
":mailheader:`MIME-Version` header (always set to ``1.0``)."
msgstr ""
":class:`MIMEBase` 클래스는 항상 (*_maintype*, *_subtype* 및 *_params*\\에 기반하는) "
":mailheader:`Content-Type` 헤더와 (항상 ``1.0``\\으로 설정되는) :mailheader:`MIME-"
"Version` 헤더를 추가합니다."

#: ../../library/email.mime.rst:57 ../../library/email.mime.rst:104
#: ../../library/email.mime.rst:135 ../../library/email.mime.rst:169
#: ../../library/email.mime.rst:205 ../../library/email.mime.rst:225
#: ../../library/email.mime.rst:259
msgid "Added *policy* keyword-only parameter."
msgstr "*policy* 키워드 전용 매개 변수를 추가했습니다."

#: ../../library/email.mime.rst:65
msgid "Module: :mod:`email.mime.nonmultipart`"
msgstr "모듈: :mod:`email.mime.nonmultipart`"

#: ../../library/email.mime.rst:67
msgid ""
"A subclass of :class:`~email.mime.base.MIMEBase`, this is an intermediate"
" base class for MIME messages that are not :mimetype:`multipart`.  The "
"primary purpose of this class is to prevent the use of the "
":meth:`~email.message.Message.attach` method, which only makes sense for "
":mimetype:`multipart` messages.  If :meth:`~email.message.Message.attach`"
" is called, a :exc:`~email.errors.MultipartConversionError` exception is "
"raised."
msgstr ""
":class:`~email.mime.base.MIMEBase`\\의 서브 클래스, :mimetype:`multipart` 가 아닌 "
"MIME 메시지의 중간 베이스 클래스입니다. 이 클래스의 기본 목적은 :mimetype:`multipart` 메시지에만 적합한 "
":meth:`~email.message.Message.attach` 메서드 사용을 방지하는 것입니다. "
":meth:`~email.message.Message.attach`\\가 호출되면 "
":exc:`~email.errors.MultipartConversionError` 예외가 발생합니다."

#: ../../library/email.mime.rst:80
msgid "Module: :mod:`email.mime.multipart`"
msgstr "모듈: :mod:`email.mime.multipart`"

#: ../../library/email.mime.rst:82
msgid ""
"A subclass of :class:`~email.mime.base.MIMEBase`, this is an intermediate"
" base class for MIME messages that are :mimetype:`multipart`.  Optional "
"*_subtype* defaults to :mimetype:`mixed`, but can be used to specify the "
"subtype of the message.  A :mailheader:`Content-Type` header of "
":mimetype:`multipart/_subtype` will be added to the message object.  A "
":mailheader:`MIME-Version` header will also be added."
msgstr ""
":class:`~email.mime.base.MIMEBase`\\의 서브 클래스, :mimetype:`multipart` 인 "
"MIME 메시지의 중간 베이스 클래스입니다. 선택적 *_subtype*\\의 기본값은 :mimetype:`mixed`\\이지만, "
"메시지의 부 유형을 지정하는 데 사용할 수 있습니다. :mimetype:`multipart/_subtype`\\의 "
":mailheader:`Content-Type` 헤더가 메시지 객체에 추가됩니다. :mailheader:`MIME-Version` "
"헤더도 추가됩니다."

#: ../../library/email.mime.rst:89
msgid ""
"Optional *boundary* is the multipart boundary string.  When ``None`` (the"
" default), the boundary is calculated when needed (for example, when the "
"message is serialized)."
msgstr ""
"선택적 *boundary*\\는 멀티 파트 경계 문자열입니다. ``None``\\(기본값)이면, 경계는 필요할 때 (예를 들어 "
"메시지가 직렬화될 때) 계산됩니다."

#: ../../library/email.mime.rst:93
msgid ""
"*_subparts* is a sequence of initial subparts for the payload.  It must "
"be possible to convert this sequence to a list.  You can always attach "
"new subparts to the message by using the :meth:`Message.attach "
"<email.message.Message.attach>` method."
msgstr ""
"*_subparts*\\는 페이 로드의 초기 서브 파트 시퀀스입니다. 이 시퀀스를 리스트로 변환할 수 있어야 합니다. "
":meth:`Message.attach <email.message.Message.attach>` 메서드를 사용하여 항상 메시지에 새"
" 서브 파트를 첨부할 수 있습니다."

#: ../../library/email.mime.rst:98 ../../library/email.mime.rst:131
#: ../../library/email.mime.rst:165 ../../library/email.mime.rst:200
#: ../../library/email.mime.rst:223 ../../library/email.mime.rst:254
msgid ""
"Optional *policy* argument defaults to :class:`compat32 "
"<email.policy.Compat32>`."
msgstr "선택적 *policy* 인자의 기본값은 :class:`compat32 <email.policy.Compat32>`\\입니다."

#: ../../library/email.mime.rst:100
msgid ""
"Additional parameters for the :mailheader:`Content-Type` header are taken"
" from the keyword arguments, or passed into the *_params* argument, which"
" is a keyword dictionary."
msgstr ""
":mailheader:`Content-Type` 헤더에 대한 추가 매개 변수는 키워드 인자에서 취하거나, 키워드 딕셔너리인 "
"*_params* 인자로 전달됩니다."

#: ../../library/email.mime.rst:113
msgid "Module: :mod:`email.mime.application`"
msgstr "모듈: :mod:`email.mime.application`"

#: ../../library/email.mime.rst:115
msgid ""
"A subclass of :class:`~email.mime.nonmultipart.MIMENonMultipart`, the "
":class:`MIMEApplication` class is used to represent MIME message objects "
"of major type :mimetype:`application`.  *_data* contains the bytes for "
"the raw application data.  Optional *_subtype* specifies the MIME subtype"
" and defaults to :mimetype:`octet-stream`."
msgstr ""
":class:`~email.mime.nonmultipart.MIMENonMultipart` 의 서브 클래스, "
":class:`MIMEApplication` 클래스는 주 유형 :mimetype:`application`\\의 MIME 메시지 "
"객체를 나타내는 데 사용됩니다. *_data*\\는 원시 애플리케이션 데이터의 바이트 열을 포함합니다. 선택적 "
"*_subtype*\\은 MIME 부 유형을 지정하고 기본값은 :mimetype:`octet-stream`\\입니다."

#: ../../library/email.mime.rst:121
msgid ""
"Optional *_encoder* is a callable (i.e. function) which will perform the "
"actual encoding of the data for transport.  This callable takes one "
"argument, which is the :class:`MIMEApplication` instance. It should use "
":meth:`~email.message.Message.get_payload` and "
":meth:`~email.message.Message.set_payload` to change the payload to "
"encoded form.  It should also add any :mailheader:`Content-Transfer-"
"Encoding` or other headers to the message object as necessary.  The "
"default encoding is base64.  See the :mod:`email.encoders` module for a "
"list of the built-in encoders."
msgstr ""
"선택적 *_encoder*\\는 전송을 위해 데이터의 실제 인코딩을 수행할 콜러블(즉, 함수)입니다. 이 콜러블은 "
":class:`MIMEApplication` 인스턴스인 하나의 인자를 취합니다. 페이 로드를 인코딩된 형식으로 변경하려면 "
":meth:`~email.message.Message.get_payload`\\와 "
":meth:`~email.message.Message.set_payload`\\를 사용해야 합니다. 또한, 필요에 따라 "
":mailheader:`Content-Transfer-Encoding`\\이나 기타 헤더를 메시지 객체에 추가해야 합니다. 기본 "
"인코딩은 base64입니다. 내장 인코더의 목록은 :mod:`email.encoders` 모듈을 참조하십시오."

#: ../../library/email.mime.rst:133 ../../library/email.mime.rst:167
msgid "*_params* are passed straight through to the base class constructor."
msgstr "*_params*\\는 베이스 클래스 생성자로 바로 전달됩니다."

#: ../../library/email.mime.rst:144
msgid "Module: :mod:`email.mime.audio`"
msgstr "모듈: :mod:`email.mime.audio`"

#: ../../library/email.mime.rst:146
msgid ""
"A subclass of :class:`~email.mime.nonmultipart.MIMENonMultipart`, the "
":class:`MIMEAudio` class is used to create MIME message objects of major "
"type :mimetype:`audio`. *_audiodata* contains the bytes for the raw audio"
" data.  If this data can be decoded as au, wav, aiff, or aifc, then the "
"subtype will be automatically included in the :mailheader:`Content-Type` "
"header. Otherwise you can explicitly specify the audio subtype via the "
"*_subtype* argument.  If the minor type could not be guessed and "
"*_subtype* was not given, then :exc:`TypeError` is raised."
msgstr ""
":class:`~email.mime.nonmultipart.MIMENonMultipart` 의 서브 클래스, "
":class:`MIMEAudio` 클래스는 주 유형 :mimetype:`audio`\\의 MIME 메시지 객체를 만드는 데 "
"사용됩니다. *_audiodata*\\는 원시 오디오 데이터의 바이트 열을 포함합니다. 이 데이터를 au, wav, aiff 또는 "
"aifc로 디코딩 할 수 있으면, 부 유형이 :mailheader:`Content-Type` 헤더에 자동으로 포함됩니다. 그렇지 "
"않으면 *_subtype* 인자를 통해 audio 부 유형을 명시적으로 지정할 수 있습니다. 부 유형을 추측할 수 없고 "
"*_subtype*\\이 제공되지 않으면, :exc:`TypeError`\\가 발생합니다."

#: ../../library/email.mime.rst:155
msgid ""
"Optional *_encoder* is a callable (i.e. function) which will perform the "
"actual encoding of the audio data for transport.  This callable takes one"
" argument, which is the :class:`MIMEAudio` instance. It should use "
":meth:`~email.message.Message.get_payload` and "
":meth:`~email.message.Message.set_payload` to change the payload to "
"encoded form.  It should also add any :mailheader:`Content-Transfer-"
"Encoding` or other headers to the message object as necessary.  The "
"default encoding is base64.  See the :mod:`email.encoders` module for a "
"list of the built-in encoders."
msgstr ""
"선택적 *_encoder*\\는 전송을 위해 오디오 데이터의 실제 인코딩을 수행할 콜러블(즉, 함수)입니다. 이 콜러블은 "
":class:`MIMEAudio` 인스턴스인 하나의 인자를 취합니다. 페이 로드를 인코딩된 형식으로 변경하려면 "
":meth:`~email.message.Message.get_payload`\\와 "
":meth:`~email.message.Message.set_payload`\\를 사용해야 합니다. 또한 필요에 따라 "
":mailheader:`Content-Transfer-Encoding`\\이나 기타 헤더를 메시지 객체에 추가해야 합니다. 기본 "
"인코딩은 base64입니다. 내장 인코더의 목록은 :mod:`email.encoders` 모듈을 참조하십시오."

#: ../../library/email.mime.rst:178
msgid "Module: :mod:`email.mime.image`"
msgstr "모듈: :mod:`email.mime.image`"

#: ../../library/email.mime.rst:180
msgid ""
"A subclass of :class:`~email.mime.nonmultipart.MIMENonMultipart`, the "
":class:`MIMEImage` class is used to create MIME message objects of major "
"type :mimetype:`image`. *_imagedata* contains the bytes for the raw image"
" data.  If this data type can be detected (jpeg, png, gif, tiff, rgb, "
"pbm, pgm, ppm, rast, xbm, bmp, webp, and exr attempted), then the subtype"
" will be automatically included in the :mailheader:`Content-Type` header."
" Otherwise you can explicitly specify the image subtype via the "
"*_subtype* argument. If the minor type could not be guessed and "
"*_subtype* was not given, then :exc:`TypeError` is raised."
msgstr ""
":class:`~email.mime.nonmultipart.MIMENonMultipart` 의 서브 클래스, "
":class:`MIMEImage` 클래스는 주 유형 :mimetype:`image`\\의 MIME 메시지 객체를 만드는 데 "
"사용됩니다. *_imagedata*\\는 원시 이미지 데이터의 바이트 열을 포함합니다. 이 데이터 형이 감지된다면 (jpeg, "
"png, gif, tiff, rgb, pbm, pgm, ppm, rast, xbm, bmp, webp 과 exr 을 시도합니다), "
"부 유형이 :mailheader:`Content-Type` 헤더에 자동으로 포함됩니다. 그렇지 않으면 *_subtype* 인자를 "
"통해 image 부 유형을 명시적으로 지정할 수 있습니다. 부 유형을 추측할 수 없고 *_subtype*\\이 제공되지 않으면, "
":exc:`TypeError`\\가 발생합니다."

#: ../../library/email.mime.rst:190
msgid ""
"Optional *_encoder* is a callable (i.e. function) which will perform the "
"actual encoding of the image data for transport.  This callable takes one"
" argument, which is the :class:`MIMEImage` instance. It should use "
":meth:`~email.message.Message.get_payload` and "
":meth:`~email.message.Message.set_payload` to change the payload to "
"encoded form.  It should also add any :mailheader:`Content-Transfer-"
"Encoding` or other headers to the message object as necessary.  The "
"default encoding is base64.  See the :mod:`email.encoders` module for a "
"list of the built-in encoders."
msgstr ""
"선택적 *_encoder*\\는 전송을 위해 이미지 데이터의 실제 인코딩을 수행할 콜러블(즉, 함수)입니다. 이 콜러블은 "
":class:`MIMEImage` 인스턴스인 하나의 인자를 취합니다. 페이 로드를 인코딩된 형식으로 변경하려면 "
":meth:`~email.message.Message.get_payload`\\와 "
":meth:`~email.message.Message.set_payload`\\를 사용해야 합니다. 또한 필요에 따라 "
":mailheader:`Content-Transfer-Encoding`\\이나 기타 헤더를 메시지 객체에 추가해야 합니다. 기본 "
"인코딩은 base64입니다. 내장 인코더의 목록은 :mod:`email.encoders` 모듈을 참조하십시오."

#: ../../library/email.mime.rst:202
msgid ""
"*_params* are passed straight through to the "
":class:`~email.mime.base.MIMEBase` constructor."
msgstr "*_params*\\는 :class:`~email.mime.base.MIMEBase` 생성자로 바로 전달됩니다."

#: ../../library/email.mime.rst:212
msgid "Module: :mod:`email.mime.message`"
msgstr "모듈: :mod:`email.mime.message`"

#: ../../library/email.mime.rst:214
msgid ""
"A subclass of :class:`~email.mime.nonmultipart.MIMENonMultipart`, the "
":class:`MIMEMessage` class is used to create MIME objects of main type "
":mimetype:`message`. *_msg* is used as the payload, and must be an "
"instance of class :class:`~email.message.Message` (or a subclass "
"thereof), otherwise a :exc:`TypeError` is raised."
msgstr ""
":class:`~email.mime.nonmultipart.MIMENonMultipart` 의 서브 클래스, "
":class:`MIMEMessage` 클래스는 주 유형 :mimetype:`message`\\의 MIME 객체를 만드는 데 "
"사용됩니다. *_msg*\\는 페이 로드로 사용되며, :class:`~email.message.Message` 클래스(또는 그 서브"
" 클래스)의 인스턴스여야 합니다, 그렇지 않으면 :exc:`TypeError`\\가 발생합니다."

#: ../../library/email.mime.rst:220
msgid ""
"Optional *_subtype* sets the subtype of the message; it defaults to "
":mimetype:`rfc822`."
msgstr "선택적 *_subtype*\\은 메시지의 부 유형을 설정합니다; 기본값은 :mimetype:`rfc822`\\입니다."

#: ../../library/email.mime.rst:232
msgid "Module: :mod:`email.mime.text`"
msgstr "모듈: :mod:`email.mime.text`"

#: ../../library/email.mime.rst:234
msgid ""
"A subclass of :class:`~email.mime.nonmultipart.MIMENonMultipart`, the "
":class:`MIMEText` class is used to create MIME objects of major type "
":mimetype:`text`. *_text* is the string for the payload.  *_subtype* is "
"the minor type and defaults to :mimetype:`plain`.  *_charset* is the "
"character set of the text and is passed as an argument to the "
":class:`~email.mime.nonmultipart.MIMENonMultipart` constructor; it "
"defaults to ``us-ascii`` if the string contains only ``ascii`` code "
"points, and ``utf-8`` otherwise.  The *_charset* parameter accepts either"
" a string or a :class:`~email.charset.Charset` instance."
msgstr ""
":class:`~email.mime.nonmultipart.MIMENonMultipart` 의 서브 클래스, "
":class:`MIMEText` 클래스는 주 유형 :mimetype:`text`\\의 MIME 객체를 만드는 데 사용됩니다. "
"*_text*\\는 페이 로드의 문자열입니다. *_subtype*\\은 부 유형이며 기본값은 "
":mimetype:`plain`\\입니다. *_charset*\\은 텍스트의 문자 집합이며 "
":class:`~email.mime.nonmultipart.MIMENonMultipart` 생성자에 인자로 전달됩니다; 기본값은 "
"문자열에 ``ascii`` 코드 포인트만 포함되어 있으면 ``us-ascii``\\이고, 그렇지 않으면 ``utf-8``\\입니다."
" *_charset* 매개 변수는 문자열이나 :class:`~email.charset.Charset` 인스턴스를 받아들입니다."

#: ../../library/email.mime.rst:244
msgid ""
"Unless the *_charset* argument is explicitly set to ``None``, the "
"MIMEText object created will have both a :mailheader:`Content-Type` "
"header with a ``charset`` parameter, and a :mailheader:`Content-Transfer-"
"Encoding` header.  This means that a subsequent ``set_payload`` call will"
" not result in an encoded payload, even if a charset is passed in the "
"``set_payload`` command.  You can \"reset\" this behavior by deleting the"
" ``Content-Transfer-Encoding`` header, after which a ``set_payload`` call"
" will automatically encode the new payload (and add a new :mailheader"
":`Content-Transfer-Encoding` header)."
msgstr ""
"*_charset* 인자가 명시적으로 ``None``\\으로 설정되어 있지 않은 한, 만들어진 MIMEText 객체에는 "
"``charset`` 매개 변수가 있는 :mailheader:`Content-Type` 헤더와 :mailheader"
":`Content-Transfer-Encoding` 헤더가 모두 있습니다. 이는 charset이 ``set_payload`` "
"명령으로 전달되더라도, 후속 ``set_payload`` 호출이 인코딩된 페이 로드를 만들지 않음을 의미합니다. ``Content-"
"Transfer-Encoding`` 헤더를 삭제하여 이 동작을 \"재설정\"할 수 있으며, 그 후에 ``set_payload`` "
"호출은 자동으로 새 페이 로드를 인코딩합니다 (그리고 새 :mailheader:`Content-Transfer-Encoding` "
"헤더를 추가합니다)."

#: ../../library/email.mime.rst:256
msgid "*_charset* also accepts :class:`~email.charset.Charset` instances."
msgstr "*_charset*\\은 :class:`~email.charset.Charset` 인스턴스도 받아들입니다."

