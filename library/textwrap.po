# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2017, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-04-17 23:44+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: Dong-gweon Oh <flowdas@gmail.com>\n"
"Language-Team: Korean (https://python.flowdas.com)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.17.0\n"

#: ../../library/textwrap.rst:2
msgid ":mod:`!textwrap` --- Text wrapping and filling"
msgstr ":mod:`!textwrap` --- 텍스트 래핑과 채우기"

#: ../../library/textwrap.rst:10
msgid "**Source code:** :source:`Lib/textwrap.py`"
msgstr "**소스 코드:** :source:`Lib/textwrap.py`"

#: ../../library/textwrap.rst:14
msgid ""
"The :mod:`textwrap` module provides some convenience functions, as well "
"as :class:`TextWrapper`, the class that does all the work. If you're just"
" wrapping or filling one or two text strings, the convenience functions "
"should be good enough; otherwise, you should use an instance of "
":class:`TextWrapper` for efficiency."
msgstr ""
":mod:`textwrap` 모듈은 모든 작업을 수행하는 클래스인 :class:`TextWrapper`\\뿐만 아니라 몇 가지 편리"
" 함수도 제공합니다. 한두 개의 텍스트 문자열을 래핑(wrapping)하거나 채운(filling)다면, 편리 함수로도 충분해야 "
"합니다; 그렇지 않으면 효율을 위해 :class:`TextWrapper` 인스턴스를 사용해야 합니다."

#: ../../library/textwrap.rst:27
msgid ""
"Wraps the single paragraph in *text* (a string) so every line is at most "
"*width* characters long.  Returns a list of output lines, without final "
"newlines."
msgstr ""
"*text*\\(문자열)에 있는 단일 문단을 래핑해서 모든 줄의 길이가 최대 *width* 자가 되도록 합니다. 최종 줄 바꿈이 "
"없는 출력 줄의 리스트를 반환합니다."

#: ../../library/textwrap.rst:31
msgid ""
"Optional keyword arguments correspond to the instance attributes of "
":class:`TextWrapper`, documented below."
msgstr "선택적 키워드 인자는 아래에 설명된 :class:`TextWrapper`\\의 인스턴스 어트리뷰트에 해당합니다."

#: ../../library/textwrap.rst:34
msgid ""
"See the :meth:`TextWrapper.wrap` method for additional details on how "
":func:`wrap` behaves."
msgstr ":func:`wrap` 작동 방식에 대한 자세한 내용은 :meth:`TextWrapper.wrap` 메서드를 참조하십시오."

#: ../../library/textwrap.rst:45
msgid ""
"Wraps the single paragraph in *text*, and returns a single string "
"containing the wrapped paragraph.  :func:`fill` is shorthand for  ::"
msgstr ""
"*text*\\에 있는 단일 문단을 래핑하고, 래핑 된 문단을 포함하는 단일 문자열을 반환합니다. :func:`fill`\\은 "
"다음의 줄임 표현입니다 ::"

#: ../../library/textwrap.rst:48
msgid "\"\\n\".join(wrap(text, ...))"
msgstr "\"\\n\".join(wrap(text, ...))"

#: ../../library/textwrap.rst:50
msgid ""
"In particular, :func:`fill` accepts exactly the same keyword arguments as"
" :func:`wrap`."
msgstr "특히, :func:`fill`\\은 :func:`wrap`\\과 같은 키워드 인자를 받아들입니다."

#: ../../library/textwrap.rst:58
msgid "Collapse and truncate the given *text* to fit in the given *width*."
msgstr "주어진 *width*\\에 맞게 주어진 *text*\\를 축약하거나 자릅니다."

#: ../../library/textwrap.rst:60
msgid ""
"First the whitespace in *text* is collapsed (all whitespace is replaced "
"by single spaces).  If the result fits in the *width*, it is returned. "
"Otherwise, enough words are dropped from the end so that the remaining "
"words plus the *placeholder* fit within *width*::"
msgstr ""
"먼저 *text*\\에 있는 공백이 축약됩니다 (모든 공백이 단일 스페이스로 치환됩니다). 결과가 *width*\\에 맞으면 "
"반환됩니다. 그렇지 않으면, 나머지 단어와 *placeholder*\\가 *width* 내에 맞도록 충분한 단어가 끝에서 "
"삭제됩니다::"

#: ../../library/textwrap.rst:65
msgid ""
">>> textwrap.shorten(\"Hello  world!\", width=12)\n"
"'Hello world!'\n"
">>> textwrap.shorten(\"Hello  world!\", width=11)\n"
"'Hello [...]'\n"
">>> textwrap.shorten(\"Hello world\", width=10, placeholder=\"...\")\n"
"'Hello...'"
msgstr ""
">>> textwrap.shorten(\"Hello  world!\", width=12)\n"
"'Hello world!'\n"
">>> textwrap.shorten(\"Hello  world!\", width=11)\n"
"'Hello [...]'\n"
">>> textwrap.shorten(\"Hello world\", width=10, placeholder=\"...\")\n"
"'Hello...'"

#: ../../library/textwrap.rst:72
msgid ""
"Optional keyword arguments correspond to the instance attributes of "
":class:`TextWrapper`, documented below.  Note that the whitespace is "
"collapsed before the text is passed to the :class:`TextWrapper` "
":meth:`fill` function, so changing the value of :attr:`.tabsize`, "
":attr:`.expand_tabs`, :attr:`.drop_whitespace`, and "
":attr:`.replace_whitespace` will have no effect."
msgstr ""
"선택적 키워드 인자는 아래에 설명된 :class:`TextWrapper`\\의 인스턴스 어트리뷰트에 해당합니다. 텍스트가 "
":class:`TextWrapper` :meth:`fill` 함수에 전달되기 전에 공백이 축약되므로, "
":attr:`.tabsize`, :attr:`.expand_tabs`, :attr:`.drop_whitespace` 및 "
":attr:`.replace_whitespace` 값을 변경하는 것은 아무 효과가 없음에 유의하십시오."

#: ../../library/textwrap.rst:82
msgid "Remove any common leading whitespace from every line in *text*."
msgstr "*text*\\의 모든 줄에서 같은 선행 공백을 제거합니다."

#: ../../library/textwrap.rst:84
msgid ""
"This can be used to make triple-quoted strings line up with the left edge"
" of the display, while still presenting them in the source code in "
"indented form."
msgstr ""
"이것은 삼중 따옴표로 묶은 문자열을 소스 코드에서 여전히 들여쓰기 된 형태로 제시하면서, 디스플레이의 왼쪽 가장자리에 맞추는 데 "
"사용할 수 있습니다."

#: ../../library/textwrap.rst:87
msgid ""
"Note that tabs and spaces are both treated as whitespace, but they are "
"not equal: the lines ``\"  hello\"`` and ``\"\\thello\"`` are considered "
"to have no common leading whitespace."
msgstr ""
"탭과 공백은 모두 공백으로 처리되지만, 이들이 같지 않음에 유의하십시오: ``\"  hello\"``\\와 "
"``\"\\thello\"`` 줄에는 공통 선행 공백이 없는 것으로 간주합니다."

#: ../../library/textwrap.rst:91
msgid ""
"Lines containing only whitespace are ignored in the input and normalized "
"to a single newline character in the output."
msgstr "공백만 포함하는 줄은 입력에서 무시되고 출력에서 단일 개행 문자로 정규화됩니다."

#: ../../library/textwrap.rst:94 ../../library/textwrap.rst:115
msgid "For example::"
msgstr "예를 들면::"

#: ../../library/textwrap.rst:96
msgid ""
"def test():\n"
"    # end first line with \\ to avoid the empty line!\n"
"    s = '''\\\n"
"    hello\n"
"      world\n"
"    '''\n"
"    print(repr(s))          # prints '    hello\\n      world\\n    '\n"
"    print(repr(dedent(s)))  # prints 'hello\\n  world\\n'"
msgstr ""
"def test():\n"
"    # 빈 줄을 피하려고 첫 줄을 \\ 로 끝냅니다!\n"
"    s = '''\\\n"
"    hello\n"
"      world\n"
"    '''\n"
"    print(repr(s))          # '    hello\\n      world\\n    ' 를 인쇄합니다\n"
"    print(repr(dedent(s)))  # 'hello\\n  world\\n' 를 인쇄합니다"

#: ../../library/textwrap.rst:108
msgid "Add *prefix* to the beginning of selected lines in *text*."
msgstr "*text*\\에서 선택된 줄의 시작 부분에 *prefix*\\를 추가합니다."

#: ../../library/textwrap.rst:110
msgid "Lines are separated by calling ``text.splitlines(True)``."
msgstr "``text.splitlines(True)``\\를 호출하여 줄을 분할합니다."

#: ../../library/textwrap.rst:112
msgid ""
"By default, *prefix* is added to all lines that do not consist solely of "
"whitespace (including any line endings)."
msgstr "기본적으로, *prefix*\\는 공백으로만 구성되지 않는 모든 줄(마지막 줄 포함)에 추가됩니다."

#: ../../library/textwrap.rst:117
msgid ""
">>> s = 'hello\\n\\n \\nworld'\n"
">>> indent(s, '  ')\n"
"'  hello\\n\\n \\n  world'"
msgstr ""
">>> s = 'hello\\n\\n \\nworld'\n"
">>> indent(s, '  ')\n"
"'  hello\\n\\n \\n  world'"

#: ../../library/textwrap.rst:121
msgid ""
"The optional *predicate* argument can be used to control which lines are "
"indented. For example, it is easy to add *prefix* to even empty and "
"whitespace-only lines::"
msgstr ""
"선택적 *predicate* 인자는 어떤 줄을 들여쓰기할지 제어하는 데 사용될 수 있습니다. 예를 들어, 빈 줄과 공백만 있는 "
"줄에도 *prefix*\\를 추가하기는 쉽습니다::"

#: ../../library/textwrap.rst:125
msgid ""
">>> print(indent(s, '+ ', lambda line: True))\n"
"+ hello\n"
"+\n"
"+\n"
"+ world"
msgstr ""
">>> print(indent(s, '+ ', lambda line: True))\n"
"+ hello\n"
"+\n"
"+\n"
"+ world"

#: ../../library/textwrap.rst:134
msgid ""
":func:`wrap`, :func:`fill` and :func:`shorten` work by creating a "
":class:`TextWrapper` instance and calling a single method on it.  That "
"instance is not reused, so for applications that process many text "
"strings using :func:`wrap` and/or :func:`fill`, it may be more efficient "
"to create your own :class:`TextWrapper` object."
msgstr ""
":func:`wrap`, :func:`fill` 및 :func:`shorten`\\은 :class:`TextWrapper` "
"인스턴스를 만들고 그것의 단일 메서드를 호출하여 작동합니다. 이 인스턴스는 재사용되지 않기 때문에, :func:`wrap` 및/또는"
" :func:`fill`\\을 사용하여 많은 텍스트 문자열을 처리하는 응용 프로그램의 경우, 여러분 자신의 "
":class:`TextWrapper` 객체를 만드는 것이 더 효율적일 수 있습니다."

#: ../../library/textwrap.rst:140
msgid ""
"Text is preferably wrapped on whitespaces and right after the hyphens in "
"hyphenated words; only then will long words be broken if necessary, "
"unless :attr:`TextWrapper.break_long_words` is set to false."
msgstr ""
"텍스트는 공백과 하이픈이 있는 단어의 하이픈 바로 뒤에서 래핑하는 것을 선호합니다; "
":attr:`TextWrapper.break_long_words`\\가 거짓으로 설정되어 있지 않으면 그 후에만 긴 단어를 "
"분할합니다."

#: ../../library/textwrap.rst:146
msgid ""
"The :class:`TextWrapper` constructor accepts a number of optional keyword"
" arguments.  Each keyword argument corresponds to an instance attribute, "
"so for example ::"
msgstr ""
":class:`TextWrapper` 생성자는 여러 개의 선택적 키워드 인자를 받아들입니다. 각 키워드 인자는 인스턴스 어트리뷰트에"
" 해당합니다, 그래서 예를 들면 ::"

#: ../../library/textwrap.rst:150
msgid "wrapper = TextWrapper(initial_indent=\"* \")"
msgstr "wrapper = TextWrapper(initial_indent=\"* \")"

#: ../../library/textwrap.rst:152
msgid "is the same as  ::"
msgstr "는 다음과 같습니다 ::"

#: ../../library/textwrap.rst:154
msgid ""
"wrapper = TextWrapper()\n"
"wrapper.initial_indent = \"* \""
msgstr ""
"wrapper = TextWrapper()\n"
"wrapper.initial_indent = \"* \""

#: ../../library/textwrap.rst:157
msgid ""
"You can reuse the same :class:`TextWrapper` object many times, and you "
"can change any of its options through direct assignment to instance "
"attributes between uses."
msgstr ""
"같은 :class:`TextWrapper` 객체를 여러 번 재사용 할 수 있으며, 사용 도중 인스턴스 어트리뷰트에 직접 대입하여 "
"옵션을 변경할 수 있습니다."

#: ../../library/textwrap.rst:161
msgid ""
"The :class:`TextWrapper` instance attributes (and keyword arguments to "
"the constructor) are as follows:"
msgstr ":class:`TextWrapper` 인스턴스 어트리뷰트(와 생성자에 대한 키워드 인자)는 다음과 같습니다:"

#: ../../library/textwrap.rst:167
msgid ""
"(default: ``70``) The maximum length of wrapped lines.  As long as there "
"are no individual words in the input text longer than :attr:`width`, "
":class:`TextWrapper` guarantees that no output line will be longer than "
":attr:`width` characters."
msgstr ""
"(기본값: ``70``) 래핑 된 줄의 최대 길이. 입력 텍스트에 :attr:`width`\\보다 긴 개별 단어가 없는 한, "
":class:`TextWrapper`\\는 :attr:`width` 문자보다 긴 출력 줄이 없음을 보장합니다."

#: ../../library/textwrap.rst:175
msgid ""
"(default: ``True``) If true, then all tab characters in *text* will be "
"expanded to spaces using the :meth:`~str.expandtabs` method of *text*."
msgstr ""
"(기본값: ``True``) 참이면, *text*\\의 모든 탭 문자가 *text*\\의 :meth:`~str.expandtabs`"
" 메서드를 사용하여 스페이스로 확장됩니다."

#: ../../library/textwrap.rst:181
msgid ""
"(default: ``8``) If :attr:`expand_tabs` is true, then all tab characters "
"in *text* will be expanded to zero or more spaces, depending on the "
"current column and the given tab size."
msgstr ""
"(기본값: ``8``) :attr:`expand_tabs`\\가 참이면, *text*\\의 모든 탭 문자는 현재 열과 주어진 탭 "
"크기에 따라 0개 이상의 스페이스로 확장됩니다."

#: ../../library/textwrap.rst:190
msgid ""
"(default: ``True``) If true, after tab expansion but before wrapping, the"
" :meth:`wrap` method will replace each whitespace character with a single"
" space.  The whitespace characters replaced are as follows: tab, newline,"
" vertical tab, formfeed, and carriage return (``'\\t\\n\\v\\f\\r'``)."
msgstr ""
"(기본값: ``True``) 참이면, 탭 확장 후 래핑 전에, :meth:`wrap` 메서드는 각 공백 문자를 단일 스페이스로 "
"치환합니다. 치환되는 공백 문자는 다음과 같습니다: 탭, 줄 바꿈, 세로 탭, 폼 피드 및 캐리지 리턴 "
"(``'\\t\\n\\v\\f\\r'``)."

#: ../../library/textwrap.rst:198
msgid ""
"If :attr:`expand_tabs` is false and :attr:`replace_whitespace` is true, "
"each tab character will be replaced by a single space, which is *not* the"
" same as tab expansion."
msgstr ""
":attr:`expand_tabs`\\가 거짓이고 :attr:`replace_whitespace`\\가 참이면, 각 탭 문자는 단일"
" 스페이스로 치환되는데, 탭 확장과는 *다릅니다*."

#: ../../library/textwrap.rst:204
msgid ""
"If :attr:`replace_whitespace` is false, newlines may appear in the middle"
" of a line and cause strange output. For this reason, text should be "
"split into paragraphs (using :meth:`str.splitlines` or similar) which are"
" wrapped separately."
msgstr ""
":attr:`replace_whitespace`\\가 거짓이면, 줄 중간에 줄 바꿈이 나타나서 이상한 결과가 발생할 수 있습니다. "
"이러한 이유로, 텍스트는 (:meth:`str.splitlines`\\나 유사한 것을 사용해서) 문단으로 분할한 후에 별도로 "
"래핑해야 합니다."

#: ../../library/textwrap.rst:212
msgid ""
"(default: ``True``) If true, whitespace at the beginning and ending of "
"every line (after wrapping but before indenting) is dropped. Whitespace "
"at the beginning of the paragraph, however, is not dropped if non-"
"whitespace follows it.  If whitespace being dropped takes up an entire "
"line, the whole line is dropped."
msgstr ""
"(기본값: ``True``) 참이면, 모든 줄의 처음과 끝의 공백(래핑 이후 들여쓰기 전)이 삭제됩니다. 문단 시작 부분의 공백은 "
"공백이 아닌 것이 뒤에 오면 삭제되지 않습니다. 삭제되는 공백이 줄 전체를 차지하면, 줄 전체가 삭제됩니다."

#: ../../library/textwrap.rst:221
msgid ""
"(default: ``''``) String that will be prepended to the first line of "
"wrapped output.  Counts towards the length of the first line.  The empty "
"string is not indented."
msgstr ""
"(기본값: ``''``) 래핑 된 출력의 첫 번째 줄 앞에 추가될 문자열입니다. 첫 번째 줄의 길이 계산에 포함됩니다. 빈 문자열은"
" 들여 쓰지 않습니다."

#: ../../library/textwrap.rst:228
msgid ""
"(default: ``''``) String that will be prepended to all lines of wrapped "
"output except the first.  Counts towards the length of each line except "
"the first."
msgstr ""
"(기본값: ``''``) 첫 줄을 제외한 래핑 된 출력의 모든 줄 앞에 추가될 문자열입니다. 첫 번째 줄을 제외한 각 줄의 길이 "
"계산에 포함됩니다."

#: ../../library/textwrap.rst:235
msgid ""
"(default: ``False``) If true, :class:`TextWrapper` attempts to detect "
"sentence endings and ensure that sentences are always separated by "
"exactly two spaces.  This is generally desired for text in a monospaced "
"font. However, the sentence detection algorithm is imperfect: it assumes "
"that a sentence ending consists of a lowercase letter followed by one of "
"``'.'``, ``'!'``, or ``'?'``, possibly followed by one of ``'\"'`` or "
"``\"'\"``, followed by a space.  One problem with this algorithm is that "
"it is unable to detect the difference between \"Dr.\" in ::"
msgstr ""
"(기본값: ``False``) 참이면, :class:`TextWrapper`\\는 문장의 끝을 감지하고 문장이 항상 정확히 두 개의"
" 스페이스로 분리되도록 만들려고 합니다. 이것은 일반적으로 고정 폭 글꼴의 텍스트에 적합합니다. 그러나, 문장 감지 알고리즘은 "
"불완전합니다: 문장 끝은 ``'.'``, ``'!'`` 또는 ``'?'`` 중 하나가 뒤에 오고, ``'\"'``\\나 "
"``\"'\"`` 중 하나가 뒤따르는 것도 가능, 그 뒤에 스페이스가 오는 소문자로 구성된다고 가정합니다. 이 알고리즘의 한가지 "
"문제는 다음에 나오는 \"Dr.\" 와 ::"

#: ../../library/textwrap.rst:244
msgid "[...] Dr. Frankenstein's monster [...]"
msgstr "[...] Dr. Frankenstein's monster [...]"

#: ../../library/textwrap.rst:246
msgid "and \"Spot.\" in ::"
msgstr "다음에 나오는 \"Spot.\" 사이의 차이점을 탐지할 수 없다는 것입니다 ::"

#: ../../library/textwrap.rst:248
msgid "[...] See Spot. See Spot run [...]"
msgstr "[...] See Spot. See Spot run [...]"

#: ../../library/textwrap.rst:250
msgid ":attr:`fix_sentence_endings` is false by default."
msgstr ":attr:`fix_sentence_endings`\\는 기본적으로 거짓입니다."

#: ../../library/textwrap.rst:252
msgid ""
"Since the sentence detection algorithm relies on ``string.lowercase`` for"
" the definition of \"lowercase letter\", and a convention of using two "
"spaces after a period to separate sentences on the same line, it is "
"specific to English-language texts."
msgstr ""
"문장 감지 알고리즘은 \"소문자\" 의 정의에 ``string.lowercase``\\에 의존하고, 같은 줄에서 문장을 분리하기 "
"위해 마침표 뒤에 두 개의 스페이스를 사용하는 규칙을 따르므로, 영어 텍스트에만 적용됩니다."

#: ../../library/textwrap.rst:260
msgid ""
"(default: ``True``) If true, then words longer than :attr:`width` will be"
" broken in order to ensure that no lines are longer than :attr:`width`.  "
"If it is false, long words will not be broken, and some lines may be "
"longer than :attr:`width`.  (Long words will be put on a line by "
"themselves, in order to minimize the amount by which :attr:`width` is "
"exceeded.)"
msgstr ""
"(기본값: ``True``) 참이면, :attr:`width`\\보다 긴 줄이 없도록 하기 위해, :attr:`width`\\보다 "
"긴 단어를 분할합니다. 거짓이면, 긴 단어가 깨지지 않으며, 일부 줄이 :attr:`width`\\보다 길 수 있습니다. "
"(:attr:`width`\\를 초과하는 양을 최소화하기 위해 긴 단어는 독립된 줄에 넣습니다.)"

#: ../../library/textwrap.rst:269
msgid ""
"(default: ``True``) If true, wrapping will occur preferably on "
"whitespaces and right after hyphens in compound words, as it is customary"
" in English. If false, only whitespaces will be considered as potentially"
" good places for line breaks, but you need to set "
":attr:`break_long_words` to false if you want truly insecable words.  "
"Default behaviour in previous versions was to always allow breaking "
"hyphenated words."
msgstr ""
"(기본값: ``True``) 참이면, 래핑이, 영어에서의 관례대로, 공백과 복합 단어의 하이픈 바로 뒤에서 발생합니다. 거짓이면, "
"공백만을 줄 바꿈을 위한 좋은 장소로 간주하지만, 진정한 분할되지 않는 단어를 원한다면 "
":attr:`break_long_words`\\를 거짓으로 설정해야 합니다. 이전 버전의 기본 동작은 항상 하이픈으로 연결된 단어를"
" 분리 할 수 있게 하는 것이었습니다."

#: ../../library/textwrap.rst:279
msgid ""
"(default: ``None``) If not ``None``, then the output will contain at most"
" *max_lines* lines, with *placeholder* appearing at the end of the "
"output."
msgstr ""
"(기본값: ``None``) ``None``\\이 아니면, 출력은 최대 *max_lines* 줄을 포함하고, "
"*placeholder*\\가 출력 끝에 나타납니다."

#: ../../library/textwrap.rst:289
msgid ""
"(default: ``' [...]'``) String that will appear at the end of the output "
"text if it has been truncated."
msgstr "(기본값: ``' [...]'``) 잘렸을 때 출력 텍스트의 끝에 표시할 문자열."

#: ../../library/textwrap.rst:295
msgid ""
":class:`TextWrapper` also provides some public methods, analogous to the "
"module-level convenience functions:"
msgstr ":class:`TextWrapper`\\는 모듈 수준 편리 함수와 유사한 몇 가지 공용 메서드도 제공합니다:"

#: ../../library/textwrap.rst:300
msgid ""
"Wraps the single paragraph in *text* (a string) so every line is at most "
":attr:`width` characters long.  All wrapping options are taken from "
"instance attributes of the :class:`TextWrapper` instance.  Returns a list"
" of output lines, without final newlines.  If the wrapped output has no "
"content, the returned list is empty."
msgstr ""
"*text*\\(문자열)에 있는 한 문단을 모든 줄의 길이가 최대 :attr:`width` 자가 되도록 래핑합니다. 모든 래핑 "
"옵션은 :class:`TextWrapper` 인스턴스의 인스턴스 어트리뷰트에서 가져옵니다. 최종 줄 바꿈이 없는 출력 줄의 리스트를"
" 반환합니다. 래핑 된 출력에 내용이 없으면 반환된 리스트는 비어 있습니다."

#: ../../library/textwrap.rst:309
msgid ""
"Wraps the single paragraph in *text*, and returns a single string "
"containing the wrapped paragraph."
msgstr "*text*\\에 있는 단일 문단을 래핑하고, 래핑 된 문단을 포함하는 단일 문자열을 반환합니다."

#: ../../library/textwrap.rst:285
msgid "..."
msgstr "..."

#: ../../library/textwrap.rst:285
msgid "placeholder"
msgstr "플레이스홀더"

