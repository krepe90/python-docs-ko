# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2017, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-04-17 23:44+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: Dong-gweon Oh <flowdas@gmail.com>\n"
"Language-Team: Korean (https://python.flowdas.com)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.17.0\n"

#: ../../library/shlex.rst:2
#, fuzzy
msgid ":mod:`!shlex` --- Simple lexical analysis"
msgstr ":mod:`shlex` --- 간단한 어휘 분석"

#: ../../library/shlex.rst:12
msgid "**Source code:** :source:`Lib/shlex.py`"
msgstr "**소스 코드:** :source:`Lib/shlex.py`"

#: ../../library/shlex.rst:16
msgid ""
"The :class:`~shlex.shlex` class makes it easy to write lexical analyzers "
"for simple syntaxes resembling that of the Unix shell.  This will often "
"be useful for writing minilanguages, (for example, in run control files "
"for Python applications) or for parsing quoted strings."
msgstr ""
":class:`~shlex.shlex` 클래스를 사용하면 유닉스 셸과 유사한 간단한 구문에 대한 어휘 분석기를 쉽게 작성할 수 "
"있습니다. 이것은 미니 언어를 작성하거나 (예를 들어 파이썬 응용 프로그램을 위한 실행 제어 파일에서), 인용된 문자열을 구문 "
"분석할 때 유용합니다."

#: ../../library/shlex.rst:21
msgid "The :mod:`shlex` module defines the following functions:"
msgstr ":mod:`shlex` 모듈은 다음 함수를 정의합니다:"

#: ../../library/shlex.rst:26
msgid ""
"Split the string *s* using shell-like syntax. If *comments* is "
":const:`False` (the default), the parsing of comments in the given string"
" will be disabled (setting the :attr:`~shlex.commenters` attribute of the"
" :class:`~shlex.shlex` instance to the empty string).  This function "
"operates in POSIX mode by default, but uses non-POSIX mode if the *posix*"
" argument is false."
msgstr ""
"셸과 비슷한 문법을 사용하여 문자열 *s*\\를 분할합니다. *comments*\\가 :const:`False`\\(기본값)이면, "
"지정된 문자열의 주석 구문 분석이 비활성화됩니다 (:class:`~shlex.shlex` 인스턴스의 "
":attr:`~shlex.commenters` 어트리뷰트를 빈 문자열로 설정합니다). 이 함수는 기본적으로 POSIX 모드로 "
"작동하지만, *posix* 인자가 거짓이면 비 POSIX 모드를 사용합니다."

#: ../../library/shlex.rst:33
#, fuzzy
msgid ""
"Passing ``None`` for *s* argument now raises an exception, rather than "
"reading :data:`sys.stdin`."
msgstr "*s*\\에 ``None``\\을 전달하면 향후 파이썬 버전에서 예외가 발생할 것입니다."

#: ../../library/shlex.rst:39
msgid ""
"Concatenate the tokens of the list *split_command* and return a string. "
"This function is the inverse of :func:`split`."
msgstr ""
"리스트 *split_command*\\의 토큰을 이어붙이고 문자열을 반환합니다. 이 함수는 :func:`split`\\의 "
"역함수입니다."

#: ../../library/shlex.rst:46
msgid ""
"The returned value is shell-escaped to protect against injection "
"vulnerabilities (see :func:`quote`)."
msgstr ""
"반환된 값은 주입 취약점(injection vulnerabilities)으로부터 보호하기 위해 셸 이스케이프 처리됩니다 "
"(:func:`quote`\\를 참조하십시오)."

#: ../../library/shlex.rst:54
msgid ""
"Return a shell-escaped version of the string *s*.  The returned value is "
"a string that can safely be used as one token in a shell command line, "
"for cases where you cannot use a list."
msgstr ""
"셸 이스케이프 된 문자열 *s*\\를 반환합니다. 반환된 값은 (리스트를 사용할 수 없는 경우) 셸 명령 줄에서 하나의 토큰으로 "
"안전하게 사용할 수 있는 문자열입니다."

#: ../../library/shlex.rst:62
msgid "The ``shlex`` module is **only designed for Unix shells**."
msgstr ""

#: ../../library/shlex.rst:64
msgid ""
"The :func:`quote` function is not guaranteed to be correct on non-POSIX "
"compliant shells or shells from other operating systems such as Windows. "
"Executing commands quoted by this module on such shells can open up the "
"possibility of a command injection vulnerability."
msgstr ""

#: ../../library/shlex.rst:69
msgid ""
"Consider using functions that pass command arguments with lists such as "
":func:`subprocess.run` with ``shell=False``."
msgstr ""

#: ../../library/shlex.rst:72
msgid "This idiom would be unsafe:"
msgstr "이 관용구는 안전하지 않습니다:"

#: ../../library/shlex.rst:79
msgid ":func:`quote` lets you plug the security hole:"
msgstr ":func:`quote`\\를 사용하면 보안 허점을 메꿀 수 있습니다:"

#: ../../library/shlex.rst:89
msgid "The quoting is compatible with UNIX shells and with :func:`split`:"
msgstr "인용(quoting)은 유닉스 셸과 :func:`split`\\과 호환됩니다:"

#: ../../library/shlex.rst:101
msgid "The :mod:`shlex` module defines the following class:"
msgstr ":mod:`shlex` 모듈은 다음 클래스를 정의합니다:"

#: ../../library/shlex.rst:106
msgid ""
"A :class:`~shlex.shlex` instance or subclass instance is a lexical "
"analyzer object.  The initialization argument, if present, specifies "
"where to read characters from.  It must be a file-/stream-like object "
"with :meth:`~io.TextIOBase.read` and :meth:`~io.TextIOBase.readline` "
"methods, or a string.  If no argument is given, input will be taken from "
"``sys.stdin``. The second optional argument is a filename string, which "
"sets the initial value of the :attr:`~shlex.infile` attribute.  If the "
"*instream* argument is omitted or equal to ``sys.stdin``, this second "
"argument defaults to \"stdin\".  The *posix* argument defines the "
"operational mode: when *posix* is not true (default), the "
":class:`~shlex.shlex` instance will operate in compatibility mode.  When "
"operating in POSIX mode, :class:`~shlex.shlex` will try to be as close as"
" possible to the POSIX shell parsing rules.  The *punctuation_chars* "
"argument provides a way to make the behaviour even closer to how real "
"shells parse.  This can take a number of values: the default value, "
"``False``, preserves the behaviour seen under Python 3.5 and earlier.  If"
" set to ``True``, then parsing of the characters ``();<>|&`` is changed: "
"any run of these characters (considered punctuation characters) is "
"returned as a single token.  If set to a non-empty string of characters, "
"those characters will be used as the punctuation characters.  Any "
"characters in the :attr:`wordchars` attribute that appear in "
"*punctuation_chars* will be removed from :attr:`wordchars`.  See :ref"
":`improved-shell-compatibility` for more information. *punctuation_chars*"
" can be set only upon :class:`~shlex.shlex` instance creation and can't "
"be modified later."
msgstr ""
":class:`~shlex.shlex` 인스턴스나 서브 클래스 인스턴스는 어휘 분석기 객체입니다. 존재할 때 초기화 인자는 문자를 "
"어디에서 읽을지를 지정합니다. :meth:`~io.TextIOBase.read`\\와 "
":meth:`~io.TextIOBase.readline` 메서드가 있는 파일/스트림류 객체이거나 문자열이어야 합니다. 인자가 없으면"
" ``sys.stdin``\\에서 입력을 받습니다. 두 번째 선택적 인자는 파일명 문자열이며, "
":attr:`~shlex.infile` 어트리뷰트의 초깃값을 설정합니다. *instream* 인자가 생략되거나 "
"``sys.stdin``\\과 같으면, 이 두 번째 인자의 기본값은 \"stdin\"입니다. *posix* 인자는 작동 모드를 "
"정의합니다: *posix*\\가 참이 아닐 때 (기본값), :class:`~shlex.shlex` 인스턴스는 호환 모드에서 "
"작동합니다. POSIX 모드에서 작동할 때, :class:`~shlex.shlex`\\는 가능한 한 POSIX 셸 구문 분석 규칙에"
" 가깝도록 시도합니다. *punctuation_chars* 인자는 동작을 실제 셸이 구문 분석하는 방식에 더 가깝게 만드는 방법을 "
"제공합니다. 이것은 여러 종류의 값을 취할 수 있습니다: 기본값 ``False``\\는 파이썬 3.5와 이전 버전에서의 동작을 "
"유지합니다. ``True``\\로 설정되면, 문자 ``();<>|&``\\의 구문 분석이 변경됩니다: 이러한 "
"문자(구두(punctuation) 문자로 간주합니다)의 모든 연속은 단일 토큰으로 반환됩니다. 비어 있지 않은 문자열로 설정하면, "
"해당 문자는 구두(punctuation) 문자로 사용됩니다. *punctuation_chars*\\에 나타나는 "
":attr:`wordchars` 어트리뷰트의 문자는 :attr:`wordchars`\\에서 제거됩니다. 자세한 정보는 :ref"
":`improved-shell-compatibility`\\을 참조하십시오. *punctuation_chars*\\는 "
":class:`~shlex.shlex` 인스턴스 생성 시에만 설정할 수 있으며 나중에 수정할 수 없습니다."

#: ../../library/shlex.rst:131
msgid "The *punctuation_chars* parameter was added."
msgstr "*punctuation_chars* 매개 변수가 추가되었습니다."

#: ../../library/shlex.rst:136
msgid "Module :mod:`configparser`"
msgstr "모듈 :mod:`configparser`"

#: ../../library/shlex.rst:137
msgid "Parser for configuration files similar to the Windows :file:`.ini` files."
msgstr "윈도우 :file:`.ini` 파일과 유사한 구성 파일 구문 분석기."

#: ../../library/shlex.rst:143
msgid "shlex Objects"
msgstr "shlex 객체"

#: ../../library/shlex.rst:145
msgid "A :class:`~shlex.shlex` instance has the following methods:"
msgstr ":class:`~shlex.shlex` 인스턴스에는 다음과 같은 메서드가 있습니다:"

#: ../../library/shlex.rst:150
msgid ""
"Return a token.  If tokens have been stacked using :meth:`push_token`, "
"pop a token off the stack.  Otherwise, read one from the input stream.  "
"If reading encounters an immediate end-of-file, :attr:`eof` is returned "
"(the empty string (``''``) in non-POSIX mode, and ``None`` in POSIX "
"mode)."
msgstr ""
"토큰을 반환합니다. :meth:`push_token`\\을 사용하여 토큰이 스택(stack) 되었으면, 스택에서 토큰을 팝(pop)"
" 합니다. 그렇지 않으면, 입력 스트림에서 하나를 읽습니다. 읽기가 즉시 파일 끝을 만나면, :attr:`eof`\\가 반환됩니다 "
"(POSIX 모드가 아니면 빈 문자열 (``''``), POSIX 모드이면 ``None``)."

#: ../../library/shlex.rst:158
msgid "Push the argument onto the token stack."
msgstr "인자를 토큰 스택으로 푸시(push)합니다."

#: ../../library/shlex.rst:163
msgid ""
"Read a raw token.  Ignore the pushback stack, and do not interpret source"
" requests.  (This is not ordinarily a useful entry point, and is "
"documented here only for the sake of completeness.)"
msgstr ""
"원시 토큰을 읽습니다. 푸시백 스택을 무시하고, 소스 요청(source requests)을 해석하지 않습니다. (이것은 일반적으로 "
"유용한 진입점이 아니며, 단지 완전성을 위해 여기에서 설명합니다.)"

#: ../../library/shlex.rst:170
msgid ""
"When :class:`~shlex.shlex` detects a source request (see :attr:`source` "
"below) this method is given the following token as argument, and expected"
" to return a tuple consisting of a filename and an open file-like object."
msgstr ""
":class:`~shlex.shlex`\\가 소스 요청(아래 :attr:`source`\\를 참조하십시오)을 감지할 때 이 "
"메서드에는 다음 토큰이 인자로 제공되고 파일명과 열린 파일류 객체로 구성된 튜플을 반환해야 합니다."

#: ../../library/shlex.rst:174
msgid ""
"Normally, this method first strips any quotes off the argument.  If the "
"result is an absolute pathname, or there was no previous source request "
"in effect, or the previous source was a stream (such as ``sys.stdin``), "
"the result is left alone.  Otherwise, if the result is a relative "
"pathname, the directory part of the name of the file immediately before "
"it on the source inclusion stack is prepended (this behavior is like the "
"way the C preprocessor handles ``#include \"file.h\"``)."
msgstr ""
"일반적으로, 이 메서드는 먼저 인자에서 인용(quotes)을 제거합니다. 결과가 절대 경로명이거나 유효한 이전 소스 요청이 없거나 "
"이전 소스가 스트림(가령 ``sys.stdin``)이면 결과는 그대로 유지됩니다. 그렇지 않으면, 결과가 상대 경로명이면 소스 포함"
" 스택에서 파일 바로 앞에 있는 파일의 이름의 디렉터리 부분을 앞에 붙입니다 (이 동작은 C 전처리기가 ``#include "
"\"file.h\"``\\를 처리하는 방식과 유사합니다)."

#: ../../library/shlex.rst:182
msgid ""
"The result of the manipulations is treated as a filename, and returned as"
" the first component of the tuple, with :func:`open` called on it to "
"yield the second component. (Note: this is the reverse of the order of "
"arguments in instance initialization!)"
msgstr ""
"조작 결과는 파일명으로 취급되고, 튜플의 첫 번째 구성 요소로 반환되며, 이것에 :func:`open`\\이 호출되어 두 번째 구성"
" 요소를 산출합니다. (참고: 이것은 인스턴스 초기화의 인자 순서와 반대입니다!)"

#: ../../library/shlex.rst:187
msgid ""
"This hook is exposed so that you can use it to implement directory search"
" paths, addition of file extensions, and other namespace hacks. There is "
"no corresponding 'close' hook, but a shlex instance will call the "
":meth:`~io.IOBase.close` method of the sourced input stream when it "
"returns EOF."
msgstr ""
"이 훅은 디렉터리 검색 경로, 파일 확장자 추가 및 기타 네임 스페이스 해킹을 구현하는 데 사용할 수 있도록 노출됩니다. 해당 "
"'닫기' 훅은 없지만, shlex 인스턴스는 소스 입력 스트림이 EOF를 반환할 때 그것의 "
":meth:`~io.IOBase.close` 메서드를 호출합니다."

#: ../../library/shlex.rst:193
msgid ""
"For more explicit control of source stacking, use the :meth:`push_source`"
" and :meth:`pop_source` methods."
msgstr ""
"소스 스태킹을 더 명시적으로 제어하려면, :meth:`push_source`\\와 :meth:`pop_source` 메서드를 "
"사용하십시오."

#: ../../library/shlex.rst:199
msgid ""
"Push an input source stream onto the input stack.  If the filename "
"argument is specified it will later be available for use in error "
"messages.  This is the same method used internally by the "
":meth:`sourcehook` method."
msgstr ""
"입력 소스 스트림을 입력 스택으로 푸시합니다. filename 인자가 지정되면 나중에 에러 메시지에 사용할 수 있습니다. 이것은 "
":meth:`sourcehook` 메서드에 의해 내부적으로 사용되는 것과 같은 메서드입니다."

#: ../../library/shlex.rst:206
msgid ""
"Pop the last-pushed input source from the input stack. This is the same "
"method used internally when the lexer reaches EOF on a stacked input "
"stream."
msgstr ""
"마지막으로 푸시 된 입력 소스를 입력 스택에서 팝 합니다. 이는 어휘 분석기가 스택 된 입력 스트림에서 EOF에 도달할 때 "
"내부적으로 사용되는 것과 같은 메서드입니다."

#: ../../library/shlex.rst:212
#, python-format
msgid ""
"This method generates an error message leader in the format of a Unix C "
"compiler error label; the format is ``'\"%s\", line %d: '``, where the "
"``%s`` is replaced with the name of the current source file and the "
"``%d`` with the current input line number (the optional arguments can be "
"used to override these)."
msgstr ""
"이 메서드는 유닉스 C 컴파일러 에러 레이블 형식으로 에러 메시지 리더를 생성합니다; 형식은 ``'\"%s\", line %d: "
"'``\\이며, 여기서 ``%s``\\는 현재 소스 파일의 이름으로 치환되고 ``%d``\\는 현재 입력 줄 번호로 치환됩니다 "
"(선택적 인자를 사용하여 이를 재정의할 수 있습니다)."

#: ../../library/shlex.rst:217
msgid ""
"This convenience is provided to encourage :mod:`shlex` users to generate "
"error messages in the standard, parseable format understood by Emacs and "
"other Unix tools."
msgstr ""
"이 편리 메서드는 :mod:`shlex` 사용자가 Emacs와 기타 유닉스 도구가 이해할 수 있는 표준의 구문 분석 가능한 형식으로"
" 에러 메시지를 생성하도록 권장하기 위해 제공됩니다."

#: ../../library/shlex.rst:221
msgid ""
"Instances of :class:`~shlex.shlex` subclasses have some public instance "
"variables which either control lexical analysis or can be used for "
"debugging:"
msgstr ""
":class:`~shlex.shlex` 서브 클래스의 인스턴스에는 어휘 분석을 제어하거나 디버깅에 사용할 수 있는 일부 공용 "
"인스턴스 변수가 있습니다:"

#: ../../library/shlex.rst:227
msgid ""
"The string of characters that are recognized as comment beginners. All "
"characters from the comment beginner to end of line are ignored. Includes"
" just ``'#'`` by default."
msgstr "주석을 시작하는 것으로 인식되는 문자열. 주석 시작부터 줄 끝까지의 모든 문자는 무시됩니다. 기본적으로 ``'#'`` 만 포함합니다."

#: ../../library/shlex.rst:234
msgid ""
"The string of characters that will accumulate into multi-character "
"tokens.  By default, includes all ASCII alphanumerics and underscore.  In"
" POSIX mode, the accented characters in the Latin-1 set are also "
"included.  If :attr:`punctuation_chars` is not empty, the characters "
"``~-./*?=``, which can appear in filename specifications and command line"
" parameters, will also be included in this attribute, and any characters "
"which appear in ``punctuation_chars`` will be removed from ``wordchars`` "
"if they are present there. If :attr:`whitespace_split` is set to "
"``True``, this will have no effect."
msgstr ""
"다중 문자 토큰에 누적될 문자들의 문자열. 기본적으로, 모든 ASCII 영숫자와 밑줄이 포함됩니다. POSIX 모드에서는, 라틴-1"
" 집합의 악센트 부호 문자도 포함됩니다. :attr:`punctuation_chars`\\가 비어 있지 않으면, 파일명 명세와 명령"
" 줄 매개 변수에 나타날 수 있는 문자 ``~-./*?=``\\도 이 어트리뷰트에 포함되며, "
"``punctuation_chars``\\에 있는 문자는 ``wordchars``\\에 있으면 제거됩니다. "
":attr:`whitespace_split`\\이 ``True``\\로 설정되면, 이것은 효과가 없습니다."

#: ../../library/shlex.rst:247
msgid ""
"Characters that will be considered whitespace and skipped.  Whitespace "
"bounds tokens.  By default, includes space, tab, linefeed and carriage-"
"return."
msgstr "공백으로 간주하여 건너뛸 문자들. 공백은 토큰의 경계를 만듭니다. 기본적으로, 스페이스, 탭, 줄 바꿈 및 캐리지 리턴이 포함됩니다."

#: ../../library/shlex.rst:253
msgid ""
"Characters that will be considered as escape. This will be only used in "
"POSIX mode, and includes just ``'\\'`` by default."
msgstr "이스케이프로 간주하는 문자들. POSIX 모드에서만 사용되며, 기본적으로 ``'\\'`` 만 포함합니다."

#: ../../library/shlex.rst:259
msgid ""
"Characters that will be considered string quotes.  The token accumulates "
"until the same quote is encountered again (thus, different quote types "
"protect each other as in the shell.)  By default, includes ASCII single "
"and double quotes."
msgstr ""
"문자열 인용으로 간주하는 문자들. 같은 인용을 다시 만날 때까지 토큰이 누적됩니다 (따라서, 다른 인용 유형은 셸에서와같이 서로를 "
"보호합니다). 기본적으로, ASCII 작은따옴표와 큰따옴표가 포함됩니다."

#: ../../library/shlex.rst:266
msgid ""
"Characters in :attr:`quotes` that will interpret escape characters "
"defined in :attr:`escape`.  This is only used in POSIX mode, and includes"
" just ``'\"'`` by default."
msgstr ""
":attr:`escape`\\에 정의된 이스케이프 문자를 해석하는 :attr:`quotes`\\의 문자들. 이것은 POSIX "
"모드에서만 사용되며, 기본적으로 ``'\"'`` 만 포함합니다."

#: ../../library/shlex.rst:273
msgid ""
"If ``True``, tokens will only be split in whitespaces.  This is useful, "
"for example, for parsing command lines with :class:`~shlex.shlex`, "
"getting tokens in a similar way to shell arguments.  When used in "
"combination with :attr:`punctuation_chars`, tokens will be split on "
"whitespace in addition to those characters."
msgstr ""
"``True``\\이면, 토큰은 공백으로만 분할됩니다. 예를 들어, :class:`~shlex.shlex`\\로 명령 줄을 구문 "
"분석하고 셸 인자와 유사한 방식으로 토큰을 가져오는 데 유용합니다. :attr:`punctuation_chars`\\와 함께 "
"사용하면, 토큰은 그 문자들 외에도 공백으로 분할됩니다."

#: ../../library/shlex.rst:279
msgid ""
"The :attr:`punctuation_chars` attribute was made compatible with the "
":attr:`whitespace_split` attribute."
msgstr ":attr:`punctuation_chars` 어트리뷰트가 :attr:`whitespace_split` 어트리뷰트와 호환되었습니다."

#: ../../library/shlex.rst:286
msgid ""
"The name of the current input file, as initially set at class "
"instantiation time or stacked by later source requests.  It may be useful"
" to examine this when constructing error messages."
msgstr ""
"클래스 인스턴스화 시점에 처음 설정되거나 이후 소스 요청으로 스택 된 현재 입력 파일의 이름. 에러 메시지를 구성할 때 이를 "
"조사하는 것이 유용할 수 있습니다."

#: ../../library/shlex.rst:293
msgid ""
"The input stream from which this :class:`~shlex.shlex` instance is "
"reading characters."
msgstr "이 :class:`~shlex.shlex` 인스턴스가 문자를 읽고 있는 입력 스트림."

#: ../../library/shlex.rst:299
msgid ""
"This attribute is ``None`` by default.  If you assign a string to it, "
"that string will be recognized as a lexical-level inclusion request "
"similar to the ``source`` keyword in various shells.  That is, the "
"immediately following token will be opened as a filename and input will "
"be taken from that stream until EOF, at which point the "
":meth:`~io.IOBase.close` method of that stream will be called and the "
"input source will again become the original input stream.  Source "
"requests may be stacked any number of levels deep."
msgstr ""
"이 어트리뷰트는 기본적으로 ``None``\\입니다. 문자열을 대입하면, 해당 문자열은 여러 셸의 ``source`` 키워드와 "
"유사한 어휘 수준 포함 요청으로 인식됩니다. 즉, 바로 다음 토큰이 파일명으로 열리고 그 스트림에서 입력을 EOF까지 취합니다, 이"
" 시점에서 해당 스트림의 :meth:`~io.IOBase.close` 메서드가 호출되고 입력 소스는 다시 원래 입력 스트림이 "
"됩니다. 소스 요청은 임의의 수준 깊이로 스택 될 수 있습니다."

#: ../../library/shlex.rst:310
msgid ""
"If this attribute is numeric and ``1`` or more, a :class:`~shlex.shlex` "
"instance will print verbose progress output on its behavior.  If you need"
" to use this, you can read the module source code to learn the details."
msgstr ""
"이 어트리뷰트가 숫자이고 ``1`` 이상이면, :class:`~shlex.shlex` 인스턴스는 자신의 동작에 대한 자세한 진행 "
"출력을 인쇄합니다. 이것을 사용해야 하면, 세부 사항을 배우기 위해 모듈 소스 코드를 읽을 수 있습니다."

#: ../../library/shlex.rst:317
msgid "Source line number (count of newlines seen so far plus one)."
msgstr "소스 줄 번호 (지금까지 본 줄 넘김 개수에 1을 더한 것)."

#: ../../library/shlex.rst:322
msgid ""
"The token buffer.  It may be useful to examine this when catching "
"exceptions."
msgstr "토큰 버퍼. 예외를 잡을 때 이를 조사하는 것이 유용 할 수 있습니다."

#: ../../library/shlex.rst:327
msgid ""
"Token used to determine end of file. This will be set to the empty string"
" (``''``), in non-POSIX mode, and to ``None`` in POSIX mode."
msgstr ""
"파일 끝을 판단하는 데 사용되는 토큰. POSIX 모드가 아닐 때 빈 문자열 (``''``), POSIX 모드일 때 "
"``None``\\으로 설정됩니다."

#: ../../library/shlex.rst:333
msgid ""
"A read-only property. Characters that will be considered punctuation. "
"Runs of punctuation characters will be returned as a single token. "
"However, note that no semantic validity checking will be performed: for "
"example, '>>>' could be returned as a token, even though it may not be "
"recognised as such by shells."
msgstr ""
"읽기 전용 프로퍼티. 구두 부호로 간주할 문자들. 구두 부호 문자들은 단일 토큰으로 반환됩니다. 그러나, 아무런 의미 유효성 검사도"
" 수행되지 않음에 유의하십시오: 예를 들어 '>>>'는 셸에서 인식되지 않더라도 토큰으로 반환될 수 있습니다."

#: ../../library/shlex.rst:344
msgid "Parsing Rules"
msgstr "구문 분석 규칙"

#: ../../library/shlex.rst:346
msgid ""
"When operating in non-POSIX mode, :class:`~shlex.shlex` will try to obey "
"to the following rules."
msgstr "비 POSIX 모드에서 작동할 때, :class:`~shlex.shlex`\\는 다음 규칙을 따르려고 합니다."

#: ../../library/shlex.rst:349
msgid ""
"Quote characters are not recognized within words (``Do\"Not\"Separate`` "
"is parsed as the single word ``Do\"Not\"Separate``);"
msgstr ""
"인용 문자는 단어 내에서 인식되지 않습니다 (``Do\"Not\"Separate``\\는 단일 단어 "
"``Do\"Not\"Separate``\\로 구문 분석됩니다);"

#: ../../library/shlex.rst:352
msgid "Escape characters are not recognized;"
msgstr "이스케이프 문자는 인식되지 않습니다;"

#: ../../library/shlex.rst:354
msgid ""
"Enclosing characters in quotes preserve the literal value of all "
"characters within the quotes;"
msgstr "인용으로 묶인 문자들은 인용 안에 있는 모든 문자의 리터럴 값을 유지합니다;"

#: ../../library/shlex.rst:357
msgid ""
"Closing quotes separate words (``\"Do\"Separate`` is parsed as ``\"Do\"``"
" and ``Separate``);"
msgstr ""
"인용을 닫는 것은 단어를 분리합니다 (``\"Do\"Separate``\\는 ``\"Do\"``\\와 ``Separate``\\로 "
"구문 분석됩니다);"

#: ../../library/shlex.rst:360
msgid ""
"If :attr:`~shlex.whitespace_split` is ``False``, any character not "
"declared to be a word character, whitespace, or a quote will be returned "
"as a single-character token. If it is ``True``, :class:`~shlex.shlex` "
"will only split words in whitespaces;"
msgstr ""
":attr:`~shlex.whitespace_split`\\가 ``False``\\이면, 단어 문자, 공백 또는 인용으로 선언되지 "
"않은 모든 문자는 단일 문자 토큰으로 반환됩니다. ``True``\\이면, :class:`~shlex.shlex`\\는 공백으로 만"
" 단어를 분리합니다;"

#: ../../library/shlex.rst:365
msgid "EOF is signaled with an empty string (``''``);"
msgstr "EOF는 빈 문자열(``''``)로 알립니다;"

#: ../../library/shlex.rst:367
msgid "It's not possible to parse empty strings, even if quoted."
msgstr "인용된 경우에도 빈 문자열을 구문 분석할 수 없습니다."

#: ../../library/shlex.rst:369
msgid ""
"When operating in POSIX mode, :class:`~shlex.shlex` will try to obey to "
"the following parsing rules."
msgstr "POSIX 모드에서 작동할 때, :class:`~shlex.shlex`\\는 다음 구문 분석 규칙을 따르려고 합니다."

#: ../../library/shlex.rst:372
msgid ""
"Quotes are stripped out, and do not separate words "
"(``\"Do\"Not\"Separate\"`` is parsed as the single word "
"``DoNotSeparate``);"
msgstr ""
"인용은 제거되고, 단어를 분리하지 않습니다 (``\"Do\"Not\"Separate\"``\\는 단일 단어 "
"``DoNotSeparate``\\로 구문 분석됩니다);"

#: ../../library/shlex.rst:375
msgid ""
"Non-quoted escape characters (e.g. ``'\\'``) preserve the literal value "
"of the next character that follows;"
msgstr "인용되지 않은 이스케이프 문자(예를 들어 ``'\\'``)는 다음에 오는 문자의 리터럴 값을 유지합니다;"

#: ../../library/shlex.rst:378
msgid ""
"Enclosing characters in quotes which are not part of "
":attr:`~shlex.escapedquotes` (e.g. ``\"'\"``) preserve the literal value "
"of all characters within the quotes;"
msgstr ""
":attr:`~shlex.escapedquotes`\\의 일부가 아닌 인용으로 묶인 문자(예를 들어 ``\"'\"``)는 인용 안에"
" 있는 모든 문자의 리터럴 값을 유지합니다;"

#: ../../library/shlex.rst:382
msgid ""
"Enclosing characters in quotes which are part of "
":attr:`~shlex.escapedquotes` (e.g. ``'\"'``) preserves the literal value "
"of all characters within the quotes, with the exception of the characters"
" mentioned in :attr:`~shlex.escape`.  The escape characters retain its "
"special meaning only when followed by the quote in use, or the escape "
"character itself. Otherwise the escape character will be considered a "
"normal character."
msgstr ""
":attr:`~shlex.escapedquotes`\\의 일부인 인용으로 묶인 문자(예를 들어 ``'\"'``)는 "
":attr:`~shlex.escape`\\에서 언급된 문자를 제외하고 인용 안에 있는 모든 문자의 리터럴 값을 유지합니다. "
"이스케이프 문자는 사용 중인 인용이나 이스케이프 문자 자체가 뒤에 오는 경우에만 특별한 의미를 유지합니다. 그렇지 않으면 이스케이프"
" 문자는 일반 문자로 간주합니다."

#: ../../library/shlex.rst:390
msgid "EOF is signaled with a :const:`None` value;"
msgstr "EOF는 :const:`None` 값으로 알립니다;"

#: ../../library/shlex.rst:392
msgid "Quoted empty strings (``''``) are allowed."
msgstr "인용된 빈 문자열(``''``)이 허용됩니다."

#: ../../library/shlex.rst:397
msgid "Improved Compatibility with Shells"
msgstr "셸과의 호환성 향상"

#: ../../library/shlex.rst:401
msgid ""
"The :class:`shlex` class provides compatibility with the parsing "
"performed by common Unix shells like ``bash``, ``dash``, and ``sh``.  To "
"take advantage of this compatibility, specify the ``punctuation_chars`` "
"argument in the constructor.  This defaults to ``False``, which preserves"
" pre-3.6 behaviour. However, if it is set to ``True``, then parsing of "
"the characters ``();<>|&`` is changed: any run of these characters is "
"returned as a single token.  While this is short of a full parser for "
"shells (which would be out of scope for the standard library, given the "
"multiplicity of shells out there), it does allow you to perform "
"processing of command lines more easily than you could otherwise.  To "
"illustrate, you can see the difference in the following snippet:"
msgstr ""
":class:`shlex` 클래스는 ``bash``, ``dash`` 및 ``sh``\\와 같은 일반적인 유닉스 셸에서 수행하는 "
"구문 분석과 호환됩니다. 이 호환성을 이용하려면, 생성자에서 ``punctuation_chars`` 인자를 지정하십시오. 기본값은 "
"``False``\\이며, 3.6 이전 동작을 유지합니다. 그러나, ``True``\\로 설정되면, 문자 ``();<>|&``\\의"
" 구문 분석이 변경됩니다: 이러한 문자의 연속은 단일 토큰으로 반환됩니다. 이것은 셸에 대한 전체 파서로는 부족하지만 (여러 종류의"
" 셀이 있음을 고려할 때, 표준 라이브러리의 범위를 벗어납니다), 이것이 없을 때보다 명령 줄 처리를 더 쉽게 수행할 수 있도록 "
"합니다. 예시하기 위해, 다음 코드 조각에서 차이점을 볼 수 있습니다:"

#: ../../library/shlex.rst:412
msgid ""
">>> import shlex\n"
">>> text = \"a && b; c && d || e; f >'abc'; (def \\\"ghi\\\")\"\n"
">>> s = shlex.shlex(text, posix=True)\n"
">>> s.whitespace_split = True\n"
">>> list(s)\n"
"['a', '&&', 'b;', 'c', '&&', 'd', '||', 'e;', 'f', '>abc;', '(def', "
"'ghi)']\n"
">>> s = shlex.shlex(text, posix=True, punctuation_chars=True)\n"
">>> s.whitespace_split = True\n"
">>> list(s)\n"
"['a', '&&', 'b', ';', 'c', '&&', 'd', '||', 'e', ';', 'f', '>', 'abc', "
"';',\n"
"'(', 'def', 'ghi', ')']"
msgstr ""

#: ../../library/shlex.rst:427
msgid ""
"Of course, tokens will be returned which are not valid for shells, and "
"you'll need to implement your own error checks on the returned tokens."
msgstr "물론, 셸에 유효하지 않은 토큰이 반환되며, 반환된 토큰에 대해 여러분 자신의 에러 검사를 구현해야 합니다."

#: ../../library/shlex.rst:430
msgid ""
"Instead of passing ``True`` as the value for the punctuation_chars "
"parameter, you can pass a string with specific characters, which will be "
"used to determine which characters constitute punctuation. For example::"
msgstr ""
"punctuation_chars 매개 변수의 값으로 ``True``\\를 전달하는 대신, 특정 문자가 포함된 문자열을 전달하면 구두"
" 부호를 구성하는 문자를 판별하는 데 사용됩니다. 예를 들면::"

#: ../../library/shlex.rst:434
msgid ""
">>> import shlex\n"
">>> s = shlex.shlex(\"a && b || c\", punctuation_chars=\"|\")\n"
">>> list(s)\n"
"['a', '&', '&', 'b', '||', 'c']"
msgstr ""

#: ../../library/shlex.rst:439
msgid ""
"When ``punctuation_chars`` is specified, the :attr:`~shlex.wordchars` "
"attribute is augmented with the characters ``~-./*?=``.  That is because "
"these characters can appear in file names (including wildcards) and "
"command-line arguments (e.g. ``--color=auto``). Hence::"
msgstr ""
"``punctuation_chars``\\가 지정되면, :attr:`~shlex.wordchars` 어트리뷰트는 문자 "
"``~-./*?=``\\로 보강됩니다. 이러한 문자는 파일 이름(와일드카드를 포함해서)과 명령 줄 인자(예를 들어 "
"``--color=auto``)에 나타날 수 있기 때문입니다. 그래서::"

#: ../../library/shlex.rst:444
msgid ""
">>> import shlex\n"
">>> s = shlex.shlex('~/a && b-c --color=auto || d *.py?',\n"
"...                 punctuation_chars=True)\n"
">>> list(s)\n"
"['~/a', '&&', 'b-c', '--color=auto', '||', 'd', '*.py?']"
msgstr ""

#: ../../library/shlex.rst:450
msgid ""
"However, to match the shell as closely as possible, it is recommended to "
"always use ``posix`` and :attr:`~shlex.whitespace_split` when using "
":attr:`~shlex.punctuation_chars`, which will negate "
":attr:`~shlex.wordchars` entirely."
msgstr ""
"그러나, 가능한 한 가깝게 셸과 일치하려면, :attr:`~shlex.punctuation_chars`\\를 사용할 때 항상 "
"``posix``\\와 :attr:`~shlex.whitespace_split`\\를 사용하는 것이 좋습니다, 이는 "
":attr:`~shlex.wordchars`\\를 완전히 무효로 합니다."

#: ../../library/shlex.rst:455
msgid ""
"For best effect, ``punctuation_chars`` should be set in conjunction with "
"``posix=True``. (Note that ``posix=False`` is the default for "
":class:`~shlex.shlex`.)"
msgstr ""
"최상의 효과를 얻으려면, ``punctuation_chars``\\를 ``posix=True``\\와 함께 설정해야 합니다. "
"(``posix=False``\\가 :class:`~shlex.shlex`\\의 기본값임에 유의하십시오.)"

#~ msgid ""
#~ "Since the :func:`split` function instantiates"
#~ " a :class:`~shlex.shlex` instance, passing "
#~ "``None`` for *s* will read the "
#~ "string to split from standard input."
#~ msgstr ""
#~ ":func:`split` 함수는 :class:`~shlex.shlex` 인스턴스를 "
#~ "인스턴스화 하므로, *s*\\에 ``None``\\을 전달하면 표준"
#~ " 입력에서 분할할 문자열을 읽습니다."

