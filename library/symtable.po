# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2017, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-04-17 23:44+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: Dong-gweon Oh <flowdas@gmail.com>\n"
"Language-Team: Korean (https://python.flowdas.com)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.17.0\n"

#: ../../library/symtable.rst:2
msgid ":mod:`!symtable` --- Access to the compiler's symbol tables"
msgstr ":mod:`!symtable` --- 컴파일러 심볼 테이블 액세스"

#: ../../library/symtable.rst:7
msgid "**Source code:** :source:`Lib/symtable.py`"
msgstr "**소스 코드:** :source:`Lib/symtable.py`"

#: ../../library/symtable.rst:15
msgid ""
"Symbol tables are generated by the compiler from AST just before bytecode"
" is generated.  The symbol table is responsible for calculating the scope"
" of every identifier in the code.  :mod:`symtable` provides an interface "
"to examine these tables."
msgstr ""
"심볼 테이블은 바이트 코드가 생성되기 바로 전에 AST에서 컴파일러에 의해 생성됩니다. 심볼 테이블은 코드에서 모든 식별자의 "
"스코프를 계산합니다. :mod:`symtable`\\은 이러한 테이블을 검사하는 인터페이스를 제공합니다."

#: ../../library/symtable.rst:22
msgid "Generating Symbol Tables"
msgstr "심볼 테이블 생성하기"

#: ../../library/symtable.rst:26
msgid ""
"Return the toplevel :class:`SymbolTable` for the Python source *code*. "
"*filename* is the name of the file containing the code.  *compile_type* "
"is like the *mode* argument to :func:`compile`."
msgstr ""
"파이썬 소스 *code*\\에 대한 최상위 :class:`SymbolTable`\\을 반환합니다. *filename*\\은 코드가 "
"들어있는 파일의 이름입니다. *compile_type*\\은 :func:`compile`\\에 대한 *mode* 인자와 같습니다."

#: ../../library/symtable.rst:32
msgid "Examining Symbol Tables"
msgstr "심볼 테이블 검사하기"

#: ../../library/symtable.rst:36
msgid "An enumeration indicating the type of a :class:`SymbolTable` object."
msgstr ""

#: ../../library/symtable.rst:41
msgid "Used for the symbol table of a module."
msgstr ""

#: ../../library/symtable.rst:46
msgid "Used for the symbol table of a function."
msgstr ""

#: ../../library/symtable.rst:51
msgid "Used for the symbol table of a class."
msgstr ""

#: ../../library/symtable.rst:53
msgid ""
"The following members refer to different flavors of :ref:`annotation "
"scopes <annotation-scopes>`."
msgstr ""

#: ../../library/symtable.rst:59
msgid "Used for annotations if ``from __future__ import annotations`` is active."
msgstr ""

#: ../../library/symtable.rst:64
msgid "Used for the symbol table of :keyword:`type` constructions."
msgstr ""

#: ../../library/symtable.rst:69
msgid ""
"Used for the symbol table of :ref:`generic functions <generic-functions>`"
" or :ref:`generic classes <generic-classes>`."
msgstr ""

#: ../../library/symtable.rst:75
msgid ""
"Used for the symbol table of the bound, the constraint tuple or the "
"default value of a single type variable in the formal sense, i.e., a "
"TypeVar, a TypeVarTuple or a ParamSpec object (the latter two do not "
"support a bound or a constraint tuple)."
msgstr ""

#: ../../library/symtable.rst:84
msgid "A namespace table for a block.  The constructor is not public."
msgstr "블록에 대한 이름 공간 테이블. 생성자는 공개되지 않습니다."

#: ../../library/symtable.rst:88
msgid ""
"Return the type of the symbol table.  Possible values are members of the "
":class:`SymbolTableType` enumeration."
msgstr "심볼 테이블의 형을 돌려줍니다. 가능한 값은 :class:`SymbolTableType` 열거형의 멤버들입니다."

#: ../../library/symtable.rst:91
msgid ""
"Added ``'annotation'``,  ``'TypeVar bound'``, ``'type alias'``, and "
"``'type parameter'`` as possible return values."
msgstr ""

#: ../../library/symtable.rst:95
msgid "Return values are members of the :class:`SymbolTableType` enumeration."
msgstr ""

#: ../../library/symtable.rst:98
msgid ""
"The exact values of the returned string may change in the future, and "
"thus, it is recommended to use :class:`SymbolTableType` members instead "
"of hard-coded strings."
msgstr ""

#: ../../library/symtable.rst:104
msgid "Return the table's identifier."
msgstr "테이블의 식별자를 돌려줍니다."

#: ../../library/symtable.rst:108
msgid ""
"Return the table's name.  This is the name of the class if the table is "
"for a class, the name of the function if the table is for a function, or "
"``'top'`` if the table is global (:meth:`get_type` returns ``'module'``)."
" For type parameter scopes (which are used for generic classes, "
"functions, and type aliases), it is the name of the underlying class, "
"function, or type alias. For type alias scopes, it is the name of the "
"type alias. For :class:`~typing.TypeVar` bound scopes, it is the name of "
"the ``TypeVar``."
msgstr ""

#: ../../library/symtable.rst:118
msgid "Return the number of the first line in the block this table represents."
msgstr "이 테이블이 나타내는 블록의 첫 번째 줄 번호를 반환합니다."

#: ../../library/symtable.rst:122
msgid "Return ``True`` if the locals in this table can be optimized."
msgstr "이 테이블의 지역(locals)을 최적화할 수 있으면 ``True``\\를 반환합니다."

#: ../../library/symtable.rst:126
msgid "Return ``True`` if the block is a nested class or function."
msgstr "블록이 중첩된 클래스나 함수면 ``True``\\를 반환합니다."

#: ../../library/symtable.rst:130
msgid ""
"Return ``True`` if the block has nested namespaces within it.  These can "
"be obtained with :meth:`get_children`."
msgstr ""
"블록에 중첩된 이름 공간이 있으면 ``True``\\를 반환합니다. 이것들은 :meth:`get_children`\\으로 얻을 수 "
"있습니다."

#: ../../library/symtable.rst:135
msgid ""
"Return a view object containing the names of symbols in the table. See "
"the :ref:`documentation of view objects <dict-views>`."
msgstr ""

#: ../../library/symtable.rst:140
msgid "Lookup *name* in the table and return a :class:`Symbol` instance."
msgstr "테이블에서 *name*\\을 찾아서 :class:`Symbol` 인스턴스를 반환합니다."

#: ../../library/symtable.rst:144
msgid "Return a list of :class:`Symbol` instances for names in the table."
msgstr "테이블에 있는 이름에 대한 :class:`Symbol` 인스턴스 리스트를 반환합니다."

#: ../../library/symtable.rst:148
msgid "Return a list of the nested symbol tables."
msgstr "중첩된 심볼 테이블의 리스트를 반환합니다."

#: ../../library/symtable.rst:153
msgid ""
"A namespace for a function or method.  This class inherits from "
":class:`SymbolTable`."
msgstr "함수나 메서드의 이름 공간. 이 클래스는 :class:`SymbolTable`\\을 상속합니다."

#: ../../library/symtable.rst:158
msgid "Return a tuple containing names of parameters to this function."
msgstr "이 함수의 매개 변수 이름을 포함하는 튜플을 반환합니다."

#: ../../library/symtable.rst:162
msgid "Return a tuple containing names of locals in this function."
msgstr "이 함수의 지역 이름을 포함하는 튜플을 반환합니다."

#: ../../library/symtable.rst:166
msgid "Return a tuple containing names of globals in this function."
msgstr "이 함수의 전역 이름을 포함하는 튜플을 반환합니다."

#: ../../library/symtable.rst:170
msgid ""
"Return a tuple containing names of explicitly declared nonlocals in this "
"function."
msgstr "이 함수에서 명시적으로 선언된 nonlocal 이름을 포함하는 튜플을 반환합니다."

#: ../../library/symtable.rst:174
msgid ""
"Return a tuple containing names of :term:`free (closure) variables "
"<closure variable>` in this function."
msgstr "이 함수의 :term:`자유 (클로저) 변수 <closure variable>` 이름을 포함하는 튜플을 반환합니다."

#: ../../library/symtable.rst:180
msgid "A namespace of a class.  This class inherits from :class:`SymbolTable`."
msgstr "클래스의 이름 공간. 이 클래스는 :class:`SymbolTable`\\을 상속합니다."

#: ../../library/symtable.rst:184
msgid ""
"Return a tuple containing the names of method-like functions declared in "
"the class."
msgstr "클래스에서 선언된 메서드 같은 함수의 이름을 포함하는 튜플을 반환합니다."

#: ../../library/symtable.rst:187
msgid ""
"Here, the term 'method' designates *any* function defined in the class "
"body via :keyword:`def` or :keyword:`async def`."
msgstr ""

#: ../../library/symtable.rst:190
msgid ""
"Functions defined in a deeper scope (e.g., in an inner class) are not "
"picked up by :meth:`get_methods`."
msgstr ""

#: ../../library/symtable.rst:193
msgid "For example:"
msgstr "예를 들면:"

#: ../../library/symtable.rst:215
msgid ""
"Although ``A().f()`` raises :exc:`TypeError` at runtime, ``A.f`` is still"
" considered as a method-like function."
msgstr ""

#: ../../library/symtable.rst:220
msgid ""
"An entry in a :class:`SymbolTable` corresponding to an identifier in the "
"source.  The constructor is not public."
msgstr "소스의 식별자에 해당하는 :class:`SymbolTable`\\의 항목. 생성자는 공개되지 않습니다."

#: ../../library/symtable.rst:225
msgid "Return the symbol's name."
msgstr "심볼의 이름을 돌려줍니다."

#: ../../library/symtable.rst:229
msgid "Return ``True`` if the symbol is used in its block."
msgstr "심볼이 블록에서 사용되면 ``True``\\를 반환합니다."

#: ../../library/symtable.rst:233
msgid "Return ``True`` if the symbol is created from an import statement."
msgstr "심볼이 import 문에서 만들어지면 ``True``\\를 반환합니다."

#: ../../library/symtable.rst:237
msgid "Return ``True`` if the symbol is a parameter."
msgstr "심볼이 매개 변수면 ``True``\\를 반환합니다."

#: ../../library/symtable.rst:241
msgid "Return ``True`` if the symbol is global."
msgstr "심볼이 전역이면 ``True``\\를 반환합니다."

#: ../../library/symtable.rst:245
msgid "Return ``True`` if the symbol is nonlocal."
msgstr "심볼이 nonlocal이면 ``True``\\를 반환합니다."

#: ../../library/symtable.rst:249
msgid "Return ``True`` if the symbol is declared global with a global statement."
msgstr "심볼이 global 문으로 전역으로 선언되면 ``True``\\를 반환합니다."

#: ../../library/symtable.rst:253
msgid "Return ``True`` if the symbol is local to its block."
msgstr "심볼이 블록의 지역이면 ``True``\\를 반환합니다."

#: ../../library/symtable.rst:257
msgid "Return ``True`` if the symbol is annotated."
msgstr "심볼이 어노테이트 되었으면 ``True``\\를 반환합니다."

#: ../../library/symtable.rst:263
msgid ""
"Return ``True`` if the symbol is referenced in its block, but not "
"assigned to."
msgstr "심볼이 블록에서 참조되지만 대입되지 않으면 ``True``\\를 반환합니다."

#: ../../library/symtable.rst:268
msgid "Return ``True`` if the symbol is assigned to in its block."
msgstr "심볼이 블록에 대입되면 ``True``\\를 반환합니다."

#: ../../library/symtable.rst:272
msgid "Return ``True`` if name binding introduces new namespace."
msgstr "이름 연결(name binding)이 새로운 이름 공간을 도입하면 ``True``\\를 반환합니다."

#: ../../library/symtable.rst:274
msgid ""
"If the name is used as the target of a function or class statement, this "
"will be true."
msgstr "이름이 함수나 클래스 문의 대상으로 사용되면 참입니다."

#: ../../library/symtable.rst:277
msgid "For example::"
msgstr "예를 들면::"

#: ../../library/symtable.rst:279
msgid ""
">>> table = symtable.symtable(\"def some_func(): pass\", \"string\", "
"\"exec\")\n"
">>> table.lookup(\"some_func\").is_namespace()\n"
"True"
msgstr ""
">>> table = symtable.symtable(\"def some_func(): pass\", \"string\", "
"\"exec\")\n"
">>> table.lookup(\"some_func\").is_namespace()\n"
"True"

#: ../../library/symtable.rst:283
msgid ""
"Note that a single name can be bound to multiple objects.  If the result "
"is ``True``, the name may also be bound to other objects, like an int or "
"list, that does not introduce a new namespace."
msgstr ""
"하나의 이름을 여러 객체에 연결할 수 있음에 유의하십시오. 결과가 ``True`` 이면, 이름은 새 이름 공간을 도입하지 않는 "
"int 나 list와 같은 다른 객체에도 연결되어있을 수 있습니다."

#: ../../library/symtable.rst:289
msgid "Return a list of namespaces bound to this name."
msgstr "이 이름에 연결된 이름 공간의 리스트를 돌려줍니다."

#: ../../library/symtable.rst:293
msgid ""
"Return the namespace bound to this name. If more than one or no namespace"
" is bound to this name, a :exc:`ValueError` is raised."
msgstr ""
"이 이름에 연결된 이름 공간을 돌려줍니다. 이 이름에 연결된 이름 공간이 둘 이상이거나 없으면, "
":exc:`ValueError`\\가 발생합니다."

#: ../../library/symtable.rst:300
msgid "Command-Line Usage"
msgstr ""

#: ../../library/symtable.rst:304
msgid ""
"The :mod:`symtable` module can be executed as a script from the command "
"line."
msgstr ""

#: ../../library/symtable.rst:306
msgid "python -m symtable [infile...]"
msgstr "python -m symtable [infile...]"

#: ../../library/symtable.rst:310
msgid ""
"Symbol tables are generated for the specified Python source files and "
"dumped to stdout. If no input file is specified, the content is read from"
" stdin."
msgstr ""

#~ msgid ""
#~ "Return the table's name.  This is "
#~ "the name of the class if the "
#~ "table is for a class, the name "
#~ "of the function if the table is"
#~ " for a function, or ``'top'`` if "
#~ "the table is global (:meth:`get_type` "
#~ "returns ``'module'``)."
#~ msgstr ""
#~ "테이블의 이름을 돌려줍니다. 테이블이 클래스를 위한 것이면"
#~ " 클래스의 이름이고, 테이블이 함수를 위한 것이면 함수의"
#~ " 이름이고, 테이블이 전역이면 ``'top'``\\입니다 "
#~ "(:meth:`get_type`\\은 ``'module'``\\을 반환합니다)."

#~ msgid "Return a list of names of symbols in this table."
#~ msgstr "이 테이블의 심볼 이름들의 리스트를 돌려줍니다."

