# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2017, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-04-17 23:44+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: Dong-gweon Oh <flowdas@gmail.com>\n"
"Language-Team: Korean (https://python.flowdas.com)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.17.0\n"

#: ../../library/traceback.rst:2
#, fuzzy
msgid ":mod:`!traceback` --- Print or retrieve a stack traceback"
msgstr ":mod:`traceback` --- 스택 트레이스백 인쇄와 조회"

#: ../../library/traceback.rst:7
msgid "**Source code:** :source:`Lib/traceback.py`"
msgstr "**소스 코드:** :source:`Lib/traceback.py`"

#: ../../library/traceback.rst:11
msgid ""
"This module provides a standard interface to extract, format and print "
"stack traces of Python programs. It is more flexible than the "
"interpreter's default traceback display, and therefore makes it possible "
"to configure certain aspects of the output. Finally, it contains a "
"utility for capturing enough information about an exception to print it "
"later, without the need to save a reference to the actual exception. "
"Since exceptions can be the roots of large objects graph, this utility "
"can significantly improve memory management."
msgstr ""

#: ../../library/traceback.rst:23
msgid ""
"The module uses :ref:`traceback objects <traceback-objects>` --- these "
"are objects of type :class:`types.TracebackType`, which are assigned to "
"the :attr:`~BaseException.__traceback__` field of :class:`BaseException` "
"instances."
msgstr ""

#: ../../library/traceback.rst:30
msgid "Module :mod:`faulthandler`"
msgstr ""

#: ../../library/traceback.rst:31
msgid ""
"Used to dump Python tracebacks explicitly, on a fault, after a timeout, "
"or on a user signal."
msgstr ""

#: ../../library/traceback.rst:33
msgid "Module :mod:`pdb`"
msgstr ""

#: ../../library/traceback.rst:34
msgid "Interactive source code debugger for Python programs."
msgstr ""

#: ../../library/traceback.rst:36
msgid "The module's API can be divided into two parts:"
msgstr ""

#: ../../library/traceback.rst:38
msgid ""
"Module-level functions offering basic functionality, which are useful for"
" interactive inspection of exceptions and tracebacks."
msgstr ""

#: ../../library/traceback.rst:41
msgid ""
":class:`TracebackException` class and its helper classes "
":class:`StackSummary` and :class:`FrameSummary`. These offer both more "
"flexibility in the output generated and the ability to store the "
"information necessary for later formatting without holding references to "
"actual exception and traceback objects."
msgstr ""

#: ../../library/traceback.rst:49
msgid "Module-Level Functions"
msgstr ""

#: ../../library/traceback.rst:53
#, fuzzy
msgid ""
"Print up to *limit* stack trace entries from :ref:`traceback object "
"<traceback-objects>` *tb* (starting from the caller's frame) if *limit* "
"is positive.  Otherwise, print the last ``abs(limit)`` entries.  If "
"*limit* is omitted or ``None``, all entries are printed.  If *file* is "
"omitted or ``None``, the output goes to :data:`sys.stderr`; otherwise it "
"should be an open :term:`file <file object>` or :term:`file-like object` "
"to receive the output."
msgstr ""
"*limit*\\가 양수면 (호출자 프레임에서 시작하여) 트레이스백 객체 *tb*\\의 최대 *limit* 개의 스택 트레이스 "
"항목을 인쇄합니다. 그렇지 않으면, 마지막 ``abs(limit)`` 항목을 인쇄합니다. *limit*\\가 생략되거나 "
"``None``\\이면, 모든 항목이 인쇄됩니다. *file*\\이 생략되거나 ``None``\\이면, 출력은 "
"``sys.stderr``\\로 갑니다; 그렇지 않으면 출력을 받을 열린 파일이나 파일류 객체여야 합니다."

#: ../../library/traceback.rst:64
msgid ""
"The meaning of the *limit* parameter is different than the meaning of "
":const:`sys.tracebacklimit`. A negative *limit* value corresponds to a "
"positive value of :const:`!sys.tracebacklimit`, whereas the behaviour of "
"a positive *limit* value cannot be achieved with "
":const:`!sys.tracebacklimit`."
msgstr ""

#: ../../library/traceback.rst:70 ../../library/traceback.rst:135
msgid "Added negative *limit* support."
msgstr "음수 *limit* 지원을 추가했습니다."

#: ../../library/traceback.rst:77
#, fuzzy
msgid ""
"Print exception information and stack trace entries from :ref:`traceback "
"object <traceback-objects>` *tb* to *file*. This differs from "
":func:`print_tb` in the following ways:"
msgstr ""
"예외 정보와 트레이스백 객체 *tb*\\의 스택 트레이스 항목을 *file*\\로 인쇄합니다. 이것은 다음과 같은 점에서 "
":func:`print_tb`\\와 다릅니다:"

#: ../../library/traceback.rst:82
msgid ""
"if *tb* is not ``None``, it prints a header ``Traceback (most recent call"
" last):``"
msgstr ""
"*tb*\\가 ``None``\\이 아니면, 헤더 ``Traceback (most recent call last):``\\를 "
"인쇄합니다."

#: ../../library/traceback.rst:85
#, fuzzy
msgid "it prints the exception type and *value* after the stack trace"
msgstr "스택 트레이스 다음에 예외 *etype*\\과 *value*\\를 인쇄합니다."

#: ../../library/traceback.rst:89
msgid ""
"if *type(value)* is :exc:`SyntaxError` and *value* has the appropriate "
"format, it prints the line where the syntax error occurred with a caret "
"indicating the approximate position of the error."
msgstr ""
"*type(value)*\\가 :exc:`SyntaxError`\\고 *value*\\가 적절한 형식을 가지면, 에러의 대략적인 "
"위치를 나타내는 캐럿(caret)과 함께 문법 에러가 발생한 줄을 인쇄합니다."

#: ../../library/traceback.rst:93
msgid ""
"Since Python 3.10, instead of passing *value* and *tb*, an exception "
"object can be passed as the first argument. If *value* and *tb* are "
"provided, the first argument is ignored in order to provide backwards "
"compatibility."
msgstr ""

#: ../../library/traceback.rst:97
#, fuzzy
msgid ""
"The optional *limit* argument has the same meaning as for "
":func:`print_tb`. If *chain* is true (the default), then chained "
"exceptions (the :attr:`~BaseException.__cause__` or "
":attr:`~BaseException.__context__` attributes of the exception) will be "
"printed as well, like the interpreter itself does when printing an "
"unhandled exception."
msgstr ""
"선택적 *limit* 인자는 :func:`print_tb`\\와 같은 의미입니다. *chain*\\이 참(기본값)이면, 처리되지 "
"않은 예외를 인쇄할 때 인터프리터 자체가 하는 것과 마찬가지로, 연결된 예외(예외의 :attr:`__cause__`\\나 "
":attr:`__context__` 어트리뷰트)도 인쇄됩니다."

#: ../../library/traceback.rst:104 ../../library/traceback.rst:215
msgid "The *etype* argument is ignored and inferred from the type of *value*."
msgstr "*etype* 인자는 무시되고 *value* 형에서 유추됩니다."

#: ../../library/traceback.rst:107 ../../library/traceback.rst:195
msgid ""
"The *etype* parameter has been renamed to *exc* and is now positional-"
"only."
msgstr ""

#: ../../library/traceback.rst:114
#, fuzzy
msgid ""
"This is a shorthand for ``print_exception(sys.exception(), limit=limit, "
"file=file, chain=chain)``."
msgstr "이것은 ``print_exception(*sys.exc_info(), limit, file, chain)``\\의 줄임 표현입니다."

#: ../../library/traceback.rst:120
#, fuzzy
msgid ""
"This is a shorthand for ``print_exception(sys.last_exc, limit=limit, "
"file=file, chain=chain)``.  In general it will work only after an "
"exception has reached an interactive prompt (see :data:`sys.last_exc`)."
msgstr ""
"이것은 ``print_exception(sys.last_type, sys.last_value, sys.last_traceback, "
"limit, file, chain)``\\의 줄임 표현입니다. 일반적으로 예외가 대화식 프롬프트에 도달한 후에만 작동합니다 "
"(:data:`sys.last_type`\\을 참조하십시오)."

#: ../../library/traceback.rst:127
#, fuzzy
msgid ""
"Print up to *limit* stack trace entries (starting from the invocation "
"point) if *limit* is positive.  Otherwise, print the last ``abs(limit)`` "
"entries.  If *limit* is omitted or ``None``, all entries are printed. The"
" optional *f* argument can be used to specify an alternate :ref:`stack "
"frame <frame-objects>` to start.  The optional *file* argument has the "
"same meaning as for :func:`print_tb`."
msgstr ""
"*limit*\\가 양수면 (호출 지점에서 시작하여) 최대 *limit* 개의 스택 트레이스 항목을 인쇄합니다. 그렇지 않으면, "
"마지막 ``abs(limit)`` 항목을 인쇄합니다. *limit*\\가 생략되거나 ``None``\\이면, 모든 항목이 "
"인쇄됩니다. 선택적 *f* 인자를 사용하여 시작할 대체 스택 프레임을 지정할 수 있습니다. 선택적 *file* 인자는 "
":func:`print_tb`\\와 같은 의미입니다."

#: ../../library/traceback.rst:141
#, fuzzy
msgid ""
"Return a :class:`StackSummary` object representing a list of \"pre-"
"processed\" stack trace entries extracted from the :ref:`traceback object"
" <traceback-objects>` *tb*.  It is useful for alternate formatting of "
"stack traces.  The optional *limit* argument has the same meaning as for "
":func:`print_tb`.  A \"pre-processed\" stack trace entry is a "
":class:`FrameSummary` object containing attributes "
":attr:`~FrameSummary.filename`, :attr:`~FrameSummary.lineno`, "
":attr:`~FrameSummary.name`, and :attr:`~FrameSummary.line` representing "
"the information that is usually printed for a stack trace."
msgstr ""
"트레이스백 객체 *tb*\\에서 추출된 \"전 처리된\" 스택 트레이스 항목의 리스트를 나타내는 "
":class:`StackSummary` 객체를 반환합니다. 스택 트레이스의 대체 포매팅으로 유용합니다. 선택적 *limit* 인자는"
" :func:`print_tb`\\와 같은 의미입니다. \"전 처리된\" 스택 트레이스 항목은 일반적으로 스택 트레이스를 위해 "
"인쇄되는 정보를 나타내는 어트리뷰트 :attr:`~FrameSummary.filename`, "
":attr:`~FrameSummary.lineno`, :attr:`~FrameSummary.name` 및 "
":attr:`~FrameSummary.line`\\을 포함하는 :class:`FrameSummary` 객체입니다. "
":attr:`~FrameSummary.line`\\은 선행과 후행 공백이 제거된 문자열입니다; 소스를 사용할 수 없으면 "
"``None``\\입니다."

#: ../../library/traceback.rst:154
#, fuzzy
msgid ""
"Extract the raw traceback from the current :ref:`stack frame <frame-"
"objects>`.  The return value has the same format as for "
":func:`extract_tb`.  The optional *f* and *limit* arguments have the same"
" meaning as for :func:`print_stack`."
msgstr ""
"현재 스택 프레임에서 날 트레이스백을 추출합니다. 반환 값은 :func:`extract_tb`\\와 같은 형식입니다. 선택적 "
"*f*\\와 *limit* 인자는 :func:`print_stack`\\과 같은 의미입니다."

#: ../../library/traceback.rst:162
msgid ""
"Print the list of tuples as returned by :func:`extract_tb` or "
":func:`extract_stack` as a formatted stack trace to the given file. If "
"*file* is ``None``, the output is written to :data:`sys.stderr`."
msgstr ""

#: ../../library/traceback.rst:169
msgid ""
"Given a list of tuples or :class:`FrameSummary` objects as returned by "
":func:`extract_tb` or :func:`extract_stack`, return a list of strings "
"ready for printing.  Each string in the resulting list corresponds to the"
" item with the same index in the argument list.  Each string ends in a "
"newline; the strings may contain internal newlines as well, for those "
"items whose source text line is not ``None``."
msgstr ""
":func:`extract_tb`\\나 :func:`extract_stack`\\이 반환한 튜플이나 "
":class:`FrameSummary` 객체의 리스트가 제공되면, 인쇄할 준비가 된 문자열의 리스트를 반환합니다. 결과 리스트의 각"
" 문자열은 인자 리스트에서 같은 인덱스를 가진 항목에 해당합니다. 각 문자열은 줄 바꿈으로 끝납니다; 소스 텍스트 줄이 "
"``None``\\이 아닌 항목의 경우, 문자열에 내부 줄 바꿈도 포함될 수 있습니다."

#: ../../library/traceback.rst:179
#, fuzzy
msgid ""
"Format the exception part of a traceback using an exception value such as"
" given by :data:`sys.last_value`.  The return value is a list of strings,"
" each ending in a newline.  The list contains the exception's message, "
"which is normally a single string; however, for :exc:`SyntaxError` "
"exceptions, it contains several lines that (when printed) display "
"detailed information about where the syntax error occurred. Following the"
" message, the list contains the exception's :attr:`notes "
"<BaseException.__notes__>`."
msgstr ""
"트레이스백의 예외 부분을 포맷합니다. 인자는 ``sys.last_type``\\과 ``sys.last_value``\\에서 제공하는"
" 것과 같은 예외 형과 값입니다. 반환 값은 각각 줄 바꿈으로 끝나는 문자열의 리스트입니다. 일반적으로, 리스트는 단일 문자열을 "
"포함합니다; 그러나, :exc:`SyntaxError` 예외의 경우, 문법 에러가 발생한 위치에 대한 자세한 정보를 (인쇄될 때) "
"표시하는 여러 줄을 포함합니다. 어떤 예외가 발생했는지를 나타내는 메시지는 리스트에서 항상 마지막 문자열입니다."

#: ../../library/traceback.rst:187
msgid ""
"Since Python 3.10, instead of passing *value*, an exception object can be"
" passed as the first argument.  If *value* is provided, the first "
"argument is ignored in order to provide backwards compatibility."
msgstr ""

#: ../../library/traceback.rst:191 ../../library/traceback.rst:422
msgid ""
"When *show_group* is ``True``, and the exception is an instance of "
":exc:`BaseExceptionGroup`, the nested exceptions are included as well, "
"recursively, with indentation relative to their nesting depth."
msgstr ""

#: ../../library/traceback.rst:199
msgid ""
"The returned list now includes any :attr:`notes "
"<BaseException.__notes__>` attached to the exception."
msgstr ""

#: ../../library/traceback.rst:203
msgid "*show_group* parameter was added."
msgstr ""

#: ../../library/traceback.rst:209
msgid ""
"Format a stack trace and the exception information.  The arguments  have "
"the same meaning as the corresponding arguments to "
":func:`print_exception`.  The return value is a list of strings, each "
"ending in a newline and some containing internal newlines.  When these "
"lines are concatenated and printed, exactly the same text is printed as "
"does :func:`print_exception`."
msgstr ""
"스택 트레이스와 예외 정보를 포맷합니다. 인자는 :func:`print_exception`\\의 해당하는 인자와 같은 의미입니다. "
"반환 값은 각각 줄 바꿈으로 끝나고 일부는 내부 줄 바꿈을 포함하는 문자열의 리스트입니다. 이 줄들을 이어붙여서 인쇄하면, "
":func:`print_exception`\\과 정확히 같은 텍스트가 인쇄됩니다."

#: ../../library/traceback.rst:218
msgid ""
"This function's behavior and signature were modified to match "
":func:`print_exception`."
msgstr ""

#: ../../library/traceback.rst:225
msgid ""
"This is like ``print_exc(limit)`` but returns a string instead of "
"printing to a file."
msgstr "이것은 ``print_exc(limit)``\\와 비슷하지만, 파일로 인쇄하는 대신 문자열을 반환합니다."

#: ../../library/traceback.rst:231
msgid "A shorthand for ``format_list(extract_tb(tb, limit))``."
msgstr "``format_list(extract_tb(tb, limit))``\\의 줄임 표현입니다."

#: ../../library/traceback.rst:236
msgid "A shorthand for ``format_list(extract_stack(f, limit))``."
msgstr "``format_list(extract_stack(f, limit))``\\의 줄임 표현입니다."

#: ../../library/traceback.rst:240
#, fuzzy
msgid ""
"Clears the local variables of all the stack frames in a :ref:`traceback "
"<traceback-objects>` *tb* by calling the :meth:`~frame.clear` method of "
"each :ref:`frame object <frame-objects>`."
msgstr "각 프레임 객체의 :meth:`clear` 메서드를 호출하여 트레이스백 *tb*\\에 있는 모든 스택 프레임의 지역 변수를 지웁니다."

#: ../../library/traceback.rst:249
#, fuzzy
msgid ""
"Walk a stack following :attr:`f.f_back <frame.f_back>` from the given "
"frame, yielding the frame and line number for each frame. If *f* is "
"``None``, the current stack is used. This helper is used with "
":meth:`StackSummary.extract`."
msgstr ""
"주어진 프레임에서 ``f.f_back``\\을 따라 스택을 걸어가며 각 프레임의 프레임과 줄 번호를 산출(yield)합니다. "
"*f*\\가 ``None``\\이면, 현재 스택이 사용됩니다. 이 도우미는 :meth:`StackSummary.extract`\\와"
" 함께 사용됩니다."

#: ../../library/traceback.rst:258
#, fuzzy
msgid ""
"Walk a traceback following :attr:`~traceback.tb_next` yielding the frame "
"and line number for each frame. This helper is used with "
":meth:`StackSummary.extract`."
msgstr ""
"``tb_next``\\를 따라 트레이스백을 걸으면서 각 프레임의 프레임과 줄 번호를 산출(yield)합니다. 이 도우미는 "
":meth:`StackSummary.extract`\\와 함께 사용됩니다."

#: ../../library/traceback.rst:266
#, fuzzy
msgid ":class:`!TracebackException` Objects"
msgstr ":class:`TracebackException` 객체"

#: ../../library/traceback.rst:270
msgid ""
":class:`!TracebackException` objects are created from actual exceptions "
"to capture data for later printing.  They offer a more lightweight method"
" of storing this information by avoiding holding references to "
":ref:`traceback<traceback-objects>` and :ref:`frame<frame-objects>` "
"objects. In addition, they expose more options to configure the output "
"compared to the module-level functions described above."
msgstr ""

#: ../../library/traceback.rst:279
#, fuzzy
msgid ""
"Capture an exception for later rendering. The meaning of *limit*, "
"*lookup_lines* and *capture_locals* are as for the :class:`StackSummary` "
"class."
msgstr ""
"나중에 렌더링하기 위해 예외를 포착합니다. *limit*, *lookup_lines* 및 *capture_locals*\\는 "
":class:`StackSummary` 클래스와 같습니다."

#: ../../library/traceback.rst:283
msgid ""
"If *compact* is true, only data that is required by "
":class:`!TracebackException`'s :meth:`format` method is saved in the "
"class attributes. In particular, the :attr:`__context__` field is "
"calculated only if :attr:`__cause__` is ``None`` and "
":attr:`__suppress_context__` is false."
msgstr ""

#: ../../library/traceback.rst:289 ../../library/traceback.rst:390
msgid "Note that when locals are captured, they are also shown in the traceback."
msgstr "locals가 포착되면, 트레이스백에도 표시됨에 유의하십시오."

#: ../../library/traceback.rst:291
msgid ""
"*max_group_width* and *max_group_depth* control the formatting of "
"exception groups (see :exc:`BaseExceptionGroup`). The depth refers to the"
" nesting level of the group, and the width refers to the size of a single"
" exception group's exceptions array. The formatted output is truncated "
"when either limit is exceeded."
msgstr ""

#: ../../library/traceback.rst:297
msgid "Added the *compact* parameter."
msgstr ""

#: ../../library/traceback.rst:300
msgid "Added the *max_group_width* and *max_group_depth* parameters."
msgstr ""

#: ../../library/traceback.rst:305
#, fuzzy
msgid ""
"A :class:`!TracebackException` of the original "
":attr:`~BaseException.__cause__`."
msgstr "원래 ``__cause__``\\의 :class:`TracebackException`."

#: ../../library/traceback.rst:310
#, fuzzy
msgid ""
"A :class:`!TracebackException` of the original "
":attr:`~BaseException.__context__`."
msgstr "원래 ``__context__``\\의 :class:`TracebackException`."

#: ../../library/traceback.rst:315
msgid ""
"If ``self`` represents an :exc:`ExceptionGroup`, this field holds a list "
"of :class:`!TracebackException` instances representing the nested "
"exceptions. Otherwise it is ``None``."
msgstr ""

#: ../../library/traceback.rst:323
#, fuzzy
msgid ""
"The :attr:`~BaseException.__suppress_context__` value from the original "
"exception."
msgstr "원래 예외의 ``__suppress_context__`` 값."

#: ../../library/traceback.rst:328
msgid ""
"The :attr:`~BaseException.__notes__` value from the original exception, "
"or ``None`` if the exception does not have any notes. If it is not "
"``None`` is it formatted in the traceback after the exception string."
msgstr ""

#: ../../library/traceback.rst:337
msgid "A :class:`StackSummary` representing the traceback."
msgstr "트레이스백을 나타내는 :class:`StackSummary`."

#: ../../library/traceback.rst:341
msgid "The class of the original traceback."
msgstr "원래 트레이스백의 클래스."

#: ../../library/traceback.rst:347
#, fuzzy
msgid "String display of the class of the original exception."
msgstr "원래 트레이스백의 클래스."

#: ../../library/traceback.rst:353
msgid "For syntax errors - the file name where the error occurred."
msgstr "문법 에러일 때 - 에러가 발생한 파일 이름."

#: ../../library/traceback.rst:357
msgid "For syntax errors - the line number where the error occurred."
msgstr "문법 에러일 때 - 에러가 발생한 줄 번호."

#: ../../library/traceback.rst:361
#, fuzzy
msgid ""
"For syntax errors - the end line number where the error occurred. Can be "
"``None`` if not present."
msgstr "문법 에러일 때 - 에러가 발생한 줄 번호."

#: ../../library/traceback.rst:368
msgid "For syntax errors - the text where the error occurred."
msgstr "문법 에러일 때 - 에러가 발생한 텍스트."

#: ../../library/traceback.rst:372
msgid "For syntax errors - the offset into the text where the error occurred."
msgstr "문법 에러일 때 - 에러가 발생한 텍스트에서의 오프셋."

#: ../../library/traceback.rst:376
#, fuzzy
msgid ""
"For syntax errors - the end offset into the text where the error "
"occurred. Can be ``None`` if not present."
msgstr "문법 에러일 때 - 에러가 발생한 텍스트에서의 오프셋."

#: ../../library/traceback.rst:383
msgid "For syntax errors - the compiler error message."
msgstr "문법 에러일 때 - 컴파일러 에러 메시지."

#: ../../library/traceback.rst:387
msgid ""
"Capture an exception for later rendering. *limit*, *lookup_lines* and "
"*capture_locals* are as for the :class:`StackSummary` class."
msgstr ""
"나중에 렌더링하기 위해 예외를 포착합니다. *limit*, *lookup_lines* 및 *capture_locals*\\는 "
":class:`StackSummary` 클래스와 같습니다."

#: ../../library/traceback.rst:394
msgid ""
"Print to *file* (default ``sys.stderr``) the exception information "
"returned by :meth:`format`."
msgstr ""

#: ../../library/traceback.rst:401
msgid "Format the exception."
msgstr "예외를 포맷합니다."

#: ../../library/traceback.rst:403
#, fuzzy
msgid ""
"If *chain* is not ``True``, :attr:`__cause__` and :attr:`__context__` "
"will not be formatted."
msgstr "*chain*\\이 ``True``\\가 아니면, ``__cause__``\\와 ``__context__``\\는 포맷되지 않습니다."

#: ../../library/traceback.rst:406
msgid ""
"The return value is a generator of strings, each ending in a newline and "
"some containing internal newlines. :func:`~traceback.print_exception` is "
"a wrapper around this method which just prints the lines to a file."
msgstr ""
"반환 값은 각각 줄 바꿈으로 끝나고 일부는 내부 줄 바꿈을 포함하는 문자열의 제너레이터입니다. "
":func:`~traceback.print_exception`\\은 단지 파일에 줄을 인쇄하는 이 메서드를 둘러싸는 래퍼입니다."

#: ../../library/traceback.rst:412
msgid "Format the exception part of the traceback."
msgstr "트레이스백의 예외 부분을 포맷합니다."

#: ../../library/traceback.rst:414
msgid "The return value is a generator of strings, each ending in a newline."
msgstr "반환 값은 각각 줄 바꿈으로 끝나는 문자열의 제너레이터입니다."

#: ../../library/traceback.rst:416
#, fuzzy
msgid ""
"When *show_group* is ``False``, the generator emits the exception's "
"message followed by its notes (if it has any). The exception message is "
"normally a single string; however, for :exc:`SyntaxError` exceptions, it "
"consists of several lines that (when printed) display detailed "
"information about where the syntax error occurred."
msgstr ""
"일반적으로, 제너레이터는 단일 문자열을 방출합니다; 그러나 :exc:`SyntaxError` 예외의 경우, 문법 에러가 발생한 "
"위치에 대한 자세한 정보를 (인쇄할 때) 표시하는 여러 줄을 방출합니다."

#: ../../library/traceback.rst:426
msgid ""
"The exception's :attr:`notes <BaseException.__notes__>` are now included "
"in the output."
msgstr ""

#: ../../library/traceback.rst:430
msgid "Added the *show_group* parameter."
msgstr ""

#: ../../library/traceback.rst:435
#, fuzzy
msgid ":class:`!StackSummary` Objects"
msgstr ":class:`StackSummary` 객체"

#: ../../library/traceback.rst:439
#, fuzzy
msgid ""
":class:`!StackSummary` objects represent a call stack ready for "
"formatting."
msgstr ":class:`StackSummary` 객체는 포맷 준비가 된 호출 스택을 나타냅니다."

#: ../../library/traceback.rst:445
#, fuzzy
msgid ""
"Construct a :class:`!StackSummary` object from a frame generator (such as"
" is returned by :func:`~traceback.walk_stack` or "
":func:`~traceback.walk_tb`)."
msgstr ""
"(:func:`~traceback.walk_stack`\\이나 :func:`~traceback.walk_tb`\\에서 반환된 것과 "
"같은) 프레임 제너레이터로 :class:`StackSummary` 객체를 생성합니다."

#: ../../library/traceback.rst:449
#, fuzzy
msgid ""
"If *limit* is supplied, only this many frames are taken from *frame_gen*."
" If *lookup_lines* is ``False``, the returned :class:`FrameSummary` "
"objects will not have read their lines in yet, making the cost of "
"creating the :class:`!StackSummary` cheaper (which may be valuable if it "
"may not actually get formatted). If *capture_locals* is ``True`` the "
"local variables in each :class:`!FrameSummary` are captured as object "
"representations."
msgstr ""
"*limit*\\가 제공되면, *frame_gen*\\에서 이 수 만큼의 프레임만 취합니다. *lookup_lines*\\가 "
"``False``\\이면, 반환된 :class:`FrameSummary` 객체는 아직 해당 줄을 읽지 않아서 "
":class:`StackSummary`\\를 만드는 비용을 줄입니다 (실제로 포맷되지 않을 수 있다면 유용 할 수 있습니다). "
"*capture_locals*\\가 ``True``\\이면, 각 :class:`FrameSummary`\\의 지역 변수는 객체 "
"표현(representation)으로 포착됩니다."

#: ../../library/traceback.rst:457
msgid ""
"Exceptions raised from :func:`repr` on a local variable (when "
"*capture_locals* is ``True``) are no longer propagated to the caller."
msgstr ""

#: ../../library/traceback.rst:463
#, fuzzy
msgid ""
"Construct a :class:`!StackSummary` object from a supplied list of "
":class:`FrameSummary` objects or old-style list of tuples.  Each tuple "
"should be a 4-tuple with *filename*, *lineno*, *name*, *line* as the "
"elements."
msgstr ""
"제공된 :class:`FrameSummary` 객체의 리스트나 이전 스타일의 튜플 리스트로 :class:`StackSummary` "
"객체를 생성합니다. 각 튜플은 파일명(filename), 줄 번호(lineno), 이름(name), 줄(line)을 요소로 하는 "
"4-튜플이어야 합니다."

#: ../../library/traceback.rst:470
#, fuzzy
msgid ""
"Returns a list of strings ready for printing.  Each string in the "
"resulting list corresponds to a single :ref:`frame <frame-objects>` from "
"the stack. Each string ends in a newline; the strings may contain "
"internal newlines as well, for those items with source text lines."
msgstr ""
"인쇄 준비가 된 문자열의 리스트를 반환합니다. 결과 리스트의 각 문자열은 스택의 단일 프레임에 해당합니다. 각 문자열은 줄 바꿈으로"
" 끝납니다; 소스 텍스트 줄이 있는 항목의 경우, 문자열에 내부 줄 바꿈도 포함될 수 있습니다."

#: ../../library/traceback.rst:476
msgid ""
"For long sequences of the same frame and line, the first few repetitions "
"are shown, followed by a summary line stating the exact number of further"
" repetitions."
msgstr "같은 프레임과 줄의 긴 시퀀스의 경우, 처음 몇 번의 반복이 표시된 다음, 정확한 추가의 반복 횟수를 나타내는 요약 줄이 표시됩니다."

#: ../../library/traceback.rst:480
msgid "Long sequences of repeated frames are now abbreviated."
msgstr "반복되는 프레임의 긴 시퀀스가 이제 축약됩니다."

#: ../../library/traceback.rst:485
msgid ""
"Returns a string for printing one of the :ref:`frames <frame-objects>` "
"involved in the stack. This method is called for each "
":class:`FrameSummary` object to be printed by "
":meth:`StackSummary.format`. If it returns ``None``, the frame is omitted"
" from the output."
msgstr ""

#: ../../library/traceback.rst:495
#, fuzzy
msgid ":class:`!FrameSummary` Objects"
msgstr ":class:`FrameSummary` 객체"

#: ../../library/traceback.rst:499
#, fuzzy
msgid ""
"A :class:`!FrameSummary` object represents a single :ref:`frame <frame-"
"objects>` in a :ref:`traceback <traceback-objects>`."
msgstr ":class:`FrameSummary` 객체는 트레이스백에서 단일 프레임을 나타냅니다."

#: ../../library/traceback.rst:506
#, fuzzy
msgid ""
"Represents a single :ref:`frame <frame-objects>` in the :ref:`traceback "
"<traceback-objects>` or stack that is being formatted or printed. It may "
"optionally have a stringified version of the frame's locals included in "
"it. If *lookup_line* is ``False``, the source code is not looked up until"
" the :class:`!FrameSummary` has the :attr:`~FrameSummary.line` attribute "
"accessed (which also happens when casting it to a :class:`tuple`). "
":attr:`~FrameSummary.line` may be directly provided, and will prevent "
"line lookups happening at all. *locals* is an optional local variable "
"mapping, and if supplied the variable representations are stored in the "
"summary for later display."
msgstr ""
"포맷되거나 인쇄 중인 트레이스백이나 스택의 단일 프레임을 나타냅니다. 선택적으로 문자열로 변환된 버전의 프레임 지역 변수를 포함할 "
"수 있습니다. *lookup_line*\\이 ``False``\\이면, :class:`FrameSummary`\\의 "
":attr:`~FrameSummary.line` 어트리뷰트에 액세스할 때까지 (튜플로 캐스트 할 때도 발생합니다) 소스 코드를 찾지"
" 않습니다. :attr:`~FrameSummary.line`\\은 직접 제공될 수 있으며, 줄 조회가 전혀 발생하지 않도록 합니다."
" *locals*\\는 선택적 지역 변수 딕셔너리이며, 제공되면 변수 표현(representation)은 나중에 표시할 수 있도록 "
"요약에 저장됩니다."

#: ../../library/traceback.rst:517
msgid ":class:`!FrameSummary` instances have the following attributes:"
msgstr ""

#: ../../library/traceback.rst:521
msgid ""
"The filename of the source code for this frame. Equivalent to accessing "
":attr:`f.f_code.co_filename <codeobject.co_filename>` on a :ref:`frame "
"object <frame-objects>` *f*."
msgstr ""

#: ../../library/traceback.rst:527
msgid "The line number of the source code for this frame."
msgstr ""

#: ../../library/traceback.rst:531
msgid ""
"Equivalent to accessing :attr:`f.f_code.co_name <codeobject.co_name>` on "
"a :ref:`frame object <frame-objects>` *f*."
msgstr ""

#: ../../library/traceback.rst:536
msgid ""
"A string representing the source code for this frame, with leading and "
"trailing whitespace stripped. If the source is not available, it is "
"``None``."
msgstr ""

#: ../../library/traceback.rst:542
msgid ""
"The last line number of the source code for this frame. By default, it is"
" set to ``lineno`` and indexation starts from 1."
msgstr ""

#: ../../library/traceback.rst:545
msgid "The default value changed from ``None`` to ``lineno``."
msgstr ""

#: ../../library/traceback.rst:550
msgid ""
"The column number of the source code for this frame. By default, it is "
"``None`` and indexation starts from 0."
msgstr ""

#: ../../library/traceback.rst:555
msgid ""
"The last column number of the source code for this frame. By default, it "
"is ``None`` and indexation starts from 0."
msgstr ""

#: ../../library/traceback.rst:562
msgid "Examples of Using the Module-Level Functions"
msgstr ""

#: ../../library/traceback.rst:564
msgid ""
"This simple example implements a basic read-eval-print loop, similar to "
"(but less useful than) the standard Python interactive interpreter loop."
"  For a more complete implementation of the interpreter loop, refer to "
"the :mod:`code` module. ::"
msgstr ""
"이 간단한 예제는 표준 파이썬 대화식 인터프리터 루프와 비슷하지만 (하지만 덜 유용한) 기본적인 읽기-평가-인쇄 루프를 구현합니다."
" 인터프리터 루프의 더욱 완전한 구현은 :mod:`code` 모듈을 참조하십시오. ::"

#: ../../library/traceback.rst:569
#, python-brace-format
msgid ""
"import sys, traceback\n"
"\n"
"def run_user_code(envdir):\n"
"    source = input(\">>> \")\n"
"    try:\n"
"        exec(source, envdir)\n"
"    except Exception:\n"
"        print(\"Exception in user code:\")\n"
"        print(\"-\"*60)\n"
"        traceback.print_exc(file=sys.stdout)\n"
"        print(\"-\"*60)\n"
"\n"
"envdir = {}\n"
"while True:\n"
"    run_user_code(envdir)"
msgstr ""

#: ../../library/traceback.rst:586
msgid ""
"The following example demonstrates the different ways to print and format"
" the exception and traceback:"
msgstr "다음 예제는 예외와 추적을 인쇄하고 포맷하는 다양한 방법을 보여줍니다:"

#: ../../library/traceback.rst:589
msgid ""
"import sys, traceback\n"
"\n"
"def lumberjack():\n"
"    bright_side_of_life()\n"
"\n"
"def bright_side_of_life():\n"
"    return tuple()[0]\n"
"\n"
"try:\n"
"    lumberjack()\n"
"except IndexError as exc:\n"
"    print(\"*** print_tb:\")\n"
"    traceback.print_tb(exc.__traceback__, limit=1, file=sys.stdout)\n"
"    print(\"*** print_exception:\")\n"
"    traceback.print_exception(exc, limit=2, file=sys.stdout)\n"
"    print(\"*** print_exc:\")\n"
"    traceback.print_exc(limit=2, file=sys.stdout)\n"
"    print(\"*** format_exc, first and last line:\")\n"
"    formatted_lines = traceback.format_exc().splitlines()\n"
"    print(formatted_lines[0])\n"
"    print(formatted_lines[-1])\n"
"    print(\"*** format_exception:\")\n"
"    print(repr(traceback.format_exception(exc)))\n"
"    print(\"*** extract_tb:\")\n"
"    print(repr(traceback.extract_tb(exc.__traceback__)))\n"
"    print(\"*** format_tb:\")\n"
"    print(repr(traceback.format_tb(exc.__traceback__)))\n"
"    print(\"*** tb_lineno:\", exc.__traceback__.tb_lineno)"
msgstr ""

#: ../../library/traceback.rst:620
msgid "The output for the example would look similar to this:"
msgstr "예제의 출력은 다음과 유사합니다:"

#: ../../library/traceback.rst:622
msgid ""
"*** print_tb:\n"
"  File \"<doctest...>\", line 10, in <module>\n"
"    lumberjack()\n"
"    ~~~~~~~~~~^^\n"
"*** print_exception:\n"
"Traceback (most recent call last):\n"
"  File \"<doctest...>\", line 10, in <module>\n"
"    lumberjack()\n"
"    ~~~~~~~~~~^^\n"
"  File \"<doctest...>\", line 4, in lumberjack\n"
"    bright_side_of_life()\n"
"    ~~~~~~~~~~~~~~~~~~~^^\n"
"IndexError: tuple index out of range\n"
"*** print_exc:\n"
"Traceback (most recent call last):\n"
"  File \"<doctest...>\", line 10, in <module>\n"
"    lumberjack()\n"
"    ~~~~~~~~~~^^\n"
"  File \"<doctest...>\", line 4, in lumberjack\n"
"    bright_side_of_life()\n"
"    ~~~~~~~~~~~~~~~~~~~^^\n"
"IndexError: tuple index out of range\n"
"*** format_exc, first and last line:\n"
"Traceback (most recent call last):\n"
"IndexError: tuple index out of range\n"
"*** format_exception:\n"
"['Traceback (most recent call last):\\n',\n"
" '  File \"<doctest default[0]>\", line 10, in <module>\\n    "
"lumberjack()\\n    ~~~~~~~~~~^^\\n',\n"
" '  File \"<doctest default[0]>\", line 4, in lumberjack\\n    "
"bright_side_of_life()\\n    ~~~~~~~~~~~~~~~~~~~^^\\n',\n"
" '  File \"<doctest default[0]>\", line 7, in bright_side_of_life\\n    "
"return tuple()[0]\\n           ~~~~~~~^^^\\n',\n"
" 'IndexError: tuple index out of range\\n']\n"
"*** extract_tb:\n"
"[<FrameSummary file <doctest...>, line 10 in <module>>,\n"
" <FrameSummary file <doctest...>, line 4 in lumberjack>,\n"
" <FrameSummary file <doctest...>, line 7 in bright_side_of_life>]\n"
"*** format_tb:\n"
"['  File \"<doctest default[0]>\", line 10, in <module>\\n    "
"lumberjack()\\n    ~~~~~~~~~~^^\\n',\n"
" '  File \"<doctest default[0]>\", line 4, in lumberjack\\n    "
"bright_side_of_life()\\n    ~~~~~~~~~~~~~~~~~~~^^\\n',\n"
" '  File \"<doctest default[0]>\", line 7, in bright_side_of_life\\n    "
"return tuple()[0]\\n           ~~~~~~~^^^\\n']\n"
"*** tb_lineno: 10"
msgstr ""

#: ../../library/traceback.rst:667
msgid ""
"The following example shows the different ways to print and format the "
"stack::"
msgstr "다음 예제는 스택을 인쇄하고 포맷하는 다양한 방법을 보여줍니다::"

#: ../../library/traceback.rst:669
msgid ""
">>> import traceback\n"
">>> def another_function():\n"
"...     lumberstack()\n"
"...\n"
">>> def lumberstack():\n"
"...     traceback.print_stack()\n"
"...     print(repr(traceback.extract_stack()))\n"
"...     print(repr(traceback.format_stack()))\n"
"...\n"
">>> another_function()\n"
"  File \"<doctest>\", line 10, in <module>\n"
"    another_function()\n"
"  File \"<doctest>\", line 3, in another_function\n"
"    lumberstack()\n"
"  File \"<doctest>\", line 6, in lumberstack\n"
"    traceback.print_stack()\n"
"[('<doctest>', 10, '<module>', 'another_function()'),\n"
" ('<doctest>', 3, 'another_function', 'lumberstack()'),\n"
" ('<doctest>', 7, 'lumberstack', "
"'print(repr(traceback.extract_stack()))')]\n"
"['  File \"<doctest>\", line 10, in <module>\\n    "
"another_function()\\n',\n"
" '  File \"<doctest>\", line 3, in another_function\\n    "
"lumberstack()\\n',\n"
" '  File \"<doctest>\", line 8, in lumberstack\\n    "
"print(repr(traceback.format_stack()))\\n']"
msgstr ""

#: ../../library/traceback.rst:693
msgid "This last example demonstrates the final few formatting functions:"
msgstr "이 마지막 예제는 마지막 몇 가지 포매팅 함수를 예시합니다:"

#: ../../library/traceback.rst:695
msgid ""
">>> import traceback\n"
">>> traceback.format_list([('spam.py', 3, '<module>', 'spam.eggs()'),\n"
"...                        ('eggs.py', 42, 'eggs', 'return \"bacon\"')])\n"
"['  File \"spam.py\", line 3, in <module>\\n    spam.eggs()\\n',\n"
" '  File \"eggs.py\", line 42, in eggs\\n    return \"bacon\"\\n']\n"
">>> an_error = IndexError('tuple index out of range')\n"
">>> traceback.format_exception_only(an_error)\n"
"['IndexError: tuple index out of range\\n']"
msgstr ""

#: ../../library/traceback.rst:709
#, fuzzy
msgid "Examples of Using :class:`TracebackException`"
msgstr ":class:`TracebackException` 객체"

#: ../../library/traceback.rst:711
msgid "With the helper class, we have more options::"
msgstr ""

#: ../../library/traceback.rst:713
msgid ""
">>> import sys\n"
">>> from traceback import TracebackException\n"
">>>\n"
">>> def lumberjack():\n"
"...     bright_side_of_life()\n"
"...\n"
">>> def bright_side_of_life():\n"
"...     t = \"bright\", \"side\", \"of\", \"life\"\n"
"...     return t[5]\n"
"...\n"
">>> try:\n"
"...     lumberjack()\n"
"... except IndexError as e:\n"
"...     exc = e\n"
"...\n"
">>> try:\n"
"...     try:\n"
"...         lumberjack()\n"
"...     except:\n"
"...         1/0\n"
"... except Exception as e:\n"
"...     chained_exc = e\n"
"...\n"
">>> # limit works as with the module-level functions\n"
">>> TracebackException.from_exception(exc, limit=-2).print()\n"
"Traceback (most recent call last):\n"
"  File \"<python-input-1>\", line 6, in lumberjack\n"
"    bright_side_of_life()\n"
"    ~~~~~~~~~~~~~~~~~~~^^\n"
"  File \"<python-input-1>\", line 10, in bright_side_of_life\n"
"    return t[5]\n"
"           ~^^^\n"
"IndexError: tuple index out of range\n"
"\n"
">>> # capture_locals adds local variables in frames\n"
">>> TracebackException.from_exception(exc, limit=-2, "
"capture_locals=True).print()\n"
"Traceback (most recent call last):\n"
"  File \"<python-input-1>\", line 6, in lumberjack\n"
"    bright_side_of_life()\n"
"    ~~~~~~~~~~~~~~~~~~~^^\n"
"  File \"<python-input-1>\", line 10, in bright_side_of_life\n"
"    return t[5]\n"
"           ~^^^\n"
"    t = (\"bright\", \"side\", \"of\", \"life\")\n"
"IndexError: tuple index out of range\n"
"\n"
">>> # The *chain* kwarg to print() controls whether chained\n"
">>> # exceptions are displayed\n"
">>> TracebackException.from_exception(chained_exc).print()\n"
"Traceback (most recent call last):\n"
"  File \"<python-input-19>\", line 4, in <module>\n"
"    lumberjack()\n"
"    ~~~~~~~~~~^^\n"
"  File \"<python-input-8>\", line 7, in lumberjack\n"
"    bright_side_of_life()\n"
"    ~~~~~~~~~~~~~~~~~~~^^\n"
"  File \"<python-input-8>\", line 11, in bright_side_of_life\n"
"    return t[5]\n"
"           ~^^^\n"
"IndexError: tuple index out of range\n"
"\n"
"During handling of the above exception, another exception occurred:\n"
"\n"
"Traceback (most recent call last):\n"
"  File \"<python-input-19>\", line 6, in <module>\n"
"    1/0\n"
"    ~^~\n"
"ZeroDivisionError: division by zero\n"
"\n"
">>> TracebackException.from_exception(chained_exc).print(chain=False)\n"
"Traceback (most recent call last):\n"
"  File \"<python-input-19>\", line 6, in <module>\n"
"    1/0\n"
"    ~^~\n"
"ZeroDivisionError: division by zero"
msgstr ""

#: ../../library/traceback.rst:21
msgid "object"
msgstr ""

#: ../../library/traceback.rst:21
#, fuzzy
msgid "traceback"
msgstr "트레이스백 예제"

#: ../../library/traceback.rst:87
msgid "^ (caret)"
msgstr ""

#: ../../library/traceback.rst:87
msgid "marker"
msgstr ""

#~ msgid ""
#~ "This module provides a standard "
#~ "interface to extract, format and print"
#~ " stack traces of Python programs.  It"
#~ " exactly mimics the behavior of the"
#~ " Python interpreter when it prints a"
#~ " stack trace.  This is useful when"
#~ " you want to print stack traces "
#~ "under program control, such as in "
#~ "a \"wrapper\" around the interpreter."
#~ msgstr ""
#~ "이 모듈은 파이썬 프로그램의 스택 트레이스를 추출, "
#~ "포맷 및 인쇄하는 표준 인터페이스를 제공합니다. 스택 "
#~ "트레이스를 인쇄할 때 파이썬 인터프리터의 동작을 정확하게"
#~ " 모방합니다. 이것은 가령 인터프리터를 둘러싸는 \"래퍼\"처럼"
#~ " 프로그램 제어 하에서 스택 트레이스를 인쇄하려고 할"
#~ " 때 유용합니다."

#~ msgid ""
#~ "The module uses traceback objects ---"
#~ " this is the object type that "
#~ "is stored in the :data:`sys.last_traceback`"
#~ " variable and returned as the third"
#~ " item from :func:`sys.exc_info`."
#~ msgstr ""
#~ "이 모듈은 트레이스백 객체를 사용합니다 --- 이는 "
#~ ":data:`sys.last_traceback` 변수에 저장되고 "
#~ ":func:`sys.exc_info`\\의 세 번째 항목으로 반환되는 "
#~ "객체 형입니다."

#~ msgid "The module defines the following functions:"
#~ msgstr "이 모듈은 다음 함수를 정의합니다:"

#~ msgid "The module also defines the following classes:"
#~ msgstr "이 모듈은 또한 다음과 같은 클래스를 정의합니다:"

#~ msgid ""
#~ ":class:`TracebackException` objects are created "
#~ "from actual exceptions to capture data"
#~ " for later printing in a lightweight"
#~ " fashion."
#~ msgstr ""
#~ ":class:`TracebackException` 객체는 실제 예외에서 만들어져"
#~ " 나중에 인쇄하기 위한 데이터를 경량 방식으로 "
#~ "포착합니다."

#~ msgid ""
#~ "The message indicating which exception "
#~ "occurred is always the last string "
#~ "in the output."
#~ msgstr "어떤 예외가 발생했는지를 나타내는 메시지는 항상 출력의 마지막 문자열입니다."

