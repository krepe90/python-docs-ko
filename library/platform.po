# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2017, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-04-17 23:44+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: Dong-gweon Oh <flowdas@gmail.com>\n"
"Language-Team: Korean (https://python.flowdas.com)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.17.0\n"

#: ../../library/platform.rst:2
#, fuzzy
msgid ":mod:`!platform` ---  Access to underlying platform's identifying data"
msgstr ":mod:`platform` --- 하부 플랫폼의 식별 데이터에 대한 액세스"

#: ../../library/platform.rst:10
msgid "**Source code:** :source:`Lib/platform.py`"
msgstr "**소스 코드:** :source:`Lib/platform.py`"

#: ../../library/platform.rst:16
msgid ""
"Specific platforms listed alphabetically, with Linux included in the Unix"
" section."
msgstr "각 플랫폼은 알파벳순으로 나열되고, 리눅스는 유닉스 절에 포함됩니다."

#: ../../library/platform.rst:21
msgid "Cross Platform"
msgstr "크로스 플랫폼"

#: ../../library/platform.rst:26
msgid ""
"Queries the given executable (defaults to the Python interpreter binary) "
"for various architecture information."
msgstr "다양한 아키텍처 정보에 대해 주어진 실행 파일(기본값은 파이썬 인터프리터 바이너리)을 조회합니다."

#: ../../library/platform.rst:29
msgid ""
"Returns a tuple ``(bits, linkage)`` which contain information about the "
"bit architecture and the linkage format used for the executable. Both "
"values are returned as strings."
msgstr ""
"실행 파일에 사용된 비트 아키텍처와 링크 형식에 대한 정보가 들어있는 튜플 ``(bits, linkage)``\\를 반환합니다. 두"
" 값은 모두 문자열로 반환됩니다."

#: ../../library/platform.rst:33
msgid ""
"Values that cannot be determined are returned as given by the parameter "
"presets. If bits is given as ``''``, the ``sizeof(pointer)`` (or "
"``sizeof(long)`` on Python version < 1.5.2) is used as indicator for the "
"supported pointer size."
msgstr ""
"결정할 수 없는 값은 매개 변수 사전 설정에 따라 반환됩니다. bits가 ``''``\\로 주어지면, "
"``sizeof(pointer)``\\(또는 파이썬 버전 < 1.5.2 에서는 ``sizeof(long)``)가 지원되는 포인터 "
"크기를 나타내는 데 사용됩니다."

#: ../../library/platform.rst:38
msgid ""
"The function relies on the system's :file:`file` command to do the actual"
" work. This is available on most if not all Unix  platforms and some non-"
"Unix platforms and then only if the executable points to the Python "
"interpreter.  Reasonable defaults are used when the above needs are not "
"met."
msgstr ""
"함수는 시스템의 :file:`file` 명령을 사용하여 실제 작업을 수행합니다. 이것은 대부분(전부가 아니라면)의 유닉스 플랫폼과 "
"일부 유닉스가 아닌 플랫폼에서 가능하며 실행 파일이 파이썬 인터프리터를 가리키는 경우에만 가능합니다. 위의 요구가 충족되지 않으면 "
"합리적인 기본값이 사용됩니다."

#: ../../library/platform.rst:45
#, fuzzy
msgid ""
"On macOS (and perhaps other platforms), executable files may be universal"
" files containing multiple architectures."
msgstr "Mac OS X(그리고 아마도 다른 플랫폼에서도)에서, 실행 파일은 다중 아키텍처를 포함하는 유니버설 파일일 수 있습니다."

#: ../../library/platform.rst:48
#, fuzzy
msgid ""
"To get at the \"64-bitness\" of the current interpreter, it is more "
"reliable to query the :data:`sys.maxsize` attribute::"
msgstr ""
"현재 인터프리터가 \"64-비트\" 인지를 판단하려면, :attr:`sys.maxsize` 어트리뷰트를 조회하는 것이 더 신뢰성 "
"있습니다.::"

#: ../../library/platform.rst:51
msgid "is_64bits = sys.maxsize > 2**32"
msgstr ""

#: ../../library/platform.rst:56
#, fuzzy
msgid ""
"Returns the machine type, e.g. ``'AMD64'``. An empty string is returned "
"if the value cannot be determined."
msgstr "기계 유형을 반환합니다, 예를 들어 ``'i386'``. 값을 판별할 수 없으면 빈 문자열이 반환됩니다."

#: ../../library/platform.rst:62
msgid ""
"Returns the computer's network name (may not be fully qualified!). An "
"empty string is returned if the value cannot be determined."
msgstr "컴퓨터의 네트워크 이름을 반환합니다 (완전히 정규화되지 않았을 수 있습니다!). 값을 판별할 수 없으면 빈 문자열이 반환됩니다."

#: ../../library/platform.rst:68
msgid ""
"Returns a single string identifying the underlying platform with as much "
"useful information as possible."
msgstr "하부 플랫폼을 식별하는 가능한 한 많은 유용한 정보를 포함하는 단일 문자열을 반환합니다."

#: ../../library/platform.rst:71
msgid ""
"The output is intended to be *human readable* rather than machine "
"parseable. It may look different on different platforms and this is "
"intended."
msgstr ""
"출력은 기계가 구문 분석하기보다는 *사람이 읽을 수* 있도록 합니다. 다른 플랫폼에서는 다르게 보일 수 있는데, 이는 의도 된 "
"것입니다."

#: ../../library/platform.rst:74
msgid ""
"If *aliased* is true, the function will use aliases for various platforms"
" that report system names which differ from their common names, for "
"example SunOS will be reported as Solaris.  The :func:`system_alias` "
"function is used to implement this."
msgstr ""
"*aliased*\\가 참이면, 함수는 일반 이름과 다른 시스템 이름을 보고하는 다양한 플랫폼에 대해 별칭을 사용합니다, 예를 들어"
" SunOS는 Solaris로 보고됩니다. 이를 구현하는 데 :func:`system_alias` 함수가 사용됩니다."

#: ../../library/platform.rst:79
msgid ""
"Setting *terse* to true causes the function to return only the absolute "
"minimum information needed to identify the platform."
msgstr "*terse*\\를 참으로 설정하면 함수가 플랫폼을 식별하는 데 필요한 절대적으로 최소한의 정보만 반환합니다."

#: ../../library/platform.rst:82
msgid ""
"On macOS, the function now uses :func:`mac_ver`, if it returns a non-"
"empty release string, to get the macOS version rather than the darwin "
"version."
msgstr ""
"macOS에서, 이 함수는 이제 darwin 버전 대신 macOS 버전을 얻기 위해 :func:`mac_ver` 를 사용합니다 "
"(비어 있지 않은 릴리스 문자열을 반환한다면)."

#: ../../library/platform.rst:90
msgid "Returns the (real) processor name, e.g. ``'amdk6'``."
msgstr "(실제) 프로세서 이름을 반환합니다, 예를 들어 ``'amdk6'``."

#: ../../library/platform.rst:92
msgid ""
"An empty string is returned if the value cannot be determined. Note that "
"many platforms do not provide this information or simply return the same "
"value as for :func:`machine`.  NetBSD does this."
msgstr ""
"값을 판별할 수 없으면 빈 문자열이 반환됩니다. 많은 플랫폼이 이 정보를 제공하지 않거나 단순히 :func:`machine`\\과 "
"같은 값을 반환함에 유의하십시오. NetBSD가 그렇습니다."

#: ../../library/platform.rst:99
msgid ""
"Returns a tuple ``(buildno, builddate)`` stating the Python build number "
"and date as strings."
msgstr "파이썬 빌드 번호와 날짜를 문자열로 나타내는 튜플 ``(buildno, builddate)``\\를 반환합니다."

#: ../../library/platform.rst:105
msgid "Returns a string identifying the compiler used for compiling Python."
msgstr "파이썬 컴파일에 사용된 컴파일러를 식별하는 문자열을 반환합니다."

#: ../../library/platform.rst:110
msgid "Returns a string identifying the Python implementation SCM branch."
msgstr "파이썬 구현 SCM 브랜치를 식별하는 문자열을 반환합니다."

#: ../../library/platform.rst:115
msgid ""
"Returns a string identifying the Python implementation. Possible return "
"values are: 'CPython', 'IronPython', 'Jython', 'PyPy'."
msgstr ""
"파이썬 구현을 식별하는 문자열을 반환합니다. 가능한 반환 값은 이렇습니다: 'CPython', 'IronPython', "
"'Jython', 'PyPy'."

#: ../../library/platform.rst:121
msgid "Returns a string identifying the Python implementation SCM revision."
msgstr "파이썬 구현 SCM 리비전을 식별하는 문자열을 반환합니다."

#: ../../library/platform.rst:126
msgid "Returns the Python version as string ``'major.minor.patchlevel'``."
msgstr "파이썬 버전을 문자열 ``'major.minor.patchlevel'``\\로 반환합니다."

#: ../../library/platform.rst:128
msgid ""
"Note that unlike the Python ``sys.version``, the returned value will "
"always include the patchlevel (it defaults to 0)."
msgstr "파이썬 ``sys.version``\\과 달리, 반환 값은 항상 patchlevel을 포함함에 유의하십시오 (기본값은 0입니다)."

#: ../../library/platform.rst:134
msgid ""
"Returns the Python version as tuple ``(major, minor, patchlevel)`` of "
"strings."
msgstr "파이썬 버전을 문자열의 튜플 ``(major, minor, patchlevel)``\\로 반환합니다."

#: ../../library/platform.rst:136
msgid ""
"Note that unlike the Python ``sys.version``, the returned value will "
"always include the patchlevel (it defaults to ``'0'``)."
msgstr ""
"파이썬 ``sys.version``\\과 달리, 반환 값은 항상 patchlevel을 포함함에 유의하십시오 (기본값은 "
"``'0'``\\입니다)."

#: ../../library/platform.rst:142
#, fuzzy
msgid ""
"Returns the system's release, e.g. ``'2.2.0'`` or ``'NT'``. An empty "
"string is returned if the value cannot be determined."
msgstr ""
"시스템의 릴리스를 반환합니다, 예를 들어 ``'2.2.0'``\\이나 ``'NT'``. 값을 판별할 수 없으면 빈 문자열이 "
"반환됩니다."

#: ../../library/platform.rst:148
msgid ""
"Returns the system/OS name, such as ``'Linux'``, ``'Darwin'``, "
"``'Java'``, ``'Windows'``. An empty string is returned if the value "
"cannot be determined."
msgstr ""
"시스템/OS 이름을 반환합니다, 가령 ``'Linux'``, ``'Darwin'``, ``'Java'``, "
"``'Windows'``. 값을 판별할 수 없으면 빈 문자열이 반환됩니다."

#: ../../library/platform.rst:151
msgid ""
"On iOS and Android, this returns the user-facing OS name (i.e, ``'iOS``, "
"``'iPadOS'`` or ``'Android'``). To obtain the kernel name (``'Darwin'`` "
"or ``'Linux'``), use :func:`os.uname`."
msgstr ""

#: ../../library/platform.rst:157
msgid ""
"Returns ``(system, release, version)`` aliased to common marketing names "
"used for some systems.  It also does some reordering of the information "
"in some cases where it would otherwise cause confusion."
msgstr ""
"일부 시스템에서 사용되는 상용 마케팅 이름으로 별칭 된 ``(system, release, version)``\\을 반환합니다. "
"혼동을 일으킬 수 있는 일부 경우에 정보의 순서를 변경하기도 합니다."

#: ../../library/platform.rst:164
msgid ""
"Returns the system's release version, e.g. ``'#3 on degas'``. An empty "
"string is returned if the value cannot be determined."
msgstr "시스템의 릴리스 버전을 반환합니다, 예를 들어 ``'#3 on degas'``. 값을 판별할 수 없으면 빈 문자열이 반환됩니다."

#: ../../library/platform.rst:167
msgid ""
"On iOS and Android, this is the user-facing OS version. To obtain the "
"Darwin or Linux kernel version, use :func:`os.uname`."
msgstr ""

#: ../../library/platform.rst:172
msgid ""
"Fairly portable uname interface. Returns a "
":func:`~collections.namedtuple` containing six attributes: "
":attr:`system`, :attr:`node`, :attr:`release`, :attr:`version`, "
":attr:`machine`, and :attr:`processor`."
msgstr ""
"꽤 이식성 있는 uname 인터페이스. :attr:`system`, :attr:`node`, :attr:`release`, "
":attr:`version`, :attr:`machine`, :attr:`processor`\\의 6개의 어트리뷰트를 포함한 "
":func:`~collections.namedtuple`\\를 반환합니다."

#: ../../library/platform.rst:176
msgid ":attr:`processor` is resolved late, on demand."
msgstr ""

#: ../../library/platform.rst:178
msgid ""
"Note: the first two attribute names differ from the names presented by "
":func:`os.uname`, where they are named :attr:`sysname` and "
":attr:`nodename`."
msgstr ""

#: ../../library/platform.rst:182
msgid "Entries which cannot be determined are set to ``''``."
msgstr "결정할 수 없는 항목은 ``''``\\로 설정됩니다."

#: ../../library/platform.rst:184
#, fuzzy
msgid "Result changed from a tuple to a :func:`~collections.namedtuple`."
msgstr "결과가 튜플에서 네임드 튜플로 변경되었습니다."

#: ../../library/platform.rst:187
msgid ":attr:`processor` is resolved late instead of immediately."
msgstr ""

#: ../../library/platform.rst:192
msgid "Java Platform"
msgstr "자바 플랫폼"

#: ../../library/platform.rst:197
msgid "Version interface for Jython."
msgstr "Jython의 버전 인터페이스."

#: ../../library/platform.rst:199
msgid ""
"Returns a tuple ``(release, vendor, vminfo, osinfo)`` with *vminfo* being"
" a tuple ``(vm_name, vm_release, vm_vendor)`` and *osinfo* being a tuple "
"``(os_name, os_version, os_arch)``. Values which cannot be determined are"
" set to the defaults given as parameters (which all default to ``''``)."
msgstr ""
"튜플 ``(release, vendor, vminfo, osinfo)``\\를 반환하는데, *vminfo*\\는 튜플 "
"``(vm_name, vm_release, vm_vendor)``\\이고, *osinfo*\\는 튜플 ``(os_name, "
"os_version, os_arch)``\\입니다. 결정할 수 없는 값은 매개 변수로 지정된 기본값으로 설정됩니다 (기본값은 모두 "
"``''``\\입니다)."

#: ../../library/platform.rst:204
msgid ""
"It was largely untested, had a confusing API, and was only useful for "
"Jython support."
msgstr ""

#: ../../library/platform.rst:210
msgid "Windows Platform"
msgstr "윈도우 플랫폼"

#: ../../library/platform.rst:215
#, fuzzy
msgid ""
"Get additional version information from the Windows Registry and return a"
" tuple ``(release, version, csd, ptype)`` referring to OS release, "
"version number, CSD level (service pack) and OS type (multi/single "
"processor). Values which cannot be determined are set to the defaults "
"given as parameters (which all default to an empty string)."
msgstr ""
"윈도우 레지스트리에서 추가 버전 정보를 얻고 OS 릴리스, 버전 번호, CSD 수준 (서비스 팩) 및 OS 유형(다중/단일 "
"프로세서)을 가리키는 튜플 ``(release, version, csd, ptype)``\\를 반환합니다."

#: ../../library/platform.rst:221
#, fuzzy
msgid ""
"As a hint: *ptype* is ``'Uniprocessor Free'`` on single processor NT "
"machines and ``'Multiprocessor Free'`` on multi processor machines. The "
"``'Free'`` refers to the OS version being free of debugging code. It "
"could also state ``'Checked'`` which means the OS version uses debugging "
"code, i.e. code that checks arguments, ranges, etc."
msgstr ""
"힌트: *ptype*\\은 단일 프로세서 NT 기계에서는 ``'Uniprocessor Free'``\\이고 다중 프로세서 기계에서는"
" ``'Multiprocessor Free'``\\입니다. *'Free'*\\는 디버깅 코드가 없는 OS 버전을 나타냅니다. 또한 "
"*'Checked'*\\를 언급할 수 있는데, OS 버전이 디버깅 코드, 즉 인자, 범위 등을 검사하는 코드를 사용한다는 것을 "
"뜻합니다."

#: ../../library/platform.rst:229
#, fuzzy
msgid ""
"Returns a string representing the current Windows edition, or ``None`` if"
" the value cannot be determined.  Possible values include but are not "
"limited to ``'Enterprise'``, ``'IoTUAP'``, ``'ServerStandard'``, and "
"``'nanoserver'``."
msgstr ""
"현재 윈도우 에디션을 나타내는 문자열을 반환합니다. 가능한 값은 ``'Enterprise'``, ``'IoTUAP'``, "
"``'ServerStandard'`` 및 ``'nanoserver'``\\를 포함하지만 이에 국한되지는 않습니다."

#: ../../library/platform.rst:237
msgid ""
"Return ``True`` if the Windows edition returned by :func:`win32_edition` "
"is recognized as an IoT edition."
msgstr ":func:`win32_edition`\\에 의해 반환된 윈도우 에디션이 IoT 에디션으로 인식되면 ``True``\\를 반환합니다."

#: ../../library/platform.rst:244
#, fuzzy
msgid "macOS Platform"
msgstr "Mac OS 플랫폼"

#: ../../library/platform.rst:248
#, fuzzy
msgid ""
"Get macOS version information and return it as tuple ``(release, "
"versioninfo, machine)`` with *versioninfo* being a tuple ``(version, "
"dev_stage, non_release_version)``."
msgstr ""
"Mac OS 버전 정보를 얻고 튜플 ``(release, versioninfo, machine)``\\으로 반환하는데, "
"*versioninfo*\\는 튜플 ``(version, dev_stage, non_release_version)``\\입니다."

#: ../../library/platform.rst:252
msgid ""
"Entries which cannot be determined are set to ``''``.  All tuple entries "
"are strings."
msgstr "결정할 수 없는 항목은 ``''``\\로 설정됩니다. 모든 튜플 항목은 문자열입니다."

#: ../../library/platform.rst:256
#, fuzzy
msgid "iOS Platform"
msgstr "윈도우 플랫폼"

#: ../../library/platform.rst:260
msgid ""
"Get iOS version information and return it as a "
":func:`~collections.namedtuple` with the following attributes:"
msgstr ""

#: ../../library/platform.rst:263
msgid "``system`` is the OS name; either ``'iOS'`` or ``'iPadOS'``."
msgstr ""

#: ../../library/platform.rst:264
msgid "``release`` is the iOS version number as a string (e.g., ``'17.2'``)."
msgstr ""

#: ../../library/platform.rst:265
msgid ""
"``model`` is the device model identifier; this will be a string like "
"``'iPhone13,2'`` for a physical device, or ``'iPhone'`` on a simulator."
msgstr ""

#: ../../library/platform.rst:267
msgid ""
"``is_simulator`` is a boolean describing if the app is running on a "
"simulator or a physical device."
msgstr ""

#: ../../library/platform.rst:270
#, fuzzy
msgid ""
"Entries which cannot be determined are set to the defaults given as "
"parameters."
msgstr "결정할 수 없는 항목은 ``''``\\로 설정됩니다."

#: ../../library/platform.rst:275
msgid "Unix Platforms"
msgstr "유닉스 플랫폼"

#: ../../library/platform.rst:279
msgid ""
"Tries to determine the libc version against which the file executable "
"(defaults to the Python interpreter) is linked.  Returns a tuple of "
"strings ``(lib, version)`` which default to the given parameters in case "
"the lookup fails."
msgstr ""
"파일 executable(기본값은 파이썬 인터프리터입니다)이 링크된 libc 버전을 확인하려고 시도합니다. 문자열의 튜플 "
"``(lib, version)``\\을 반환하는데, 조회가 실패하면 지정된 매개 변수를 기본값으로 사용합니다."

#: ../../library/platform.rst:283
msgid ""
"Note that this function has intimate knowledge of how different libc "
"versions add symbols to the executable is probably only usable for "
"executables compiled using :program:`gcc`."
msgstr ""
"다른 libc 버전이 실행 파일에 심볼을 추가하는 방법에 대해 이 함수가 가진 지식은 아마도 :program:`gcc`\\로 "
"컴파일된 실행 파일에서만 사용 가능하다는 것에 유의하십시오."

#: ../../library/platform.rst:287
msgid "The file is read and scanned in chunks of *chunksize* bytes."
msgstr "파일은 *chunksize* 바이트의 청크 단위로 읽고 스캔됩니다."

#: ../../library/platform.rst:291
#, fuzzy
msgid "Linux Platforms"
msgstr "유닉스 플랫폼"

#: ../../library/platform.rst:295
msgid ""
"Get operating system identification from ``os-release`` file and return "
"it as a dict. The ``os-release`` file is a `freedesktop.org standard "
"<https://www.freedesktop.org/software/systemd/man/os-release.html>`_ and "
"is available in most Linux distributions. A noticeable exception is "
"Android and Android-based distributions."
msgstr ""

#: ../../library/platform.rst:301
msgid ""
"Raises :exc:`OSError` or subclass when neither ``/etc/os-release`` nor "
"``/usr/lib/os-release`` can be read."
msgstr ""

#: ../../library/platform.rst:304
msgid ""
"On success, the function returns a dictionary where keys and values are "
"strings. Values have their special characters like ``\"`` and ``$`` "
"unquoted. The fields ``NAME``, ``ID``, and ``PRETTY_NAME`` are always "
"defined according to the standard. All other fields are optional. Vendors"
" may include additional fields."
msgstr ""

#: ../../library/platform.rst:310
msgid ""
"Note that fields like ``NAME``, ``VERSION``, and ``VARIANT`` are strings "
"suitable for presentation to users. Programs should use fields like "
"``ID``, ``ID_LIKE``, ``VERSION_ID``, or ``VARIANT_ID`` to identify Linux "
"distributions."
msgstr ""

#: ../../library/platform.rst:315
msgid "Example::"
msgstr ""

#: ../../library/platform.rst:317
msgid ""
"def get_like_distro():\n"
"    info = platform.freedesktop_os_release()\n"
"    ids = [info[\"ID\"]]\n"
"    if \"ID_LIKE\" in info:\n"
"        # ids are space separated and ordered by precedence\n"
"        ids.extend(info[\"ID_LIKE\"].split())\n"
"    return ids"
msgstr ""

#: ../../library/platform.rst:329
#, fuzzy
msgid "Android Platform"
msgstr "윈도우 플랫폼"

#: ../../library/platform.rst:334
msgid ""
"Get Android device information. Returns a :func:`~collections.namedtuple`"
" with the following attributes. Values which cannot be determined are set"
" to the defaults given as parameters."
msgstr ""

#: ../../library/platform.rst:338
msgid "``release`` - Android version, as a string (e.g. ``\"14\"``)."
msgstr ""

#: ../../library/platform.rst:340
msgid ""
"``api_level`` - API level of the running device, as an integer (e.g. "
"``34`` for Android 14). To get the API level which Python was built "
"against, see :func:`sys.getandroidapilevel`."
msgstr ""

#: ../../library/platform.rst:344
msgid ""
"``manufacturer`` - `Manufacturer name "
"<https://developer.android.com/reference/android/os/Build#MANUFACTURER>`__."
msgstr ""

#: ../../library/platform.rst:347
msgid ""
"``model`` - `Model name "
"<https://developer.android.com/reference/android/os/Build#MODEL>`__ – "
"typically the marketing name or model number."
msgstr ""

#: ../../library/platform.rst:351
msgid ""
"``device`` - `Device name "
"<https://developer.android.com/reference/android/os/Build#DEVICE>`__ – "
"typically the model number or a codename."
msgstr ""

#: ../../library/platform.rst:355
msgid ""
"``is_emulator`` - ``True`` if the device is an emulator; ``False`` if "
"it's a physical device."
msgstr ""

#: ../../library/platform.rst:358
msgid ""
"Google maintains a `list of known model and device names "
"<https://storage.googleapis.com/play_public/supported_devices.html>`__."
msgstr ""

#~ msgid ""
#~ "This function works best with Mark "
#~ "Hammond's :mod:`win32all` package installed, "
#~ "but also on Python 2.3 and later"
#~ " (support for this was added in "
#~ "Python 2.6). It obviously only runs "
#~ "on Win32 compatible platforms."
#~ msgstr ""
#~ "이 함수는 Mark Hammond의 :mod:`win32all` 패키지가"
#~ " 설치되었을 때 가장 잘 작동하지만, 파이썬 2.3"
#~ " 이상에서도 작동합니다 (파이썬 2.6에서 이 지원이 "
#~ "추가되었습니다). 당연히 Win32 호환 플랫폼에서만 실행됩니다."

#~ msgid ""
#~ "Note that this adds a sixth "
#~ "attribute (:attr:`processor`) not present in"
#~ " the :func:`os.uname` result.  Also, the"
#~ " attribute names are different for "
#~ "the first two attributes; :func:`os.uname` "
#~ "names them :attr:`sysname` and "
#~ ":attr:`nodename`."
#~ msgstr ""
#~ "이것이 :func:`os.uname` 결과에 없는 여섯 번째 "
#~ "어트리뷰트(:attr:`processor`)를 추가한다는 것에 유의하십시오. 또한,"
#~ " 어트리뷰트 이름은 처음 두 어트리뷰트에서 다릅니다; "
#~ ":func:`os.uname`\\의 이름은 :attr:`sysname`\\과 "
#~ ":attr:`nodename`\\입니다."

