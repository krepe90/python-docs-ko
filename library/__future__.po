# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2017, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-04-17 23:44+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: Dong-gweon Oh <flowdas@gmail.com>\n"
"Language-Team: Korean (https://python.flowdas.com)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.17.0\n"

#: ../../library/__future__.rst:2
#, fuzzy
msgid ":mod:`!__future__` --- Future statement definitions"
msgstr ":mod:`__future__` --- 퓨처 문 정의"

#: ../../library/__future__.rst:7
msgid "**Source code:** :source:`Lib/__future__.py`"
msgstr "**소스 코드:** :source:`Lib/__future__.py`"

#: ../../library/__future__.rst:11
msgid ""
"Imports of the form ``from __future__ import feature`` are called "
":ref:`future statements <future>`. These are special-cased by the Python "
"compiler to allow the use of new Python features in modules containing "
"the future statement before the release in which the feature becomes "
"standard."
msgstr ""

#: ../../library/__future__.rst:16
msgid ""
"While these future statements are given additional special meaning by the"
" Python compiler, they are still executed like any other import statement"
" and the :mod:`__future__` exists and is handled by the import system the"
" same way any other Python module would be. This design serves three "
"purposes:"
msgstr ""

#: ../../library/__future__.rst:21
msgid ""
"To avoid confusing existing tools that analyze import statements and "
"expect to find the modules they're importing."
msgstr "임포트 문을 분석하고 임포트하는 모듈을 발견하리라고 기대하는 기존 도구가 혼동하지 않게 하려고."

#: ../../library/__future__.rst:24
msgid ""
"To document when incompatible changes were introduced, and when they will"
" be --- or were --- made mandatory.  This is a form of executable "
"documentation, and can be inspected programmatically via importing "
":mod:`__future__` and examining its contents."
msgstr ""
"호환되지 않는 변경 사항이 도입된 시점과 그것이 필수적일 때를 --- 또는 이미 필수적으로 된 때를 --- 문서로 만들기 위해. "
"이것은 실행 가능한 문서 형식이며, :mod:`__future__` 를 임포트 해서 내용을 들여다봄으로써 프로그래밍 방식으로 검사 "
"할 수 있습니다."

#: ../../library/__future__.rst:29
#, fuzzy
msgid ""
"To ensure that :ref:`future statements <future>` run under releases prior"
" to Python 2.1 at least yield runtime exceptions (the import of "
":mod:`__future__` will fail, because there was no module of that name "
"prior to 2.1)."
msgstr ""
"2.1 이전의 배포에서 :ref:`퓨처 문 <future>` 을 실행하면 최소한 실행시간 예외를 일으키도록 보장하기 위해 (2.1 "
"이전에는 그런 이름의 모듈이 없으므로 :mod:`__future__` 임포트는 실패합니다)."

#: ../../library/__future__.rst:34
msgid "Module Contents"
msgstr ""

#: ../../library/__future__.rst:36
msgid ""
"No feature description will ever be deleted from :mod:`__future__`. Since"
" its introduction in Python 2.1 the following features have found their "
"way into the language using this mechanism:"
msgstr ""
"어떤 기능 설명도 :mod:`__future__` 에서 삭제되지 않습니다. 파이썬 2.1에서 소개된 이후로 이 메커니즘을 사용하여 "
"다음과 같은 기능이 언어에 도입되었습니다:"

#: ../../library/__future__.rst:41
msgid "feature"
msgstr "기능"

#: ../../library/__future__.rst:41
msgid "optional in"
msgstr "선택적 버전"

#: ../../library/__future__.rst:41
msgid "mandatory in"
msgstr "필수적 버전"

#: ../../library/__future__.rst:41
msgid "effect"
msgstr "효과"

#: ../../library/__future__.rst:43
msgid "nested_scopes"
msgstr "nested_scopes"

#: ../../library/__future__.rst:43
msgid "2.1.0b1"
msgstr "2.1.0b1"

#: ../../library/__future__.rst:43
msgid "2.2"
msgstr "2.2"

#: ../../library/__future__.rst:43
msgid ":pep:`227`: *Statically Nested Scopes*"
msgstr ":pep:`227`: *정적으로 중첩된 스코프*"

#: ../../library/__future__.rst:46
msgid "generators"
msgstr "generators"

#: ../../library/__future__.rst:46
msgid "2.2.0a1"
msgstr "2.2.0a1"

#: ../../library/__future__.rst:46
msgid "2.3"
msgstr "2.3"

#: ../../library/__future__.rst:46
msgid ":pep:`255`: *Simple Generators*"
msgstr ":pep:`255`: *단순 제너레이터*"

#: ../../library/__future__.rst:49
msgid "division"
msgstr "division"

#: ../../library/__future__.rst:49
msgid "2.2.0a2"
msgstr "2.2.0a2"

#: ../../library/__future__.rst:49 ../../library/__future__.rst:52
#: ../../library/__future__.rst:58 ../../library/__future__.rst:61
msgid "3.0"
msgstr "3.0"

#: ../../library/__future__.rst:49
msgid ":pep:`238`: *Changing the Division Operator*"
msgstr ":pep:`238`: *나누기 연산자 변경*"

#: ../../library/__future__.rst:52
msgid "absolute_import"
msgstr "absolute_import"

#: ../../library/__future__.rst:52 ../../library/__future__.rst:55
msgid "2.5.0a1"
msgstr "2.5.0a1"

#: ../../library/__future__.rst:52
msgid ":pep:`328`: *Imports: Multi-Line and Absolute/Relative*"
msgstr ":pep:`328`: *임포트: 복수 줄 및 절대/상대*"

#: ../../library/__future__.rst:55
msgid "with_statement"
msgstr "with_statement"

#: ../../library/__future__.rst:55
msgid "2.6"
msgstr "2.6"

#: ../../library/__future__.rst:55
msgid ":pep:`343`: *The \"with\" Statement*"
msgstr ":pep:`343`: *\"with\" 문*"

#: ../../library/__future__.rst:58
msgid "print_function"
msgstr "print_function"

#: ../../library/__future__.rst:58 ../../library/__future__.rst:61
msgid "2.6.0a2"
msgstr "2.6.0a2"

#: ../../library/__future__.rst:58
msgid ":pep:`3105`: *Make print a function*"
msgstr ":pep:`3105`: *print를 함수로 만들기*"

#: ../../library/__future__.rst:61
msgid "unicode_literals"
msgstr "unicode_literals"

#: ../../library/__future__.rst:61
msgid ":pep:`3112`: *Bytes literals in Python 3000*"
msgstr ":pep:`3112`: *파이썬 3000의 바이트열 리터럴*"

#: ../../library/__future__.rst:64
msgid "generator_stop"
msgstr "generator_stop"

#: ../../library/__future__.rst:64
msgid "3.5.0b1"
msgstr "3.5.0b1"

#: ../../library/__future__.rst:64
msgid "3.7"
msgstr "3.7"

#: ../../library/__future__.rst:64
msgid ":pep:`479`: *StopIteration handling inside generators*"
msgstr ":pep:`479`: *제너레이터 내부의 StopIteration 처리*"

#: ../../library/__future__.rst:67
msgid "annotations"
msgstr "annotations"

#: ../../library/__future__.rst:67
msgid "3.7.0b1"
msgstr "3.7.0b1"

#: ../../library/__future__.rst:67
msgid "TBD [1]_"
msgstr ""

#: ../../library/__future__.rst:67
msgid ":pep:`563`: *Postponed evaluation of annotations*"
msgstr ":pep:`563`: *어노테이션의 지연된 평가*"

#: ../../library/__future__.rst:77
msgid "Each statement in :file:`__future__.py` is of the form::"
msgstr ":file:`__future__.py` 의 각 문장은 다음과 같은 형식입니다::"

#: ../../library/__future__.rst:79
msgid ""
"FeatureName = _Feature(OptionalRelease, MandatoryRelease,\n"
"                       CompilerFlag)"
msgstr ""

#: ../../library/__future__.rst:82
msgid ""
"where, normally, *OptionalRelease* is less than *MandatoryRelease*, and "
"both are 5-tuples of the same form as :data:`sys.version_info`::"
msgstr ""
"보통, *OptionalRelease* 는 *MandatoryRelease* 보다 작으며, 둘 다 "
":data:`sys.version_info`\\와 같은 형태의 5-튜플입니다::"

#: ../../library/__future__.rst:85
msgid ""
"(PY_MAJOR_VERSION, # the 2 in 2.1.0a3; an int\n"
" PY_MINOR_VERSION, # the 1; an int\n"
" PY_MICRO_VERSION, # the 0; an int\n"
" PY_RELEASE_LEVEL, # \"alpha\", \"beta\", \"candidate\" or \"final\"; "
"string\n"
" PY_RELEASE_SERIAL # the 3; an int\n"
")"
msgstr ""

#: ../../library/__future__.rst:94
msgid ""
"*OptionalRelease* records the first release in which the feature was "
"accepted."
msgstr "*OptionalRelease* 는 해당 기능이 승인된 첫 번째 배포를 기록합니다."

#: ../../library/__future__.rst:98
msgid ""
"In the case of a *MandatoryRelease* that has not yet occurred, "
"*MandatoryRelease* predicts the release in which the feature will become "
"part of the language."
msgstr ""
"*MandatoryRelease* 가 아직 배포되지 않은 경우, *MandatoryRelease* 는 해당 기능이 언어 일부가 될 "
"배포를 예측합니다."

#: ../../library/__future__.rst:102
msgid ""
"Else *MandatoryRelease* records when the feature became part of the "
"language; in releases at or after that, modules no longer need a future "
"statement to use the feature in question, but may continue to use such "
"imports."
msgstr ""
"그렇지 않으면 *MandatoryRelease* 는 기능이 언어 일부가 된 때를 기록합니다; 그 배포와 그 이후의 배포에서, 모듈이"
" 해당 기능을 사용하기 위해 더 퓨처 문을 요구하지 않지만, 그러한 임포트는 계속 사용할 수 있습니다."

#: ../../library/__future__.rst:106
#, fuzzy
msgid ""
"*MandatoryRelease* may also be ``None``, meaning that a planned feature "
"got dropped or that it is not yet decided."
msgstr "*MandatoryRelease* 는 ``None`` 일 수도 있습니다. 이는 계획된 기능이 삭제되었음을 의미합니다."

#: ../../library/__future__.rst:111
#, fuzzy
msgid ""
"*CompilerFlag* is the (bitfield) flag that should be passed in the fourth"
" argument to the built-in function :func:`compile` to enable the feature "
"in dynamically compiled code.  This flag is stored in the "
":attr:`_Feature.compiler_flag` attribute on :class:`_Feature` instances."
msgstr ""
"*CompilerFlag* 은 동적으로 컴파일되는 코드에서 해당 기능을 활성화하기 위해, 내장 함수 :func:`compile` 의"
" 네 번째 인자로 전달되어야 하는 (비트 필드) 플래그입니다. 이 플래그는 :class:`_Feature` 인스턴스의 "
":attr:`compiler_flag` 어트리뷰트에 저장됩니다."

#: ../../library/__future__.rst:117
msgid ""
"``from __future__ import annotations`` was previously scheduled to become"
" mandatory in Python 3.10, but the Python Steering Council twice decided "
"to delay the change (`announcement for Python 3.10 "
"<https://mail.python.org/archives/list/python-"
"dev@python.org/message/CLVXXPQ2T2LQ5MP2Y53VVQFCXYWQJHKZ/>`__; "
"`announcement for Python 3.11 <https://mail.python.org/archives/list"
"/python-dev@python.org/message/VIZEBX5EYMSYIJNDBF6DMUMZOCWHARSO/>`__). No"
" final decision has been made yet. See also :pep:`563` and :pep:`649`."
msgstr ""

#: ../../library/__future__.rst:127
msgid ":ref:`future`"
msgstr ":ref:`future`"

#: ../../library/__future__.rst:128
msgid "How the compiler treats future imports."
msgstr "컴파일러가 퓨처 임포트를 처리하는 방법."

#: ../../library/__future__.rst:130
msgid ":pep:`236` - Back to the __future__"
msgstr ""

#: ../../library/__future__.rst:131
msgid "The original proposal for the __future__ mechanism."
msgstr ""

#~ msgid ":mod:`__future__` is a real module, and serves three purposes:"
#~ msgstr ":mod:`__future__` 는 실제 모듈이며 세 가지 용도로 사용됩니다:"

#~ msgid ""
#~ "Instances of class :class:`_Feature` have "
#~ "two corresponding methods, "
#~ ":meth:`getOptionalRelease` and "
#~ ":meth:`getMandatoryRelease`."
#~ msgstr ""
#~ "클래스 :class:`_Feature` 의 인스턴스는 두 개의 "
#~ "상응하는 메서드인 :meth:`getOptionalRelease` 와 "
#~ ":meth:`getMandatoryRelease` 를 가지고 있습니다."

#~ msgid "3.10"
#~ msgstr "3.10"

