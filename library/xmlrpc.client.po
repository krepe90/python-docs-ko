# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2017, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-04-17 23:44+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: Dong-gweon Oh <flowdas@gmail.com>\n"
"Language-Team: Korean (https://python.flowdas.com)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.17.0\n"

#: ../../library/xmlrpc.client.rst:2
msgid ":mod:`!xmlrpc.client` --- XML-RPC client access"
msgstr ":mod:`!xmlrpc.client` --- XML-RPC 클라이언트 액세스"

#: ../../library/xmlrpc.client.rst:10
msgid "**Source code:** :source:`Lib/xmlrpc/client.py`"
msgstr "**소스 코드:** :source:`Lib/xmlrpc/client.py`"

#: ../../library/xmlrpc.client.rst:17
msgid ""
"XML-RPC is a Remote Procedure Call method that uses XML passed via "
"HTTP(S) as a transport.  With it, a client can call methods with "
"parameters on a remote server (the server is named by a URI) and get back"
" structured data.  This module supports writing XML-RPC client code; it "
"handles all the details of translating between conformable Python objects"
" and XML on the wire."
msgstr ""
"XML-RPC는 HTTP(S)를 통해 전달된 XML을 트랜스포트로 사용하는 원격 프로시저 호출(Remote Procedure "
"Call) 방법입니다. 이를 통해, 클라이언트는 원격 서버에서 매개 변수를 사용하여 메서드를 호출하고 (서버는 URI로 이름이 "
"지정됩니다) 구조화된 데이터를 돌려받을 수 있습니다. 이 모듈은 XML-RPC 클라이언트 코드 작성을 지원합니다; 적합한 파이썬 "
"객체와 전송 회선 상의 XML 간 변환의 모든 세부 사항을 처리합니다."

#: ../../library/xmlrpc.client.rst:26
msgid ""
"The :mod:`xmlrpc.client` module is not secure against maliciously "
"constructed data.  If you need to parse untrusted or unauthenticated data"
" see :ref:`xml-vulnerabilities`."
msgstr ""
":mod:`xmlrpc.client` 모듈은 악의적으로 구성된 데이터로부터 안전하지 않습니다. 신뢰할 수 없거나 인증되지 않은 "
"데이터를 구문 분석해야 하면 :ref:`xml-vulnerabilities`\\을 참조하십시오."

#: ../../library/xmlrpc.client.rst:32
msgid ""
"For HTTPS URIs, :mod:`xmlrpc.client` now performs all the necessary "
"certificate and hostname checks by default."
msgstr ""
"HTTPS URI의 경우, :mod:`xmlrpc.client`\\는 이제 기본적으로 필요한 모든 인증서와 호스트명 확인을 "
"수행합니다."

#: ../../includes/wasm-notavail.rst:3
msgid "Availability"
msgstr "가용성"

#: ../../includes/wasm-notavail.rst:5
msgid ""
"This module does not work or is not available on WebAssembly. See :ref"
":`wasm-availability` for more information."
msgstr ""
"이 모듈은 웹어셈블리에서 작동하지 않거나 제공되지 않습니다. 자세한 내용은 :ref:`wasm-availability`\\을 "
"참조하세요."

#: ../../library/xmlrpc.client.rst:41
msgid ""
"A :class:`ServerProxy` instance is an object that manages communication "
"with a remote XML-RPC server.  The required first argument is a URI "
"(Uniform Resource Indicator), and will normally be the URL of the server."
"  The optional second argument is a transport factory instance; by "
"default it is an internal :class:`SafeTransport` instance for https: URLs"
" and an internal HTTP :class:`Transport` instance otherwise.  The "
"optional third argument is an encoding, by default UTF-8. The optional "
"fourth argument is a debugging flag."
msgstr ""
":class:`ServerProxy` 인스턴스는 원격 XML-RPC 서버와의 통신을 관리하는 객체입니다. 필수적인 첫 번째 인자는 "
"URI(Uniform Resource Indicator)이며 일반적으로 서버의 URL입니다. 선택적인 두 번째 인자는 트랜스포트 "
"팩토리 인스턴스입니다; 기본적으로 https: URL의 경우는 내부 :class:`SafeTransport` 인스턴스이고 그렇지 "
"않으면 내부 HTTP :class:`Transport` 인스턴스입니다. 선택적 세 번째 인자는 인코딩이며, 기본적으로 "
"UTF-8입니다. 선택적 네 번째 인자는 디버깅 플래그입니다."

#: ../../library/xmlrpc.client.rst:49
msgid ""
"The following parameters govern the use of the returned proxy instance. "
"If *allow_none* is true,  the Python constant ``None`` will be translated"
" into XML; the default behaviour is for ``None`` to raise a "
":exc:`TypeError`. This is a commonly used extension to the XML-RPC "
"specification, but isn't supported by all clients and servers; see "
"`http://ontosys.com/xml-rpc/extensions.php "
"<https://web.archive.org/web/20130120074804/http://ontosys.com/xml-"
"rpc/extensions.php>`_ for a description. The *use_builtin_types* flag can"
" be used to cause date/time values to be presented as "
":class:`datetime.datetime` objects and binary data to be presented as "
":class:`bytes` objects; this flag is false by default. "
":class:`datetime.datetime`, :class:`bytes` and :class:`bytearray` objects"
" may be passed to calls. The *headers* parameter is an optional sequence "
"of HTTP headers to send with each request, expressed as a sequence of "
"2-tuples representing the header name and value. (e.g. ``[('Header-Name',"
" 'value')]``). If an HTTPS URL is provided, *context* may be "
":class:`ssl.SSLContext` and configures the SSL settings of the underlying"
" HTTPS connection. The obsolete *use_datetime* flag is similar to "
"*use_builtin_types* but it applies only to date/time values."
msgstr ""
"그 뒤에 오는 매개 변수들은 반환된 프락시 인스턴스 사용을 제어합니다. *allow_none*\\이 참이면, 파이썬 상수 "
"``None``\\이 XML로 변환됩니다; 기본 동작은 ``None``\\이 :exc:`TypeError`\\를 발생시키는 "
"것입니다. 이것은 XML-RPC 명세에 일반적으로 사용되는 확장이지만, 모든 클라이언트와 서버에서 지원되는 것은 아닙니다; 설명은 "
"`http://ontosys.com/xml-rpc/extensions.php "
"<https://web.archive.org/web/20130120074804/http://ontosys.com/xml-"
"rpc/extensions.php>`_\\를 참조하십시오. *use_builtin_types* 플래그를 사용하여 날짜/시간 값을 "
":class:`datetime.datetime` 객체로 표현하고 바이너리 데이터를 :class:`bytes` 객체로 표현할 수 "
"있습니다; 이 플래그는 기본적으로 거짓입니다. :class:`datetime.datetime`, :class:`bytes` 및 "
":class:`bytearray` 객체는 호출로 전달될 수 있습니다. *headers* 매개 변수는 각 요청과 함께 보낼 선택적 "
"HTTP 헤더의 시퀀스이며, 헤더 이름과 값을 나타내는 2-튜플의 시퀀스로 표현됩니다. (예를 들어 ``[('Header-"
"Name', 'value')]``). HTTPS URL이 제공되면, *context*\\는 "
":class:`ssl.SSLContext`\\일 수 있으며, 하부 HTTPS 연결의 SSL 설정을 구성합니다. 사용되지 않는 "
"*use_datetime* 플래그는 *use_builtin_types*\\와 유사하지만, 날짜/시간 값에만 적용됩니다."

#: ../../library/xmlrpc.client.rst:69 ../../library/xmlrpc.client.rst:549
msgid "The *use_builtin_types* flag was added."
msgstr "*use_builtin_types* 플래그가 추가되었습니다."

#: ../../library/xmlrpc.client.rst:72
msgid "The *headers* parameter was added."
msgstr "*headers* 매개 변수가 추가되었습니다."

#: ../../library/xmlrpc.client.rst:75
msgid ""
"Both the HTTP and HTTPS transports support the URL syntax extension for "
"HTTP Basic Authentication: ``http://user:pass@host:port/path``.  The  "
"``user:pass`` portion will be base64-encoded as an HTTP 'Authorization' "
"header, and sent to the remote server as part of the connection process "
"when invoking an XML-RPC method.  You only need to use this if the remote"
" server requires a Basic Authentication user and password."
msgstr ""
"HTTP와 HTTPS 트랜스포트는 모두 HTTP 기본 인증(Basic Authentication)을 위한 URL 구문 확장을 "
"지원합니다: ``http://user:pass@host:port/path``. ``user:pass`` 부분은 HTTP "
"'Authorization' 헤더로 base64 인코딩되고, XML-RPC 메서드를 호출할 때 연결 프로세스의 일부로 원격 서버로 "
"전송됩니다. 원격 서버가 기본 인증 사용자와 비밀번호를 요구할 때만 이를 사용해야 합니다."

#: ../../library/xmlrpc.client.rst:82
msgid ""
"The returned instance is a proxy object with methods that can be used to "
"invoke corresponding RPC calls on the remote server.  If the remote "
"server supports the introspection API, the proxy can also be used to "
"query the remote server for the methods it supports (service discovery) "
"and fetch other server-associated metadata."
msgstr ""
"반환된 인스턴스는 원격 서버에서 해당 RPC 호출을 호출하는 데 사용할 수 있는 메서드가 있는 프락시 객체입니다. 원격 서버가 "
"인트로스펙션(introspection) API를 지원하면, 프락시를 사용하여 원격 서버에서 지원하는 메서드를 조회하고 (서비스 "
"검색, service discovery) 다른 서버 관련 메타 데이터를 가져올 수 있습니다."

#: ../../library/xmlrpc.client.rst:88
msgid ""
"Types that are conformable (e.g. that can be marshalled through XML), "
"include the following (and except where noted, they are unmarshalled as "
"the same Python type):"
msgstr ""
"적합한 형(예를 들어 XML을 통해 마샬링 할 수 있는 형)에는 다음이 포함됩니다 (별도로 표시된 경우를 제외하고는 같은 파이썬 "
"형으로 역마샬링 됩니다):"

#: ../../library/xmlrpc.client.rst:95
msgid "XML-RPC type"
msgstr "XML-RPC 형"

#: ../../library/xmlrpc.client.rst:95
msgid "Python type"
msgstr "파이썬 형"

#: ../../library/xmlrpc.client.rst:97
msgid "``boolean``"
msgstr "``boolean``"

#: ../../library/xmlrpc.client.rst:97
msgid ":class:`bool`"
msgstr ":class:`bool`"

#: ../../library/xmlrpc.client.rst:99
msgid "``int``, ``i1``, ``i2``,  ``i4``, ``i8`` or ``biginteger``"
msgstr "``int``, ``i1``, ``i2``, ``i4``, ``i8`` 또는 ``biginteger``"

#: ../../library/xmlrpc.client.rst:99
msgid ""
":class:`int` in range from -2147483648 to 2147483647. Values get the "
"``<int>`` tag."
msgstr "-2147483648에서 2147483647 범위의 :class:`int`. 값은 ``<int>`` 태그를 얻습니다."

#: ../../library/xmlrpc.client.rst:104
msgid "``double`` or ``float``"
msgstr "``double``\\이나 ``float``"

#: ../../library/xmlrpc.client.rst:104
msgid ":class:`float`.  Values get the ``<double>`` tag."
msgstr ":class:`float`. 값은 ``<double>`` 태그를 얻습니다."

#: ../../library/xmlrpc.client.rst:107
msgid "``string``"
msgstr "``string``"

#: ../../library/xmlrpc.client.rst:107
msgid ":class:`str`"
msgstr ":class:`str`"

#: ../../library/xmlrpc.client.rst:109
msgid "``array``"
msgstr "``array``"

#: ../../library/xmlrpc.client.rst:109
msgid ""
":class:`list` or :class:`tuple` containing conformable elements.  Arrays "
"are returned as :class:`lists <list>`."
msgstr ""
"적합한 요소를 포함하는 :class:`list`\\나 :class:`tuple`. 배열은 :class:`리스트 <list>`\\로 "
"반환됩니다."

#: ../../library/xmlrpc.client.rst:113
msgid "``struct``"
msgstr "``struct``"

#: ../../library/xmlrpc.client.rst:113
msgid ""
":class:`dict`.  Keys must be strings, values may be any conformable type."
"  Objects of user-defined classes can be passed in; only their "
":attr:`~object.__dict__` attribute is transmitted."
msgstr ""
":class:`dict`. 키는 문자열이어야 하며, 값은 적합한 형일 수 있습니다. 사용자 정의 클래스의 객체를 전달할 수 "
"있습니다; :attr:`~object.__dict__` 어트리뷰트만 전송됩니다."

#: ../../library/xmlrpc.client.rst:118
msgid "``dateTime.iso8601``"
msgstr "``dateTime.iso8601``"

#: ../../library/xmlrpc.client.rst:118
msgid ""
":class:`DateTime` or :class:`datetime.datetime`. Returned type depends on"
" values of *use_builtin_types* and *use_datetime* flags."
msgstr ""
":class:`DateTime`\\이나 :class:`datetime.datetime`. 반환되는 형은 "
"*use_builtin_types*\\와 *use_datetime* 플래그 값에 따라 다릅니다."

#: ../../library/xmlrpc.client.rst:122
msgid "``base64``"
msgstr "``base64``"

#: ../../library/xmlrpc.client.rst:122
msgid ""
":class:`Binary`, :class:`bytes` or :class:`bytearray`.  Returned type "
"depends on the value of the *use_builtin_types* flag."
msgstr ""
":class:`Binary`, :class:`bytes` 또는 :class:`bytearray`. 반환되는 형은 "
"*use_builtin_types* 플래그의 값에 따라 다릅니다."

#: ../../library/xmlrpc.client.rst:126
msgid "``nil``"
msgstr "``nil``"

#: ../../library/xmlrpc.client.rst:126
msgid "The ``None`` constant.  Passing is allowed only if *allow_none* is true."
msgstr "``None`` 상수. *allow_none*\\이 참일 때만 전달이 허용됩니다."

#: ../../library/xmlrpc.client.rst:129
msgid "``bigdecimal``"
msgstr "``bigdecimal``"

#: ../../library/xmlrpc.client.rst:129
msgid ":class:`decimal.Decimal`.  Returned type only."
msgstr ":class:`decimal.Decimal`. 반환되는 형 전용."

#: ../../library/xmlrpc.client.rst:132
msgid ""
"This is the full set of data types supported by XML-RPC.  Method calls "
"may also raise a special :exc:`Fault` instance, used to signal XML-RPC "
"server errors, or :exc:`ProtocolError` used to signal an error in the "
"HTTP/HTTPS transport layer. Both :exc:`Fault` and :exc:`ProtocolError` "
"derive from a base class called :exc:`Error`.  Note that the xmlrpc "
"client module currently does not marshal instances of subclasses of "
"built-in types."
msgstr ""
"이것이 XML-RPC가 지원하는 데이터형의 전체 집합입니다. 메서드 호출은 XML-RPC 서버 에러를 알리는 데 사용되는 특수 "
":exc:`Fault` 인스턴스나 HTTP/HTTPS 전송 계층의 에러를 알리는 데 사용되는 "
":exc:`ProtocolError`\\를 발생시킬 수도 있습니다. :exc:`Fault`\\와 "
":exc:`ProtocolError`\\는 모두 :exc:`Error`\\라는 베이스 클래스에서 파생됩니다. xmlrpc 클라이언트"
" 모듈은 현재 내장형의 서브 클래스 인스턴스를 마샬링 하지 않음에 유의하십시오."

#: ../../library/xmlrpc.client.rst:139
msgid ""
"When passing strings, characters special to XML such as ``<``, ``>``, and"
" ``&`` will be automatically escaped.  However, it's the caller's "
"responsibility to ensure that the string is free of characters that "
"aren't allowed in XML, such as the control characters with ASCII values "
"between 0 and 31 (except, of course, tab, newline and carriage return); "
"failing to do this will result in an XML-RPC request that isn't well-"
"formed XML.  If you have to pass arbitrary bytes via XML-RPC, use "
":class:`bytes` or :class:`bytearray` classes or the :class:`Binary` "
"wrapper class described below."
msgstr ""
"문자열을 전달할 때, ``<``, ``>`` 및 ``&``\\와 같은 XML에 특수한 문자는 자동으로 이스케이프 됩니다. 그러나, "
"0에서 31 사이의 ASCII 값을 가진 제어 문자(물론 탭, 줄 넘김 및 캐리지 리턴은 제외하고)와 같이 문자열에 XML에서 "
"허용되지 않는 문자가 없도록 확인하는 것은 호출자의 책임입니다; 이렇게 하지 않으면 XML 형식이 잘못된 XML-RPC 요청이 "
"발생합니다. XML-RPC를 통해 임의의 바이트열을 전달해야 하면, :class:`bytes`\\나 "
":class:`bytearray` 클래스 또는 아래 설명된 :class:`Binary` 래퍼 클래스를 사용하십시오."

#: ../../library/xmlrpc.client.rst:148
msgid ""
":class:`Server` is retained as an alias for :class:`ServerProxy` for "
"backwards compatibility.  New code should use :class:`ServerProxy`."
msgstr ""
":class:`Server`\\는 이전 버전과의 호환성을 위해 :class:`ServerProxy`\\의 별칭으로 유지됩니다. 새 "
"코드는 :class:`ServerProxy`\\를 사용해야 합니다."

#: ../../library/xmlrpc.client.rst:151
msgid "Added the *context* argument."
msgstr "*context* 인자를 추가했습니다."

#: ../../library/xmlrpc.client.rst:154
msgid ""
"Added support of type tags with prefixes (e.g. ``ex:nil``). Added support"
" of unmarshalling additional types used by Apache XML-RPC implementation "
"for numerics: ``i1``, ``i2``, ``i8``, ``biginteger``, ``float`` and "
"``bigdecimal``. See https://ws.apache.org/xmlrpc/types.html for a "
"description."
msgstr ""
"접두사가 있는 형 태그 지원이 추가되었습니다 (예를 들어 ``ex:nil``). 숫자를 위해 Apache XML-RPC 구현이 "
"사용하는 추가 형의 역마샬링 지원이 추가되었습니다: ``i1``, ``i2``, ``i8``, ``biginteger``, "
"``float`` 및 ``bigdecimal``. 설명은 https://ws.apache.org/xmlrpc/types.html 을"
" 참조하십시오."

#: ../../library/xmlrpc.client.rst:164
msgid "`XML-RPC HOWTO <https://tldp.org/HOWTO/XML-RPC-HOWTO/index.html>`_"
msgstr "`XML-RPC HOWTO <https://tldp.org/HOWTO/XML-RPC-HOWTO/index.html>`_"

#: ../../library/xmlrpc.client.rst:165
msgid ""
"A good description of XML-RPC operation and client software in several "
"languages. Contains pretty much everything an XML-RPC client developer "
"needs to know."
msgstr ""
"여러 언어로 된 XML-RPC 연산과 클라이언트 소프트웨어에 대한 훌륭한 설명. XML-RPC 클라이언트 개발자가 알아야 할 거의 "
"모든 것이 포함되어 있습니다."

#: ../../library/xmlrpc.client.rst:168
msgid ""
"`XML-RPC Introspection "
"<https://xmlrpc-c.sourceforge.io/introspection.html>`_"
msgstr ""
"`XML-RPC Introspection "
"<https://xmlrpc-c.sourceforge.io/introspection.html>`_"

#: ../../library/xmlrpc.client.rst:169
msgid "Describes the XML-RPC protocol extension for introspection."
msgstr "인트로스펙션을 위한 XML-RPC 프로토콜 확장을 설명합니다."

#: ../../library/xmlrpc.client.rst:171
msgid "`XML-RPC Specification <http://xmlrpc.scripting.com/spec.html>`_"
msgstr "`XML-RPC Specification <http://xmlrpc.scripting.com/spec.html>`_"

#: ../../library/xmlrpc.client.rst:172
msgid "The official specification."
msgstr "공식 명세."

#: ../../library/xmlrpc.client.rst:177
msgid "ServerProxy Objects"
msgstr "ServerProxy 객체"

#: ../../library/xmlrpc.client.rst:179
msgid ""
"A :class:`ServerProxy` instance has a method corresponding to each remote"
" procedure call accepted by the XML-RPC server.  Calling the method "
"performs an RPC, dispatched by both name and argument signature (e.g. the"
" same method name can be overloaded with multiple argument signatures).  "
"The RPC finishes by returning a value, which may be either returned data "
"in a conformant type or a :class:`Fault` or :class:`ProtocolError` object"
" indicating an error."
msgstr ""
":class:`ServerProxy` 인스턴스에는 XML-RPC 서버가 받아들이는 각 원격 프로시저 호출에 해당하는 메서드가 "
"있습니다. 메서드를 호출하면 RPC를 수행하는데, 이름과 인자 서명 모두로 디스패치 됩니다 (예를 들어 같은 메서드 이름이 여러 "
"인자 서명으로 오버로드 될 수 있습니다). RPC는 값을 반환하여 완료되는데, 값은 적합한 형으로 반환된 데이터이거나 에러를 "
"나타내는 :class:`Fault`\\나 :class:`ProtocolError` 객체일 수 있습니다."

#: ../../library/xmlrpc.client.rst:186
msgid ""
"Servers that support the XML introspection API support some common "
"methods grouped under the reserved :attr:`~ServerProxy.system` attribute:"
msgstr ""
"XML 인트로스팩션 API를 지원하는 서버는 예약된 :attr:`~ServerProxy.system` 어트리뷰트 밑에 그룹화된 몇 "
"가지 공통 메서드를 지원합니다:"

#: ../../library/xmlrpc.client.rst:192
msgid ""
"This method returns a list of strings, one for each (non-system) method "
"supported by the XML-RPC server."
msgstr "이 메서드는 문자열 리스트를 반환하는데, XML-RPC 서버가 지원하는 각 (system이 아닌) 메서드마다 하나씩 제공됩니다."

#: ../../library/xmlrpc.client.rst:198
msgid ""
"This method takes one parameter, the name of a method implemented by the "
"XML-RPC server. It returns an array of possible signatures for this "
"method. A signature is an array of types. The first of these types is the"
" return type of the method, the rest are parameters."
msgstr ""
"이 메서드는 하나의 매개 변수를 취하는데, XML-RPC 서버에 의해 구현된 메서드의 이름입니다. 이 메서드에 대해 가능한 서명의 "
"배열을 반환합니다. 서명은 형의 배열입니다. 이 형 중 첫 번째는 메서드의 반환형이고 나머지는 매개 변수입니다."

#: ../../library/xmlrpc.client.rst:203
msgid ""
"Because multiple signatures (ie. overloading) is permitted, this method "
"returns a list of signatures rather than a singleton."
msgstr "다중 서명(즉 오버로딩)이 허용되므로, 이 메서드는 하나가 아닌 서명의 리스트를 반환합니다."

#: ../../library/xmlrpc.client.rst:206
msgid ""
"Signatures themselves are restricted to the top level parameters expected"
" by a method. For instance if a method expects one array of structs as a "
"parameter, and it returns a string, its signature is simply \"string, "
"array\". If it expects three integers and returns a string, its signature"
" is \"string, int, int, int\"."
msgstr ""
"서명 자체는 메서드가 기대하는 최상위 매개 변수로 제한됩니다. 예를 들어, 메서드가 구조체 배열 하나를 매개 변수로 기대하고, "
"문자열을 반환하면, 서명은 단순히 \"string, array\"입니다. 세 개의 정수를 기대하고 문자열을 반환하면, 서명은 "
"\"string, int, int, int\"입니다."

#: ../../library/xmlrpc.client.rst:211
msgid ""
"If no signature is defined for the method, a non-array value is returned."
" In Python this means that the type of the returned  value will be "
"something other than list."
msgstr ""
"메서드에 서명이 정의되지 않으면, 배열이 아닌 값이 반환됩니다. 파이썬에서 이것은 반환된 값의 형이 리스트 이외의 어떤 것이 됨을 "
"의미합니다."

#: ../../library/xmlrpc.client.rst:218
msgid ""
"This method takes one parameter, the name of a method implemented by the "
"XML-RPC server.  It returns a documentation string describing the use of "
"that method. If no such string is available, an empty string is returned."
" The documentation string may contain HTML markup."
msgstr ""
"이 메서드는 하나의 매개 변수를 취하는데, XML-RPC 서버에 의해 구현된 메서드의 이름입니다. 해당 메서드의 사용법을 기술하는 "
"설명서 문자열을 반환합니다. 이러한 문자열이 없으면, 빈 문자열이 반환됩니다. 설명서 문자열에 HTML 마크업이 포함될 수 "
"있습니다."

#: ../../library/xmlrpc.client.rst:225
msgid ""
"Instances of :class:`ServerProxy` support the :term:`context manager` "
"protocol for closing the underlying transport."
msgstr ""
":class:`ServerProxy` 인스턴스는 하부 트랜스포트를 닫기 위한 :term:`컨텍스트 관리자 <context "
"manager>` 프로토콜을 지원합니다."

#: ../../library/xmlrpc.client.rst:229 ../../library/xmlrpc.client.rst:276
msgid "A working example follows. The server code::"
msgstr "다음은 실제 예입니다. 서버 코드::"

#: ../../library/xmlrpc.client.rst:231
msgid ""
"from xmlrpc.server import SimpleXMLRPCServer\n"
"\n"
"def is_even(n):\n"
"    return n % 2 == 0\n"
"\n"
"server = SimpleXMLRPCServer((\"localhost\", 8000))\n"
"print(\"Listening on port 8000...\")\n"
"server.register_function(is_even, \"is_even\")\n"
"server.serve_forever()"
msgstr ""
"from xmlrpc.server import SimpleXMLRPCServer\n"
"\n"
"def is_even(n):\n"
"    return n % 2 == 0\n"
"\n"
"server = SimpleXMLRPCServer((\"localhost\", 8000))\n"
"print(\"Listening on port 8000...\")\n"
"server.register_function(is_even, \"is_even\")\n"
"server.serve_forever()"

#: ../../library/xmlrpc.client.rst:241 ../../library/xmlrpc.client.rst:291
#: ../../library/xmlrpc.client.rst:401 ../../library/xmlrpc.client.rst:507
msgid "The client code for the preceding server::"
msgstr "이전 서버에 대한 클라이언트 코드::"

#: ../../library/xmlrpc.client.rst:243
#, python-format
msgid ""
"import xmlrpc.client\n"
"\n"
"with xmlrpc.client.ServerProxy(\"http://localhost:8000/\") as proxy:\n"
"    print(\"3 is even: %s\" % str(proxy.is_even(3)))\n"
"    print(\"100 is even: %s\" % str(proxy.is_even(100)))"
msgstr ""
"import xmlrpc.client\n"
"\n"
"with xmlrpc.client.ServerProxy(\"http://localhost:8000/\") as proxy:\n"
"    print(\"3 is even: %s\" % str(proxy.is_even(3)))\n"
"    print(\"100 is even: %s\" % str(proxy.is_even(100)))"

#: ../../library/xmlrpc.client.rst:252
msgid "DateTime Objects"
msgstr "DateTime 객체"

#: ../../library/xmlrpc.client.rst:256
msgid ""
"This class may be initialized with seconds since the epoch, a time tuple,"
" an ISO 8601 time/date string, or a :class:`datetime.datetime` instance."
"  It has the following methods, supported mainly for internal use by the "
"marshalling/unmarshalling code:"
msgstr ""
"이 클래스는 에포크(epoch) 이후의 초, 시간 튜플, ISO 8601 시간/날짜 문자열 또는 "
":class:`datetime.datetime`\\으로 초기화될 수 있습니다. 주로 마샬링/역마샬링 코드 내부에서 사용하기 위해 "
"지원되는, 다음과 같은 메서드가 있습니다:"

#: ../../library/xmlrpc.client.rst:264
msgid "Accept a string as the instance's new time value."
msgstr "인스턴스의 새 시간 값으로 문자열을 받아들입니다."

#: ../../library/xmlrpc.client.rst:269
msgid ""
"Write the XML-RPC encoding of this :class:`DateTime` item to the *out* "
"stream object."
msgstr "이 :class:`DateTime` 항목의 XML-RPC 인코딩을 *out* 스트림 객체에 씁니다."

#: ../../library/xmlrpc.client.rst:272
msgid ""
"It also supports certain of Python's built-in operators through "
":meth:`rich comparison <object.__lt__>` and :meth:`~object.__repr__` "
"methods."
msgstr ""
":meth:`풍부한 비교 <object.__lt__>`\\와 :meth:`~object.__repr__` 메서드를 통해 특정 파이썬"
" 내장 연산자도 지원합니다."

#: ../../library/xmlrpc.client.rst:278
msgid ""
"import datetime\n"
"from xmlrpc.server import SimpleXMLRPCServer\n"
"import xmlrpc.client\n"
"\n"
"def today():\n"
"    today = datetime.datetime.today()\n"
"    return xmlrpc.client.DateTime(today)\n"
"\n"
"server = SimpleXMLRPCServer((\"localhost\", 8000))\n"
"print(\"Listening on port 8000...\")\n"
"server.register_function(today, \"today\")\n"
"server.serve_forever()"
msgstr ""
"import datetime\n"
"from xmlrpc.server import SimpleXMLRPCServer\n"
"import xmlrpc.client\n"
"\n"
"def today():\n"
"    today = datetime.datetime.today()\n"
"    return xmlrpc.client.DateTime(today)\n"
"\n"
"server = SimpleXMLRPCServer((\"localhost\", 8000))\n"
"print(\"Listening on port 8000...\")\n"
"server.register_function(today, \"today\")\n"
"server.serve_forever()"

#: ../../library/xmlrpc.client.rst:293
#, python-format
msgid ""
"import xmlrpc.client\n"
"import datetime\n"
"\n"
"proxy = xmlrpc.client.ServerProxy(\"http://localhost:8000/\")\n"
"\n"
"today = proxy.today()\n"
"# convert the ISO8601 string to a datetime object\n"
"converted = datetime.datetime.strptime(today.value, \"%Y%m%dT%H:%M:%S\")\n"
"print(\"Today: %s\" % converted.strftime(\"%d.%m.%Y, %H:%M\"))"
msgstr ""
"import xmlrpc.client\n"
"import datetime\n"
"\n"
"proxy = xmlrpc.client.ServerProxy(\"http://localhost:8000/\")\n"
"\n"
"today = proxy.today()\n"
"# ISO8601 문자열을 datetime 객체로 변환합니다\n"
"converted = datetime.datetime.strptime(today.value, \"%Y%m%dT%H:%M:%S\")\n"
"print(\"Today: %s\" % converted.strftime(\"%d.%m.%Y, %H:%M\"))"

#: ../../library/xmlrpc.client.rst:306
msgid "Binary Objects"
msgstr "Binary 객체"

#: ../../library/xmlrpc.client.rst:310
msgid ""
"This class may be initialized from bytes data (which may include NULs). "
"The primary access to the content of a :class:`Binary` object is provided"
" by an attribute:"
msgstr ""
"이 클래스는 바이트열 데이터(NUL을 포함할 수 있습니다)로 초기화될 수 있습니다. :class:`Binary` 객체의 내용에 대한"
" 기본 액세스는 어트리뷰트에 의해 제공됩니다:"

#: ../../library/xmlrpc.client.rst:317
msgid ""
"The binary data encapsulated by the :class:`Binary` instance.  The data "
"is provided as a :class:`bytes` object."
msgstr ":class:`Binary` 인스턴스로 캡슐화된 바이너리 데이터. 데이터는 :class:`bytes` 객체로 제공됩니다."

#: ../../library/xmlrpc.client.rst:320
msgid ""
":class:`Binary` objects have the following methods, supported mainly for "
"internal use by the marshalling/unmarshalling code:"
msgstr ":class:`Binary` 객체에는 주로 마샬링/역마샬링 코드 내부에서 사용하기 위해 지원되는 다음과 같은 메서드가 있습니다:"

#: ../../library/xmlrpc.client.rst:326
msgid ""
"Accept a base64 :class:`bytes` object and decode it as the instance's new"
" data."
msgstr "base64 :class:`bytes` 객체를 받아들이고 인스턴스의 새 데이터로 디코딩합니다."

#: ../../library/xmlrpc.client.rst:331
msgid ""
"Write the XML-RPC base 64 encoding of this binary item to the *out* "
"stream object."
msgstr "이 바이너리 항목의 XML-RPC base64 인코딩을 *out* 스트림 객체에 씁니다."

#: ../../library/xmlrpc.client.rst:333
msgid ""
"The encoded data will have newlines every 76 characters as per :rfc:`RFC "
"2045 section 6.8 <2045#section-6.8>`, which was the de facto standard "
"base64 specification when the XML-RPC spec was written."
msgstr ""
"인코딩된 데이터에는 :rfc:`RFC 2045 섹션 6.8 <2045#section-6.8>`\\에 따라 76문자마다 줄 바꿈이 "
"있는데, 이는 XML-RPC 명세가 작성될 때 사실상 표준 base64 명세였습니다."

#: ../../library/xmlrpc.client.rst:338
msgid ""
"It also supports certain of Python's built-in operators through "
":meth:`~object.__eq__` and :meth:`~object.__ne__` methods."
msgstr ""
":meth:`~object.__eq__`\\와 :meth:`~object.__ne__` 메서드를 통해 특정 파이썬 내장 연산자도 "
"지원합니다."

#: ../../library/xmlrpc.client.rst:341
msgid ""
"Example usage of the binary objects.  We're going to transfer an image "
"over XMLRPC::"
msgstr "바이너리 객체의 사용 예. XMLRPC를 통해 이미지를 전송할 것입니다::"

#: ../../library/xmlrpc.client.rst:344
msgid ""
"from xmlrpc.server import SimpleXMLRPCServer\n"
"import xmlrpc.client\n"
"\n"
"def python_logo():\n"
"    with open(\"python_logo.jpg\", \"rb\") as handle:\n"
"        return xmlrpc.client.Binary(handle.read())\n"
"\n"
"server = SimpleXMLRPCServer((\"localhost\", 8000))\n"
"print(\"Listening on port 8000...\")\n"
"server.register_function(python_logo, 'python_logo')\n"
"\n"
"server.serve_forever()"
msgstr ""
"from xmlrpc.server import SimpleXMLRPCServer\n"
"import xmlrpc.client\n"
"\n"
"def python_logo():\n"
"    with open(\"python_logo.jpg\", \"rb\") as handle:\n"
"        return xmlrpc.client.Binary(handle.read())\n"
"\n"
"server = SimpleXMLRPCServer((\"localhost\", 8000))\n"
"print(\"Listening on port 8000...\")\n"
"server.register_function(python_logo, 'python_logo')\n"
"\n"
"server.serve_forever()"

#: ../../library/xmlrpc.client.rst:357
msgid "The client gets the image and saves it to a file::"
msgstr "클라이언트는 이미지를 가져와서 파일에 저장합니다::"

#: ../../library/xmlrpc.client.rst:359
msgid ""
"import xmlrpc.client\n"
"\n"
"proxy = xmlrpc.client.ServerProxy(\"http://localhost:8000/\")\n"
"with open(\"fetched_python_logo.jpg\", \"wb\") as handle:\n"
"    handle.write(proxy.python_logo().data)"
msgstr ""
"import xmlrpc.client\n"
"\n"
"proxy = xmlrpc.client.ServerProxy(\"http://localhost:8000/\")\n"
"with open(\"fetched_python_logo.jpg\", \"wb\") as handle:\n"
"    handle.write(proxy.python_logo().data)"

#: ../../library/xmlrpc.client.rst:368
msgid "Fault Objects"
msgstr "Fault 객체"

#: ../../library/xmlrpc.client.rst:372
msgid ""
"A :class:`Fault` object encapsulates the content of an XML-RPC fault tag."
" Fault objects have the following attributes:"
msgstr ""
":class:`Fault` 객체는 XML-RPC 결함 태그의 내용을 캡슐화합니다. Fault 객체에는 다음과 같은 어트리뷰트가 "
"있습니다:"

#: ../../library/xmlrpc.client.rst:378
msgid "An int indicating the fault type."
msgstr "결함 형을 나타내는 int."

#: ../../library/xmlrpc.client.rst:383
msgid "A string containing a diagnostic message associated with the fault."
msgstr "결함과 연관된 진단 메시지가 포함된 문자열."

#: ../../library/xmlrpc.client.rst:385
msgid ""
"In the following example we're going to intentionally cause a "
":exc:`Fault` by returning a complex type object.  The server code::"
msgstr "다음 예제에서는 복소수 형의 객체를 반환하여 의도적으로 :exc:`Fault`\\를 발생시킵니다. 서버 코드::"

#: ../../library/xmlrpc.client.rst:388
msgid ""
"from xmlrpc.server import SimpleXMLRPCServer\n"
"\n"
"# A marshalling error is going to occur because we're returning a\n"
"# complex number\n"
"def add(x, y):\n"
"    return x+y+0j\n"
"\n"
"server = SimpleXMLRPCServer((\"localhost\", 8000))\n"
"print(\"Listening on port 8000...\")\n"
"server.register_function(add, 'add')\n"
"\n"
"server.serve_forever()"
msgstr ""
"from xmlrpc.server import SimpleXMLRPCServer\n"
"\n"
"# 복소수를 반환하기 때문에 마샬링 에러가 발생합니다\n"
"def add(x, y):\n"
"    return x+y+0j\n"
"\n"
"server = SimpleXMLRPCServer((\"localhost\", 8000))\n"
"print(\"Listening on port 8000...\")\n"
"server.register_function(add, 'add')\n"
"\n"
"server.serve_forever()"

#: ../../library/xmlrpc.client.rst:403
#, python-format
msgid ""
"import xmlrpc.client\n"
"\n"
"proxy = xmlrpc.client.ServerProxy(\"http://localhost:8000/\")\n"
"try:\n"
"    proxy.add(2, 5)\n"
"except xmlrpc.client.Fault as err:\n"
"    print(\"A fault occurred\")\n"
"    print(\"Fault code: %d\" % err.faultCode)\n"
"    print(\"Fault string: %s\" % err.faultString)"
msgstr ""
"import xmlrpc.client\n"
"\n"
"proxy = xmlrpc.client.ServerProxy(\"http://localhost:8000/\")\n"
"try:\n"
"    proxy.add(2, 5)\n"
"except xmlrpc.client.Fault as err:\n"
"    print(\"A fault occurred\")\n"
"    print(\"Fault code: %d\" % err.faultCode)\n"
"    print(\"Fault string: %s\" % err.faultString)"

#: ../../library/xmlrpc.client.rst:418
msgid "ProtocolError Objects"
msgstr "ProtocolError 객체"

#: ../../library/xmlrpc.client.rst:422
msgid ""
"A :class:`ProtocolError` object describes a protocol error in the "
"underlying transport layer (such as a 404 'not found' error if the server"
" named by the URI does not exist).  It has the following attributes:"
msgstr ""
":class:`ProtocolError` 객체는 하부 전송 계층에서의 프로토콜 에러를 기술합니다 (가령 URI로 명명된 서버가 없을"
" 때 404 'not found' 에러). 다음과 같은 어트리뷰트가 있습니다:"

#: ../../library/xmlrpc.client.rst:429
msgid "The URI or URL that triggered the error."
msgstr "에러를 일으킨 URI나 URL."

#: ../../library/xmlrpc.client.rst:434
msgid "The error code."
msgstr "에러 코드."

#: ../../library/xmlrpc.client.rst:439
msgid "The error message or diagnostic string."
msgstr "에러 메시지나 진단 문자열."

#: ../../library/xmlrpc.client.rst:444
msgid ""
"A dict containing the headers of the HTTP/HTTPS request that triggered "
"the error."
msgstr "에러를 일으킨 HTTP/HTTPS 요청의 헤더를 포함하는 딕셔너리."

#: ../../library/xmlrpc.client.rst:447
msgid ""
"In the following example we're going to intentionally cause a "
":exc:`ProtocolError` by providing an invalid URI::"
msgstr "다음 예에서는 잘못된 URI를 제공하여 의도적으로 :exc:`ProtocolError`\\를 발생시킵니다::"

#: ../../library/xmlrpc.client.rst:450
#, python-format
msgid ""
"import xmlrpc.client\n"
"\n"
"# create a ServerProxy with a URI that doesn't respond to XMLRPC requests"
"\n"
"proxy = xmlrpc.client.ServerProxy(\"http://google.com/\")\n"
"\n"
"try:\n"
"    proxy.some_method()\n"
"except xmlrpc.client.ProtocolError as err:\n"
"    print(\"A protocol error occurred\")\n"
"    print(\"URL: %s\" % err.url)\n"
"    print(\"HTTP/HTTPS headers: %s\" % err.headers)\n"
"    print(\"Error code: %d\" % err.errcode)\n"
"    print(\"Error message: %s\" % err.errmsg)"
msgstr ""
"import xmlrpc.client\n"
"\n"
"# XMLRPC 요청에 응답하지 않는 URI로 ServerProxy를 만듭니다\n"
"proxy = xmlrpc.client.ServerProxy(\"http://google.com/\")\n"
"\n"
"try:\n"
"    proxy.some_method()\n"
"except xmlrpc.client.ProtocolError as err:\n"
"    print(\"A protocol error occurred\")\n"
"    print(\"URL: %s\" % err.url)\n"
"    print(\"HTTP/HTTPS headers: %s\" % err.headers)\n"
"    print(\"Error code: %d\" % err.errcode)\n"
"    print(\"Error message: %s\" % err.errmsg)"

#: ../../library/xmlrpc.client.rst:465
msgid "MultiCall Objects"
msgstr "MultiCall 객체"

#: ../../library/xmlrpc.client.rst:467
msgid ""
"The :class:`MultiCall` object provides a way to encapsulate multiple "
"calls to a remote server into a single request [#]_."
msgstr ":class:`MultiCall` 객체는 원격 서버에 대한 여러 호출을 단일 요청으로 캡슐화하는 방법을 제공합니다 [#]_."

#: ../../library/xmlrpc.client.rst:473
msgid ""
"Create an object used to boxcar method calls. *server* is the eventual "
"target of the call. Calls can be made to the result object, but they will"
" immediately return ``None``, and only store the call name and parameters"
" in the :class:`MultiCall` object. Calling the object itself causes all "
"stored calls to be transmitted as a single ``system.multicall`` request. "
"The result of this call is a :term:`generator`; iterating over this "
"generator yields the individual results."
msgstr ""
"boxcar 메서드 호출에 사용되는 객체를 만듭니다. *server*\\는 최종 호출 대상입니다. 결과 객체를 호출할 수 있지만, "
"즉시 ``None``\\을 반환하고, 호출 이름과 매개 변수를 :class:`MultiCall` 객체에 저장하기만 합니다. 객체 "
"자체를 호출하면 저장된 모든 호출이 단일 ``system.multicall`` 요청으로 전송됩니다. 이 호출의 결과는 "
":term:`제너레이터 <generator>`\\입니다; 이 제너레이터를 이터레이트 하면 개별 결과를 산출합니다."

#: ../../library/xmlrpc.client.rst:481
msgid "A usage example of this class follows.  The server code::"
msgstr "이 클래스의 사용 예는 다음과 같습니다. 서버 코드::"

#: ../../library/xmlrpc.client.rst:483
msgid ""
"from xmlrpc.server import SimpleXMLRPCServer\n"
"\n"
"def add(x, y):\n"
"    return x + y\n"
"\n"
"def subtract(x, y):\n"
"    return x - y\n"
"\n"
"def multiply(x, y):\n"
"    return x * y\n"
"\n"
"def divide(x, y):\n"
"    return x // y\n"
"\n"
"# A simple server with simple arithmetic functions\n"
"server = SimpleXMLRPCServer((\"localhost\", 8000))\n"
"print(\"Listening on port 8000...\")\n"
"server.register_multicall_functions()\n"
"server.register_function(add, 'add')\n"
"server.register_function(subtract, 'subtract')\n"
"server.register_function(multiply, 'multiply')\n"
"server.register_function(divide, 'divide')\n"
"server.serve_forever()"
msgstr ""
"from xmlrpc.server import SimpleXMLRPCServer\n"
"\n"
"def add(x, y):\n"
"    return x + y\n"
"\n"
"def subtract(x, y):\n"
"    return x - y\n"
"\n"
"def multiply(x, y):\n"
"    return x * y\n"
"\n"
"def divide(x, y):\n"
"    return x // y\n"
"\n"
"# 간단한 산술 함수들이 있는 간단한 서버\n"
"server = SimpleXMLRPCServer((\"localhost\", 8000))\n"
"print(\"Listening on port 8000...\")\n"
"server.register_multicall_functions()\n"
"server.register_function(add, 'add')\n"
"server.register_function(subtract, 'subtract')\n"
"server.register_function(multiply, 'multiply')\n"
"server.register_function(divide, 'divide')\n"
"server.serve_forever()"

#: ../../library/xmlrpc.client.rst:509
#, python-format
msgid ""
"import xmlrpc.client\n"
"\n"
"proxy = xmlrpc.client.ServerProxy(\"http://localhost:8000/\")\n"
"multicall = xmlrpc.client.MultiCall(proxy)\n"
"multicall.add(7, 3)\n"
"multicall.subtract(7, 3)\n"
"multicall.multiply(7, 3)\n"
"multicall.divide(7, 3)\n"
"result = multicall()\n"
"\n"
"print(\"7+3=%d, 7-3=%d, 7*3=%d, 7//3=%d\" % tuple(result))"
msgstr ""
"import xmlrpc.client\n"
"\n"
"proxy = xmlrpc.client.ServerProxy(\"http://localhost:8000/\")\n"
"multicall = xmlrpc.client.MultiCall(proxy)\n"
"multicall.add(7, 3)\n"
"multicall.subtract(7, 3)\n"
"multicall.multiply(7, 3)\n"
"multicall.divide(7, 3)\n"
"result = multicall()\n"
"\n"
"print(\"7+3=%d, 7-3=%d, 7*3=%d, 7//3=%d\" % tuple(result))"

#: ../../library/xmlrpc.client.rst:523
msgid "Convenience Functions"
msgstr "편의 함수"

#: ../../library/xmlrpc.client.rst:527
msgid ""
"Convert *params* into an XML-RPC request. or into a response if "
"*methodresponse* is true. *params* can be either a tuple of arguments or "
"an instance of the :exc:`Fault` exception class.  If *methodresponse* is "
"true, only a single value can be returned, meaning that *params* must be "
"of length 1. *encoding*, if supplied, is the encoding to use in the "
"generated XML; the default is UTF-8. Python's :const:`None` value cannot "
"be used in standard XML-RPC; to allow using it via an extension,  provide"
" a true value for *allow_none*."
msgstr ""
"*params*\\를 XML-RPC 요청으로, 또는 *methodresponse*\\가 참이면 응답으로 변환합니다. "
"*params*\\는 인자의 튜플이거나 :exc:`Fault` 예외 클래스의 인스턴스일 수 있습니다. "
"*methodresponse*\\가 참이면, 단일 값만 반환될 수 있는데, *params*\\의 길이가 1이어야 한다는 뜻입니다. "
"제공되면, *encoding*\\은 생성된 XML에서 사용할 인코딩입니다; 기본값은 UTF-8입니다. 파이썬의 "
":const:`None` 값은 표준 XML-RPC에서 사용할 수 없습니다; 확장을 통해 이를 사용하려면 *allow_none*\\에"
" 참값을 제공하십시오."

#: ../../library/xmlrpc.client.rst:538
msgid ""
"Convert an XML-RPC request or response into Python objects, a ``(params, "
"methodname)``.  *params* is a tuple of argument; *methodname* is a "
"string, or ``None`` if no method name is present in the packet. If the "
"XML-RPC packet represents a fault condition, this function will raise a "
":exc:`Fault` exception. The *use_builtin_types* flag can be used to cause"
" date/time values to be presented as :class:`datetime.datetime` objects "
"and binary data to be presented as :class:`bytes` objects; this flag is "
"false by default."
msgstr ""
"XML-RPC 요청이나 응답을 파이썬 객체 ``(params, methodname)``\\로 변환합니다. *params*\\는 "
"인자의 튜플입니다; *methodname*\\은 문자열이거나 패킷에 메서드 이름이 없으면 ``None``\\입니다. XML-RPC "
"패킷이 결함 조건을 나타내면, 이 함수는 :exc:`Fault` 예외를 발생시킵니다. *use_builtin_types* 플래그를 "
"사용하여 날짜/시간 값을 :class:`datetime.datetime` 객체로 표현하고 바이너리 데이터를 "
":class:`bytes` 객체로 표현할 수 있습니다; 이 플래그는 기본적으로 거짓입니다."

#: ../../library/xmlrpc.client.rst:546
msgid ""
"The obsolete *use_datetime* flag is similar to *use_builtin_types* but it"
" applies only to date/time values."
msgstr "사용되지 않는 *use_datetime* 플래그는 *use_builtin_types*\\와 유사하지만, 날짜/시간 값에만 적용됩니다."

#: ../../library/xmlrpc.client.rst:556
msgid "Example of Client Usage"
msgstr "클라이언트 사용 예"

#: ../../library/xmlrpc.client.rst:560
msgid ""
"# simple test program (from the XML-RPC specification)\n"
"from xmlrpc.client import ServerProxy, Error\n"
"\n"
"# server = ServerProxy(\"http://localhost:8000\") # local server\n"
"with ServerProxy(\"http://betty.userland.com\") as proxy:\n"
"\n"
"    print(proxy)\n"
"\n"
"    try:\n"
"        print(proxy.examples.getStateName(41))\n"
"    except Error as v:\n"
"        print(\"ERROR\", v)"
msgstr ""
"# 간단한 테스트 프로그램 (XML-RPC 명세에서 인용)\n"
"from xmlrpc.client import ServerProxy, Error\n"
"\n"
"# server = ServerProxy(\"http://localhost:8000\") # 로컬 서버\n"
"with ServerProxy(\"http://betty.userland.com\") as proxy:\n"
"\n"
"    print(proxy)\n"
"\n"
"    try:\n"
"        print(proxy.examples.getStateName(41))\n"
"    except Error as v:\n"
"        print(\"ERROR\", v)"

#: ../../library/xmlrpc.client.rst:573
msgid ""
"To access an XML-RPC server through a HTTP proxy, you need to define a "
"custom transport.  The following example shows how::"
msgstr ""
"HTTP 프락시를 통해 XML-RPC 서버에 액세스하려면, 사용자 정의 트랜스포트를 정의해야 합니다. 다음 예제는 방법을 "
"보여줍니다::"

#: ../../library/xmlrpc.client.rst:576
msgid ""
"import http.client\n"
"import xmlrpc.client\n"
"\n"
"class ProxiedTransport(xmlrpc.client.Transport):\n"
"\n"
"    def set_proxy(self, host, port=None, headers=None):\n"
"        self.proxy = host, port\n"
"        self.proxy_headers = headers\n"
"\n"
"    def make_connection(self, host):\n"
"        connection = http.client.HTTPConnection(*self.proxy)\n"
"        connection.set_tunnel(host, headers=self.proxy_headers)\n"
"        self._connection = host, connection\n"
"        return connection\n"
"\n"
"transport = ProxiedTransport()\n"
"transport.set_proxy('proxy-server', 8080)\n"
"server = xmlrpc.client.ServerProxy('http://betty.userland.com', "
"transport=transport)\n"
"print(server.examples.getStateName(41))"
msgstr ""
"import http.client\n"
"import xmlrpc.client\n"
"\n"
"class ProxiedTransport(xmlrpc.client.Transport):\n"
"\n"
"    def set_proxy(self, host, port=None, headers=None):\n"
"        self.proxy = host, port\n"
"        self.proxy_headers = headers\n"
"\n"
"    def make_connection(self, host):\n"
"        connection = http.client.HTTPConnection(*self.proxy)\n"
"        connection.set_tunnel(host, headers=self.proxy_headers)\n"
"        self._connection = host, connection\n"
"        return connection\n"
"\n"
"transport = ProxiedTransport()\n"
"transport.set_proxy('proxy-server', 8080)\n"
"server = xmlrpc.client.ServerProxy('http://betty.userland.com', "
"transport=transport)\n"
"print(server.examples.getStateName(41))"

#: ../../library/xmlrpc.client.rst:598
msgid "Example of Client and Server Usage"
msgstr "클라이언트와 서버 사용 예"

#: ../../library/xmlrpc.client.rst:600
msgid "See :ref:`simplexmlrpcserver-example`."
msgstr ":ref:`simplexmlrpcserver-example`\\를 참조하십시오."

#: ../../library/xmlrpc.client.rst:604
msgid "Footnotes"
msgstr "각주"

#: ../../library/xmlrpc.client.rst:605
msgid ""
"This approach has been first presented in `a discussion on xmlrpc.com "
"<https://web.archive.org/web/20060624230303/http://www.xmlrpc.com/discuss/msgReader$1208?mode=topic>`_."
msgstr ""
"이 접근법은 `xmlrpc.com에서의 토론 "
"<https://web.archive.org/web/20060624230303/http://www.xmlrpc.com/discuss/msgReader$1208?mode=topic>`_\\에서"
" 처음 제시되었습니다."

#~ msgid "`Unofficial XML-RPC Errata <http://effbot.org/zone/xmlrpc-errata.htm>`_"
#~ msgstr "`Unofficial XML-RPC Errata <http://effbot.org/zone/xmlrpc-errata.htm>`_"

#~ msgid ""
#~ "Fredrik Lundh's \"unofficial errata, intended"
#~ " to clarify certain details in the"
#~ " XML-RPC specification, as well as"
#~ " hint at 'best practices' to use "
#~ "when designing your own XML-RPC "
#~ "implementations.\""
#~ msgstr ""
#~ "Fredrik Lundh의 \"비공식 정오표, XML-RPC "
#~ "명세의 특정 세부 사항을 명확하게 설명할 뿐만 "
#~ "아니라 여러분 자신의 XML-RPC 구현을 설계할 "
#~ "때 사용할 '모범 사례'에 대한 힌트를 제공하기 "
#~ "위한 것입니다.\""

