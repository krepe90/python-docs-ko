# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2017, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-04-17 23:44+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: Dong-gweon Oh <flowdas@gmail.com>\n"
"Language-Team: Korean (https://python.flowdas.com)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.17.0\n"

#: ../../library/html.parser.rst:2
#, fuzzy
msgid ":mod:`!html.parser` --- Simple HTML and XHTML parser"
msgstr ":mod:`html.parser` --- 간단한 HTML과 XHTML 구문 분석기"

#: ../../library/html.parser.rst:7
msgid "**Source code:** :source:`Lib/html/parser.py`"
msgstr "**소스 코드:** :source:`Lib/html/parser.py`"

#: ../../library/html.parser.rst:15
msgid ""
"This module defines a class :class:`HTMLParser` which serves as the basis"
" for parsing text files formatted in HTML (HyperText Mark-up Language) "
"and XHTML."
msgstr ""
"이 모듈은 HTML(HyperText Mark-up Language)와 XHTML 형식의 텍스트 파일을 구문 분석하기 위한 기초로 "
"사용되는 클래스 :class:`HTMLParser`\\를 정의합니다."

#: ../../library/html.parser.rst:20
msgid "Create a parser instance able to parse invalid markup."
msgstr "잘못된 마크업을 구문 분석할 수 있는 구문 분석기 인스턴스를 만듭니다."

#: ../../library/html.parser.rst:22
msgid ""
"If *convert_charrefs* is ``True`` (the default), all character references"
" (except the ones in ``script``/``style`` elements) are automatically "
"converted to the corresponding Unicode characters."
msgstr ""
"*convert_charrefs*\\가 ``True``\\(기본값)이면, (``script``/``style`` 요소에 있는 것을 "
"제외한) 모든 문자 참조(character references)가 자동으로 해당 유니코드 문자로 변환됩니다."

#: ../../library/html.parser.rst:26
msgid ""
"An :class:`.HTMLParser` instance is fed HTML data and calls handler "
"methods when start tags, end tags, text, comments, and other markup "
"elements are encountered.  The user should subclass :class:`.HTMLParser` "
"and override its methods to implement the desired behavior."
msgstr ""
":class:`.HTMLParser` 인스턴스는 HTML 데이터를 받아서 시작 태그, 종료 태그, 텍스트, 주석 및 기타 마크업 "
"요소를 만날 때마다 처리기 메서드를 호출합니다. 사용자는 원하는 동작을 구현하기 위해 :class:`.HTMLParser`\\의 "
"서브 클래스를 만들고 해당 메서드를 재정의해야 합니다."

#: ../../library/html.parser.rst:31
msgid ""
"This parser does not check that end tags match start tags or call the "
"end-tag handler for elements which are closed implicitly by closing an "
"outer element."
msgstr ""
"이 구문 분석기는 종료 태그가 시작 태그와 일치하는지 검사하거나, 바깥(outer) 요소를 닫음으로써 묵시적으로 닫힌 요소에 대해 "
"종료 태그 처리기를 호출하지 않습니다."

#: ../../library/html.parser.rst:34
msgid "*convert_charrefs* keyword argument added."
msgstr "*convert_charrefs* 키워드 인자가 추가되었습니다."

#: ../../library/html.parser.rst:37
msgid "The default value for argument *convert_charrefs* is now ``True``."
msgstr "인자 *convert_charrefs*\\의 기본값은 이제 ``True``\\입니다."

#: ../../library/html.parser.rst:42
msgid "Example HTML Parser Application"
msgstr "HTML 구문 분석기 응용 프로그램 예제"

#: ../../library/html.parser.rst:44
msgid ""
"As a basic example, below is a simple HTML parser that uses the "
":class:`HTMLParser` class to print out start tags, end tags, and data as "
"they are encountered::"
msgstr ""
"기본 예제로, 다음은 :class:`HTMLParser` 클래스를 사용하여 시작 태그, 종료 태그 및 데이터를 만날 때마다 인쇄하는"
" 간단한 HTML 구문 분석기입니다::"

#: ../../library/html.parser.rst:48
msgid ""
"from html.parser import HTMLParser\n"
"\n"
"class MyHTMLParser(HTMLParser):\n"
"    def handle_starttag(self, tag, attrs):\n"
"        print(\"Encountered a start tag:\", tag)\n"
"\n"
"    def handle_endtag(self, tag):\n"
"        print(\"Encountered an end tag :\", tag)\n"
"\n"
"    def handle_data(self, data):\n"
"        print(\"Encountered some data  :\", data)\n"
"\n"
"parser = MyHTMLParser()\n"
"parser.feed('<html><head><title>Test</title></head>'\n"
"            '<body><h1>Parse me!</h1></body></html>')"
msgstr ""

#: ../../library/html.parser.rst:64
msgid "The output will then be:"
msgstr "출력은 다음과 같습니다:"

#: ../../library/html.parser.rst:66
msgid ""
"Encountered a start tag: html\n"
"Encountered a start tag: head\n"
"Encountered a start tag: title\n"
"Encountered some data  : Test\n"
"Encountered an end tag : title\n"
"Encountered an end tag : head\n"
"Encountered a start tag: body\n"
"Encountered a start tag: h1\n"
"Encountered some data  : Parse me!\n"
"Encountered an end tag : h1\n"
"Encountered an end tag : body\n"
"Encountered an end tag : html"
msgstr ""

#: ../../library/html.parser.rst:83
msgid ":class:`.HTMLParser` Methods"
msgstr ":class:`.HTMLParser` 메서드"

#: ../../library/html.parser.rst:85
msgid ":class:`HTMLParser` instances have the following methods:"
msgstr ":class:`HTMLParser` 인스턴스에는 다음과 같은 메서드가 있습니다:"

#: ../../library/html.parser.rst:90
msgid ""
"Feed some text to the parser.  It is processed insofar as it consists of "
"complete elements; incomplete data is buffered until more data is fed or "
":meth:`close` is called.  *data* must be :class:`str`."
msgstr ""
"구문 분석기에 텍스트를 입력합니다. 완전한 요소로 구성되어있는 부분까지 처리됩니다; 불완전한 데이터는 더 많은 데이터가 공급되거나 "
":meth:`close`\\가 호출될 때까지 버퍼링 됩니다. *data*\\는 :class:`str`\\이어야 합니다."

#: ../../library/html.parser.rst:97
msgid ""
"Force processing of all buffered data as if it were followed by an end-"
"of-file mark.  This method may be redefined by a derived class to define "
"additional processing at the end of the input, but the redefined version "
"should always call the :class:`HTMLParser` base class method "
":meth:`close`."
msgstr ""
"버퍼링 된 모든 데이터를 마치 파일 끝(end-of-file) 표시가 붙은 것처럼 처리합니다. 이 메서드는 파생 클래스에 의해 입력"
" 끝에서의 추가 처리를 정의하기 위해 재정의될 수 있지만, 재정의된 버전에서는 항상 :class:`HTMLParser` 베이스 "
"클래스 메서드인 :meth:`close`\\를 호출해야 합니다."

#: ../../library/html.parser.rst:105
msgid ""
"Reset the instance.  Loses all unprocessed data.  This is called "
"implicitly at instantiation time."
msgstr "인스턴스를 재설정합니다. 처리되지 않은 모든 데이터를 잃습니다. 이것은 인스턴스 생성 시에 묵시적으로 호출됩니다."

#: ../../library/html.parser.rst:111
msgid "Return current line number and offset."
msgstr "현재의 줄 번호와 오프셋(offset)을 반환합니다."

#: ../../library/html.parser.rst:116
msgid ""
"Return the text of the most recently opened start tag.  This should not "
"normally be needed for structured processing, but may be useful in "
"dealing with HTML \"as deployed\" or for re-generating input with minimal"
" changes (whitespace between attributes can be preserved, etc.)."
msgstr ""
"가장 최근에 열렸던 시작 태그의 텍스트를 반환합니다. 이것은 일반적으로 구조화된 처리에 필요하지 않지만, \"배치된 대로(as "
"deployed)\" HTML을 다루거나 최소한의 변경(어트리뷰트 사이의 공백을 보존할 수 있음, 등등)으로 입력을 다시 생성하는 "
"데 유용할 수 있습니다."

#: ../../library/html.parser.rst:122
msgid ""
"The following methods are called when data or markup elements are "
"encountered and they are meant to be overridden in a subclass.  The base "
"class implementations do nothing (except for "
":meth:`~HTMLParser.handle_startendtag`):"
msgstr ""
"다음 메서드는 데이터나 마크업 요소를 만날 때 호출되며 서브 클래스에서 재정의하려는 용도입니다. 베이스 클래스 구현은 아무 일도 "
"하지 않습니다 (:meth:`~HTMLParser.handle_startendtag`\\는 예외입니다).:"

#: ../../library/html.parser.rst:129
#, fuzzy
msgid ""
"This method is called to handle the start tag of an element (e.g. ``<div "
"id=\"main\">``)."
msgstr "이 메서드는 태그의 시작(예를 들어, ``<div id=\"main\">``)을 처리하기 위해 호출됩니다."

#: ../../library/html.parser.rst:131
msgid ""
"The *tag* argument is the name of the tag converted to lower case. The "
"*attrs* argument is a list of ``(name, value)`` pairs containing the "
"attributes found inside the tag's ``<>`` brackets.  The *name* will be "
"translated to lower case, and quotes in the *value* have been removed, "
"and character and entity references have been replaced."
msgstr ""
"*tag* 인자는 소문자로 변환된 태그의 이름입니다. *attrs* 인자는 태그의 ``<>`` 화살괄호 안에 있는 어트리뷰트를 "
"포함하는 ``(name, value)`` 쌍의 리스트입니다. *name*\\은 소문자로 변환되고, *value*\\의 따옴표는 "
"제거되고, 문자와 엔티티 참조는 치환됩니다."

#: ../../library/html.parser.rst:137
msgid ""
"For instance, for the tag ``<A HREF=\"https://www.cwi.nl/\">``, this "
"method would be called as ``handle_starttag('a', [('href', "
"'https://www.cwi.nl/')])``."
msgstr ""
"예를 들어, 태그 ``<A HREF=\"https://www.cwi.nl/\">``\\의 경우, 이 메서드는 "
"``handle_starttag('a', [('href', 'https://www.cwi.nl/')])``\\로 호출됩니다."

#: ../../library/html.parser.rst:140
msgid ""
"All entity references from :mod:`html.entities` are replaced in the "
"attribute values."
msgstr ":mod:`html.entities`\\의 모든 엔티티 참조가 어트리뷰트 값에서 치환됩니다."

#: ../../library/html.parser.rst:146
msgid ""
"This method is called to handle the end tag of an element (e.g. "
"``</div>``)."
msgstr "이 메서드는 요소의 종료 태그(예를 들어, ``</div>``)를 처리하기 위해 호출됩니다."

#: ../../library/html.parser.rst:148
msgid "The *tag* argument is the name of the tag converted to lower case."
msgstr "*tag* 인자는 소문자로 변환된 태그의 이름입니다."

#: ../../library/html.parser.rst:153
msgid ""
"Similar to :meth:`handle_starttag`, but called when the parser encounters"
" an XHTML-style empty tag (``<img ... />``).  This method may be "
"overridden by subclasses which require this particular lexical "
"information; the default implementation simply calls "
":meth:`handle_starttag` and :meth:`handle_endtag`."
msgstr ""
":meth:`handle_starttag`\\와 비슷하지만, 구문 분석기가 XHTML 스타일의 빈 태그(``<img ... "
"/>``)를 만날 때 호출됩니다. 이 메서드는 이 특정의 어휘 정보(lexical information)가 필요한 서브 클래스에 "
"의해 재정의될 수 있습니다; 기본 구현은 단순히 :meth:`handle_starttag`\\와 "
":meth:`handle_endtag`\\를 호출합니다."

#: ../../library/html.parser.rst:161
msgid ""
"This method is called to process arbitrary data (e.g. text nodes and the "
"content of ``<script>...</script>`` and ``<style>...</style>``)."
msgstr ""
"이 메서드는 임의의 데이터(예를 들어, 텍스트 노드와 ``<script>...</script>`` 및 "
"``<style>...</style>``\\의 내용)를 처리하기 위해 호출됩니다."

#: ../../library/html.parser.rst:167
msgid ""
"This method is called to process a named character reference of the form "
"``&name;`` (e.g. ``&gt;``), where *name* is a general entity reference "
"(e.g. ``'gt'``).  This method is never called if *convert_charrefs* is "
"``True``."
msgstr ""
"이 메서드는 ``&name;`` 형식(예를 들어, ``&gt;``)의 이름있는 문자 참조를 처리하기 위해 호출됩니다. 여기서 "
"*name*\\은 일반 엔티티 참조(예를 들어, ``'gt'``)입니다. *convert_charrefs*\\가 "
"``True``\\이면, 이 메서드는 호출되지 않습니다."

#: ../../library/html.parser.rst:175
#, fuzzy, python-brace-format
msgid ""
"This method is called to process decimal and hexadecimal numeric "
"character references of the form :samp:`&#{NNN};` and :samp:`&#x{NNN};`."
"  For example, the decimal equivalent for ``&gt;`` is ``&#62;``, whereas "
"the hexadecimal is ``&#x3E;``; in this case the method will receive "
"``'62'`` or ``'x3E'``.  This method is never called if *convert_charrefs*"
" is ``True``."
msgstr ""
"이 메서드는 ``&#NNN;``\\과 ``&#xNNN;`` 형식의 10진수 및 16진수 문자 참조를 처리하기 위해 호출됩니다. 예를"
" 들어, ``&gt;``\\에 해당하는 10진수는 ``&#62;``\\이고, 반면에 16진수는 ``&#x3E;``\\입니다; 이때 "
"메서드는 ``'62'``\\나 ``'x3E'``\\를 받습니다. 이 메서드는 *convert_charrefs*\\가 "
"``True``\\이면 호출되지 않습니다."

#: ../../library/html.parser.rst:184
msgid ""
"This method is called when a comment is encountered (e.g. ``<!--"
"comment-->``)."
msgstr "이 메서드는 주석을 만날 때 호출됩니다 (예를 들어, ``<!--comment-->``)."

#: ../../library/html.parser.rst:186
msgid ""
"For example, the comment ``<!-- comment -->`` will cause this method to "
"be called with the argument ``' comment '``."
msgstr "예를 들어, 주석 ``<!-- comment -->``\\는 이 메서드가 인자 ``' comment '``\\로 호출되도록 합니다."

#: ../../library/html.parser.rst:189
msgid ""
"The content of Internet Explorer conditional comments (condcoms) will "
"also be sent to this method, so, for ``<!--[if IE 9]>IE9-specific "
"content<![endif]-->``, this method will receive ``'[if IE 9]>IE9-specific"
" content<![endif]'``."
msgstr ""
"Internet Explorer 조건부 주석(condcoms)의 내용도 이 메서드로 보내지므로, ``<!--[if IE "
"9]>IE9-specific content<![endif]-->``\\의 경우, 이 메서드는 ``'[if IE "
"9]>IE9-specific content<![endif]'``\\를 받습니다."

#: ../../library/html.parser.rst:196
msgid ""
"This method is called to handle an HTML doctype declaration (e.g. "
"``<!DOCTYPE html>``)."
msgstr "이 메서드는 HTML doctype 선언(예를 들어, ``<!DOCTYPE html>``)을 처리하기 위해 호출됩니다."

#: ../../library/html.parser.rst:199
msgid ""
"The *decl* parameter will be the entire contents of the declaration "
"inside the ``<!...>`` markup (e.g. ``'DOCTYPE html'``)."
msgstr "*decl* 매개 변수는 ``<!...>`` 마크업 내의 선언 전체 내용입니다 (예를 들어, ``'DOCTYPE html'``)."

#: ../../library/html.parser.rst:205
msgid ""
"Method called when a processing instruction is encountered.  The *data* "
"parameter will contain the entire processing instruction. For example, "
"for the processing instruction ``<?proc color='red'>``, this method would"
" be called as ``handle_pi(\"proc color='red'\")``.  It is intended to be "
"overridden by a derived class; the base class implementation does "
"nothing."
msgstr ""
"처리 명령(processing instruction)을 만날 때 호출되는 메서드. *data* 매개 변수에는 전체 처리 명령이 "
"포함됩니다. 예를 들어, 처리 명령 ``<?proc color='red'>``\\의 경우, 이 메서드는 "
"``handle_pi(\"proc color='red'\")``\\로 호출됩니다. 파생 클래스에 의해 재정의되려는 목적입니다; "
"베이스 클래스 구현은 아무것도 수행하지 않습니다."

#: ../../library/html.parser.rst:213
msgid ""
"The :class:`HTMLParser` class uses the SGML syntactic rules for "
"processing instructions.  An XHTML processing instruction using the "
"trailing ``'?'`` will cause the ``'?'`` to be included in *data*."
msgstr ""
":class:`HTMLParser` 클래스는 처리 명령에 대해 SGML 구문 규칙을 사용합니다. 후행 ``'?'``\\를 사용하는 "
"XHTML 처리 명령은 ``'?'``\\가 *data*\\에 포함되도록 합니다."

#: ../../library/html.parser.rst:220
msgid ""
"This method is called when an unrecognized declaration is read by the "
"parser."
msgstr "이 메서드는 구문 분석기가 인식할 수 없는 선언을 읽었을 때 호출됩니다."

#: ../../library/html.parser.rst:222
msgid ""
"The *data* parameter will be the entire contents of the declaration "
"inside the ``<![...]>`` markup.  It is sometimes useful to be overridden "
"by a derived class.  The base class implementation does nothing."
msgstr ""
"*data* 매개 변수는 ``<![...]>`` 마크업 안에 있는 선언의 전체 내용입니다. 파생 클래스가 재정의하는 것이 때때로 "
"유용합니다. 베이스 클래스 구현은 아무것도 수행하지 않습니다."

#: ../../library/html.parser.rst:230
msgid "Examples"
msgstr "예제"

#: ../../library/html.parser.rst:232
msgid ""
"The following class implements a parser that will be used to illustrate "
"more examples::"
msgstr "다음 클래스는 더 많은 예를 설명하는 데 사용할 구문 분석기를 구현합니다::"

#: ../../library/html.parser.rst:235
msgid ""
"from html.parser import HTMLParser\n"
"from html.entities import name2codepoint\n"
"\n"
"class MyHTMLParser(HTMLParser):\n"
"    def handle_starttag(self, tag, attrs):\n"
"        print(\"Start tag:\", tag)\n"
"        for attr in attrs:\n"
"            print(\"     attr:\", attr)\n"
"\n"
"    def handle_endtag(self, tag):\n"
"        print(\"End tag  :\", tag)\n"
"\n"
"    def handle_data(self, data):\n"
"        print(\"Data     :\", data)\n"
"\n"
"    def handle_comment(self, data):\n"
"        print(\"Comment  :\", data)\n"
"\n"
"    def handle_entityref(self, name):\n"
"        c = chr(name2codepoint[name])\n"
"        print(\"Named ent:\", c)\n"
"\n"
"    def handle_charref(self, name):\n"
"        if name.startswith('x'):\n"
"            c = chr(int(name[1:], 16))\n"
"        else:\n"
"            c = chr(int(name))\n"
"        print(\"Num ent  :\", c)\n"
"\n"
"    def handle_decl(self, data):\n"
"        print(\"Decl     :\", data)\n"
"\n"
"parser = MyHTMLParser()"
msgstr ""

#: ../../library/html.parser.rst:269
msgid "Parsing a doctype::"
msgstr "doctype 구문 분석하기::"

#: ../../library/html.parser.rst:271
msgid ""
">>> parser.feed('<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\" '\n"
"...             '\"http://www.w3.org/TR/html4/strict.dtd\">')\n"
"Decl     : DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\" "
"\"http://www.w3.org/TR/html4/strict.dtd\""
msgstr ""

#: ../../library/html.parser.rst:275
msgid "Parsing an element with a few attributes and a title::"
msgstr "몇 가지 어트리뷰트를 가진 요소와 제목을 구문 분석하기::"

#: ../../library/html.parser.rst:277
msgid ""
">>> parser.feed('<img src=\"python-logo.png\" alt=\"The Python logo\">')\n"
"Start tag: img\n"
"     attr: ('src', 'python-logo.png')\n"
"     attr: ('alt', 'The Python logo')\n"
">>>\n"
">>> parser.feed('<h1>Python</h1>')\n"
"Start tag: h1\n"
"Data     : Python\n"
"End tag  : h1"
msgstr ""

#: ../../library/html.parser.rst:287
msgid ""
"The content of ``script`` and ``style`` elements is returned as is, "
"without further parsing::"
msgstr "``script``\\와 ``style`` 요소의 내용은 더 구문 분석하지 않고 있는 그대로 반환됩니다::"

#: ../../library/html.parser.rst:290
#, python-brace-format
msgid ""
">>> parser.feed('<style type=\"text/css\">#python { color: green "
"}</style>')\n"
"Start tag: style\n"
"     attr: ('type', 'text/css')\n"
"Data     : #python { color: green }\n"
"End tag  : style\n"
"\n"
">>> parser.feed('<script type=\"text/javascript\">'\n"
"...             'alert(\"<strong>hello!</strong>\");</script>')\n"
"Start tag: script\n"
"     attr: ('type', 'text/javascript')\n"
"Data     : alert(\"<strong>hello!</strong>\");\n"
"End tag  : script"
msgstr ""

#: ../../library/html.parser.rst:303
msgid "Parsing comments::"
msgstr "주석 구문 분석하기::"

#: ../../library/html.parser.rst:305
msgid ""
">>> parser.feed('<!-- a comment -->'\n"
"...             '<!--[if IE 9]>IE-specific content<![endif]-->')\n"
"Comment  :  a comment\n"
"Comment  : [if IE 9]>IE-specific content<![endif]"
msgstr ""

#: ../../library/html.parser.rst:310
msgid ""
"Parsing named and numeric character references and converting them to the"
" correct char (note: these 3 references are all equivalent to ``'>'``)::"
msgstr ""
"이름있는 문자 참조와 숫자 문자 참조를 구문 분석하고 올바른 문자로 변환합니다 (참고: 이 3개의 참조는 모두 ``'>'``\\와 "
"동등합니다)::"

#: ../../library/html.parser.rst:313
msgid ""
">>> parser.feed('&gt;&#62;&#x3E;')\n"
"Named ent: >\n"
"Num ent  : >\n"
"Num ent  : >"
msgstr ""

#: ../../library/html.parser.rst:318
msgid ""
"Feeding incomplete chunks to :meth:`~HTMLParser.feed` works, but "
":meth:`~HTMLParser.handle_data` might be called more than once (unless "
"*convert_charrefs* is set to ``True``)::"
msgstr ""
"불완전한 청크를 :meth:`~HTMLParser.feed`\\로 보내는 것이 작동합니다만, "
":meth:`~HTMLParser.handle_data`\\가 두 번 이상 호출될 수 있습니다 "
"(*convert_charrefs*\\가 ``True``\\로 설정되지 않은 한)::"

#: ../../library/html.parser.rst:322
msgid ""
">>> for chunk in ['<sp', 'an>buff', 'ered ', 'text</s', 'pan>']:\n"
"...     parser.feed(chunk)\n"
"...\n"
"Start tag: span\n"
"Data     : buff\n"
"Data     : ered\n"
"Data     : text\n"
"End tag  : span"
msgstr ""

#: ../../library/html.parser.rst:331
msgid "Parsing invalid HTML (e.g. unquoted attributes) also works::"
msgstr "잘못된 HTML(예를 들어, 따옴표 처리되지 않은 어트리뷰트)을 구문 분석하는 것도 동작합니다::"

#: ../../library/html.parser.rst:333
msgid ""
">>> parser.feed('<p><a class=link href=#main>tag soup</p ></a>')\n"
"Start tag: p\n"
"Start tag: a\n"
"     attr: ('class', 'link')\n"
"     attr: ('href', '#main')\n"
"Data     : tag soup\n"
"End tag  : p\n"
"End tag  : a"
msgstr ""

#: ../../library/html.parser.rst:9
msgid "HTML"
msgstr ""

#: ../../library/html.parser.rst:9
msgid "XHTML"
msgstr ""

