# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2017, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-04-17 23:44+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: Dong-gweon Oh <flowdas@gmail.com>\n"
"Language-Team: Korean (https://python.flowdas.com)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.17.0\n"

#: ../../library/_thread.rst:2
msgid ":mod:`!_thread` --- Low-level threading API"
msgstr ":mod:`!_thread` --- 저수준 스레드 API"

#: ../../library/_thread.rst:15
msgid ""
"This module provides low-level primitives for working with multiple "
"threads (also called :dfn:`light-weight processes` or :dfn:`tasks`) --- "
"multiple threads of control sharing their global data space.  For "
"synchronization, simple locks (also called :dfn:`mutexes` or :dfn:`binary"
" semaphores`) are provided. The :mod:`threading` module provides an "
"easier to use and higher-level threading API built on top of this module."
msgstr ""
"이 모듈은 다중 스레드(:dfn:`경량 프로세스 (light-weight processes)` 나 :dfn:`태스크 "
"(tasks)`\\라고도 합니다)로 작업하는데 필요한 저수준 기본 요소를 제공합니다 --- 전역 데이터 공간을 공유하는 여러 개의 "
"제어 스레드를 뜻합니다. 동기화를 위해서, 간단한 록(:dfn:`뮤텍스 (mutexes)`\\나 :dfn:`이진 세마포어 "
"(binary semaphores)`\\라고도 합니다)이 제공됩니다. :mod:`threading` 모듈은 이 모듈 위에 구축되어 "
"사용하기 쉬운 고수준의 스레딩 API를 제공합니다."

#: ../../library/_thread.rst:26
msgid "This module used to be optional, it is now always available."
msgstr "이 모듈은 선택 사항이었지만, 이제는 항상 사용할 수 있습니다."

#: ../../library/_thread.rst:29
msgid "This module defines the following constants and functions:"
msgstr "이 모듈은 다음 상수와 함수를 정의합니다:"

#: ../../library/_thread.rst:33
msgid "Raised on thread-specific errors."
msgstr "스레드 특정 에러에서 발생합니다."

#: ../../library/_thread.rst:35
msgid "This is now a synonym of the built-in :exc:`RuntimeError`."
msgstr "이것은 이제 내장 :exc:`RuntimeError`\\의 동의어입니다."

#: ../../library/_thread.rst:41
msgid "This is the type of lock objects."
msgstr "이것은 록 객체의 형입니다."

#: ../../library/_thread.rst:46
msgid ""
"Start a new thread and return its identifier.  The thread executes the "
"function *function* with the argument list *args* (which must be a "
"tuple). The optional *kwargs* argument specifies a dictionary of keyword "
"arguments."
msgstr ""
"새 스레드를 시작하고 식별자를 반환합니다. 스레드는 인자 목록 *args*\\(튜플이어야 합니다)로 함수 *function*\\을 "
"실행합니다. 선택적 *kwargs* 인자는 키워드 인자 딕셔너리를 지정합니다."

#: ../../library/_thread.rst:50
msgid "When the function returns, the thread silently exits."
msgstr "함수가 반환되면, 스레드는 조용히 종료합니다."

#: ../../library/_thread.rst:52
msgid ""
"When the function terminates with an unhandled exception, "
":func:`sys.unraisablehook` is called to handle the exception. The "
"*object* attribute of the hook argument is *function*. By default, a "
"stack trace is printed and then the thread exits (but other threads "
"continue to run)."
msgstr ""
"함수가 처리되지 않은 예외로 종료되면, 예외를 처리하기 위해 :func:`sys.unraisablehook`\\이 호출됩니다. 훅 "
"인자의 *object* 어트리뷰트는 *function*\\입니다. 기본적으로, 스택 트레이스가 인쇄된 다음 스레드가 종료합니다 "
"(하지만 다른 스레드는 계속 실행됩니다)."

#: ../../library/_thread.rst:57
msgid ""
"When the function raises a :exc:`SystemExit` exception, it is silently "
"ignored."
msgstr "함수가 :exc:`SystemExit` 예외를 발생시키면, 조용히 무시됩니다."

#: ../../library/_thread.rst:60
msgid ""
"Raises an :ref:`auditing event <auditing>` ``_thread.start_new_thread`` "
"with arguments ``function``, ``args``, ``kwargs``."
msgstr ""

#: ../../library/_thread.rst:62
msgid ":func:`sys.unraisablehook` is now used to handle unhandled exceptions."
msgstr ":func:`sys.unraisablehook`\\은 이제 처리되지 않은 예외를 처리하는 데 사용됩니다."

#: ../../library/_thread.rst:68
msgid ""
"Simulate the effect of a signal arriving in the main thread. A thread can"
" use this function to interrupt the main thread, though there is no "
"guarantee that the interruption will happen immediately."
msgstr ""
"메인 스레드에 도달한 시그널의 효과를 시뮬레이트합니다. 스레드는 이 함수를 사용하여 메인 스레드를 인터럽트 할 수 있지만, 중단이 "
"즉시 일어난다는 보장은 없습니다."

#: ../../library/_thread.rst:72
msgid ""
"If given, *signum* is the number of the signal to simulate. If *signum* "
"is not given, :const:`signal.SIGINT` is simulated."
msgstr ""

#: ../../library/_thread.rst:75
msgid ""
"If the given signal isn't handled by Python (it was set to "
":const:`signal.SIG_DFL` or :const:`signal.SIG_IGN`), this function does "
"nothing."
msgstr ""
"주어진 시그널이 파이썬에 의해 처리되지 않으면 (:const:`signal.SIG_DFL`\\이나 "
":const:`signal.SIG_IGN`\\으로 설정됩니다), 이 함수는 아무것도 하지 않습니다."

#: ../../library/_thread.rst:79
msgid "The *signum* argument is added to customize the signal number."
msgstr ""

#: ../../library/_thread.rst:83
msgid ""
"This does not emit the corresponding signal but schedules a call to the "
"associated handler (if it exists). If you want to truly emit the signal, "
"use :func:`signal.raise_signal`."
msgstr ""

#: ../../library/_thread.rst:90
msgid ""
"Raise the :exc:`SystemExit` exception.  When not caught, this will cause "
"the thread to exit silently."
msgstr ":exc:`SystemExit` 예외를 발생시킵니다. 잡히지 않으면, 스레드가 조용히 종료되도록 합니다."

#: ../../library/_thread.rst:104
msgid ""
"Return a new lock object.  Methods of locks are described below.  The "
"lock is initially unlocked."
msgstr "새로운 록 객체를 반환합니다. 록의 메서드는 아래에 설명되어 있습니다. 록은 초기에 잠금 해제되어 있습니다."

#: ../../library/_thread.rst:110
msgid ""
"Return the 'thread identifier' of the current thread.  This is a nonzero "
"integer.  Its value has no direct meaning; it is intended as a magic "
"cookie to be used e.g. to index a dictionary of thread-specific data.  "
"Thread identifiers may be recycled when a thread exits and another thread"
" is created."
msgstr ""
"현재 스레드의 '스레드 식별자(thread identifier)'를 반환합니다. 이것은 0이 아닌 정수입니다. 그 값은 직접적인 "
"의미가 없습니다; 이것은 예를 들어 스레드 특정 데이터의 딕셔너리를 인덱싱하는 데 사용되는 매직 쿠키로 사용하려는 의도입니다. "
"스레드 식별자는 스레드가 종료되고 다른 스레드가 만들어질 때 재활용될 수 있습니다."

#: ../../library/_thread.rst:118
msgid ""
"Return the native integral Thread ID of the current thread assigned by "
"the kernel. This is a non-negative integer. Its value may be used to "
"uniquely identify this particular thread system-wide (until the thread "
"terminates, after which the value may be recycled by the OS)."
msgstr ""
"커널에 의해 할당된 현재 스레드의 네이티브 정수 스레드 ID를 반환합니다. 이것은 음수가 아닌 정수입니다. 이 값은 시스템 전반에 "
"걸쳐 이 특정 스레드를 고유하게 식별하는 데 사용될 수 있습니다 (스레드가 종료될 때까지, 그 후에는 값이 OS에 의해 재활용될 수"
" 있습니다)."

#: ../../library/_thread.rst:123 ../../library/_thread.rst:148
msgid "Availability"
msgstr "가용성"

#: ../../library/_thread.rst:127
msgid "Added support for GNU/kFreeBSD."
msgstr ""

#: ../../library/_thread.rst:133
msgid ""
"Return the thread stack size used when creating new threads.  The "
"optional *size* argument specifies the stack size to be used for "
"subsequently created threads, and must be 0 (use platform or configured "
"default) or a positive integer value of at least 32,768 (32 KiB). If "
"*size* is not specified, 0 is used.  If changing the thread stack size is"
" unsupported, a :exc:`RuntimeError` is raised.  If the specified stack "
"size is invalid, a :exc:`ValueError` is raised and the stack size is "
"unmodified.  32 KiB is currently the minimum supported stack size value "
"to guarantee sufficient stack space for the interpreter itself.  Note "
"that some platforms may have particular restrictions on values for the "
"stack size, such as requiring a minimum stack size > 32 KiB or requiring "
"allocation in multiples of the system memory page size - platform "
"documentation should be referred to for more information (4 KiB pages are"
" common; using multiples of 4096 for the stack size is the suggested "
"approach in the absence of more specific information)."
msgstr ""
"새로운 스레드를 만들 때 사용된 스레드의 스택 크기를 반환합니다. 선택적 *size* 인자는 이후에 만들어지는 스레드에 사용할 스택"
" 크기를 지정하며, 0(플랫폼 또는 구성된 기본값을 사용합니다)이나 최소 32,768(32 KiB)의 양의 정숫값이어야 합니다. "
"*size*\\를 지정하지 않으면 0이 사용됩니다. 스레드 스택 크기 변경이 지원되지 않으면, "
":exc:`RuntimeError`\\가 발생합니다. 지정된 스택 크기가 유효하지 않으면, :exc:`ValueError`\\가 "
"발생하고, 스택 크기는 변경되지 않습니다. 32 KiB는 현재 인터프리터 자체에 충분한 스택 공간을 보장하기 위해 지원되는 최소 "
"스택 크기 값입니다. 일부 플랫폼에서는 스택 크기 값에 특별한 제한이 있을 수 있습니다, 가령 최소 스택 크기 > 32KB를 "
"요구하거나 시스템 메모리 페이지 크기의 배수로 할당하는 것을 요구할 수 있습니다 - 자세한 내용은 플랫폼 설명서를 참조하십시오 (4"
" KiB 페이지가 일반적입니다; 더 구체적인 정보가 없으면 스택 크기로 4096의 배수를 사용하는 것이 제안된 방법입니다)."

#: ../../library/_thread.rst:150
msgid "Unix platforms with POSIX threads support."
msgstr ""

#: ../../library/_thread.rst:155
msgid ""
"The maximum value allowed for the *timeout* parameter of "
":meth:`Lock.acquire <threading.Lock.acquire>`. Specifying a timeout "
"greater than this value will raise an :exc:`OverflowError`."
msgstr ""
":meth:`Lock.acquire <threading.Lock.acquire>`\\의 *timeout* 매개 변수에 허용되는 "
"최댓값. 이 값보다 큰 timeout을 지정하면 :exc:`OverflowError`\\가 발생합니다."

#: ../../library/_thread.rst:162
msgid "Lock objects have the following methods:"
msgstr "록 객체에는 다음과 같은 메서드가 있습니다:"

#: ../../library/_thread.rst:167
msgid ""
"Without any optional argument, this method acquires the lock "
"unconditionally, if necessary waiting until it is released by another "
"thread (only one thread at a time can acquire a lock --- that's their "
"reason for existence)."
msgstr ""
"선택적 인자가 아무것도 없으면, 이 메서드는 조건 없이 록을 획득합니다, 필요하면 다른 스레드가 록을 해제할 때까지 대기합니다 (한"
" 번에 하나의 스레드만 록을 획득할 수 있습니다 --- 이것이 록의 존재 이유입니다)."

#: ../../library/_thread.rst:171
msgid ""
"If the *blocking* argument is present, the action depends on its value: "
"if it is false, the lock is only acquired if it can be acquired "
"immediately without waiting, while if it is true, the lock is acquired "
"unconditionally as above."
msgstr ""
"*blocking* 인자가 있으면, 행동은 그 값에 따라 다릅니다: 거짓이면 대기하지 않고 즉시 획득할 수 있을 때만 록이 "
"획득되고, 참이면 위와 같이 록이 조건 없이 획득됩니다."

#: ../../library/_thread.rst:176
msgid ""
"If the floating-point *timeout* argument is present and positive, it "
"specifies the maximum wait time in seconds before returning.  A negative "
"*timeout* argument specifies an unbounded wait.  You cannot specify a "
"*timeout* if *blocking* is false."
msgstr ""
"부동 소수점 *timeout* 인자가 있고 양수이면, 반환하기 전에 대기할 최대 시간을 초로 지정합니다. 음의 *timeout* "
"인자는 제한 없는 대기를 지정합니다. *blocking*\\이 거짓이면 *timeout*\\을 지정할 수 없습니다."

#: ../../library/_thread.rst:181
msgid ""
"The return value is ``True`` if the lock is acquired successfully, "
"``False`` if not."
msgstr "록이 성공적으로 획득되면 반환 값은 ``True``\\이고, 그렇지 않으면 ``False``\\입니다."

#: ../../library/_thread.rst:184
msgid "The *timeout* parameter is new."
msgstr "*timeout* 매개 변수가 추가되었습니다."

#: ../../library/_thread.rst:187
msgid "Lock acquires can now be interrupted by signals on POSIX."
msgstr "록 획득은 이제 POSIX의 시그널에 의해 중단될 수 있습니다."

#: ../../library/_thread.rst:193
msgid ""
"Releases the lock.  The lock must have been acquired earlier, but not "
"necessarily by the same thread."
msgstr "록을 해제합니다. 록은 반드시 이전에 획득된 것이어야 하지만, 반드시 같은 스레드에 의해 획득된 것일 필요는 없습니다."

#: ../../library/_thread.rst:199
msgid ""
"Return the status of the lock: ``True`` if it has been acquired by some "
"thread, ``False`` if not."
msgstr "록의 상태를 반환합니다: 어떤 스레드에 의해 획득되었으면 ``True``, 그렇지 않으면 ``False``\\를 반환합니다."

#: ../../library/_thread.rst:202
msgid ""
"In addition to these methods, lock objects can also be used via the "
":keyword:`with` statement, e.g.::"
msgstr "이러한 메서드 외에도, :keyword:`with` 문을 통해 록 객체를 사용할 수도 있습니다, 예를 들어::"

#: ../../library/_thread.rst:205
msgid ""
"import _thread\n"
"\n"
"a_lock = _thread.allocate_lock()\n"
"\n"
"with a_lock:\n"
"    print(\"a_lock is locked while this executes\")"
msgstr ""
"import _thread\n"
"\n"
"a_lock = _thread.allocate_lock()\n"
"\n"
"with a_lock:\n"
"    print(\"a_lock is locked while this executes\")"

#: ../../library/_thread.rst:212
msgid "**Caveats:**"
msgstr "**주의 사항:**"

#: ../../library/_thread.rst:216
msgid ""
"Interrupts always go to the main thread (the :exc:`KeyboardInterrupt` "
"exception will be received by that thread.)"
msgstr ""

#: ../../library/_thread.rst:219
msgid ""
"Calling :func:`sys.exit` or raising the :exc:`SystemExit` exception is "
"equivalent to calling :func:`_thread.exit`."
msgstr ""
":func:`sys.exit`\\를 호출하거나 :exc:`SystemExit` 예외를 발생시키는 것은 "
":func:`_thread.exit`\\를 호출하는 것과 동등합니다."

#: ../../library/_thread.rst:222
msgid ""
"It is platform-dependent whether the :meth:`~threading.Lock.acquire` "
"method on a lock can be interrupted (so that the :exc:`KeyboardInterrupt`"
" exception will happen immediately, rather than only after the lock has "
"been acquired or the operation has timed out). It can be interrupted on "
"POSIX, but not on Windows."
msgstr ""

#: ../../library/_thread.rst:228
msgid ""
"When the main thread exits, it is system defined whether the other "
"threads survive.  On most systems, they are killed without executing "
":keyword:`try` ... :keyword:`finally` clauses or executing object "
"destructors."
msgstr ""
"메인 스레드가 종료할 때, 다른 스레드가 살아남는지는 시스템이 정의합니다. 대부분 시스템에서, :keyword:`try` ... "
":keyword:`finally` 절을 실행하거나 객체 파괴자(destructor)를 실행하지 않고 강제 종료됩니다."

#: ../../library/_thread.rst:7
msgid "light-weight processes"
msgstr "경량 프로세스"

#: ../../library/_thread.rst:7
msgid "processes, light-weight"
msgstr "프로세스, 경량"

#: ../../library/_thread.rst:7
msgid "binary semaphores"
msgstr "이진 세마포어"

#: ../../library/_thread.rst:7
msgid "semaphores, binary"
msgstr "세마포어, 이진"

#: ../../library/_thread.rst:22
msgid "pthreads"
msgstr "pthreads"

#: ../../library/_thread.rst:22
msgid "threads"
msgstr "스레드"

#: ../../library/_thread.rst:22
msgid "POSIX"
msgstr "POSIX"

#: ../../library/_thread.rst:214
msgid "module"
msgstr "모듈"

#: ../../library/_thread.rst:214
msgid "signal"
msgstr "시그널"

#~ msgid ""
#~ ":ref:`Availability <availability>`: Windows, "
#~ "FreeBSD, Linux, macOS, OpenBSD, NetBSD, "
#~ "AIX."
#~ msgstr ""
#~ ":ref:`가용성 <availability>`: 윈도우, FreeBSD, 리눅스,"
#~ " macOS, OpenBSD, NetBSD, AIX."

#~ msgid ""
#~ ":ref:`Availability <availability>`: Windows, systems"
#~ " with POSIX threads."
#~ msgstr ":ref:`가용성 <availability>`: 윈도우, POSIX 스레드가 있는 시스템."

#~ msgid ""
#~ "Threads interact strangely with interrupts:"
#~ " the :exc:`KeyboardInterrupt` exception will "
#~ "be received by an arbitrary thread.  "
#~ "(When the :mod:`signal` module is "
#~ "available, interrupts always go to the"
#~ " main thread.)"
#~ msgstr ""
#~ "스레드는 이상한 방식으로 인터럽트와 상호 작용합니다: "
#~ ":exc:`KeyboardInterrupt` 예외는 임의의 스레드가 수신합니다."
#~ " (:mod:`signal` 모듈을 사용할 수 있으면, 인터럽트는"
#~ " 항상 메인 스레드로 갑니다.)"

#~ msgid ""
#~ "It is not possible to interrupt "
#~ "the :meth:`acquire` method on a lock "
#~ "--- the :exc:`KeyboardInterrupt` exception "
#~ "will happen after the lock has "
#~ "been acquired."
#~ msgstr ""
#~ "록에 대한 :meth:`acquire` 메서드를 인터럽트 할 "
#~ "수 없습니다 --- 록이 획득된 후에 "
#~ ":exc:`KeyboardInterrupt` 예외가 발생합니다."

#~ msgid ""
#~ "When the main thread exits, it "
#~ "does not do any of its usual "
#~ "cleanup (except that :keyword:`try` ... "
#~ ":keyword:`finally` clauses are honored), and"
#~ " the standard I/O files are not "
#~ "flushed."
#~ msgstr ""
#~ "메인 스레드가 종료할 때, (:keyword:`try` ... "
#~ ":keyword:`finally` 절이 적용되는 것을 제외하고는) "
#~ "일반적인 정리 작업을 수행하지 않으며, 표준 I/O "
#~ "파일은 플러시 되지 않습니다."

