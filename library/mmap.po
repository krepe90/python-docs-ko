# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2017, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-04-17 23:44+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: Dong-gweon Oh <flowdas@gmail.com>\n"
"Language-Team: Korean (https://python.flowdas.com)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.17.0\n"

#: ../../library/mmap.rst:2
#, fuzzy
msgid ":mod:`!mmap` --- Memory-mapped file support"
msgstr ":mod:`mmap` --- 메모리 맵 파일 지원"

#: ../../includes/wasm-notavail.rst:3
msgid "Availability"
msgstr "가용성"

#: ../../includes/wasm-notavail.rst:5
msgid ""
"This module does not work or is not available on WebAssembly. See :ref"
":`wasm-availability` for more information."
msgstr ""
"이 모듈은 웹어셈블리에서 작동하지 않거나 제공되지 않습니다. 자세한 내용은 :ref:`wasm-availability`\\을 "
"참조하세요."

#: ../../library/mmap.rst:11
msgid ""
"Memory-mapped file objects behave like both :class:`bytearray` and like "
":term:`file objects <file object>`.  You can use mmap objects in most "
"places where :class:`bytearray` are expected; for example, you can use "
"the :mod:`re` module to search through a memory-mapped file.  You can "
"also change a single byte by doing ``obj[index] = 97``, or change a "
"subsequence by assigning to a slice: ``obj[i1:i2] = b'...'``.  You can "
"also read and write data starting at the current file position, and "
":meth:`seek` through the file to different positions."
msgstr ""
"메모리 맵 파일 객체는 동시에 :class:`bytearray` 와 :term:`파일 객체 <file object>`\\처럼 "
"작동합니다. :class:`bytearray`\\를 기대하는 대부분 장소에서 mmap 객체를 사용할 수 있습니다. 예를 들어, "
":mod:`re` 모듈을 사용하여 메모리 맵 파일을 검색할 수 있습니다. ``obj[index] = 97``\\를 사용해서 한 "
"바이트를 변경하거나, 슬라이스에 대입하여 서브 시퀀스를 변경할 수도 있습니다: ``obj[i1:i2] = b'...'``. 또한 "
"현재 파일 위치에서 시작하여 데이터를 읽고 쓸 수 있고, 다른 위치로 파일을 :meth:`seek` 할 수 있습니다."

#: ../../library/mmap.rst:19
#, fuzzy
msgid ""
"A memory-mapped file is created by the :class:`~mmap.mmap` constructor, "
"which is different on Unix and on Windows.  In either case you must "
"provide a file descriptor for a file opened for update. If you wish to "
"map an existing Python file object, use its :meth:`~io.IOBase.fileno` "
"method to obtain the correct value for the *fileno* parameter.  "
"Otherwise, you can open the file using the :func:`os.open` function, "
"which returns a file descriptor directly (the file still needs to be "
"closed when done)."
msgstr ""
"메모리 맵 파일은 :class:`~mmap.mmap` 생성자로 만드는데, 유닉스와 윈도우에서 다릅니다. 두 경우 모두 갱신을 위해 "
"열린 파일에 대한 파일 기술자를 제공해야 합니다. 기존 파이썬 파일 객체를 매핑하려면, :meth:`fileno` 메서드를 사용하여"
" *fileno* 매개 변수에 대한 올바른 값을 가져오십시오. 그렇지 않으면, 파일 기술자를 직접 반환하는 "
":func:`os.open` 함수를 사용하여 파일을 열 수 있습니다 (완료되면 파일을 닫아야 합니다)."

#: ../../library/mmap.rst:28
msgid ""
"If you want to create a memory-mapping for a writable, buffered file, you"
" should :func:`~io.IOBase.flush` the file first.  This is necessary to "
"ensure that local modifications to the buffers are actually available to "
"the mapping."
msgstr ""
"쓰기 가능하고 버퍼링 되는 파일에 대한 메모리 맵을 만들려면, 먼저 파일을 :func:`~io.IOBase.flush`\\해야 "
"합니다. 버퍼에 대한 지역 변경 사항이 실제로 매핑에 반영되게 하는 데 필요합니다."

#: ../../library/mmap.rst:33
msgid ""
"For both the Unix and Windows versions of the constructor, *access* may "
"be specified as an optional keyword parameter. *access* accepts one of "
"four values: :const:`ACCESS_READ`, :const:`ACCESS_WRITE`, or "
":const:`ACCESS_COPY` to specify read-only, write-through or copy-on-write"
" memory respectively, or :const:`ACCESS_DEFAULT` to defer to *prot*.  "
"*access* can be used on both Unix and Windows.  If *access* is not "
"specified, Windows mmap returns a write-through mapping.  The initial "
"memory values for all three access types are taken from the specified "
"file.  Assignment to an :const:`ACCESS_READ` memory map raises a "
":exc:`TypeError` exception.  Assignment to an :const:`ACCESS_WRITE` "
"memory map affects both memory and the underlying file. Assignment to an "
":const:`ACCESS_COPY` memory map affects memory but does not update the "
"underlying file."
msgstr ""
"유닉스와 윈도우 버전의 생성자 모두에서, *access*\\는 선택적 키워드 매개 변수로 지정될 수 있습니다. *access*\\는"
" :const:`ACCESS_READ`, :const:`ACCESS_WRITE` 또는 :const:`ACCESS_COPY` 중 "
"하나의 값을 받아, 읽기 전용, 동시 기록(write-through) 또는 쓸 때 복사(copy-on-write) 메모리를 각각 "
"지정하거나, :const:`ACCESS_DEFAULT`\\를 사용하여 *prot*\\로 위임합니다. *access*\\는 유닉스와 "
"윈도우에서 모두 사용할 수 있습니다. *access*\\를 지정하지 않으면, 윈도우 mmap은 동시 기록(write-through)"
" 매핑을 반환합니다. 세 가지 액세스 유형 모두에서 초기 메모리값은 지정된 파일에서 가져옵니다. "
":const:`ACCESS_READ` 메모리 맵에 대입하면 :exc:`TypeError` 예외가 발생합니다. "
":const:`ACCESS_WRITE` 메모리 맵에 대입하면 메모리와 하부 파일에 모두 영향을 줍니다. "
":const:`ACCESS_COPY` 메모리 맵에 대입하면 메모리에는 영향을 미치지만, 하부 파일은 변경되지 않습니다."

#: ../../library/mmap.rst:46
msgid "Added :const:`ACCESS_DEFAULT` constant."
msgstr ":const:`ACCESS_DEFAULT` 상수가 추가되었습니다."

#: ../../library/mmap.rst:49
msgid ""
"To map anonymous memory, -1 should be passed as the fileno along with the"
" length."
msgstr "익명 메모리를 매핑하려면, length와 함께 -1을 fileno로 전달해야 합니다."

#: ../../library/mmap.rst:53
msgid ""
"**(Windows version)** Maps *length* bytes from the file specified by the "
"file handle *fileno*, and creates a mmap object.  If *length* is larger "
"than the current size of the file, the file is extended to contain "
"*length* bytes.  If *length* is ``0``, the maximum length of the map is "
"the current size of the file, except that if the file is empty Windows "
"raises an exception (you cannot create an empty mapping on Windows)."
msgstr ""
"**(윈도우 버전)** 파일 핸들 *fileno*\\로 지정된 파일의 *length* 바이트를 매핑하고, mmap 객체를 만듭니다."
" *length*\\가 파일의 현재 크기보다 크면, 파일은 *length* 바이트를 포함하도록 확장됩니다. *length*\\가 "
"``0`` 이면, 맵의 최대 길이는 파일의 현재 길이입니다. 단, 파일이 비어 있으면 윈도우에서 예외가 발생합니다 (윈도우에는 빈 "
"매핑을 만들 수 없습니다)."

#: ../../library/mmap.rst:60
#, fuzzy
msgid ""
"*tagname*, if specified and not ``None``, is a string giving a tag name "
"for the mapping.  Windows allows you to have many different mappings "
"against the same file.  If you specify the name of an existing tag, that "
"tag is opened, otherwise a new tag of this name is created.  If this "
"parameter is omitted or ``None``, the mapping is created without a name."
"  Avoiding the use of the *tagname* parameter will assist in keeping your"
" code portable between Unix and Windows."
msgstr ""
"*tagname*\\가 지정되고 ``None``\\이 아니면, 매핑의 태그 이름을 제공하는 문자열입니다. 윈도우에서는 같은 파일에 "
"대해 여러 가지 다른 매핑을 사용할 수 있게 합니다. 기존 태그의 이름을 지정하면, 해당 태그가 열리고, 그렇지 않으면 이 이름의 "
"새 태그가 만들어집니다. 이 매개 변수가 생략되거나 ``None`` 이면, 매핑은 이름 없이 만들어집니다. 태그 매개 변수의 사용을"
" 피하면 코드를 유닉스와 윈도우 사이에서 이식성 있게 유지할 수 있습니다."

#: ../../library/mmap.rst:68
msgid ""
"*offset* may be specified as a non-negative integer offset. mmap "
"references will be relative to the offset from the beginning of the file."
" *offset* defaults to 0.  *offset* must be a multiple of the "
":const:`ALLOCATIONGRANULARITY`."
msgstr ""
"*offset*\\은 음이 아닌 정수 오프셋으로 지정할 수 있습니다. mmap 참조는 파일 시작 부분으로부터의 오프셋에 "
"상대적입니다. *offset*\\의 기본값은 0입니다. *offset*\\은 "
":const:`ALLOCATIONGRANULARITY`\\의 배수여야 합니다."

#: ../../library/mmap.rst:72 ../../library/mmap.rst:174
msgid ""
"Raises an :ref:`auditing event <auditing>` ``mmap.__new__`` with "
"arguments ``fileno``, ``length``, ``access``, ``offset``."
msgstr ""
"인자 ``fileno``, ``length``, ``access``, ``offset``\\로 :ref:`감사 "
"이벤트(auditing event) <auditing>` ``mmap.__new__``\\를 발생시킵니다."

#: ../../library/mmap.rst:78
msgid ""
"**(Unix version)** Maps *length* bytes from the file specified by the "
"file descriptor *fileno*, and returns a mmap object.  If *length* is "
"``0``, the maximum length of the map will be the current size of the file"
" when :class:`~mmap.mmap` is called."
msgstr ""
"**(유닉스 버전)** 파일 기술자 *fileno*\\로 지정된 파일의 *length* 바이트를 매핑하고, mmap 객체를 "
"반환합니다. *length*\\가 ``0`` 이면, 맵의 최대 길이는 :class:`~mmap.mmap`\\가 호출될 때 파일의 "
"현재 길이입니다."

#: ../../library/mmap.rst:83
#, fuzzy
msgid ""
"*flags* specifies the nature of the mapping. :const:`MAP_PRIVATE` creates"
" a private copy-on-write mapping, so changes to the contents of the mmap "
"object will be private to this process, and :const:`MAP_SHARED` creates a"
" mapping that's shared with all other processes mapping the same areas of"
" the file.  The default value is :const:`MAP_SHARED`. Some systems have "
"additional possible flags with the full list specified in :ref:`MAP_* "
"constants <map-constants>`."
msgstr ""
"*flags*\\는 매핑의 특성을 지정합니다. :const:`MAP_PRIVATE`\\는 비공개 쓸 때 복사 (copy-on-"
"write) 매핑을 생성하므로, mmap 객체의 내용에 대한 변경 사항은 이 프로세스에만 적용되고, "
":const:`MAP_SHARED`\\는 파일의 같은 영역을 매핑하는 다른 모든 프로세스와 공유되는 매핑을 만듭니다. 기본값은 "
":const:`MAP_SHARED`\\입니다."

#: ../../library/mmap.rst:91
msgid ""
"*prot*, if specified, gives the desired memory protection; the two most "
"useful values are :const:`PROT_READ` and :const:`PROT_WRITE`, to specify "
"that the pages may be read or written.  *prot* defaults to "
":const:`PROT_READ \\| PROT_WRITE`."
msgstr ""
"*prot*\\가 지정되면 원하는 메모리 보호를 제공합니다; 가장 유용한 두 값은 페이지를 읽거나 쓰도록 지정할 수 있는 "
":const:`PROT_READ`\\와 :const:`PROT_WRITE`\\입니다. *prot*\\의 기본값은 "
":const:`PROT_READ \\| PROT_WRITE`\\입니다."

#: ../../library/mmap.rst:96
msgid ""
"*access* may be specified in lieu of *flags* and *prot* as an optional "
"keyword parameter.  It is an error to specify both *flags*, *prot* and "
"*access*.  See the description of *access* above for information on how "
"to use this parameter."
msgstr ""
"*access*\\는 선택적 키워드 매개 변수로 *flags* 와 *prot* 대신 지정 될 수 있습니다. *flags*, "
"*prot* 와 *access*\\를 모두 지정하는 것은 에러입니다. 이 매개 변수를 사용하는 방법에 대한 정보는 위의 "
"*access* 설명을 참조하십시오."

#: ../../library/mmap.rst:101
msgid ""
"*offset* may be specified as a non-negative integer offset. mmap "
"references will be relative to the offset from the beginning of the file."
" *offset* defaults to 0. *offset* must be a multiple of "
":const:`ALLOCATIONGRANULARITY` which is equal to :const:`PAGESIZE` on "
"Unix systems."
msgstr ""
"*offset*\\은 음이 아닌 정수 오프셋으로 지정할 수 있습니다. mmap 참조는 파일 시작 부분으로부터의 오프셋에 "
"상대적입니다. *offset*\\의 기본값은 0입니다. *offset*\\은 유닉스 시스템에서 :const:`PAGESIZE`\\와"
" 같은 :const:`ALLOCATIONGRANULARITY`\\의 배수여야 합니다."

#: ../../library/mmap.rst:106
msgid ""
"If *trackfd* is ``False``, the file descriptor specified by *fileno* will"
" not be duplicated, and the resulting :class:`!mmap` object will not be "
"associated with the map's underlying file. This means that the "
":meth:`~mmap.mmap.size` and :meth:`~mmap.mmap.resize` methods will fail. "
"This mode is useful to limit the number of open file descriptors."
msgstr ""

#: ../../library/mmap.rst:113
#, fuzzy
msgid ""
"To ensure validity of the created memory mapping the file specified by "
"the descriptor *fileno* is internally automatically synchronized with the"
" physical backing store on macOS."
msgstr ""
"생성된 메모리 매핑의 유효성을 보장하기 위해, 기술자 *fileno*\\로 지정된 파일은 맥 OS X 및 OpenVMS의 물리적 "
"저장 장치와 내부적으로 자동 동기화됩니다."

#: ../../library/mmap.rst:117
msgid "The *trackfd* parameter was added."
msgstr ""

#: ../../library/mmap.rst:120
msgid "This example shows a simple way of using :class:`~mmap.mmap`::"
msgstr "이 예제는 :class:`~mmap.mmap`\\을 사용하는 간단한 방법을 보여줍니다::"

#: ../../library/mmap.rst:122
msgid ""
"import mmap\n"
"\n"
"# write a simple example file\n"
"with open(\"hello.txt\", \"wb\") as f:\n"
"    f.write(b\"Hello Python!\\n\")\n"
"\n"
"with open(\"hello.txt\", \"r+b\") as f:\n"
"    # memory-map the file, size 0 means whole file\n"
"    mm = mmap.mmap(f.fileno(), 0)\n"
"    # read content via standard file methods\n"
"    print(mm.readline())  # prints b\"Hello Python!\\n\"\n"
"    # read content via slice notation\n"
"    print(mm[:5])  # prints b\"Hello\"\n"
"    # update content using slice notation;\n"
"    # note that new content must have same size\n"
"    mm[6:] = b\" world!\\n\"\n"
"    # ... and read again using standard file methods\n"
"    mm.seek(0)\n"
"    print(mm.readline())  # prints b\"Hello  world!\\n\"\n"
"    # close the map\n"
"    mm.close()"
msgstr ""

#: ../../library/mmap.rst:145
msgid ""
":class:`~mmap.mmap` can also be used as a context manager in a "
":keyword:`with` statement::"
msgstr ":class:`~mmap.mmap`\\은 :keyword:`with` 문에서 컨텍스트 관리자로 사용할 수도 있습니다::"

#: ../../library/mmap.rst:148
msgid ""
"import mmap\n"
"\n"
"with mmap.mmap(-1, 13) as mm:\n"
"    mm.write(b\"Hello world!\")"
msgstr ""

#: ../../library/mmap.rst:153
msgid "Context manager support."
msgstr "컨텍스트 관리자 지원."

#: ../../library/mmap.rst:157
msgid ""
"The next example demonstrates how to create an anonymous map and exchange"
" data between the parent and child processes::"
msgstr "다음 예제는 익명 맵을 만들고 부모와 자식 프로세스 간에 데이터를 교환하는 방법을 보여줍니다::"

#: ../../library/mmap.rst:160
msgid ""
"import mmap\n"
"import os\n"
"\n"
"mm = mmap.mmap(-1, 13)\n"
"mm.write(b\"Hello world!\")\n"
"\n"
"pid = os.fork()\n"
"\n"
"if pid == 0:  # In a child process\n"
"    mm.seek(0)\n"
"    print(mm.readline())\n"
"\n"
"    mm.close()"
msgstr ""

#: ../../library/mmap.rst:176
msgid "Memory-mapped file objects support the following methods:"
msgstr "메모리 맵 파일 객체는 다음 메서드를 지원합니다:"

#: ../../library/mmap.rst:180
msgid ""
"Closes the mmap. Subsequent calls to other methods of the object will "
"result in a ValueError exception being raised. This will not close the "
"open file."
msgstr "mmap를 닫습니다. 이후에 객체의 다른 메서드를 호출하면 ValueError 예외가 발생합니다. 열려있는 파일을 닫지 않습니다."

#: ../../library/mmap.rst:187
msgid "``True`` if the file is closed."
msgstr "파일이 닫혔으면 ``True``\\입니다."

#: ../../library/mmap.rst:194
msgid ""
"Returns the lowest index in the object where the subsequence *sub* is "
"found, such that *sub* is contained in the range [*start*, *end*]. "
"Optional arguments *start* and *end* are interpreted as in slice "
"notation. Returns ``-1`` on failure."
msgstr ""
"서브 시퀀스 *sub*\\가 발견되는 객체에서 가장 낮은 인덱스를 반환합니다. *sub*\\는 [*start*, *end*] 범위에"
" 포함되어야 합니다. 선택적 인자 *start* 와 *end*\\는 슬라이스 표기법처럼 해석됩니다. 실패하면 ``-1``\\를 "
"반환합니다."

#: ../../library/mmap.rst:199 ../../library/mmap.rst:291
#: ../../library/mmap.rst:331
msgid "Writable :term:`bytes-like object` is now accepted."
msgstr "이제 쓰기 가능한 :term:`바이트열류 객체 <bytes-like object>`\\를 받아들입니다."

#: ../../library/mmap.rst:205
msgid ""
"Flushes changes made to the in-memory copy of a file back to disk. "
"Without use of this call there is no guarantee that changes are written "
"back before the object is destroyed.  If *offset* and *size* are "
"specified, only changes to the given range of bytes will be flushed to "
"disk; otherwise, the whole extent of the mapping is flushed.  *offset* "
"must be a multiple of the :const:`PAGESIZE` or "
":const:`ALLOCATIONGRANULARITY`."
msgstr ""
"파일의 메모리 내 복사본에 대한 변경 사항을 디스크로 플러시 합니다. 이 호출을 사용하지 않으면, 객체가 파괴되기 전에 변경 내용이"
" 기록된다고 보장할 수 없습니다. *offset*\\과 *size*\\가 지정되면, 지정된 바이트 범위의 변경 사항만 디스크로 "
"플러시 됩니다; 그렇지 않으면, 매핑의 전체 범위가 플러시 됩니다. *offset*\\은 :const:`PAGESIZE` 나 "
":const:`ALLOCATIONGRANULARITY`\\의 배수여야 합니다."

#: ../../library/mmap.rst:212
msgid ""
"``None`` is returned to indicate success.  An exception is raised when "
"the call failed."
msgstr "성공을 나타내기 위해 ``None``\\이 반환됩니다. 호출이 실패하면 예외가 발생합니다."

#: ../../library/mmap.rst:215
msgid ""
"Previously, a nonzero value was returned on success; zero was returned on"
" error under Windows.  A zero value was returned on success; an exception"
" was raised on error under Unix."
msgstr ""
"이전에는, 성공 시 0이 아닌 값이 반환되었습니다; 윈도우에서 에러 시 0이 반환되었습니다. 성공 시 0 값이 반환되었습니다; "
"유닉스에서 에러 시 예외가 발생했습니다."

#: ../../library/mmap.rst:223
msgid ""
"Send advice *option* to the kernel about the memory region beginning at "
"*start* and extending *length* bytes.  *option* must be one of the "
":ref:`MADV_* constants <madvise-constants>` available on the system.  If "
"*start* and *length* are omitted, the entire mapping is spanned.  On some"
" systems (including Linux), *start* must be a multiple of the "
":const:`PAGESIZE`."
msgstr ""
"*start*\\에서 시작하고 *length* 바이트만큼 확장하는 메모리 영역에 대해 커널에 조언 *option*\\을 보냅니다. "
"*option*\\은 시스템에서 사용할 수 있는 :ref:`MADV_* 상수 <madvise-constants>` 중 하나여야 "
"합니다. *start*\\와 *length*\\가 생략되면, 전체 매핑으로 확장됩니다. 일부 시스템(리눅스 포함)에서, "
"*start*\\는 :const:`PAGESIZE`\\의 배수여야 합니다."

#: ../../library/mmap.rst:230
msgid "Availability: Systems with the ``madvise()`` system call."
msgstr "가용성: ``madvise()`` 시스템 호출이 있는 시스템."

#: ../../library/mmap.rst:237
msgid ""
"Copy the *count* bytes starting at offset *src* to the destination index "
"*dest*.  If the mmap was created with :const:`ACCESS_READ`, then calls to"
" move will raise a :exc:`TypeError` exception."
msgstr ""
"오프셋 *src*\\에서 시작하는 *count* 바이트를 대상 인덱스 *dest*\\로 복사합니다. mmap이 "
":const:`ACCESS_READ`\\로 만들어졌으면, move를 호출하면 :exc:`TypeError` 예외가 발생합니다."

#: ../../library/mmap.rst:244
msgid ""
"Return a :class:`bytes` containing up to *n* bytes starting from the "
"current file position. If the argument is omitted, ``None`` or negative, "
"return all bytes from the current file position to the end of the "
"mapping. The file position is updated to point after the bytes that were "
"returned."
msgstr ""
"현재의 파일 위치로부터 최대 *n* 바이트를 포함하는 :class:`bytes`\\를 반환합니다. 인자가 생략되거나 ``None``"
" 이거나 음수면, 현재 파일 위치에서 매핑의 끝까지 모든 바이트를 반환합니다. 파일 위치는 반환된 바이트의 뒤를 가리키도록 "
"갱신됩니다."

#: ../../library/mmap.rst:250
msgid "Argument can be omitted or ``None``."
msgstr "인자는 생략되거나 ``None`` 일 수 있습니다."

#: ../../library/mmap.rst:255
msgid ""
"Returns a byte at the current file position as an integer, and advances "
"the file position by 1."
msgstr "현재 파일 위치의 한 바이트를 정수로 반환하고, 파일 위치를 1 증가시킵니다."

#: ../../library/mmap.rst:261
msgid ""
"Returns a single line, starting at the current file position and up to "
"the next newline. The file position is updated to point after the bytes "
"that were returned."
msgstr "현재 파일 위치에서 시작하여 다음 줄 바꿈까지 한 줄을 반환합니다. 반환된 바이트 뒤를 가리키도록 파일 위치가 갱신됩니다."

#: ../../library/mmap.rst:268
msgid "Resizes the map and the underlying file, if any."
msgstr ""

#: ../../library/mmap.rst:270
msgid ""
"Resizing a map created with *access* of :const:`ACCESS_READ` or "
":const:`ACCESS_COPY`, will raise a :exc:`TypeError` exception. Resizing a"
" map created with with *trackfd* set to ``False``, will raise a "
":exc:`ValueError` exception."
msgstr ""

#: ../../library/mmap.rst:275
msgid ""
"**On Windows**: Resizing the map will raise an :exc:`OSError` if there "
"are other maps against the same named file. Resizing an anonymous map (ie"
" against the pagefile) will silently create a new map with the original "
"data copied over up to the length of the new size."
msgstr ""

#: ../../library/mmap.rst:280
msgid ""
"Correctly fails if attempting to resize when another map is held Allows "
"resize against an anonymous map on Windows"
msgstr ""

#: ../../library/mmap.rst:286
msgid ""
"Returns the highest index in the object where the subsequence *sub* is "
"found, such that *sub* is contained in the range [*start*, *end*]. "
"Optional arguments *start* and *end* are interpreted as in slice "
"notation. Returns ``-1`` on failure."
msgstr ""
"서브 시퀀스 *sub*\\가 발견되는 객체에서 가장 높은 인덱스를 반환합니다. *sub*\\는 [*start*, *end*] 범위에"
" 포함되어야 합니다. 선택적 인자 *start* 와 *end*\\는 슬라이스 표기법처럼 해석됩니다. 실패하면 ``-1``\\를 "
"반환합니다."

#: ../../library/mmap.rst:297
msgid ""
"Set the file's current position.  *whence* argument is optional and "
"defaults to ``os.SEEK_SET`` or ``0`` (absolute file positioning); other "
"values are ``os.SEEK_CUR`` or ``1`` (seek relative to the current "
"position) and ``os.SEEK_END`` or ``2`` (seek relative to the file's end)."
msgstr ""
"파일의 현재 위치를 설정합니다. *whence* 인자는 선택적이며 기본값은 ``os.SEEK_SET`` 또는 ``0`` (절대 파일"
" 위치)입니다; 다른 값은 ``os.SEEK_CUR`` 또는 ``1`` (현재 위치를 기준으로 seek)과 "
"``os.SEEK_END`` 또는 ``2`` (파일의 끝을 기준으로 seek)입니다."

#: ../../library/mmap.rst:302
msgid "Return the new absolute position instead of ``None``."
msgstr ""

#: ../../library/mmap.rst:307
msgid ""
"Return whether the file supports seeking, and the return value is always "
"``True``."
msgstr ""

#: ../../library/mmap.rst:313
msgid ""
"Return the length of the file, which can be larger than the size of the "
"memory-mapped area."
msgstr "파일의 길이를 반환합니다. 메모리 매핑된 영역의 크기보다 클 수 있습니다."

#: ../../library/mmap.rst:319
msgid "Returns the current position of the file pointer."
msgstr "파일 포인터의 현재 위치를 반환합니다."

#: ../../library/mmap.rst:324
msgid ""
"Write the bytes in *bytes* into memory at the current position of the "
"file pointer and return the number of bytes written (never less than "
"``len(bytes)``, since if the write fails, a :exc:`ValueError` will be "
"raised).  The file position is updated to point after the bytes that were"
" written.  If the mmap was created with :const:`ACCESS_READ`, then "
"writing to it will raise a :exc:`TypeError` exception."
msgstr ""
"*bytes*\\의 바이트를 파일 포인터의 현재 위치에 있는 메모리에 기록하고 기록된 바이트 수를 반환합니다 (쓰기가 실패하면 "
":exc:`ValueError`\\가 발생하기 때문에 결코 ``len(bytes)``\\보다 작지 않습니다). 파일 위치는 기록된 "
"바이트 뒤를 가리 키도록 갱신됩니다. mmap이 :const:`ACCESS_READ`\\로 만들어졌으면, 기록할 때 "
":exc:`TypeError` 예외가 발생합니다."

#: ../../library/mmap.rst:334
msgid "The number of bytes written is now returned."
msgstr "이제 기록한 바이트 수가 반환됩니다."

#: ../../library/mmap.rst:340
msgid ""
"Write the integer *byte* into memory at the current position of the file "
"pointer; the file position is advanced by ``1``. If the mmap was created "
"with :const:`ACCESS_READ`, then writing to it will raise a "
":exc:`TypeError` exception."
msgstr ""
"정수 *byte*\\를 파일 포인터의 현재 위치에 있는 메모리에 기록합니다; 파일 위치가 ``1`` 증가합니다. mmap이 "
":const:`ACCESS_READ`\\로 만들어졌으면, 기록할 때 :exc:`TypeError` 예외가 발생합니다."

#: ../../library/mmap.rst:348
msgid "MADV_* Constants"
msgstr "MADV_* 상수"

#: ../../library/mmap.rst:375
msgid ""
"These options can be passed to :meth:`mmap.madvise`.  Not every option "
"will be present on every system."
msgstr "이 옵션은 :meth:`mmap.madvise`\\로 전달될 수 있습니다. 모든 시스템에서 모든 옵션이 제공되는 것은 아닙니다."

#: ../../library/mmap.rst:378
msgid "Availability: Systems with the madvise() system call."
msgstr "가용성: madvise() 시스템 호출이 있는 시스템."

#: ../../library/mmap.rst:385
#, fuzzy
msgid "MAP_* Constants"
msgstr "MADV_* 상수"

#: ../../library/mmap.rst:409
msgid ""
"These are the various flags that can be passed to :meth:`mmap.mmap`.  "
":data:`MAP_ALIGNED_SUPER` is only available at FreeBSD and "
":data:`MAP_CONCEAL` is only available at OpenBSD.  Note that some options"
" might not be present on some systems."
msgstr ""

#: ../../library/mmap.rst:413
#, fuzzy
msgid "Added :data:`MAP_POPULATE` constant."
msgstr ":const:`ACCESS_DEFAULT` 상수가 추가되었습니다."

#: ../../library/mmap.rst:416
#, fuzzy
msgid "Added :data:`MAP_STACK` constant."
msgstr ":const:`ACCESS_DEFAULT` 상수가 추가되었습니다."

#: ../../library/mmap.rst:419
msgid "Added :data:`MAP_ALIGNED_SUPER` and :data:`MAP_CONCEAL` constants."
msgstr ""

#: ../../library/mmap.rst:422
msgid ""
"Added :data:`MAP_32BIT`, :data:`MAP_HASSEMAPHORE`, :data:`MAP_JIT`, "
":data:`MAP_NOCACHE`, :data:`MAP_NOEXTEND`, :data:`MAP_NORESERVE`, "
":data:`MAP_RESILIENT_CODESIGN`, :data:`MAP_RESILIENT_MEDIA`, "
":data:`MAP_TPRO`, :data:`MAP_TRANSLATED_ALLOW_EXECUTE`, and "
":data:`MAP_UNIX03` constants."
msgstr ""

#~ msgid ""
#~ "Resizes the map and the underlying "
#~ "file, if any. If the mmap was "
#~ "created with :const:`ACCESS_READ` or "
#~ ":const:`ACCESS_COPY`, resizing the map will"
#~ " raise a :exc:`TypeError` exception."
#~ msgstr ""
#~ "맵과 하부 파일(있다면)의 크기를 조정합니다. mmap이 "
#~ ":const:`ACCESS_READ` 나 :const:`ACCESS_COPY`\\로 만들어졌을"
#~ " 때, 맵의 크기를 조정하면 :exc:`TypeError` 예외가"
#~ " 발생합니다."

