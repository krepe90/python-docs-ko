# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2017, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-04-17 23:44+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: Dong-gweon Oh <flowdas@gmail.com>\n"
"Language-Team: Korean (https://python.flowdas.com)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.17.0\n"

#: ../../library/http.cookies.rst:2
msgid ":mod:`!http.cookies` --- HTTP state management"
msgstr ":mod:`!http.cookies` --- HTTP 상태 관리"

#: ../../library/http.cookies.rst:10
msgid "**Source code:** :source:`Lib/http/cookies.py`"
msgstr "**소스 코드:** :source:`Lib/http/cookies.py`"

#: ../../library/http.cookies.rst:14
msgid ""
"The :mod:`http.cookies` module defines classes for abstracting the "
"concept of cookies, an HTTP state management mechanism. It supports both "
"simple string-only cookies, and provides an abstraction for having any "
"serializable data-type as cookie value."
msgstr ""
":mod:`http.cookies` 모듈은 HTTP 상태 관리 메커니즘인 쿠키의 개념을 추상화하는 클래스를 정의합니다. 그것은 "
"단순한 문자열 전용 쿠키를 지원하고, 동시에 직렬화 가능한 데이터형을 쿠키값으로 갖는 데 필요한 추상화를 제공합니다."

#: ../../library/http.cookies.rst:19
msgid ""
"The module formerly strictly applied the parsing rules described in the "
":rfc:`2109` and :rfc:`2068` specifications.  It has since been discovered"
" that MSIE 3.0x didn't follow the character rules outlined in those "
"specs; many current-day browsers and servers have also relaxed parsing "
"rules when it comes to cookie handling.  As a result, this module now "
"uses parsing rules that are a bit less strict than they once were."
msgstr ""
"이 모듈은 예전에는 :rfc:`2109`\\와 :rfc:`2068` 명세에서 설명된 구문 분석 규칙을 엄격하게 적용했습니다. 그 "
"이후로 MSIE 3.0x가 이 명세에 명시된 문자 규칙을 따르지 않았으며; 쿠키 처리와 관련하여 오늘날의 많은 브라우저와 서버 또한"
" 구문 분석 규칙을 완화했다는 사실이 발견되었습니다. 결과적으로, 이제 이 모듈은 이전보다 약간 덜 엄격한 구문 분석 규칙을 "
"사용합니다."

#: ../../library/http.cookies.rst:26
msgid ""
"The character set, :data:`string.ascii_letters`, :data:`string.digits` "
"and ``!#$%&'*+-.^_`|~:`` denote the set of valid characters allowed by "
"this module in a cookie name (as :attr:`~Morsel.key`)."
msgstr ""
"문자 집합, :data:`string.ascii_letters`, :data:`string.digits` 및 "
"``!#$%&'*+-.^_`|~:``\\는 이 모듈이 쿠키 이름(:attr:`~Morsel.key`)에 허용한 유효한 문자 집합을 "
"나타냅니다."

#: ../../library/http.cookies.rst:30
msgid "Allowed ':' as a valid cookie name character."
msgstr "':'를 유효한 쿠키 이름 문자로 허용합니다."

#: ../../library/http.cookies.rst:36
msgid ""
"On encountering an invalid cookie, :exc:`CookieError` is raised, so if "
"your cookie data comes from a browser you should always prepare for "
"invalid data and catch :exc:`CookieError` on parsing."
msgstr ""
"잘못된 쿠키가 발견되면, :exc:`CookieError`\\가 발생하므로, 쿠키 데이터가 브라우저에서 제공되면 항상 잘못된 "
"데이터일 가능성에 대비하고 구문 분석할 때 :exc:`CookieError`\\를 잡아야 합니다."

#: ../../library/http.cookies.rst:43
msgid ""
"Exception failing because of :rfc:`2109` invalidity: incorrect "
"attributes, incorrect :mailheader:`Set-Cookie` header, etc."
msgstr ":rfc:`2109` 위반으로 인해 실패하는 예외: 잘못된 어트리뷰트, 잘못된 :mailheader:`Set-Cookie` 헤더 등"

#: ../../library/http.cookies.rst:49
msgid ""
"This class is a dictionary-like object whose keys are strings and whose "
"values are :class:`Morsel` instances. Note that upon setting a key to a "
"value, the value is first converted to a :class:`Morsel` containing the "
"key and the value."
msgstr ""
"이 클래스는 키가 문자열이고 값이 :class:`Morsel` 인스턴스인 딕셔너리 형 객체입니다. 키에 값을 설정하면, 값이 먼저 "
"키와 값이 포함된 :class:`Morsel`\\로 변환됩니다."

#: ../../library/http.cookies.rst:53
msgid "If *input* is given, it is passed to the :meth:`load` method."
msgstr "*input*\\이 주어지면, :meth:`load` 메서드로 전달됩니다."

#: ../../library/http.cookies.rst:58
msgid ""
"This class derives from :class:`BaseCookie` and overrides "
":meth:`~BaseCookie.value_decode` and :meth:`~BaseCookie.value_encode`. "
":class:`!SimpleCookie` supports strings as cookie values. When setting "
"the value, :class:`!SimpleCookie` calls the builtin :func:`str` to "
"convert the value to a string. Values received from HTTP are kept as "
"strings."
msgstr ""
"이 클래스는 :class:`BaseCookie`\\에서 파생되며 :meth:`~BaseCookie.value_decode`\\와 "
":meth:`~BaseCookie.value_encode`\\를 재정의합니다. :class:`!SimpleCookie`\\는 문자열"
" 쿠키값을 지원합니다. 값을 설정할 때, :class:`!SimpleCookie`\\는 내장 :func:`str`\\을 호출하여 "
"값을 문자열로 변환합니다. HTTP에서 수신된 값은 문자열로 유지됩니다."

#: ../../library/http.cookies.rst:66
msgid "Module :mod:`http.cookiejar`"
msgstr "모듈 :mod:`http.cookiejar`"

#: ../../library/http.cookies.rst:67
msgid ""
"HTTP cookie handling for web *clients*.  The :mod:`http.cookiejar` and "
":mod:`http.cookies` modules do not depend on each other."
msgstr ""
"웹 *클라이언트*\\용 HTTP 쿠키 처리. :mod:`http.cookiejar`\\와 :mod:`http.cookies` 모듈 "
"간의 의존성은 없습니다."

#: ../../library/http.cookies.rst:70
msgid ":rfc:`2109` - HTTP State Management Mechanism"
msgstr ":rfc:`2109` - HTTP State Management Mechanism (HTTP 상태 관리 메커니즘)"

#: ../../library/http.cookies.rst:71
msgid "This is the state management specification implemented by this module."
msgstr "이것은 이 모듈이 구현한 상태 관리 명세입니다."

#: ../../library/http.cookies.rst:77
msgid "Cookie Objects"
msgstr "쿠키 객체"

#: ../../library/http.cookies.rst:82
msgid ""
"Return a tuple ``(real_value, coded_value)`` from a string "
"representation. ``real_value`` can be any type. This method does no "
"decoding in :class:`BaseCookie` --- it exists so it can be overridden."
msgstr ""
"문자열 표현으로부터 튜플 ``(real_value, coded_value)``\\를 반환합니다. ``real_value``\\는 "
"모든 형이 될 수 있습니다. 이 메서드는 :class:`BaseCookie`\\에서는 아무런 디코딩을 하지 않습니다 --- 재정의할"
" 수 있도록 존재합니다."

#: ../../library/http.cookies.rst:89
msgid ""
"Return a tuple ``(real_value, coded_value)``. *val* can be any type, but "
"``coded_value`` will always be converted to a string. This method does no"
" encoding in :class:`BaseCookie` --- it exists so it can be overridden."
msgstr ""
"튜플 ``(real_value, coded_value)``\\를 반환합니다. *val*\\은 모든 형이 될 수 있지만, "
"``coded_value``\\는 항상 문자열로 변환됩니다. 이 메서드는 :class:`BaseCookie`\\에서는 아무런 "
"인코딩을 하지 않습니다 --- 재정의할 수 있도록 존재합니다."

#: ../../library/http.cookies.rst:94
msgid ""
"In general, it should be the case that :meth:`value_encode` and "
":meth:`value_decode` are inverses on the range of *value_decode*."
msgstr ""
"일반적으로, :meth:`value_encode`\\와 :meth:`value_decode`\\는 *value_decode* "
"범위에서 역연산입니다."

#: ../../library/http.cookies.rst:100
msgid ""
"Return a string representation suitable to be sent as HTTP headers. "
"*attrs* and *header* are sent to each :class:`Morsel`'s "
":meth:`~Morsel.output` method. *sep* is used to join the headers "
"together, and is by default the combination ``'\\r\\n'`` (CRLF)."
msgstr ""
"HTTP 헤더로서 송신하기 적절한 문자열 표현을 반환합니다. *attrs*\\와 *header*\\는 각 "
":class:`Morsel`\\의 :meth:`~Morsel.output` 메서드로 전송됩니다. *sep*\\는 헤더를 함께 "
"결합하는 데 사용되며, 기본적으로 ``'\\r\\n'`` (CRLF) 조합입니다."

#: ../../library/http.cookies.rst:108
msgid ""
"Return an embeddable JavaScript snippet, which, if run on a browser which"
" supports JavaScript, will act the same as if the HTTP headers was sent."
msgstr ""
"자바스크립트를 지원하는 브라우저에서 실행될 때 HTTP 헤더가 전송된 것처럼 작동하는, 삽입 가능한 자바스크립트 코드 조각을 "
"반환합니다."

#: ../../library/http.cookies.rst:111 ../../library/http.cookies.rst:207
#: ../../library/http.cookies.rst:215
msgid "The meaning for *attrs* is the same as in :meth:`output`."
msgstr "*attrs*\\의 의미는 :meth:`output`\\과 같습니다."

#: ../../library/http.cookies.rst:116
msgid ""
"If *rawdata* is a string, parse it as an ``HTTP_COOKIE`` and add the "
"values found there as :class:`Morsel`\\ s. If it is a dictionary, it is "
"equivalent to::"
msgstr ""
"*rawdata*\\가 문자열이면, ``HTTP_COOKIE``\\로 구문 분석하고 거기에 있는 값을 "
":class:`Morsel`\\로 추가합니다. 딕셔너리면, 다음과 동등합니다::"

#: ../../library/http.cookies.rst:119
msgid ""
"for k, v in rawdata.items():\n"
"    cookie[k] = v"
msgstr ""
"for k, v in rawdata.items():\n"
"    cookie[k] = v"

#: ../../library/http.cookies.rst:126
msgid "Morsel Objects"
msgstr "Morsel 객체"

#: ../../library/http.cookies.rst:131
msgid "Abstract a key/value pair, which has some :rfc:`2109` attributes."
msgstr ":rfc:`2109` 어트리뷰트를 포함하는 키/값 쌍을 추상화합니다."

#: ../../library/http.cookies.rst:133
msgid ""
"Morsels are dictionary-like objects, whose set of keys is constant --- "
"the valid :rfc:`2109` attributes, which are:"
msgstr "Morsel은 딕셔너리류 객체이며, 키의 집합은 상수입니다 --- 다음과 같은 유효한 :rfc:`2109` 어트리뷰트입니다:"

#: ../../library/http.cookies.rst:146
msgid ""
"The attribute :attr:`httponly` specifies that the cookie is only "
"transferred in HTTP requests, and is not accessible through JavaScript. "
"This is intended to mitigate some forms of cross-site scripting."
msgstr ""
":attr:`httponly` 어트리뷰트는 쿠키가 HTTP 요청으로만 전송되고 자바스크립트를 통해 액세스할 수 없도록 지정합니다. "
"이것은 교차 사이트 스크립팅의 일부 형식을 방지하기 위한 것입니다."

#: ../../library/http.cookies.rst:150
msgid ""
"The attribute :attr:`samesite` specifies that the browser is not allowed "
"to send the cookie along with cross-site requests. This helps to mitigate"
" CSRF attacks. Valid values for this attribute are \"Strict\" and "
"\"Lax\"."
msgstr ""
"어트리뷰트 :attr:`samesite`\\는 브라우저가 교차 사이트 요청에 쿠키를 보낼 수 없도록 지정합니다. 이는 CSRF "
"공격을 완화하는 데 도움이 됩니다. 이 어트리뷰트의 유효한 값은 \"Strict\" 와 \"Lax\" 입니다."

#: ../../library/http.cookies.rst:154
msgid "The keys are case-insensitive and their default value is ``''``."
msgstr "키는 대소 문자를 구분하지 않으며 기본값은 ``''``\\입니다."

#: ../../library/http.cookies.rst:156
msgid ""
":meth:`!__eq__` now takes :attr:`~Morsel.key` and :attr:`~Morsel.value` "
"into account."
msgstr ""
":meth:`!__eq__`\\는 이제 :attr:`~Morsel.key`\\와 :attr:`~Morsel.value`\\를 "
"고려합니다."

#: ../../library/http.cookies.rst:160
msgid ""
"Attributes :attr:`~Morsel.key`, :attr:`~Morsel.value` and "
":attr:`~Morsel.coded_value` are read-only.  Use :meth:`~Morsel.set` for "
"setting them."
msgstr ""
"어트리뷰트 :attr:`~Morsel.key`, :attr:`~Morsel.value` 및 "
":attr:`~Morsel.coded_value`\\는 읽기 전용입니다. 설정하려면 :meth:`~Morsel.set`\\을 "
"사용하십시오."

#: ../../library/http.cookies.rst:165
msgid "Added support for the :attr:`samesite` attribute."
msgstr ":attr:`samesite` 어트리뷰트에 대한 지원이 추가되었습니다."

#: ../../library/http.cookies.rst:171
msgid "The value of the cookie."
msgstr "쿠키의 값."

#: ../../library/http.cookies.rst:176
msgid "The encoded value of the cookie --- this is what should be sent."
msgstr "쿠키의 인코딩된 값 --- 이것을 전송해야 합니다."

#: ../../library/http.cookies.rst:181
msgid "The name of the cookie."
msgstr "쿠키의 이름."

#: ../../library/http.cookies.rst:186
msgid "Set the *key*, *value* and *coded_value* attributes."
msgstr "*key*, *value* 및 *coded_value* 어트리뷰트를 설정합니다."

#: ../../library/http.cookies.rst:191
msgid "Whether *K* is a member of the set of keys of a :class:`Morsel`."
msgstr "*K*\\가 :class:`Morsel`\\의 키 집합의 구성원인지를 판단합니다."

#: ../../library/http.cookies.rst:196
msgid ""
"Return a string representation of the Morsel, suitable to be sent as an "
"HTTP header. By default, all the attributes are included, unless *attrs* "
"is given, in which case it should be a list of attributes to use. "
"*header* is by default ``\"Set-Cookie:\"``."
msgstr ""
"HTTP 헤더로 보내기에 적합한, Morsel의 문자열 표현을 반환합니다. 기본적으로, *attrs*\\가 주어지지 않는 한, 모든"
" 어트리뷰트가 포함됩니다. 주어지면 사용할 어트리뷰트 리스트여야 합니다. *header*\\는 기본적으로 ``\"Set-"
"Cookie:\"``\\입니다."

#: ../../library/http.cookies.rst:204
msgid ""
"Return an embeddable JavaScript snippet, which, if run on a browser which"
" supports JavaScript, will act the same as if the HTTP header was sent."
msgstr ""
"자바스크립트를 지원하는 브라우저에서 실행될 때, HTTP 헤더가 전송된 것처럼 작동하는, 삽입 가능한 자바스크립트 코드 조각을 "
"반환합니다."

#: ../../library/http.cookies.rst:212
msgid ""
"Return a string representing the Morsel, without any surrounding HTTP or "
"JavaScript."
msgstr "둘러싸는 HTTP나 자바스크립트 없이 Morsel을 표현하는 문자열을 반환합니다."

#: ../../library/http.cookies.rst:220
msgid ""
"Update the values in the Morsel dictionary with the values in the "
"dictionary *values*.  Raise an error if any of the keys in the *values* "
"dict is not a valid :rfc:`2109` attribute."
msgstr ""
"Morsel 딕셔너리의 값을 닥셔너리 *values*\\의 값으로 갱신합니다. *values* 딕셔너리의 키 중 하나라도 유효한 "
":rfc:`2109` 어트리뷰트가 아니면 에러를 발생시킵니다."

#: ../../library/http.cookies.rst:224
msgid "an error is raised for invalid keys."
msgstr "유효하지 않은 키에 대해서 에러가 발생합니다."

#: ../../library/http.cookies.rst:230
msgid "Return a shallow copy of the Morsel object."
msgstr "Morsel 객체의 얕은 복사본을 반환합니다."

#: ../../library/http.cookies.rst:232
msgid "return a Morsel object instead of a dict."
msgstr "딕셔너리 대신 Morsel 객체를 반환합니다."

#: ../../library/http.cookies.rst:238
msgid ""
"Raise an error if key is not a valid :rfc:`2109` attribute, otherwise "
"behave the same as :meth:`dict.setdefault`."
msgstr ""
"key가 유효한 :rfc:`2109` 어트리뷰트가 아니면 에러를 발생시킵니다. 그렇지 않으면, "
":meth:`dict.setdefault`\\와 같이 동작합니다."

#: ../../library/http.cookies.rst:245
msgid "Example"
msgstr "예제"

#: ../../library/http.cookies.rst:247
msgid ""
"The following example demonstrates how to use the :mod:`http.cookies` "
"module."
msgstr "다음 예제는 :mod:`http.cookies` 모듈을 사용하는 방법을 보여줍니다."

#: ../../library/http.cookies.rst:249
msgid ""
">>> from http import cookies\n"
">>> C = cookies.SimpleCookie()\n"
">>> C[\"fig\"] = \"newton\"\n"
">>> C[\"sugar\"] = \"wafer\"\n"
">>> print(C) # generate HTTP headers\n"
"Set-Cookie: fig=newton\n"
"Set-Cookie: sugar=wafer\n"
">>> print(C.output()) # same thing\n"
"Set-Cookie: fig=newton\n"
"Set-Cookie: sugar=wafer\n"
">>> C = cookies.SimpleCookie()\n"
">>> C[\"rocky\"] = \"road\"\n"
">>> C[\"rocky\"][\"path\"] = \"/cookie\"\n"
">>> print(C.output(header=\"Cookie:\"))\n"
"Cookie: rocky=road; Path=/cookie\n"
">>> print(C.output(attrs=[], header=\"Cookie:\"))\n"
"Cookie: rocky=road\n"
">>> C = cookies.SimpleCookie()\n"
">>> C.load(\"chips=ahoy; vienna=finger\") # load from a string (HTTP "
"header)\n"
">>> print(C)\n"
"Set-Cookie: chips=ahoy\n"
"Set-Cookie: vienna=finger\n"
">>> C = cookies.SimpleCookie()\n"
">>> C.load('keebler=\"E=everybody; L=\\\\\"Loves\\\\\"; "
"fudge=\\\\012;\";')\n"
">>> print(C)\n"
"Set-Cookie: keebler=\"E=everybody; L=\\\"Loves\\\"; fudge=\\012;\"\n"
">>> C = cookies.SimpleCookie()\n"
">>> C[\"oreo\"] = \"doublestuff\"\n"
">>> C[\"oreo\"][\"path\"] = \"/\"\n"
">>> print(C)\n"
"Set-Cookie: oreo=doublestuff; Path=/\n"
">>> C = cookies.SimpleCookie()\n"
">>> C[\"twix\"] = \"none for you\"\n"
">>> C[\"twix\"].value\n"
"'none for you'\n"
">>> C = cookies.SimpleCookie()\n"
">>> C[\"number\"] = 7 # equivalent to C[\"number\"] = str(7)\n"
">>> C[\"string\"] = \"seven\"\n"
">>> C[\"number\"].value\n"
"'7'\n"
">>> C[\"string\"].value\n"
"'seven'\n"
">>> print(C)\n"
"Set-Cookie: number=7\n"
"Set-Cookie: string=seven"
msgstr ""
">>> from http import cookies\n"
">>> C = cookies.SimpleCookie()\n"
">>> C[\"fig\"] = \"newton\"\n"
">>> C[\"sugar\"] = \"wafer\"\n"
">>> print(C) # HTTP 헤더를 생성합니다\n"
"Set-Cookie: fig=newton\n"
"Set-Cookie: sugar=wafer\n"
">>> print(C.output()) # 마찬가지입니다\n"
"Set-Cookie: fig=newton\n"
"Set-Cookie: sugar=wafer\n"
">>> C = cookies.SimpleCookie()\n"
">>> C[\"rocky\"] = \"road\"\n"
">>> C[\"rocky\"][\"path\"] = \"/cookie\"\n"
">>> print(C.output(header=\"Cookie:\"))\n"
"Cookie: rocky=road; Path=/cookie\n"
">>> print(C.output(attrs=[], header=\"Cookie:\"))\n"
"Cookie: rocky=road\n"
">>> C = cookies.SimpleCookie()\n"
">>> C.load(\"chips=ahoy; vienna=finger\") # 문자열에서 로드합니다 (HTTP 헤더)\n"
">>> print(C)\n"
"Set-Cookie: chips=ahoy\n"
"Set-Cookie: vienna=finger\n"
">>> C = cookies.SimpleCookie()\n"
">>> C.load('keebler=\"E=everybody; L=\\\\\"Loves\\\\\"; "
"fudge=\\\\012;\";')\n"
">>> print(C)\n"
"Set-Cookie: keebler=\"E=everybody; L=\\\"Loves\\\"; fudge=\\012;\"\n"
">>> C = cookies.SimpleCookie()\n"
">>> C[\"oreo\"] = \"doublestuff\"\n"
">>> C[\"oreo\"][\"path\"] = \"/\"\n"
">>> print(C)\n"
"Set-Cookie: oreo=doublestuff; Path=/\n"
">>> C = cookies.SimpleCookie()\n"
">>> C[\"twix\"] = \"none for you\"\n"
">>> C[\"twix\"].value\n"
"'none for you'\n"
">>> C = cookies.SimpleCookie()\n"
">>> C[\"number\"] = 7 # C[\"number\"] = str(7) 과 동등합니다\n"
">>> C[\"string\"] = \"seven\"\n"
">>> C[\"number\"].value\n"
"'7'\n"
">>> C[\"string\"].value\n"
"'seven'\n"
">>> print(C)\n"
"Set-Cookie: number=7\n"
"Set-Cookie: string=seven"

