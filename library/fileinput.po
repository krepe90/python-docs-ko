# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2017, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-04-17 23:44+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: Dong-gweon Oh <flowdas@gmail.com>\n"
"Language-Team: Korean (https://python.flowdas.com)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.17.0\n"

#: ../../library/fileinput.rst:2
#, fuzzy
msgid ":mod:`!fileinput` --- Iterate over lines from multiple input streams"
msgstr ":mod:`fileinput` --- 여러 입력 스트림에서 줄을 이터레이트 하기"

#: ../../library/fileinput.rst:10
msgid "**Source code:** :source:`Lib/fileinput.py`"
msgstr "**소스 코드:** :source:`Lib/fileinput.py`"

#: ../../library/fileinput.rst:14
msgid ""
"This module implements a helper class and functions to quickly write a "
"loop over standard input or a list of files. If you just want to read or "
"write one file see :func:`open`."
msgstr ""
"이 모듈은 표준 입력이나 파일 목록에 대한 루프를 빠르게 작성하기 위한 도우미 클래스와 함수를 구현합니다. 단지 하나의 파일을 "
"읽거나 쓰려면 :func:`open`\\을 참조하십시오."

#: ../../library/fileinput.rst:18
msgid "The typical use is::"
msgstr "일반적인 사용법은 다음과 같습니다::"

#: ../../library/fileinput.rst:20
msgid ""
"import fileinput\n"
"for line in fileinput.input(encoding=\"utf-8\"):\n"
"    process(line)"
msgstr ""

#: ../../library/fileinput.rst:24
msgid ""
"This iterates over the lines of all files listed in ``sys.argv[1:]``, "
"defaulting to ``sys.stdin`` if the list is empty.  If a filename is "
"``'-'``, it is also replaced by ``sys.stdin`` and the optional arguments "
"*mode* and *openhook* are ignored.  To specify an alternative list of "
"filenames, pass it as the first argument to :func:`.input`.  A single "
"file name is also allowed."
msgstr ""
"이것은 ``sys.argv[1:]``\\에 나열된 모든 파일의 줄을 이터레이트 하며, 목록이 비어 있으면 기본값은 "
"``sys.stdin``\\입니다. 파일 이름이 ``'-'``\\이면, 이 또한 ``sys.stdin``\\으로 대체되고 선택적 "
"인자 *mode*\\와 *openhook*\\은 무시됩니다. 대체 파일명 목록을 지정하려면, :func:`.input`\\의 첫 "
"번째 인자로 전달하십시오. 단일 파일 이름도 허용됩니다."

#: ../../library/fileinput.rst:30
msgid ""
"All files are opened in text mode by default, but you can override this "
"by specifying the *mode* parameter in the call to :func:`.input` or "
":class:`FileInput`.  If an I/O error occurs during opening or reading a "
"file, :exc:`OSError` is raised."
msgstr ""
"모든 파일은 기본적으로 텍스트 모드로 열리지만, :func:`.input`\\이나 :class:`FileInput`\\을 호출할 때"
" *mode* 매개 변수를 지정하여 이를 재정의할 수 있습니다. 파일을 열거나 읽는 동안 I/O 에러가 발생하면, "
":exc:`OSError`\\가 발생합니다."

#: ../../library/fileinput.rst:35
msgid ":exc:`IOError` used to be raised; it is now an alias of :exc:`OSError`."
msgstr ":exc:`IOError`\\가 발생했었습니다; 이제 이것은 :exc:`OSError`\\의 별칭입니다."

#: ../../library/fileinput.rst:38
msgid ""
"If ``sys.stdin`` is used more than once, the second and further use will "
"return no lines, except perhaps for interactive use, or if it has been "
"explicitly reset (e.g. using ``sys.stdin.seek(0)``)."
msgstr ""
"``sys.stdin``\\이 두 번 이상 사용되면, 대화식으로 사용되거나 명시적으로 재설정된 경우(예를 들어, "
"``sys.stdin.seek(0)``\\을 사용해서)를 제외하고 두 번째와 그 이후의 사용은 줄을 반환하지 않습니다."

#: ../../library/fileinput.rst:42
msgid ""
"Empty files are opened and immediately closed; the only time their "
"presence in the list of filenames is noticeable at all is when the last "
"file opened is empty."
msgstr "빈 파일은 열리고 즉시 닫힙니다; 파일명 목록에 존재함이 인식되는 유일한 시간은 마지막에 열린 파일이 비어있을 때입니다."

#: ../../library/fileinput.rst:46
msgid ""
"Lines are returned with any newlines intact, which means that the last "
"line in a file may not have one."
msgstr "줄은 줄 바꿈이 그대로 유지된 채로 반환됩니다. 즉, 파일의 마지막 줄에는 줄 바꿈이 없을 수도 있습니다."

#: ../../library/fileinput.rst:49
#, fuzzy
msgid ""
"You can control how files are opened by providing an opening hook via the"
" *openhook* parameter to :func:`fileinput.input` or :func:`FileInput`. "
"The hook must be a function that takes two arguments, *filename* and "
"*mode*, and returns an accordingly opened file-like object. If *encoding*"
" and/or *errors* are specified, they will be passed to the hook as "
"additional keyword arguments. This module provides a "
":func:`hook_compressed` to support compressed files."
msgstr ""
":func:`fileinput.input`\\이나 :class:`FileInput()`\\의 *openhook* 매개 변수를 통해 "
"열기 훅을 제공하여 파일을 여는 방법을 제어할 수 있습니다. 훅은 두 개의 인자 *filename*\\과 *mode*\\를 취하고,"
" 그에 따라 열린 파일류 객체를 반환하는 함수여야 합니다. 이 모듈에는 두 가지 유용한 훅이 이미 제공됩니다."

#: ../../library/fileinput.rst:56
msgid "The following function is the primary interface of this module:"
msgstr "다음 함수는 이 모듈의 기본 인터페이스입니다:"

#: ../../library/fileinput.rst:61
msgid ""
"Create an instance of the :class:`FileInput` class.  The instance will be"
" used as global state for the functions of this module, and is also "
"returned to use during iteration.  The parameters to this function will "
"be passed along to the constructor of the :class:`FileInput` class."
msgstr ""
":class:`FileInput` 클래스의 인스턴스를 만듭니다. 인스턴스는 이 모듈의 함수에 대한 전역 상태로 사용되며, 이터레이션"
" 중에 사용하기 위해 반환되기도 합니다. 이 함수의 매개 변수는 :class:`FileInput` 클래스의 생성자로 전달됩니다."

#: ../../library/fileinput.rst:66
msgid ""
"The :class:`FileInput` instance can be used as a context manager in the "
":keyword:`with` statement.  In this example, *input* is closed after the "
":keyword:`!with` statement is exited, even if an exception occurs::"
msgstr ""
":class:`FileInput` 인스턴스는 :keyword:`with` 문에서 컨텍스트 관리자로 사용될 수 있습니다. 이 "
"예제에서, 예외가 발생하더라도 :keyword:`!with` 문이 종료된 후 *input*\\이 닫힙니다::"

#: ../../library/fileinput.rst:70
msgid ""
"with fileinput.input(files=('spam.txt', 'eggs.txt'), encoding=\"utf-8\") "
"as f:\n"
"    for line in f:\n"
"        process(line)"
msgstr ""

#: ../../library/fileinput.rst:74 ../../library/fileinput.rst:170
msgid "Can be used as a context manager."
msgstr "컨텍스트 관리자로 사용할 수 있습니다."

#: ../../library/fileinput.rst:77
msgid "The keyword parameters *mode* and *openhook* are now keyword-only."
msgstr "키워드 매개 변수 *mode*\\와 *openhook*\\은 이제 키워드 전용입니다."

#: ../../library/fileinput.rst:80 ../../library/fileinput.rst:176
#: ../../library/fileinput.rst:210
msgid "The keyword-only parameter *encoding* and *errors* are added."
msgstr ""

#: ../../library/fileinput.rst:84
msgid ""
"The following functions use the global state created by "
":func:`fileinput.input`; if there is no active state, :exc:`RuntimeError`"
" is raised."
msgstr ""
"다음 함수는 :func:`fileinput.input`\\에 의해 만들어진 전역 상태를 사용합니다; 활성 상태가 없으면, "
":exc:`RuntimeError`\\가 발생합니다."

#: ../../library/fileinput.rst:90
msgid ""
"Return the name of the file currently being read.  Before the first line "
"has been read, returns ``None``."
msgstr "현재 읽고 있는 파일의 이름을 반환합니다. 첫 번째 줄을 읽기 전에는, ``None``\\을 반환합니다."

#: ../../library/fileinput.rst:96
msgid ""
"Return the integer \"file descriptor\" for the current file. When no file"
" is opened (before the first line and between files), returns ``-1``."
msgstr ""
"현재 파일의 정수 \"파일 기술자\"를 반환합니다. 파일이 열리지 않았으면 (첫 번째 줄 전과 파일 사이에), ``-1``\\을 "
"반환합니다."

#: ../../library/fileinput.rst:102
msgid ""
"Return the cumulative line number of the line that has just been read.  "
"Before the first line has been read, returns ``0``.  After the last line "
"of the last file has been read, returns the line number of that line."
msgstr ""
"방금 읽은 줄의 누적 줄 번호를 반환합니다. 첫 번째 줄을 읽기 전에는, ``0``\\을 반환합니다. 마지막 파일의 마지막 줄을 "
"읽은 후에는, 그 줄의 줄 번호를 반환합니다."

#: ../../library/fileinput.rst:109
msgid ""
"Return the line number in the current file.  Before the first line has "
"been read, returns ``0``.  After the last line of the last file has been "
"read, returns the line number of that line within the file."
msgstr ""
"현재 파일의 줄 번호를 반환합니다. 첫 번째 줄을 읽기 전에는, ``0``\\을 반환합니다. 마지막 파일의 마지막 줄을 읽은 "
"후에는, 그 줄의 파일 내에서의 줄 번호를 반환합니다."

#: ../../library/fileinput.rst:116
msgid ""
"Return ``True`` if the line just read is the first line of its file, "
"otherwise return ``False``."
msgstr "방금 읽은 줄이 파일의 첫 번째 줄이면 ``True``\\를, 그렇지 않으면 ``False``\\를 반환합니다."

#: ../../library/fileinput.rst:122
msgid ""
"Return ``True`` if the last line was read from ``sys.stdin``, otherwise "
"return ``False``."
msgstr "마지막 줄을 ``sys.stdin``\\에서 읽었으면 ``True``\\를, 그렇지 않으면 ``False``\\를 반환합니다."

#: ../../library/fileinput.rst:128
msgid ""
"Close the current file so that the next iteration will read the first "
"line from the next file (if any); lines not read from the file will not "
"count towards the cumulative line count.  The filename is not changed "
"until after the first line of the next file has been read.  Before the "
"first line has been read, this function has no effect; it cannot be used "
"to skip the first file.  After the last line of the last file has been "
"read, this function has no effect."
msgstr ""
"다음 이터레이션에서 다음 파일(있다면)의 첫 번째 줄을 읽도록 현재 파일을 닫습니다; 파일에서 읽지 않은 줄은 누적 줄 수에 "
"포함되지 않습니다. 파일명은 다음 파일의 첫 번째 줄을 읽을 때까지 변경되지 않습니다. 첫 번째 줄을 읽기 전에는, 이 함수가 "
"효과가 없습니다; 첫 번째 파일을 건너뛰는 데 사용할 수 없습니다. 마지막 파일의 마지막 줄을 읽은 후에는, 이 함수는 효과가 "
"없습니다."

#: ../../library/fileinput.rst:138
msgid "Close the sequence."
msgstr "시퀀스를 닫습니다."

#: ../../library/fileinput.rst:140
msgid ""
"The class which implements the sequence behavior provided by the module "
"is available for subclassing as well:"
msgstr "모듈이 제공하는 시퀀스 동작을 구현하는 클래스는 서브 클래싱에도 사용할 수 있습니다:"

#: ../../library/fileinput.rst:146
#, fuzzy
msgid ""
"Class :class:`FileInput` is the implementation; its methods "
":meth:`filename`, :meth:`fileno`, :meth:`lineno`, :meth:`filelineno`, "
":meth:`isfirstline`, :meth:`isstdin`, :meth:`nextfile` and :meth:`close` "
"correspond to the functions of the same name in the module. In addition "
"it is :term:`iterable` and has a :meth:`~io.TextIOBase.readline` method "
"which returns the next input line. The sequence must be accessed in "
"strictly sequential order; random access and "
":meth:`~io.TextIOBase.readline` cannot be mixed."
msgstr ""
":class:`FileInput` 클래스는 구현입니다; 그 메서드 :meth:`filename`, :meth:`fileno`, "
":meth:`lineno`, :meth:`filelineno`, :meth:`isfirstline`, :meth:`isstdin`,"
" :meth:`nextfile` 및 :meth:`close`\\는 모듈에 있는 같은 이름의 함수에 해당합니다. 또한 다음 입력 줄을"
" 반환하는 :meth:`~io.TextIOBase.readline` 메서드와 시퀀스 동작을 구현하는 "
":meth:`__getitem__` 메서드가 있습니다. 시퀀스는 엄격하게 순차적으로 액세스해야 합니다; 무작위 액세스와 "
":meth:`~io.TextIOBase.readline`\\은 혼합될 수 없습니다."

#: ../../library/fileinput.rst:154
#, fuzzy
msgid ""
"With *mode* you can specify which file mode will be passed to "
":func:`open`. It must be one of ``'r'`` and ``'rb'``."
msgstr ""
"*mode*\\로 :func:`open`\\에 전달할 파일 모드를 지정할 수 있습니다. ``'r'``, ``'rU'``, "
"``'U'`` 및 ``'rb'`` 중 하나여야 합니다."

#: ../../library/fileinput.rst:157
msgid ""
"The *openhook*, when given, must be a function that takes two arguments, "
"*filename* and *mode*, and returns an accordingly opened file-like "
"object. You cannot use *inplace* and *openhook* together."
msgstr ""
"*openhook*\\이 제공되면 두 개의 인자 *filename*\\과 *mode*\\를 취하고, 이에 따라 열린 파일류 객체를 "
"반환하는 함수여야 합니다. *inplace*\\와 *openhook*\\을 함께 사용할 수 없습니다."

#: ../../library/fileinput.rst:161
msgid ""
"You can specify *encoding* and *errors* that is passed to :func:`open` or"
" *openhook*."
msgstr ""

#: ../../library/fileinput.rst:163
msgid ""
"A :class:`FileInput` instance can be used as a context manager in the "
":keyword:`with` statement.  In this example, *input* is closed after the "
":keyword:`!with` statement is exited, even if an exception occurs::"
msgstr ""
":class:`FileInput` 인스턴스는 :keyword:`with` 문에서 컨텍스트 관리자로 사용될 수 있습니다. 이 "
"예제에서, 예외가 발생하더라도 :keyword:`!with` 문이 종료된 후 *input*\\이 닫힙니다::"

#: ../../library/fileinput.rst:167
msgid ""
"with FileInput(files=('spam.txt', 'eggs.txt')) as input:\n"
"    process(input)"
msgstr ""

#: ../../library/fileinput.rst:173
msgid "The keyword parameter *mode* and *openhook* are now keyword-only."
msgstr "키워드 매개 변수 *mode*\\와 *openhook*\\은 이제 키워드 전용입니다."

#: ../../library/fileinput.rst:179
msgid ""
"The ``'rU'`` and ``'U'`` modes and the :meth:`!__getitem__` method have "
"been removed."
msgstr ""

#: ../../library/fileinput.rst:184
msgid ""
"**Optional in-place filtering:** if the keyword argument ``inplace=True``"
" is passed to :func:`fileinput.input` or to the :class:`FileInput` "
"constructor, the file is moved to a backup file and standard output is "
"directed to the input file (if a file of the same name as the backup file"
" already exists, it will be replaced silently).  This makes it possible "
"to write a filter that rewrites its input file in place.  If the *backup*"
" parameter is given (typically as ``backup='.<some extension>'``), it "
"specifies the extension for the backup file, and the backup file remains "
"around; by default, the extension is ``'.bak'`` and it is deleted when "
"the output file is closed.  In-place filtering is disabled when standard "
"input is read."
msgstr ""
"**선택적 제자리 필터링(in-place filtering):** 키워드 인자 ``inplace=True``\\가 "
":func:`fileinput.input`\\이나 :class:`FileInput` 생성자로 전달되면, 파일이 백업 파일로 이동되고"
" 표준 출력은 입력 파일로 보내집니다 (백업 파일과 같은 이름의 파일이 이미 있으면, 조용히 대체됩니다). 이를 통해 입력 파일을 "
"다시 쓰는 필터를 작성할 수 있습니다. *backup* 매개 변수가 제공되면 (일반적으로 ``backup='.<some "
"extension>'``\\으로), 백업 파일의 확장자를 지정하고, 백업 파일은 그대로 남아 있습니다; 기본적으로 확장자는 "
"``'.bak'``\\이고, 출력 파일을 닫을 때 삭제됩니다. 표준 입력을 읽을 때는 제자리 필터링이 비활성화됩니다."

#: ../../library/fileinput.rst:196
msgid "The two following opening hooks are provided by this module:"
msgstr "이 모듈은 다음과 같은 두 개의 열기 훅을 제공합니다:"

#: ../../library/fileinput.rst:200
msgid ""
"Transparently opens files compressed with gzip and bzip2 (recognized by "
"the extensions ``'.gz'`` and ``'.bz2'``) using the :mod:`gzip` and "
":mod:`bz2` modules.  If the filename extension is not ``'.gz'`` or "
"``'.bz2'``, the file is opened normally (ie, using :func:`open` without "
"any decompression)."
msgstr ""
":mod:`gzip`\\과 :mod:`bz2` 모듈을 사용하여 gzip과 bzip2로 압축된 파일(확장자 ``'.gz'``\\와 "
"``'.bz2'``\\로 인식합니다)을 투명하게 엽니다. 파일명 확장자가 ``'.gz'``\\나 ``'.bz2'``\\가 아니면, "
"파일이 정상적으로 열립니다 (즉, 압축 해제 없이 :func:`open`\\을 사용합니다)."

#: ../../library/fileinput.rst:205
msgid ""
"The *encoding* and *errors* values are passed to "
":class:`io.TextIOWrapper` for compressed files and open for normal files."
msgstr ""

#: ../../library/fileinput.rst:208
#, fuzzy
msgid ""
"Usage example:  ``fi = "
"fileinput.FileInput(openhook=fileinput.hook_compressed, "
"encoding=\"utf-8\")``"
msgstr "사용 예: ``fi = fileinput.FileInput(openhook=fileinput.hook_compressed)``"

#: ../../library/fileinput.rst:216
msgid ""
"Returns a hook which opens each file with :func:`open`, using the given "
"*encoding* and *errors* to read the file."
msgstr ""
"주어진 *encoding*\\과 *errors*\\를 사용하여 파일을 읽도록 :func:`open`\\으로 각 파일을 여는 훅을 "
"반환합니다."

#: ../../library/fileinput.rst:219
msgid ""
"Usage example: ``fi = "
"fileinput.FileInput(openhook=fileinput.hook_encoded(\"utf-8\", "
"\"surrogateescape\"))``"
msgstr ""
"사용 예: ``fi = "
"fileinput.FileInput(openhook=fileinput.hook_encoded(\"utf-8\", "
"\"surrogateescape\"))``"

#: ../../library/fileinput.rst:223
msgid "Added the optional *errors* parameter."
msgstr "선택적 *errors* 매개 변수를 추가했습니다."

#: ../../library/fileinput.rst:226
msgid ""
"This function is deprecated since :func:`fileinput.input` and "
":class:`FileInput` now have *encoding* and *errors* parameters."
msgstr ""

#~ msgid "The ``'rU'`` and ``'U'`` modes."
#~ msgstr "``'rU'``\\와 ``'U'`` 모드."

#~ msgid "Support for :meth:`__getitem__` method is deprecated."
#~ msgstr ":meth:`__getitem__` 메서드에 대한 지원은 폐지되었습니다."

