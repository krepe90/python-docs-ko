# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2017, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-04-17 23:44+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: Dong-gweon Oh <flowdas@gmail.com>\n"
"Language-Team: Korean (https://python.flowdas.com)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.17.0\n"

#: ../../library/readline.rst:2
msgid ":mod:`!readline` --- GNU readline interface"
msgstr ":mod:`!readline` --- GNU readline 인터페이스"

#: ../../library/readline.rst:12
msgid ""
"The :mod:`readline` module defines a number of functions to facilitate "
"completion and reading/writing of history files from the Python "
"interpreter. This module can be used directly, or via the "
":mod:`rlcompleter` module, which supports completion of Python "
"identifiers at the interactive prompt.  Settings made using  this module "
"affect the behaviour of both the interpreter's interactive prompt  and "
"the prompts offered by the built-in :func:`input` function."
msgstr ""
":mod:`readline` 모듈은 파이썬 인터프리터에서 완성(completion)과 히스토리 파일의 읽기/쓰기를 용이하게 하는 "
"여러 함수를 정의합니다. 이 모듈은 직접 사용하거나, 대화식 프롬프트에서 파이썬 식별자 완성을 지원하는 "
":mod:`rlcompleter` 모듈을 통해 사용할 수 있습니다. 이 모듈을 사용하여 설정한 내용은 인터프리터의 대화식 프롬프트와"
" 내장 :func:`input` 함수가 제공하는 프롬프트의 동작에 영향을 줍니다."

#: ../../library/readline.rst:20
msgid ""
"Readline keybindings may be configured via an initialization file, "
"typically ``.inputrc`` in your home directory.  See `Readline Init File "
"<https://tiswww.cwru.edu/php/chet/readline/rluserman.html#Readline-Init-"
"File>`_ in the GNU Readline manual for information about the format and "
"allowable constructs of that file, and the capabilities of the Readline "
"library in general."
msgstr ""
"Readline 키 바인딩은 초기화 파일을 통해 구성할 수 있습니다, 일반적으로 홈 디렉터리의 ``.inputrc``. 이 파일의 "
"형식과 허용되는 구성 및 Readline 라이브러리의 기능에 대한 일반적인 정보는 GNU Readline 매뉴얼의 `Readline"
" Init File <https://tiswww.cwru.edu/php/chet/readline/rluserman.html"
"#Readline-Init-File>`_\\을 참조하십시오."

#: ../../includes/wasm-mobile-notavail.rst:3
msgid "Availability"
msgstr "가용성"

#: ../../includes/wasm-mobile-notavail.rst:5
msgid ""
"This module is not supported on :ref:`mobile platforms <mobile-"
"availability>` or :ref:`WebAssembly platforms <wasm-availability>`."
msgstr ""
"이 모듈은 :ref:`모바일 플랫폼 <mobile-availability>`\\이나 :ref:`웹어셈블리 플랫폼 <wasm-"
"availability>`\\에서 지원되지 않습니다."

#: ../../library/readline.rst:31
msgid ""
"The underlying Readline library API may be implemented by the "
"``editline`` (``libedit``) library instead of GNU readline. On macOS the "
":mod:`readline` module detects which library is being used at run time."
msgstr ""
"하부 Readline 라이브러리 API는 GNU readline 대신 ``editline`` (``libedit``) 라이브러리로 "
"구현될 수 있습니다. macOS에서 :mod:`readline` 모듈은 실행 시간에 사용 중인 라이브러리를 감지합니다."

#: ../../library/readline.rst:36
msgid ""
"The configuration file for ``editline`` is different from that of GNU "
"readline. If you programmatically load configuration strings you can use "
":data:`backend` to determine which library is being used."
msgstr ""
"``editline``\\의 구성 파일은 GNU readline의 구성 파일과 다릅니다. 프로그래밍 방식으로 구성 문자열을 로드하는"
" 경우 어떤 라이브러리가 사용되고 있는지 :data:`backend`\\를 사용하여 확인할 수 있습니다."

#: ../../library/readline.rst:40
msgid ""
"If you use ``editline``/``libedit`` readline emulation on macOS, the "
"initialization file located in your home directory is named ``.editrc``. "
"For example, the following content in ``~/.editrc`` will turn ON *vi* "
"keybindings and TAB completion::"
msgstr ""
"macOS에서 ``editline``/``libedit`` readline 에뮬레이션을 사용하는 경우, 홈 디렉터리에 있는 초기화 "
"파일의 이름은 ``.editrc``\\입니다. 예를 들어, ``~/.editrc``\\의 다음 내용은 *vi* 키 바인딩과 TAB "
"완성을 켭니다::"

#: ../../library/readline.rst:45
msgid ""
"python:bind -v\n"
"python:bind ^I rl_complete"
msgstr ""
"python:bind -v\n"
"python:bind ^I rl_complete"

#: ../../library/readline.rst:48
msgid ""
"Also note that different libraries may use different history file "
"formats. When switching the underlying library, existing history files "
"may become unusable."
msgstr ""

#: ../../library/readline.rst:54
msgid ""
"The name of the underlying Readline library being used, either "
"``\"readline\"`` or ``\"editline\"``."
msgstr ""

#: ../../library/readline.rst:60
msgid "Init file"
msgstr "초기화 파일"

#: ../../library/readline.rst:62
msgid "The following functions relate to the init file and user configuration:"
msgstr "다음 함수는 초기화 파일 및 사용자 구성과 관련이 있습니다:"

#: ../../library/readline.rst:67
msgid ""
"Execute the init line provided in the *string* argument. This calls "
":c:func:`!rl_parse_and_bind` in the underlying library."
msgstr ""
"*string* 인자에 제공된 초기화 줄을 실행합니다. 하부 라이브러리에서 :c:func:`!rl_parse_and_bind`\\를"
" 호출합니다."

#: ../../library/readline.rst:73
msgid ""
"Execute a readline initialization file. The default filename is the last "
"filename used. This calls :c:func:`!rl_read_init_file` in the underlying "
"library."
msgstr ""
"readline 초기화 파일을 실행합니다. 기본 파일 이름은 마지막으로 사용한 파일 이름입니다. 하부 라이브러리에서 "
":c:func:`!rl_read_init_file`\\을 호출합니다."

#: ../../library/readline.rst:78
msgid "Line buffer"
msgstr "줄 버퍼"

#: ../../library/readline.rst:80
msgid "The following functions operate on the line buffer:"
msgstr "다음 함수는 라인 버퍼에 대해 작용합니다:"

#: ../../library/readline.rst:85
msgid ""
"Return the current contents of the line buffer (:c:data:`!rl_line_buffer`"
" in the underlying library)."
msgstr "줄 버퍼의 현재 내용(하부 라이브러리의 :c:data:`!rl_line_buffer`)을 반환합니다."

#: ../../library/readline.rst:91
msgid ""
"Insert text into the line buffer at the cursor position.  This calls "
":c:func:`!rl_insert_text` in the underlying library, but ignores the "
"return value."
msgstr ""
"줄 버퍼의 커서 위치에 텍스트를 삽입합니다. 하부 라이브러리에서 :c:func:`!rl_insert_text`\\를 호출하지만, "
"반환 값은 무시합니다."

#: ../../library/readline.rst:98
msgid ""
"Change what's displayed on the screen to reflect the current contents of "
"the line buffer.  This calls :c:func:`!rl_redisplay` in the underlying "
"library."
msgstr ""
"줄 버퍼의 현재 내용을 반영하도록 화면에 표시되는 내용을 변경합니다. 하부 라이브러리에서 "
":c:func:`!rl_redisplay`\\를 호출합니다."

#: ../../library/readline.rst:103
msgid "History file"
msgstr "히스토리 파일"

#: ../../library/readline.rst:105
msgid "The following functions operate on a history file:"
msgstr "다음 함수는 히스토리 파일에 대해 작용합니다:"

#: ../../library/readline.rst:110
msgid ""
"Load a readline history file, and append it to the history list. The "
"default filename is :file:`~/.history`.  This calls "
":c:func:`!read_history` in the underlying library."
msgstr ""
"readline 히스토리 파일을 로드하고, 히스토리 목록에 추가합니다. 기본 파일명은 :file:`~/.history`\\입니다. "
"하부 라이브러리에서 :c:func:`!read_history`\\를 호출합니다."

#: ../../library/readline.rst:117
msgid ""
"Save the history list to a readline history file, overwriting any "
"existing file.  The default filename is :file:`~/.history`.  This calls "
":c:func:`!write_history` in the underlying library."
msgstr ""
"히스토리 목록을 readline 히스토리 파일에 저장하여, 기존 파일을 덮어씁니다. 기본 파일명은 "
":file:`~/.history`\\입니다. 하부 라이브러리에서 :c:func:`!write_history`\\를 호출합니다."

#: ../../library/readline.rst:124
msgid ""
"Append the last *nelements* items of history to a file.  The default "
"filename is :file:`~/.history`.  The file must already exist.  This calls"
" :c:func:`!append_history` in the underlying library.  This function only"
" exists if Python was compiled for a version of the library that supports"
" it."
msgstr ""
"히스토리의 마지막 *nelements* 항목을 파일에 추가합니다. 기본 파일명은 :file:`~/.history`\\입니다. 파일이"
" 이미 존재해야 합니다. 하부 라이브러리에서 :c:func:`!append_history`\\를 호출합니다. 이 함수는 파이썬이 "
"이를 지원하는 라이브러리 버전으로 컴파일된 경우에만 존재합니다."

#: ../../library/readline.rst:136
msgid ""
"Set or return the desired number of lines to save in the history file. "
"The :func:`write_history_file` function uses this value to truncate the "
"history file, by calling :c:func:`!history_truncate_file` in the "
"underlying library.  Negative values imply unlimited history file size."
msgstr ""
"히스토리 파일에 저장하기 원하는 줄 수를 설정하거나 반환합니다. :func:`write_history_file` 함수는 이 값을 "
"사용하여, 하부 라이브러리에서 :c:func:`!history_truncate_file`\\을 호출하여 히스토리 파일을 자릅니다. "
"음수 값은 제한 없는 히스토리 파일 크기를 의미합니다."

#: ../../library/readline.rst:144
msgid "History list"
msgstr "히스토리 목록"

#: ../../library/readline.rst:146
msgid "The following functions operate on a global history list:"
msgstr "다음 함수는 전역 히스토리 목록에 대해 작용합니다:"

#: ../../library/readline.rst:151
msgid ""
"Clear the current history.  This calls :c:func:`!clear_history` in the "
"underlying library.  The Python function only exists if Python was "
"compiled for a version of the library that supports it."
msgstr ""
"현재 히스토리를 지웁니다. 하부 라이브러리에서 :c:func:`!clear_history`\\를 호출합니다. 파이썬 함수는 파이썬이"
" 이를 지원하는 라이브러리 버전으로 컴파일된 경우에만 존재합니다."

#: ../../library/readline.rst:158
msgid ""
"Return the number of items currently in the history.  (This is different "
"from :func:`get_history_length`, which returns the maximum number of "
"lines that will be written to a history file.)"
msgstr ""
"현재 히스토리에 있는 항목 수를 반환합니다. (이것은 히스토리 파일에 기록될 최대 줄 수를 반환하는 "
":func:`get_history_length`\\와 다릅니다.)"

#: ../../library/readline.rst:165
msgid ""
"Return the current contents of history item at *index*.  The item index "
"is one-based.  This calls :c:func:`!history_get` in the underlying "
"library."
msgstr ""
"*index*\\에 있는 히스토리 항목의 현재 내용을 반환합니다. 항목 인덱스는 1부터 시작합니다. 하부 라이브러리에서 "
":c:func:`!history_get`\\을 호출합니다."

#: ../../library/readline.rst:171
msgid ""
"Remove history item specified by its position from the history. The "
"position is zero-based.  This calls :c:func:`!remove_history` in the "
"underlying library."
msgstr ""
"히스토리에서 위치(pos)로 지정된 히스토리 항목을 제거합니다. 위치는 0부터 시작합니다. 하부 라이브러리에서 "
":c:func:`!remove_history`\\를 호출합니다."

#: ../../library/readline.rst:178
msgid ""
"Replace history item specified by its position with *line*. The position "
"is zero-based.  This calls :c:func:`!replace_history_entry` in the "
"underlying library."
msgstr ""
"위치(pos)로 지정된 히스토리 항목을 *line*\\으로 교체합니다. 위치는 0부터 시작합니다. 하부 라이브러리에서 "
":c:func:`!replace_history_entry`\\를 호출합니다."

#: ../../library/readline.rst:185
msgid ""
"Append *line* to the history buffer, as if it was the last line typed. "
"This calls :c:func:`!add_history` in the underlying library."
msgstr ""
"마지막 줄이 입력된 것처럼 히스토리 버퍼에 *line*\\을 추가합니다. 하부 라이브러리에서 "
":c:func:`!add_history`\\를 호출합니다."

#: ../../library/readline.rst:191
msgid ""
"Enable or disable automatic calls to :c:func:`!add_history` when reading "
"input via readline.  The *enabled* argument should be a Boolean value "
"that when true, enables auto history, and that when false, disables auto "
"history."
msgstr ""
"readline을 통해 입력을 읽을 때 :c:func:`!add_history`\\에 대한 자동 호출을 활성화 또는 비활성화합니다."
" *enabled* 인자는 참일 때 자동 히스토리를 활성화하고, 거짓일 때 자동 기록을 비활성화하는 불리언 값이어야 합니다."

#: ../../library/readline.rst:199
msgid ""
"Auto history is enabled by default, and changes to this do not persist "
"across multiple sessions."
msgstr ""

#: ../../library/readline.rst:204
msgid "Startup hooks"
msgstr "시동 훅"

#: ../../library/readline.rst:209
msgid ""
"Set or remove the function invoked by the :c:data:`!rl_startup_hook` "
"callback of the underlying library.  If *function* is specified, it will "
"be used as the new hook function; if omitted or ``None``, any function "
"already installed is removed.  The hook is called with no arguments just "
"before readline prints the first prompt."
msgstr ""
"하부 라이브러리의 :c:data:`!rl_startup_hook` 콜백에 의해 호출되는 함수를 설정하거나 제거합니다. "
"*function*\\이 지정되면 새 훅(hook) 함수로 사용됩니다; 생략되거나 ``None``\\이면, 이미 설치된 함수가 "
"제거됩니다. 이 훅은 readline이 첫 번째 프롬프트를 인쇄하기 직전에 인자 없이 호출됩니다."

#: ../../library/readline.rst:218
msgid ""
"Set or remove the function invoked by the :c:data:`!rl_pre_input_hook` "
"callback of the underlying library.  If *function* is specified, it will "
"be used as the new hook function; if omitted or ``None``, any function "
"already installed is removed.  The hook is called with no arguments after"
" the first prompt has been printed and just before readline starts "
"reading input characters.  This function only exists if Python was "
"compiled for a version of the library that supports it."
msgstr ""
"하부 라이브러리의 :c:data:`!rl_pre_input_hook` 콜백에 의해 호출되는 함수를 설정하거나 제거합니다. "
"*function*\\이 지정되면, 새 훅 함수로 사용됩니다; 생략되거나 ``None``\\이면, 이미 설치된 함수가 제거됩니다. "
"이 훅은 첫 번째 프롬프트가 인쇄된 후 readline이 입력 문자를 읽기 시작하기 직전에 인자 없이 호출됩니다. 이 함수는 "
"파이썬이 이를 지원하는 라이브러리 버전으로 컴파일된 경우에만 존재합니다."

#: ../../library/readline.rst:230
msgid "Completion"
msgstr "완성"

#: ../../library/readline.rst:232
msgid ""
"The following functions relate to implementing a custom word completion "
"function.  This is typically operated by the Tab key, and can suggest and"
" automatically complete a word being typed.  By default, Readline is set "
"up to be used by :mod:`rlcompleter` to complete Python identifiers for "
"the interactive interpreter.  If the :mod:`readline` module is to be used"
" with a custom completer, a different set of word delimiters should be "
"set."
msgstr ""
"다음 함수는 사용자 정의 단어 완성 기능 구현과 관련이 있습니다. 이것은 일반적으로 Tab 키로 작동하며, 입력되는 단어를 제안하고"
" 자동으로 완성할 수 있습니다. 기본적으로, Readline은 대화식 인터프리터를 위해 파이썬 식별자를 완성하는 "
":mod:`rlcompleter`\\에서 사용하도록 설정되어 있습니다. :mod:`readline` 모듈을 사용자 정의 완성기와 "
"함께 사용하려면, 다른 단어 구분자 집합을 설정해야 합니다."

#: ../../library/readline.rst:242
msgid ""
"Set or remove the completer function.  If *function* is specified, it "
"will be used as the new completer function; if omitted or ``None``, any "
"completer function already installed is removed.  The completer function "
"is called as ``function(text, state)``, for *state* in ``0``, ``1``, "
"``2``, ..., until it returns a non-string value.  It should return the "
"next possible completion starting with *text*."
msgstr ""
"완성 함수를 설정하거나 제거합니다. *function*\\이 지정되면 새 완성 함수로 사용됩니다; 생략하거나 "
"``None``\\이면, 이미 설치된 완성 함수가 제거됩니다. 완성 함수는 문자열이 아닌 값을 반환할 때까지 ``0``, "
"``1``, ``2`` 등의 *state*\\에 대해 ``function(text, state)``\\로 호출됩니다. "
"*text*\\로 시작하는 다음으로 가능한 완성을 반환해야 합니다."

#: ../../library/readline.rst:249
msgid ""
"The installed completer function is invoked by the *entry_func* callback "
"passed to :c:func:`!rl_completion_matches` in the underlying library. The"
" *text* string comes from the first parameter to the "
":c:data:`!rl_attempted_completion_function` callback of the underlying "
"library."
msgstr ""
"설치된 완성 함수는 하부 라이브러리의 :c:func:`!rl_completion_matches`\\로 전달된 *entry_func*"
" 콜백에 의해 호출됩니다. *text* 문자열은 하부 라이브러리의 "
":c:data:`!rl_attempted_completion_function` 콜백의 첫 번째 매개 변수로부터 옵니다."

#: ../../library/readline.rst:258
msgid ""
"Get the completer function, or ``None`` if no completer function has been"
" set."
msgstr "완성 함수나, 완성 함수가 설정되지 않았으면 ``None``\\을 얻습니다."

#: ../../library/readline.rst:263
msgid ""
"Get the type of completion being attempted.  This returns the "
":c:data:`!rl_completion_type` variable in the underlying library as an "
"integer."
msgstr "시도 중인 완성 유형을 가져옵니다. 하부 라이브러리의 :c:data:`!rl_completion_type` 변수를 정수로 반환합니다."

#: ../../library/readline.rst:271
msgid ""
"Get the beginning or ending index of the completion scope. These indexes "
"are the *start* and *end* arguments passed to the "
":c:data:`!rl_attempted_completion_function` callback of the underlying "
"library.  The values may be different in the same input editing scenario "
"based on the underlying C readline implementation. Ex: libedit is known "
"to behave differently than libreadline."
msgstr ""
"완성 범위(completion scope)의 시작이나 끝 인덱스를 가져옵니다. 이 인덱스는 하부 라이브러리의 "
":c:data:`!rl_attempted_completion_function` 콜백에 전달된 *start*\\와 *end* "
"인자입니다. 같은 입력 편집 시나리오에서 하부 C readline 구현에 따라 값이 다를 수 있습니다. 예: libedit는 "
"libreadline과 다르게 동작하는 것으로 알려져 있습니다."

#: ../../library/readline.rst:282
msgid ""
"Set or get the word delimiters for completion.  These determine the start"
" of the word to be considered for completion (the completion scope). "
"These functions access the :c:data:`!rl_completer_word_break_characters` "
"variable in the underlying library."
msgstr ""
"완성을 위한 단어 구분자를 설정하거나 가져옵니다. 이것들은 완성을 위해 고려할 단어의 시작(완성 범위)을 결정합니다. 이 함수는 "
"하부 라이브러리의 :c:data:`!rl_completer_word_break_characters` 변수를 액세스합니다."

#: ../../library/readline.rst:290
msgid ""
"Set or remove the completion display function.  If *function* is "
"specified, it will be used as the new completion display function; if "
"omitted or ``None``, any completion display function already installed is"
" removed.  This sets or clears the "
":c:data:`!rl_completion_display_matches_hook` callback in the underlying "
"library.  The completion display function is called as "
"``function(substitution, [matches], longest_match_length)`` once each "
"time matches need to be displayed."
msgstr ""
"완성 표시 함수를 설정하거나 제거합니다. *function*\\이 지정되면, 새로운 완성 표시 함수로 사용됩니다; 생략하거나 "
"``None``\\이면, 이미 설치된 완성 표시 함수가 제거됩니다. 하부 라이브러리에서 "
":c:data:`!rl_completion_display_matches_hook` 콜백을 설정하거나 지웁니다. 완성 표시 함수는 "
"일치를 표시해야 할 때마다 한 번 ``function(substitution, [matches], "
"longest_match_length)``\\로 호출됩니다."

#: ../../library/readline.rst:303
msgid "Example"
msgstr "예제"

#: ../../library/readline.rst:305
msgid ""
"The following example demonstrates how to use the :mod:`readline` "
"module's history reading and writing functions to automatically load and "
"save a history file named :file:`.python_history` from the user's home "
"directory.  The code below would normally be executed automatically "
"during interactive sessions from the user's :envvar:`PYTHONSTARTUP` file."
" ::"
msgstr ""
"다음 예는 :mod:`readline` 모듈의 히스토리 읽기와 쓰기 함수를 사용하여 사용자의 홈 디렉터리에서 "
":file:`.python_history`\\라는 이름의 히스토리 파일을 자동으로 로드하고 저장하는 방법을 보여줍니다. 아래 코드는"
" 일반적으로 사용자의 :envvar:`PYTHONSTARTUP` 파일에서 대화식 세션 중에 자동으로 실행됩니다. ::"

#: ../../library/readline.rst:311
msgid ""
"import atexit\n"
"import os\n"
"import readline\n"
"\n"
"histfile = os.path.join(os.path.expanduser(\"~\"), \".python_history\")\n"
"try:\n"
"    readline.read_history_file(histfile)\n"
"    # default history len is -1 (infinite), which may grow unruly\n"
"    readline.set_history_length(1000)\n"
"except FileNotFoundError:\n"
"    pass\n"
"\n"
"atexit.register(readline.write_history_file, histfile)"
msgstr ""
"import atexit\n"
"import os\n"
"import readline\n"
"\n"
"histfile = os.path.join(os.path.expanduser(\"~\"), \".python_history\")\n"
"try:\n"
"    readline.read_history_file(histfile)\n"
"    # 기본 히스토리 길이는 -1(무한)이며, 제약 없이 커질 수 있습니다\n"
"    readline.set_history_length(1000)\n"
"except FileNotFoundError:\n"
"    pass\n"
"\n"
"atexit.register(readline.write_history_file, histfile)"

#: ../../library/readline.rst:325
msgid ""
"This code is actually automatically run when Python is run in "
":ref:`interactive mode <tut-interactive>` (see :ref:`rlcompleter-"
"config`)."
msgstr ""
"이 코드는 실제로 파이썬이 :ref:`대화형 모드 <tut-interactive>`\\로 실행될 때 자동으로 실행됩니다 (:ref"
":`rlcompleter-config`\\을 참조하십시오)."

#: ../../library/readline.rst:328
msgid ""
"The following example achieves the same goal but supports concurrent "
"interactive sessions, by only appending the new history. ::"
msgstr "다음 예는 같은 목표를 달성하지만 새 히스토리를 덧붙이기만 해서 동시적인(concurrent) 대화형 세션을 지원합니다. ::"

#: ../../library/readline.rst:331
msgid ""
"import atexit\n"
"import os\n"
"import readline\n"
"histfile = os.path.join(os.path.expanduser(\"~\"), \".python_history\")\n"
"\n"
"try:\n"
"    readline.read_history_file(histfile)\n"
"    h_len = readline.get_current_history_length()\n"
"except FileNotFoundError:\n"
"    open(histfile, 'wb').close()\n"
"    h_len = 0\n"
"\n"
"def save(prev_h_len, histfile):\n"
"    new_h_len = readline.get_current_history_length()\n"
"    readline.set_history_length(1000)\n"
"    readline.append_history_file(new_h_len - prev_h_len, histfile)\n"
"atexit.register(save, h_len, histfile)"
msgstr ""
"import atexit\n"
"import os\n"
"import readline\n"
"histfile = os.path.join(os.path.expanduser(\"~\"), \".python_history\")\n"
"\n"
"try:\n"
"    readline.read_history_file(histfile)\n"
"    h_len = readline.get_current_history_length()\n"
"except FileNotFoundError:\n"
"    open(histfile, 'wb').close()\n"
"    h_len = 0\n"
"\n"
"def save(prev_h_len, histfile):\n"
"    new_h_len = readline.get_current_history_length()\n"
"    readline.set_history_length(1000)\n"
"    readline.append_history_file(new_h_len - prev_h_len, histfile)\n"
"atexit.register(save, h_len, histfile)"

#: ../../library/readline.rst:349
msgid ""
"The following example extends the :class:`code.InteractiveConsole` class "
"to support history save/restore. ::"
msgstr "다음 예는 히스토리 저장/복원을 지원하도록 :class:`code.InteractiveConsole` 클래스를 확장합니다. ::"

#: ../../library/readline.rst:352
msgid ""
"import atexit\n"
"import code\n"
"import os\n"
"import readline\n"
"\n"
"class HistoryConsole(code.InteractiveConsole):\n"
"    def __init__(self, locals=None, filename=\"<console>\",\n"
"                 histfile=os.path.expanduser(\"~/.console-history\")):\n"
"        code.InteractiveConsole.__init__(self, locals, filename)\n"
"        self.init_history(histfile)\n"
"\n"
"    def init_history(self, histfile):\n"
"        readline.parse_and_bind(\"tab: complete\")\n"
"        if hasattr(readline, \"read_history_file\"):\n"
"            try:\n"
"                readline.read_history_file(histfile)\n"
"            except FileNotFoundError:\n"
"                pass\n"
"            atexit.register(self.save_history, histfile)\n"
"\n"
"    def save_history(self, histfile):\n"
"        readline.set_history_length(1000)\n"
"        readline.write_history_file(histfile)"
msgstr ""
"import atexit\n"
"import code\n"
"import os\n"
"import readline\n"
"\n"
"class HistoryConsole(code.InteractiveConsole):\n"
"    def __init__(self, locals=None, filename=\"<console>\",\n"
"                 histfile=os.path.expanduser(\"~/.console-history\")):\n"
"        code.InteractiveConsole.__init__(self, locals, filename)\n"
"        self.init_history(histfile)\n"
"\n"
"    def init_history(self, histfile):\n"
"        readline.parse_and_bind(\"tab: complete\")\n"
"        if hasattr(readline, \"read_history_file\"):\n"
"            try:\n"
"                readline.read_history_file(histfile)\n"
"            except FileNotFoundError:\n"
"                pass\n"
"            atexit.register(self.save_history, histfile)\n"
"\n"
"    def save_history(self, histfile):\n"
"        readline.set_history_length(1000)\n"
"        readline.write_history_file(histfile)"

