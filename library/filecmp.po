# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2017, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-04-17 23:44+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: Dong-gweon Oh <flowdas@gmail.com>\n"
"Language-Team: Korean (https://python.flowdas.com)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.17.0\n"

#: ../../library/filecmp.rst:2
msgid ":mod:`!filecmp` --- File and Directory Comparisons"
msgstr ":mod:`!filecmp` --- 파일과 디렉터리 비교"

#: ../../library/filecmp.rst:9
msgid "**Source code:** :source:`Lib/filecmp.py`"
msgstr "**소스 코드:** :source:`Lib/filecmp.py`"

#: ../../library/filecmp.rst:13
msgid ""
"The :mod:`filecmp` module defines functions to compare files and "
"directories, with various optional time/correctness trade-offs. For "
"comparing files, see also the :mod:`difflib` module."
msgstr ""
":mod:`filecmp` 모듈은 다양한 선택적 시간/정확도 절충을 통해 파일과 디렉터리를 비교하는 함수를 정의합니다. 파일 비교에"
" 대해서는, :mod:`difflib` 모듈을 참조하십시오."

#: ../../library/filecmp.rst:17
msgid "The :mod:`filecmp` module defines the following functions:"
msgstr ":mod:`filecmp` 모듈은 다음 함수를 정의합니다:"

#: ../../library/filecmp.rst:22
msgid ""
"Compare the files named *f1* and *f2*, returning ``True`` if they seem "
"equal, ``False`` otherwise."
msgstr ""
"*f1*\\와 *f2*\\로 이름이 지정된 파일을 비교하여, 같아 보이면 ``True``\\를 반환하고, 그렇지 않으면 "
"``False``\\를 반환합니다."

#: ../../library/filecmp.rst:25
msgid ""
"If *shallow* is true and the :func:`os.stat` signatures (file type, size,"
" and modification time) of both files are identical, the files are taken "
"to be equal."
msgstr ""
"*shallow*\\가 참이고 두 파일의 :func:`os.stat` 서명(파일 유형, 크기, 수정 시간)이 동일하면, 파일을 "
"같다고 취급합니다."

#: ../../library/filecmp.rst:29
msgid ""
"Otherwise, the files are treated as different if their sizes or contents "
"differ."
msgstr "그렇지 않으면, 파일의 크기나 내용이 다를 때 다르다고 취급합니다."

#: ../../library/filecmp.rst:31
msgid ""
"Note that no external programs are called from this function, giving it "
"portability and efficiency."
msgstr "이 함수는 외부 프로그램을 호출하지 않으므로 이식성과 효율성을 제공합니다."

#: ../../library/filecmp.rst:34
msgid ""
"This function uses a cache for past comparisons and the results, with "
"cache entries invalidated if the :func:`os.stat` information for the file"
" changes.  The entire cache may be cleared using :func:`clear_cache`."
msgstr ""
"이 함수는 과거 비교와 결과에 대해 캐시를 사용합니다. 파일에 대한 :func:`os.stat` 정보가 변경되면 캐시 항목이 무효화"
" 됩니다. 전체 캐시는 :func:`clear_cache`\\를 사용하여 지울 수 있습니다."

#: ../../library/filecmp.rst:41
msgid ""
"Compare the files in the two directories *dir1* and *dir2* whose names "
"are given by *common*."
msgstr "두 디렉터리 *dir1* 과 *dir2*\\에 있는 이름이 *common*\\으로 지정된 파일들을 비교합니다."

#: ../../library/filecmp.rst:44
msgid ""
"Returns three lists of file names: *match*, *mismatch*, *errors*.  "
"*match* contains the list of files that match, *mismatch* contains the "
"names of those that don't, and *errors* lists the names of files which "
"could not be compared.  Files are listed in *errors* if they don't exist "
"in one of the directories, the user lacks permission to read them or if "
"the comparison could not be done for some other reason."
msgstr ""
"파일 이름의 세 가지 리스트를 반환합니다: *match*, *mismatch*, *errors*. *match*\\는 일치하는 파일"
" 리스트를 포함하고, *mismatch*\\는 일치하지 않는 파일의 이름을 포함하며, *errors*\\는 비교할 수 없는 파일의 "
"이름을 나열합니다. 파일이 디렉터리 중 하나에 없거나, 사용자가 읽을 수 있는 권한이 없거나, 다른 이유로 인해 비교를 수행할 수 "
"없으면 파일은 *errors*\\에 나열됩니다."

#: ../../library/filecmp.rst:51
msgid ""
"The *shallow* parameter has the same meaning and default value as for "
":func:`filecmp.cmp`."
msgstr "*shallow* 매개 변수는 :func:`filecmp.cmp`\\와 같은 의미와 기본값을 가집니다."

#: ../../library/filecmp.rst:54
msgid ""
"For example, ``cmpfiles('a', 'b', ['c', 'd/e'])`` will compare ``a/c`` "
"with ``b/c`` and ``a/d/e`` with ``b/d/e``.  ``'c'`` and ``'d/e'`` will "
"each be in one of the three returned lists."
msgstr ""
"예를 들어, ``cmpfiles('a', 'b', ['c', 'd/e'])``\\는 ``a/c``\\와 ``b/c``, "
"``a/d/e``\\와 ``b/d/e``\\를 비교합니다. ``'c'`` 와 ``'d/e'``\\는 각각 반환된 세 개의 리스트 중"
" 하나에 포함됩니다."

#: ../../library/filecmp.rst:61
msgid ""
"Clear the filecmp cache. This may be useful if a file is compared so "
"quickly after it is modified that it is within the mtime resolution of "
"the underlying filesystem."
msgstr "filecmp 캐시를 지웁니다. 파일이 수정된 후 너무 빨리 비교되어 하부 파일 시스템의 mtime 해상도 내에 있을 때 유용합니다."

#: ../../library/filecmp.rst:71
msgid "The :class:`dircmp` class"
msgstr ":class:`dircmp` 클래스"

#: ../../library/filecmp.rst:75
msgid ""
"Construct a new directory comparison object, to compare the directories "
"*a* and *b*.  *ignore* is a list of names to ignore, and defaults to "
":const:`filecmp.DEFAULT_IGNORES`.  *hide* is a list of names to hide, and"
" defaults to ``[os.curdir, os.pardir]``."
msgstr ""
"*a*\\와 *b* 디렉터리를 비교하기 위한, 새로운 디렉터리 비교 객체를 만듭니다. *ignore*\\는 무시할 이름 리스트며, "
"기본값은 :const:`filecmp.DEFAULT_IGNORES`\\입니다. *hide*\\는 숨길 이름 리스트며 기본값은 "
"``[os.curdir, os.pardir]``\\입니다."

#: ../../library/filecmp.rst:80
msgid ""
"The :class:`dircmp` class compares files by doing *shallow* comparisons "
"as described for :func:`filecmp.cmp` by default using the *shallow* "
"parameter."
msgstr ""
":class:`dircmp` 클래스는 (*shallow* 매개 변수를 지원하지만) 기본적으로는 "
":func:`filecmp.cmp`\\에서 설명하는 *얕은(shallow)* 비교를 통해 파일을 비교합니다."

#: ../../library/filecmp.rst:86
msgid "Added the *shallow* parameter."
msgstr "*shallow* 매개 변수를 추가했습니다."

#: ../../library/filecmp.rst:88
msgid "The :class:`dircmp` class provides the following methods:"
msgstr ":class:`dircmp` 클래스는 다음 메서드를 제공합니다:"

#: ../../library/filecmp.rst:92
msgid "Print (to :data:`sys.stdout`) a comparison between *a* and *b*."
msgstr "*a*\\와 *b* 사이의 비교를 (:data:`sys.stdout`\\로) 인쇄합니다."

#: ../../library/filecmp.rst:96
msgid ""
"Print a comparison between *a* and *b* and common immediate "
"subdirectories."
msgstr "*a*\\와 *b* 및 공통 직접 하위 디렉터리 사이의 비교를 인쇄합니다."

#: ../../library/filecmp.rst:101
msgid ""
"Print a comparison between *a* and *b* and common subdirectories "
"(recursively)."
msgstr "*a*\\와 *b* 및 공통 하위 디렉터리 (재귀적으로) 사이의 비교를 인쇄합니다."

#: ../../library/filecmp.rst:104
msgid ""
"The :class:`dircmp` class offers a number of interesting attributes that "
"may be used to get various bits of information about the directory trees "
"being compared."
msgstr ""
":class:`dircmp` 클래스는 비교되는 디렉터리 트리에 대한 다양한 정보 비트를 얻는 데 사용될 수 있는 여러 가지 흥미로운"
" 어트리뷰트를 제공합니다."

#: ../../library/filecmp.rst:108
msgid ""
"Note that via :meth:`~object.__getattr__` hooks, all attributes are "
"computed lazily, so there is no speed penalty if only those attributes "
"which are lightweight to compute are used."
msgstr ""
":meth:`~object.__getattr__` 훅을 통해, 모든 어트리뷰트가 느긋하게(lazily) 계산되므로, 계산하기가 "
"가벼운 어트리뷰트만 사용하면 속도가 저하되지 않습니다."

#: ../../library/filecmp.rst:115
msgid "The directory *a*."
msgstr "디렉터리 *a*."

#: ../../library/filecmp.rst:120
msgid "The directory *b*."
msgstr "디렉터리 *b*."

#: ../../library/filecmp.rst:125
msgid "Files and subdirectories in *a*, filtered by *hide* and *ignore*."
msgstr "*hide* 와 *ignore*\\로 필터링 된, *a*\\의 파일과 하위 디렉터리."

#: ../../library/filecmp.rst:130
msgid "Files and subdirectories in *b*, filtered by *hide* and *ignore*."
msgstr "*hide* 와 *ignore*\\로 필터링 된, *b*\\의 파일과 하위 디렉터리."

#: ../../library/filecmp.rst:135
msgid "Files and subdirectories in both *a* and *b*."
msgstr "*a* 와 *b*\\의 공통 파일과 하위 디렉터리."

#: ../../library/filecmp.rst:140
msgid "Files and subdirectories only in *a*."
msgstr "*a*\\에만 있는 파일과 하위 디렉터리."

#: ../../library/filecmp.rst:145
msgid "Files and subdirectories only in *b*."
msgstr "*b*\\에만 있는 파일과 하위 디렉터리."

#: ../../library/filecmp.rst:150
msgid "Subdirectories in both *a* and *b*."
msgstr "*a* 및 *b*\\의 공통 하위 디렉터리."

#: ../../library/filecmp.rst:155
msgid "Files in both *a* and *b*."
msgstr "*a* 와 *b*\\의 공통 파일."

#: ../../library/filecmp.rst:160
msgid ""
"Names in both *a* and *b*, such that the type differs between the "
"directories, or names for which :func:`os.stat` reports an error."
msgstr "*a*\\와 *b*\\의 공통 이름으로, 디렉터리 간에 유형이 다르거나, :func:`os.stat`\\가 에러를 보고하는 이름."

#: ../../library/filecmp.rst:166
msgid ""
"Files which are identical in both *a* and *b*, using the class's file "
"comparison operator."
msgstr "*a* 와 *b*\\에 모두 있고, 클래스의 파일 비교 연산자를 사용할 때 같은 파일."

#: ../../library/filecmp.rst:172
msgid ""
"Files which are in both *a* and *b*, whose contents differ according to "
"the class's file comparison operator."
msgstr "*a* 및 *b*\\에 모두 있고, 클래스의 파일 비교 연산자를 사용할 때 내용이 다른 파일."

#: ../../library/filecmp.rst:178
msgid "Files which are in both *a* and *b*, but could not be compared."
msgstr "*a* 및 *b*\\에 모두 있지만, 비교할 수 없는 파일."

#: ../../library/filecmp.rst:183
msgid ""
"A dictionary mapping names in :attr:`common_dirs` to :class:`dircmp` "
"instances (or MyDirCmp instances if this instance is of type MyDirCmp, a "
"subclass of :class:`dircmp`)."
msgstr ""
":attr:`common_dirs`\\의 이름을 :class:`dircmp` 인스턴스로 (또는 이 인스턴스가 "
":class:`dircmp`\\의 서브 클래스인 MyDirCmp 형이면 MyDirCmp 인스턴스로) 매핑하는 딕셔너리."

#: ../../library/filecmp.rst:187
msgid ""
"Previously entries were always :class:`dircmp` instances. Now entries are"
" the same type as *self*, if *self* is a subclass of :class:`dircmp`."
msgstr ""

#: ../../library/filecmp.rst:196
msgid "List of directories ignored by :class:`dircmp` by default."
msgstr ":class:`dircmp`\\에 의해 기본적으로 무시되는 디렉터리 리스트."

#: ../../library/filecmp.rst:199
msgid ""
"Here is a simplified example of using the ``subdirs`` attribute to search"
" recursively through two directories to show common different files::"
msgstr ""
"다음은 이름이 같지만, 내용이 다른 파일을 표시하기 위해, ``subdirs`` 어트리뷰트로 두 개의 디렉터리를 재귀적으로 검색하는"
" 간단한 예제입니다::"

#: ../../library/filecmp.rst:202
#, python-format
msgid ""
">>> from filecmp import dircmp\n"
">>> def print_diff_files(dcmp):\n"
"...     for name in dcmp.diff_files:\n"
"...         print(\"diff_file %s found in %s and %s\" % (name, dcmp.left,"
"\n"
"...               dcmp.right))\n"
"...     for sub_dcmp in dcmp.subdirs.values():\n"
"...         print_diff_files(sub_dcmp)\n"
"...\n"
">>> dcmp = dircmp('dir1', 'dir2')\n"
">>> print_diff_files(dcmp)"
msgstr ""
">>> from filecmp import dircmp\n"
">>> def print_diff_files(dcmp):\n"
"...     for name in dcmp.diff_files:\n"
"...         print(\"diff_file %s found in %s and %s\" % (name, dcmp.left,"
"\n"
"...               dcmp.right))\n"
"...     for sub_dcmp in dcmp.subdirs.values():\n"
"...         print_diff_files(sub_dcmp)\n"
"...\n"
">>> dcmp = dircmp('dir1', 'dir2')\n"
">>> print_diff_files(dcmp)"

