# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2020, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3.9\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-04-17 23:44+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: Dong-gweon Oh <flowdas@gmail.com>\n"
"Language-Team: Korean (https://python.flowdas.com)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.17.0\n"

#: ../../library/devmode.rst:4
msgid "Python Development Mode"
msgstr "파이썬 개발 모드"

#: ../../library/devmode.rst:8
msgid ""
"The Python Development Mode introduces additional runtime checks that are"
" too expensive to be enabled by default. It should not be more verbose "
"than the default if the code is correct; new warnings are only emitted "
"when an issue is detected."
msgstr ""
"파이썬 개발 모드에는 기본적으로 활성화하기에 너무 비싼 추가 실행 시간 검사를 도입합니다. 코드가 올바르면 기본값보다 더 "
"상세하지(verbose) 않아야 합니다; 새로운 경고는 문제가 감지될 때만 발생합니다."

#: ../../library/devmode.rst:13
msgid ""
"It can be enabled using the :option:`-X dev <-X>` command line option or "
"by setting the :envvar:`PYTHONDEVMODE` environment variable to ``1``."
msgstr ""
":option:`-X dev <-X>` 명령 줄 옵션을 사용하거나 :envvar:`PYTHONDEVMODE` 환경 변수를 "
"``1``\\로 설정하여 활성화할 수 있습니다."

#: ../../library/devmode.rst:16
msgid "See also :ref:`Python debug build <debug-build>`."
msgstr ""

#: ../../library/devmode.rst:19
msgid "Effects of the Python Development Mode"
msgstr "파이썬 개발 모드의 효과"

#: ../../library/devmode.rst:21
msgid ""
"Enabling the Python Development Mode is similar to the following command,"
" but with additional effects described below::"
msgstr "파이썬 개발 모드를 활성화하는 것은 다음 명령과 유사하지만, 아래에 설명된 추가 효과가 있습니다::"

#: ../../library/devmode.rst:24
msgid "PYTHONMALLOC=debug PYTHONASYNCIODEBUG=1 python -W default -X faulthandler"
msgstr "PYTHONMALLOC=debug PYTHONASYNCIODEBUG=1 python -W default -X faulthandler"

#: ../../library/devmode.rst:26
msgid "Effects of the Python Development Mode:"
msgstr "파이썬 개발 모드의 효과:"

#: ../../library/devmode.rst:28
msgid ""
"Add ``default`` :ref:`warning filter <describing-warning-filters>`. The "
"following warnings are shown:"
msgstr ""
"``default`` :ref:`경고 필터 <describing-warning-filters>`\\를 추가합니다. 다음과 같은 "
"경고가 표시됩니다:"

#: ../../library/devmode.rst:31
msgid ":exc:`DeprecationWarning`"
msgstr ":exc:`DeprecationWarning`"

#: ../../library/devmode.rst:32
msgid ":exc:`ImportWarning`"
msgstr ":exc:`ImportWarning`"

#: ../../library/devmode.rst:33
msgid ":exc:`PendingDeprecationWarning`"
msgstr ":exc:`PendingDeprecationWarning`"

#: ../../library/devmode.rst:34
msgid ":exc:`ResourceWarning`"
msgstr ":exc:`ResourceWarning`"

#: ../../library/devmode.rst:36
msgid ""
"Normally, the above warnings are filtered by the default :ref:`warning "
"filters <describing-warning-filters>`."
msgstr "일반적으로, 위의 경고는 기본 :ref:`경고 필터 <describing-warning-filters>`\\가 필터링합니다."

#: ../../library/devmode.rst:39
msgid ""
"It behaves as if the :option:`-W default <-W>` command line option is "
"used."
msgstr ":option:`-W default <-W>` 명령 줄 옵션이 사용된 것처럼 작동합니다."

#: ../../library/devmode.rst:41
msgid ""
"Use the :option:`-W error <-W>` command line option or set the "
":envvar:`PYTHONWARNINGS` environment variable to ``error`` to treat "
"warnings as errors."
msgstr ""
"경고를 에러로 처리하려면 :option:`-W error <-W>` 명령 줄 옵션을 사용하거나 "
":envvar:`PYTHONWARNINGS` 환경 변수를 ``error``\\로 설정하십시오."

#: ../../library/devmode.rst:45
msgid "Install debug hooks on memory allocators to check for:"
msgstr "메모리 할당자에 디버그 훅을 설치하여 다음을 확인합니다:"

#: ../../library/devmode.rst:47
msgid "Buffer underflow"
msgstr "버퍼 언더플로"

#: ../../library/devmode.rst:48
msgid "Buffer overflow"
msgstr "버퍼 오버플로"

#: ../../library/devmode.rst:49
msgid "Memory allocator API violation"
msgstr "메모리 할당자 API 위반"

#: ../../library/devmode.rst:50
msgid "Unsafe usage of the GIL"
msgstr "GIL의 안전하지 않은 사용"

#: ../../library/devmode.rst:52
msgid "See the :c:func:`PyMem_SetupDebugHooks` C function."
msgstr ":c:func:`PyMem_SetupDebugHooks` C 함수를 참조하십시오."

#: ../../library/devmode.rst:54
msgid ""
"It behaves as if the :envvar:`PYTHONMALLOC` environment variable is set "
"to ``debug``."
msgstr ":envvar:`PYTHONMALLOC` 환경 변수가 ``debug``\\로 설정된 것처럼 동작합니다."

#: ../../library/devmode.rst:57
msgid ""
"To enable the Python Development Mode without installing debug hooks on "
"memory allocators, set the :envvar:`PYTHONMALLOC` environment variable to"
" ``default``."
msgstr ""
"메모리 할당자에 디버그 훅을 설치하지 않고 파이썬 개발 모드를 사용하려면, :envvar:`PYTHONMALLOC` 환경 변수를 "
"``default``\\로 설정하십시오."

#: ../../library/devmode.rst:61
msgid ""
"Call :func:`faulthandler.enable` at Python startup to install handlers "
"for the :const:`~signal.SIGSEGV`, :const:`~signal.SIGFPE`, "
":const:`~signal.SIGABRT`, :const:`~signal.SIGBUS` and "
":const:`~signal.SIGILL` signals to dump the Python traceback on a crash."
msgstr ""
"파이썬 시작 시 :func:`faulthandler.enable`\\을 호출하여 :const:`~signal.SIGSEGV`, "
":const:`~signal.SIGFPE`, :const:`~signal.SIGABRT`, "
":const:`~signal.SIGBUS` 및 :const:`~signal.SIGILL` 시그널에 대한 처리기를 설치하여 충돌 시 "
"파이썬 트레이스백을 덤프합니다."

#: ../../library/devmode.rst:66
msgid ""
"It behaves as if the :option:`-X faulthandler <-X>` command line option "
"is used or if the :envvar:`PYTHONFAULTHANDLER` environment variable is "
"set to ``1``."
msgstr ""
":option:`-X faulthandler <-X>` 명령 줄 옵션이 사용되거나 "
":envvar:`PYTHONFAULTHANDLER` 환경 변수가 ``1``\\로 설정된 것처럼 작동합니다."

#: ../../library/devmode.rst:70
msgid ""
"Enable :ref:`asyncio debug mode <asyncio-debug-mode>`. For example, "
":mod:`asyncio` checks for coroutines that were not awaited and logs them."
msgstr ""
":ref:`asyncio 디버그 모드 <asyncio-debug-mode>`\\를 활성화합니다. 예를 들어, "
":mod:`asyncio`\\는 어웨이트 하지 않은 코루틴을 확인하고 이를 로그 합니다."

#: ../../library/devmode.rst:73
msgid ""
"It behaves as if the :envvar:`PYTHONASYNCIODEBUG` environment variable is"
" set to ``1``."
msgstr ":envvar:`PYTHONASYNCIODEBUG` 환경 변수가 ``1``\\로 설정된 것처럼 동작합니다."

#: ../../library/devmode.rst:76
msgid ""
"Check the *encoding* and *errors* arguments for string encoding and "
"decoding operations. Examples: :func:`open`, :meth:`str.encode` and "
":meth:`bytes.decode`."
msgstr ""
"문자열 인코딩과 디코딩 연산에 대해 *encoding*\\과 *errors* 인자를 확인합니다. 예: :func:`open`, "
":meth:`str.encode` 및 :meth:`bytes.decode`."

#: ../../library/devmode.rst:80
msgid ""
"By default, for best performance, the *errors* argument is only checked "
"at the first encoding/decoding error and the *encoding* argument is "
"sometimes ignored for empty strings."
msgstr ""
"기본적으로, 최상의 성능을 위해, *errors* 인자는 첫 번째 인코딩/디코딩 에러에서만 검사되며 빈 문자열에 대해서는 "
"*encoding* 인자가 무시되는 경우가 있습니다."

#: ../../library/devmode.rst:84
msgid "The :class:`io.IOBase` destructor logs ``close()`` exceptions."
msgstr ":class:`io.IOBase` 파괴자는 ``close()`` 예외를 로그 합니다."

#: ../../library/devmode.rst:85
msgid ""
"Set the :attr:`~sys.flags.dev_mode` attribute of :data:`sys.flags` to "
"``True``."
msgstr ":data:`sys.flags`\\의 :attr:`~sys.flags.dev_mode` 어트리뷰트를 ``True``\\로 설정합니다."

#: ../../library/devmode.rst:88
msgid ""
"The Python Development Mode does not enable the :mod:`tracemalloc` module"
" by default, because the overhead cost (to performance and memory) would "
"be too large. Enabling the :mod:`tracemalloc` module provides additional "
"information on the origin of some errors. For example, "
":exc:`ResourceWarning` logs the traceback where the resource was "
"allocated, and a buffer overflow error logs the traceback where the "
"memory block was allocated."
msgstr ""
"파이썬 개발 모드는 (성능과 메모리에 대한) 오버헤드 비용이 너무 비싸서, 기본적으로 :mod:`tracemalloc` 모듈을 "
"활성화하지 않습니다. :mod:`tracemalloc` 모듈을 활성화하면 일부 에러의 원인에 대한 추가 정보가 제공됩니다. 예를 "
"들어, :exc:`ResourceWarning`\\은 자원이 할당된 곳의 트레이스백을 로그하고, 버퍼 오버플로 에러는 메모리 블록이"
" 할당된 곳의 트레이스백을 로그 합니다."

#: ../../library/devmode.rst:95
msgid ""
"The Python Development Mode does not prevent the :option:`-O` command "
"line option from removing :keyword:`assert` statements nor from setting "
":const:`__debug__` to ``False``."
msgstr ""
"파이썬 개발 모드는 :option:`-O` 명령 줄 옵션이 :keyword:`assert` 문을 제거하거나 "
":const:`__debug__`\\를 ``False``\\로 설정하는 것을 막지 않습니다."

#: ../../library/devmode.rst:99
msgid ""
"The Python Development Mode can only be enabled at the Python startup. "
"Its value can be read from :data:`sys.flags.dev_mode <sys.flags>`."
msgstr ""

#: ../../library/devmode.rst:102
msgid "The :class:`io.IOBase` destructor now logs ``close()`` exceptions."
msgstr ":class:`io.IOBase` 파괴자는 이제 ``close()`` 예외를 로그 합니다."

#: ../../library/devmode.rst:105
msgid ""
"The *encoding* and *errors* arguments are now checked for string encoding"
" and decoding operations."
msgstr "*encoding*\\과 *errors* 인자는 이제 문자열 인코딩과 디코딩 연산을 검사합니다."

#: ../../library/devmode.rst:111
msgid "ResourceWarning Example"
msgstr "ResourceWarning 예"

#: ../../library/devmode.rst:113
msgid ""
"Example of a script counting the number of lines of the text file "
"specified in the command line::"
msgstr "명령 줄에 지정된 텍스트 파일의 줄 수를 세는 스크립트의 예::"

#: ../../library/devmode.rst:116
msgid ""
"import sys\n"
"\n"
"def main():\n"
"    fp = open(sys.argv[1])\n"
"    nlines = len(fp.readlines())\n"
"    print(nlines)\n"
"    # The file is closed implicitly\n"
"\n"
"if __name__ == \"__main__\":\n"
"    main()"
msgstr ""
"import sys\n"
"\n"
"def main():\n"
"    fp = open(sys.argv[1])\n"
"    nlines = len(fp.readlines())\n"
"    print(nlines)\n"
"    # 파일이 묵시적으로 닫힙니다\n"
"\n"
"if __name__ == \"__main__\":\n"
"    main()"

#: ../../library/devmode.rst:127
msgid ""
"The script does not close the file explicitly. By default, Python does "
"not emit any warning. Example using README.txt, which has 269 lines:"
msgstr ""
"스크립트는 파일을 명시적으로 닫지 않습니다. 기본적으로, 파이썬은 아무런 경고도 하지 않습니다. 269 줄이 있는 "
"README.txt를 사용하는 예:"

#: ../../library/devmode.rst:130
msgid ""
"$ python script.py README.txt\n"
"269"
msgstr ""
"$ python script.py README.txt\n"
"269"

#: ../../library/devmode.rst:135
msgid ""
"Enabling the Python Development Mode displays a :exc:`ResourceWarning` "
"warning:"
msgstr "파이썬 개발 모드를 사용하면 :exc:`ResourceWarning` 경고가 표시됩니다:"

#: ../../library/devmode.rst:137
msgid ""
"$ python -X dev script.py README.txt\n"
"269\n"
"script.py:10: ResourceWarning: unclosed file <_io.TextIOWrapper "
"name='README.rst' mode='r' encoding='UTF-8'>\n"
"  main()\n"
"ResourceWarning: Enable tracemalloc to get the object allocation traceback"
msgstr ""
"$ python -X dev script.py README.txt\n"
"269\n"
"script.py:10: ResourceWarning: unclosed file <_io.TextIOWrapper "
"name='README.rst' mode='r' encoding='UTF-8'>\n"
"  main()\n"
"ResourceWarning: Enable tracemalloc to get the object allocation traceback"

#: ../../library/devmode.rst:145
msgid ""
"In addition, enabling :mod:`tracemalloc` shows the line where the file "
"was opened:"
msgstr "또한, :mod:`tracemalloc`\\을 활성화하면 파일이 열린 줄이 표시됩니다:"

#: ../../library/devmode.rst:148
msgid ""
"$ python -X dev -X tracemalloc=5 script.py README.rst\n"
"269\n"
"script.py:10: ResourceWarning: unclosed file <_io.TextIOWrapper "
"name='README.rst' mode='r' encoding='UTF-8'>\n"
"  main()\n"
"Object allocated at (most recent call last):\n"
"  File \"script.py\", lineno 10\n"
"    main()\n"
"  File \"script.py\", lineno 4\n"
"    fp = open(sys.argv[1])"
msgstr ""
"$ python -X dev -X tracemalloc=5 script.py README.rst\n"
"269\n"
"script.py:10: ResourceWarning: unclosed file <_io.TextIOWrapper "
"name='README.rst' mode='r' encoding='UTF-8'>\n"
"  main()\n"
"Object allocated at (most recent call last):\n"
"  File \"script.py\", lineno 10\n"
"    main()\n"
"  File \"script.py\", lineno 4\n"
"    fp = open(sys.argv[1])"

#: ../../library/devmode.rst:160
msgid "The fix is to close explicitly the file. Example using a context manager::"
msgstr "수선은 파일을 명시적으로 닫는 것입니다. 컨텍스트 관리자를 사용하는 예::"

#: ../../library/devmode.rst:162
msgid ""
"def main():\n"
"    # Close the file explicitly when exiting the with block\n"
"    with open(sys.argv[1]) as fp:\n"
"        nlines = len(fp.readlines())\n"
"    print(nlines)"
msgstr ""
"def main():\n"
"    # 블록에서 빠져나갈 때 파일을 명시적으로 닫습니다\n"
"    with open(sys.argv[1]) as fp:\n"
"        nlines = len(fp.readlines())\n"
"    print(nlines)"

#: ../../library/devmode.rst:168
msgid ""
"Not closing a resource explicitly can leave a resource open for way "
"longer than expected; it can cause severe issues upon exiting Python. It "
"is bad in CPython, but it is even worse in PyPy. Closing resources "
"explicitly makes an application more deterministic and more reliable."
msgstr ""
"자원을 명시적으로 닫지 않으면 예상보다 오래 자원을 열어둘 수 있습니다; 파이썬을 종료할 때 심각한 문제가 발생할 수 있습니다. "
"CPython에서도 나쁘지만, PyPy에서는 더 나쁩니다. 리소스를 명시적으로 닫으면 응용 프로그램을 더 결정적이고 안정적으로 만들"
" 수 있습니다."

#: ../../library/devmode.rst:175
msgid "Bad file descriptor error example"
msgstr "잘못된 파일 기술자 에러 예"

#: ../../library/devmode.rst:177
msgid "Script displaying the first line of itself::"
msgstr "자신의 첫 줄을 표시하는 스크립트::"

#: ../../library/devmode.rst:179
msgid ""
"import os\n"
"\n"
"def main():\n"
"    fp = open(__file__)\n"
"    firstline = fp.readline()\n"
"    print(firstline.rstrip())\n"
"    os.close(fp.fileno())\n"
"    # The file is closed implicitly\n"
"\n"
"main()"
msgstr ""
"import os\n"
"\n"
"def main():\n"
"    fp = open(__file__)\n"
"    firstline = fp.readline()\n"
"    print(firstline.rstrip())\n"
"    os.close(fp.fileno())\n"
"    # 파일이 묵시적으로 닫힙니다\n"
"\n"
"main()"

#: ../../library/devmode.rst:190
msgid "By default, Python does not emit any warning:"
msgstr "기본적으로, 파이썬은 아무런 경고도 하지 않습니다:"

#: ../../library/devmode.rst:192
msgid ""
"$ python script.py\n"
"import os"
msgstr ""
"$ python script.py\n"
"import os"

#: ../../library/devmode.rst:197
msgid ""
"The Python Development Mode shows a :exc:`ResourceWarning` and logs a "
"\"Bad file descriptor\" error when finalizing the file object:"
msgstr ""
"파이썬 개발 모드는 :exc:`ResourceWarning`\\을 표시하고 파일 객체를 파이널라이즈 할 때 \"잘못된 파일 "
"기술자(Bad file descriptor)\" 에러를 로그 합니다:"

#: ../../library/devmode.rst:200
msgid ""
"$ python -X dev script.py\n"
"import os\n"
"script.py:10: ResourceWarning: unclosed file <_io.TextIOWrapper "
"name='script.py' mode='r' encoding='UTF-8'>\n"
"  main()\n"
"ResourceWarning: Enable tracemalloc to get the object allocation "
"traceback\n"
"Exception ignored in: <_io.TextIOWrapper name='script.py' mode='r' "
"encoding='UTF-8'>\n"
"Traceback (most recent call last):\n"
"  File \"script.py\", line 10, in <module>\n"
"    main()\n"
"OSError: [Errno 9] Bad file descriptor"
msgstr ""
"$ python -X dev script.py\n"
"import os\n"
"script.py:10: ResourceWarning: unclosed file <_io.TextIOWrapper "
"name='script.py' mode='r' encoding='UTF-8'>\n"
"  main()\n"
"ResourceWarning: Enable tracemalloc to get the object allocation "
"traceback\n"
"Exception ignored in: <_io.TextIOWrapper name='script.py' mode='r' "
"encoding='UTF-8'>\n"
"Traceback (most recent call last):\n"
"  File \"script.py\", line 10, in <module>\n"
"    main()\n"
"OSError: [Errno 9] Bad file descriptor"

#: ../../library/devmode.rst:213
msgid ""
"``os.close(fp.fileno())`` closes the file descriptor. When the file "
"object finalizer tries to close the file descriptor again, it fails with "
"the ``Bad file descriptor`` error. A file descriptor must be closed only "
"once. In the worst case scenario, closing it twice can lead to a crash "
"(see :issue:`18748` for an example)."
msgstr ""
"``os.close(fp.fileno())``\\는 파일 기술자를 닫습니다. 파일 객체 파이널라이저가 파일 기술자를 다시 닫으려고 "
"하면, ``Bad file descriptor`` 에러로 실패합니다. 파일 기술자는 한 번만 닫아야 합니다. 최악의 시나리오에서는,"
" 두 번 닫을 때 충돌이 발생할 수 있습니다 (예는 :issue:`18748`\\을 참조하십시오)."

#: ../../library/devmode.rst:219
msgid ""
"The fix is to remove the ``os.close(fp.fileno())`` line, or open the file"
" with ``closefd=False``."
msgstr "수선은 ``os.close(fp.fileno())`` 줄을 제거하거나, ``closefd=False``\\로 파일을 여는 것입니다."

