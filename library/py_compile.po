# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2017, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-04-17 23:44+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: Dong-gweon Oh <flowdas@gmail.com>\n"
"Language-Team: Korean (https://python.flowdas.com)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.17.0\n"

#: ../../library/py_compile.rst:2
#, fuzzy
msgid ":mod:`!py_compile` --- Compile Python source files"
msgstr ":mod:`py_compile` --- 파이썬 소스 파일 컴파일"

#: ../../library/py_compile.rst:10
msgid "**Source code:** :source:`Lib/py_compile.py`"
msgstr "**소스 코드:** :source:`Lib/py_compile.py`"

#: ../../library/py_compile.rst:16
msgid ""
"The :mod:`py_compile` module provides a function to generate a byte-code "
"file from a source file, and another function used when the module source"
" file is invoked as a script."
msgstr ""
":mod:`py_compile` 모듈은 소스 파일에서 바이트 코드 파일을 생성하는 함수와 모듈 소스 파일이 스크립트로 호출될 때 "
"사용되는 또 다른 함수를 제공합니다."

#: ../../library/py_compile.rst:20
msgid ""
"Though not often needed, this function can be useful when installing "
"modules for shared use, especially if some of the users may not have "
"permission to write the byte-code cache files in the directory containing"
" the source code."
msgstr ""
"자주 사용되지는 않지만, 특히 일부 사용자가 소스 코드가 들어있는 디렉터리에 바이트 코드 캐시 파일을 쓸 수 있는 권한이 없을 때,"
" 이 함수는 공유 사용을 위해 모듈을 설치할 때 유용할 수 있습니다."

#: ../../library/py_compile.rst:27
msgid ""
"Exception raised when an error occurs while attempting to compile the "
"file."
msgstr "파일을 컴파일하는 도중 에러가 일어날 때 발생하는 예외."

#: ../../library/py_compile.rst:32
#, fuzzy
msgid ""
"Compile a source file to byte-code and write out the byte-code cache "
"file. The source code is loaded from the file named *file*.  The byte-"
"code is written to *cfile*, which defaults to the :pep:`3147`/:pep:`488` "
"path, ending in ``.pyc``. For example, if *file* is ``/foo/bar/baz.py`` "
"*cfile* will default to ``/foo/bar/__pycache__/baz.cpython-32.pyc`` for "
"Python 3.2.  If *dfile* is specified, it is used instead of *file* as the"
" name of the source file from which source lines are obtained for display"
" in exception tracebacks. If *doraise* is true, a :exc:`PyCompileError` "
"is raised when an error is encountered while compiling *file*. If "
"*doraise* is false (the default), an error string is written to "
"``sys.stderr``, but no exception is raised.  This function returns the "
"path to byte-compiled file, i.e. whatever *cfile* value was used."
msgstr ""
"바이트 코드로 소스 파일을 컴파일하고 바이트 코드 캐시 파일을 기록합니다. 소스 코드는 *file*\\이 지정하는 이름의 파일에서 "
"로드됩니다. 바이트 코드는 *cfile*\\에 기록되며, 기본값은 ``.pyc``\\로 끝나는 "
":pep:`3147`/:pep:`488` 경로입니다. 예를 들어, *file*\\이 ``/foo/bar/baz.py``\\이면 "
"*cfile*\\은 파이썬 3.2의 경우 ``/foo/bar/__pycache__/baz.cpython-32.pyc``\\로 기본 "
"설정됩니다. *dfile*\\이 지정되면, *file* 대신 에러 메시지에서 소스 파일 이름으로 사용됩니다. *doraise*\\가"
" 참이면, *file*\\을 컴파일하는 동안 에러를 만나면 :exc:`PyCompileError`\\가 발생합니다. "
"*doraise*\\가 거짓(기본값)이면, ``sys.stderr``\\에 에러 문자열이 기록되지만, 예외는 발생하지 않습니다. 이"
" 함수는 바이트 컴파일된 파일의 경로, 즉 사용된 *cfile* 값을 반환합니다."

#: ../../library/py_compile.rst:46
msgid ""
"The *doraise* and *quiet* arguments determine how errors are handled "
"while compiling file. If *quiet* is 0 or 1, and *doraise* is false, the "
"default behaviour is enabled: an error string is written to "
"``sys.stderr``, and the function returns ``None`` instead of a path. If "
"*doraise* is true, a :exc:`PyCompileError` is raised instead. However if "
"*quiet* is 2, no message is written, and *doraise* has no effect."
msgstr ""
"*doraise*\\와 *quiet* 인자는 파일을 컴파일하는 동안 에러를 처리하는 방법을 결정합니다. *quiet*\\가 0이나 "
"1이고, *doraise*\\가 거짓이면, 기본 동작이 활성화됩니다: 에러 문자열이 ``sys.stderr``\\에 기록되고, "
"함수는 경로 대신 ``None``\\을 반환합니다. *doraise*\\가 참이면, 대신 "
":exc:`PyCompileError`\\가 발생합니다. 그러나 *quiet*\\가 2이면, 아무런 메시지도 기록되지 않고, "
"*doraise*\\는 효과가 없습니다."

#: ../../library/py_compile.rst:53
msgid ""
"If the path that *cfile* becomes (either explicitly specified or "
"computed) is a symlink or non-regular file, :exc:`FileExistsError` will "
"be raised. This is to act as a warning that import will turn those paths "
"into regular files if it is allowed to write byte-compiled files to those"
" paths. This is a side-effect of import using file renaming to place the "
"final byte-compiled file into place to prevent concurrent file writing "
"issues."
msgstr ""
"*cfile*\\이 되는 경로(명시적으로 지정되거나 계산된 경로)가 심볼릭 링크나 비정규 파일이면, "
":exc:`FileExistsError`\\가 발생합니다. 이것은 바이트 컴파일된 파일을 해당 경로에 쓸 수 있을 때 임포트가 해당"
" 경로를 일반 파일로 바꾼다는 경고로 작용합니다. 이는 동시 파일 기록 문제를 방지하기 위해 최종 바이트 컴파일된 파일을 "
"위치시키는데 파일 이름 바꾸기를 사용하는 임포트의 부작용입니다."

#: ../../library/py_compile.rst:60
msgid ""
"*optimize* controls the optimization level and is passed to the built-in "
":func:`compile` function.  The default of ``-1`` selects the optimization"
" level of the current interpreter."
msgstr ""
"*optimize*\\는 최적화 수준을 제어하고 내장 :func:`compile` 함수로 전달됩니다. 기본값 ``-1``\\은 현재"
" 인터프리터의 최적화 수준을 선택합니다."

#: ../../library/py_compile.rst:64
msgid ""
"*invalidation_mode* should be a member of the "
":class:`PycInvalidationMode` enum and controls how the generated bytecode"
" cache is invalidated at runtime.  The default is "
":attr:`PycInvalidationMode.CHECKED_HASH` if the "
":envvar:`SOURCE_DATE_EPOCH` environment variable is set, otherwise the "
"default is :attr:`PycInvalidationMode.TIMESTAMP`."
msgstr ""
"*invalidation_mode*\\는 :class:`PycInvalidationMode` enum의 멤버여야 하며 실행 시간에 "
"생성된 바이트 코드 캐시를 무효로 하는 방법을 제어합니다. :envvar:`SOURCE_DATE_EPOCH` 환경 변수가 설정되면 "
"기본값은 :attr:`PycInvalidationMode.CHECKED_HASH`\\이고, 그렇지 않으면 기본값은 "
":attr:`PycInvalidationMode.TIMESTAMP`\\입니다."

#: ../../library/py_compile.rst:70
msgid ""
"Changed default value of *cfile* to be :PEP:`3147`-compliant.  Previous "
"default was *file* + ``'c'`` (``'o'`` if optimization was enabled). Also "
"added the *optimize* parameter."
msgstr ""
"*cfile*\\의 기본값을 :PEP:`3147`\\과 호환되도록 변경했습니다. 이전 기본값은 *file* + "
"``'c'``\\(최적화가 활성화되었으면 ``'o'``)입니다. 또한 *optimize* 매개 변수가 추가되었습니다."

#: ../../library/py_compile.rst:75
msgid ""
"Changed code to use :mod:`importlib` for the byte-code cache file "
"writing. This means file creation/writing semantics now match what "
":mod:`importlib` does, e.g. permissions, write-and-move semantics, etc. "
"Also added the caveat that :exc:`FileExistsError` is raised if *cfile* is"
" a symlink or non-regular file."
msgstr ""
"바이트 코드 캐시 파일 쓰기에 :mod:`importlib`\\를 사용하도록 코드를 변경했습니다. 이것은 파일 생성/기록 의미가 "
"이제 :mod:`importlib`\\가 하는 것과 일치한다는 것을 의미합니다, 예를 들어 권한, 쓰기-와-이동 의미 등. 또한, "
"*cfile*\\이 심볼릭 링크나 비정규 파일이면 :exc:`FileExistsError`\\가 발생시키는 경고를 추가했습니다."

#: ../../library/py_compile.rst:82
msgid ""
"The *invalidation_mode* parameter was added as specified in :pep:`552`. "
"If the :envvar:`SOURCE_DATE_EPOCH` environment variable is set, "
"*invalidation_mode* will be forced to "
":attr:`PycInvalidationMode.CHECKED_HASH`."
msgstr ""
"*invalidation_mode* 매개 변수가 :pep:`552`\\에 지정된 대로 추가되었습니다. "
":envvar:`SOURCE_DATE_EPOCH` 환경 변수가 설정되면, *invalidation_mode*\\는 "
":attr:`PycInvalidationMode.CHECKED_HASH`\\로 강제 설정됩니다."

#: ../../library/py_compile.rst:88
msgid ""
"The :envvar:`SOURCE_DATE_EPOCH` environment variable no longer overrides "
"the value of the *invalidation_mode* argument, and determines its default"
" value instead."
msgstr ""
":envvar:`SOURCE_DATE_EPOCH` 환경 변수는 더는 *invalidation_mode* 인자의 값을 재정의하지 "
"않으며, 대신 기본값을 결정합니다."

#: ../../library/py_compile.rst:93
msgid "The *quiet* parameter was added."
msgstr "*quiet* 매개 변수가 추가되었습니다."

#: ../../library/py_compile.rst:99
#, fuzzy
msgid ""
"An enumeration of possible methods the interpreter can use to determine "
"whether a bytecode file is up to date with a source file. The ``.pyc`` "
"file indicates the desired invalidation mode in its header. See :ref"
":`pyc-invalidation` for more information on how Python invalidates "
"``.pyc`` files at runtime."
msgstr ""
"인터프리터가 바이트 코드 파일이 소스 파일에 대해 최신 버전인지를 결정하는 데 사용할 수 있는 가능한 방법의 열거형입니다. "
"``.pyc`` 파일은 헤더에서 원하는 무효화 모드를 가리킵니다. 파이썬이 실행 시간에 ``.pyc`` 파일을 무효로 하는 방법에 "
"대한 자세한 내용은 :ref:`pyc-invalidation`\\를 참조하십시오."

#: ../../library/py_compile.rst:109
msgid ""
"The ``.pyc`` file includes the timestamp and size of the source file, "
"which Python will compare against the metadata of the source file at "
"runtime to determine if the ``.pyc`` file needs to be regenerated."
msgstr ""
"``.pyc`` 파일은 파이썬이 실행 시간에 소스 파일의 메타 데이터와 비교하여 ``.pyc`` 파일을 재생성해야 하는지를 결정할 "
"소스 파일의 타임스탬프와 크기를 포함합니다."

#: ../../library/py_compile.rst:115
msgid ""
"The ``.pyc`` file includes a hash of the source file content, which "
"Python will compare against the source at runtime to determine if the "
"``.pyc`` file needs to be regenerated."
msgstr ""
"``.pyc`` 파일은 파이썬이 실행 시간에 소스와 비교하여 ``.pyc`` 파일을 다시 생성해야 하는지를 결정할 소스 파일 내용의"
" 해시를 포함합니다."

#: ../../library/py_compile.rst:121
msgid ""
"Like :attr:`CHECKED_HASH`, the ``.pyc`` file includes a hash of the "
"source file content. However, Python will at runtime assume the ``.pyc`` "
"file is up to date and not validate the ``.pyc`` against the source file "
"at all."
msgstr ""
":attr:`CHECKED_HASH`\\와 마찬가지로, ``.pyc`` 파일에는 소스 파일 내용의 해시가 포함됩니다. 하지만, "
"파이썬은 실행 시간에 ``.pyc`` 파일이 최신 버전이라고 가정하고, 소스 파일에 대해 ``.pyc``\\를 전혀 검증하지 "
"않습니다."

#: ../../library/py_compile.rst:125
msgid ""
"This option is useful when the ``.pycs`` are kept up to date by some "
"system external to Python like a build system."
msgstr "이 옵션은 ``.pycs``\\가 빌드 시스템처럼 파이썬 외부 시스템에 의해 최신 상태로 유지될 때 유용합니다."

#: ../../library/py_compile.rst:131
msgid "Command-Line Interface"
msgstr ""

#: ../../library/py_compile.rst:133
#, fuzzy
msgid ""
"This module can be invoked as a script to compile several source files.  "
"The files named in *filenames* are compiled and the resulting bytecode is"
" cached in the normal manner.  This program does not search a directory "
"structure to locate source files; it only compiles files named "
"explicitly. The exit status is nonzero if one of the files could not be "
"compiled."
msgstr ""
"여러 소스 파일을 컴파일합니다. *args*\\(또는 *args*\\가 ``None``\\이면 명령 줄)로 이름 붙여진 파일이 "
"컴파일되고 결과 바이트 코드가 일반적인 방식으로 캐시 됩니다. 이 함수는 소스 파일을 찾기 위해 디렉터리 구조를 검색하지 않습니다;"
" 명시적으로 이름이 지정된 파일 만 컴파일합니다. ``'-'``\\가 args의 유일한 매개 변수면, 파일 목록을 표준 입력에서 "
"가져옵니다."

#: ../../library/py_compile.rst:145
msgid ""
"Positional arguments are files to compile.  If ``-`` is the only "
"parameter, the list of files is taken from standard input."
msgstr ""

#: ../../library/py_compile.rst:150
msgid "Suppress errors output."
msgstr ""

#: ../../library/py_compile.rst:152
#, fuzzy
msgid "Added support for ``-``."
msgstr "``'-'``\\에 대한 지원이 추가되었습니다."

#: ../../library/py_compile.rst:155
#, fuzzy
msgid "Added support for :option:`-q`."
msgstr "``'-'``\\에 대한 지원이 추가되었습니다."

#: ../../library/py_compile.rst:161
msgid "Module :mod:`compileall`"
msgstr "모듈 :mod:`compileall`"

#: ../../library/py_compile.rst:162
msgid "Utilities to compile all Python source files in a directory tree."
msgstr "디렉터리 트리에 있는 모든 파이썬 소스 파일을 컴파일하는 유틸리티."

#: ../../library/py_compile.rst:12
msgid "file"
msgstr ""

#: ../../library/py_compile.rst:12
msgid "byte-code"
msgstr ""

#~ msgid ""
#~ "When this module is run as a "
#~ "script, the :func:`main` is used to "
#~ "compile all the files named on the"
#~ " command line.  The exit status is"
#~ " nonzero if one of the files "
#~ "could not be compiled."
#~ msgstr ""
#~ "이 모듈을 스크립트로 실행하면, :func:`main`\\이 명령 "
#~ "줄로 이름이 지정된 모든 파일을 컴파일하는 데 "
#~ "사용됩니다. 파일 중 하나를 컴파일할 수 없으면 "
#~ "종료 상태는 0이 아닙니다."

