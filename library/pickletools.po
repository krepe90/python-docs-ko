# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2017, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-04-17 23:44+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: Dong-gweon Oh <flowdas@gmail.com>\n"
"Language-Team: Korean (https://python.flowdas.com)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.17.0\n"

#: ../../library/pickletools.rst:2
msgid ":mod:`!pickletools` --- Tools for pickle developers"
msgstr ":mod:`!pickletools` --- 피클 개발자를 위한 도구"

#: ../../library/pickletools.rst:8
msgid "**Source code:** :source:`Lib/pickletools.py`"
msgstr "**소스 코드:** :source:`Lib/pickletools.py`"

#: ../../library/pickletools.rst:13
msgid ""
"This module contains various constants relating to the intimate details "
"of the :mod:`pickle` module, some lengthy comments about the "
"implementation, and a few useful functions for analyzing pickled data.  "
"The contents of this module are useful for Python core developers who are"
" working on the :mod:`pickle`; ordinary users of the :mod:`pickle` module"
" probably won't find the :mod:`pickletools` module relevant."
msgstr ""
"이 모듈은 :mod:`pickle` 모듈의 깊은 세부 사항과 관련된 다양한 상수, 구현에 대한 긴 주석, 그리고 피클 된 데이터를 "
"분석하기 위한 몇 가지 유용한 함수를 포함합니다. 이 모듈의 내용은 :mod:`pickle`\\에서 작업하는 파이썬 코어 개발자에게"
" 유용합니다; 아마도 :mod:`pickle` 모듈의 일반 사용자는 :mod:`pickletools` 모듈을 적절한 용도를 찾지 "
"못할 것입니다."

#: ../../library/pickletools.rst:23
msgid "Command line usage"
msgstr "명령 줄 사용법"

#: ../../library/pickletools.rst:27
msgid ""
"When invoked from the command line, ``python -m pickletools`` will "
"disassemble the contents of one or more pickle files.  Note that if you "
"want to see the Python object stored in the pickle rather than the "
"details of pickle format, you may want to use ``-m pickle`` instead. "
"However, when the pickle file that you want to examine comes from an "
"untrusted source, ``-m pickletools`` is a safer option because it does "
"not execute pickle bytecode."
msgstr ""
"명령 줄에서 호출될 때, ``python -m pickletools``\\는 하나 이상의 피클 파일의 내용을 역 어셈블합니다. 피클"
" 형식의 세부 사항이 아닌 피클에 저장된 파이썬 객체를 보려면, 대신 ``-m pickle``\\을 사용하는 것이 좋습니다. "
"그러나, 검사하려는 피클 파일이 신뢰할 수 없는 소스에서 왔을 때, 피클 바이트 코드를 실행하지 않으므로 ``-m "
"pickletools``\\가 더 안전한 옵션입니다."

#: ../../library/pickletools.rst:35
msgid "For example, with a tuple ``(1, 2)`` pickled in file ``x.pickle``:"
msgstr "예를 들어, 튜플 ``(1, 2)``\\가 파일 ``x.pickle``\\에 피클 된 경우:"

#: ../../library/pickletools.rst:37
msgid ""
"$ python -m pickle x.pickle\n"
"(1, 2)\n"
"\n"
"$ python -m pickletools x.pickle\n"
"    0: \\x80 PROTO      3\n"
"    2: K    BININT1    1\n"
"    4: K    BININT1    2\n"
"    6: \\x86 TUPLE2\n"
"    7: q    BINPUT     0\n"
"    9: .    STOP\n"
"highest protocol among opcodes = 2"
msgstr ""
"$ python -m pickle x.pickle\n"
"(1, 2)\n"
"\n"
"$ python -m pickletools x.pickle\n"
"    0: \\x80 PROTO      3\n"
"    2: K    BININT1    1\n"
"    4: K    BININT1    2\n"
"    6: \\x86 TUPLE2\n"
"    7: q    BINPUT     0\n"
"    9: .    STOP\n"
"highest protocol among opcodes = 2"

#: ../../library/pickletools.rst:52
msgid "Command line options"
msgstr "명령 줄 옵션"

#: ../../library/pickletools.rst:58
msgid "Annotate each line with a short opcode description."
msgstr "각 줄에 짧은 opcode 설명으로 주석을 답니다."

#: ../../library/pickletools.rst:62
msgid "Name of a file where the output should be written."
msgstr "출력이 기록되어야 하는 파일의 이름."

#: ../../library/pickletools.rst:66
msgid "The number of blanks by which to indent a new MARK level."
msgstr "새 MARK 수준을 들여쓰기하는 공백의 수."

#: ../../library/pickletools.rst:70
msgid ""
"When multiple objects are disassembled, preserve memo between "
"disassemblies."
msgstr "여러 객체가 역 어셈블될 때, 역 어셈블리 간에 메모를 보존합니다."

#: ../../library/pickletools.rst:75
msgid ""
"When more than one pickle file are specified, print given preamble before"
" each disassembly."
msgstr "하나 이상의 피클 파일이 지정될 때, 각 역 어셈블리 전에 주어진 프리앰블을 인쇄합니다."

#: ../../library/pickletools.rst:81
msgid "Programmatic Interface"
msgstr "프로그래밍 인터페이스"

#: ../../library/pickletools.rst:86
msgid ""
"Outputs a symbolic disassembly of the pickle to the file-like object "
"*out*, defaulting to ``sys.stdout``.  *pickle* can be a string or a file-"
"like object.  *memo* can be a Python dictionary that will be used as the "
"pickle's memo; it can be used to perform disassemblies across multiple "
"pickles created by the same pickler. Successive levels, indicated by "
"``MARK`` opcodes in the stream, are indented by *indentlevel* spaces.  If"
" a nonzero value is given to *annotate*, each opcode in the output is "
"annotated with a short description.  The value of *annotate* is used as a"
" hint for the column where annotation should start."
msgstr ""
"피클의 기호적인 역 어셈블리를 기본값이 ``sys.stdout``\\인 파일류 객체 *out*\\으로 출력합니다. "
"*pickle*\\는 문자열이나 파일류 객체가 될 수 있습니다. *memo*\\는 피클의 메모로 사용될 파이썬 딕셔너리일 수 "
"있습니다; 같은 피클러로 만들어진 여러 피클에 걸쳐 역 어셈블리를 수행하는 데 사용할 수 있습니다. 스트림의 ``MARK`` "
"옵코드로 표시된 연속 수준은 *indentlevel*\\개의 스페이스로 들여쓰기 됩니다. 0이 아닌 값이 *annotate*\\에 "
"주어지면, 출력의 각 옵코드에 짧은 설명이 주석으로 표시됩니다. *annotate* 값은 주석을 시작해야 하는 열의 힌트로 "
"사용됩니다."

#: ../../library/pickletools.rst:97
msgid "Added the *annotate* parameter."
msgstr "*annotate* 인자를 추가했습니다."

#: ../../library/pickletools.rst:102
msgid ""
"Provides an :term:`iterator` over all of the opcodes in a pickle, "
"returning a sequence of ``(opcode, arg, pos)`` triples.  *opcode* is an "
"instance of an :class:`OpcodeInfo` class; *arg* is the decoded value, as "
"a Python object, of the opcode's argument; *pos* is the position at which"
" this opcode is located. *pickle* can be a string or a file-like object."
msgstr ""
"피클의 모든 옵코드에 대해 ``(opcode, arg, pos)`` 트리플을 반환하는 :term:`이터레이터 "
"<iterator>`\\를 제공합니다. *opcode*\\는 :class:`OpcodeInfo` 클래스의 인스턴스입니다; "
"*arg*\\는 옵코드 인자의 파이썬 객체로 디코딩된 값입니다; *pos*\\는 이 옵코드의 위치입니다. *pickle*\\은 "
"문자열이나 파일류 객체가 될 수 있습니다."

#: ../../library/pickletools.rst:110
msgid ""
"Returns a new equivalent pickle string after eliminating unused ``PUT`` "
"opcodes. The optimized pickle is shorter, takes less transmission time, "
"requires less storage space, and unpickles more efficiently."
msgstr ""
"사용되지 않는 ``PUT`` 옵코드를 제거한 후 새로운 동등한 피클 문자열을 반환합니다. 최적화된 피클은 더 짧고, 전송 시간이 덜"
" 걸리며, 저장 공간이 덜 필요하고, 역 피클이 더 효율적입니다."

