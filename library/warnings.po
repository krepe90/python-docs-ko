# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2017, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-04-17 23:44+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: Dong-gweon Oh <flowdas@gmail.com>\n"
"Language-Team: Korean (https://python.flowdas.com)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.17.0\n"

#: ../../library/warnings.rst:2
msgid ":mod:`!warnings` --- Warning control"
msgstr ":mod:`!warnings` --- 경고 제어"

#: ../../library/warnings.rst:7
msgid "**Source code:** :source:`Lib/warnings.py`"
msgstr "**소스 코드:** :source:`Lib/warnings.py`"

#: ../../library/warnings.rst:13
msgid ""
"Warning messages are typically issued in situations where it is useful to"
" alert the user of some condition in a program, where that condition "
"(normally) doesn't warrant raising an exception and terminating the "
"program.  For example, one might want to issue a warning when a program "
"uses an obsolete module."
msgstr ""
"경고 메시지는 일반적으로 프로그램에서 사용자에게 (일반적으로) 예외를 발생시키거나 프로그램을 종료하는 것을 보증하지 않는 특정 "
"조건에 대해 경고하는 것이 유용한 상황 상황에서 발행됩니다. 예를 들어, 프로그램이 더는 사용되지 않는 모듈을 사용할 때 경고를 "
"발행하려고 할 수 있습니다."

#: ../../library/warnings.rst:18
msgid ""
"Python programmers issue warnings by calling the :func:`warn` function "
"defined in this module.  (C programmers use :c:func:`PyErr_WarnEx`; see "
":ref:`exceptionhandling` for details)."
msgstr ""
"파이썬 프로그래머는 이 모듈에 정의된 :func:`warn` 함수를 호출하여 경고를 발행합니다. (C 프로그래머는 "
":c:func:`PyErr_WarnEx`\\를 사용합니다; 자세한 내용은 :ref:`exceptionhandling`\\를 "
"참조하십시오)."

#: ../../library/warnings.rst:22
msgid ""
"Warning messages are normally written to :data:`sys.stderr`, but their "
"disposition can be changed flexibly, from ignoring all warnings to "
"turning them into exceptions.  The disposition of warnings can vary based"
" on the :ref:`warning category <warning-categories>`, the text of the "
"warning message, and the source location where it is issued.  Repetitions"
" of a particular warning for the same source location are typically "
"suppressed."
msgstr ""
"경고 메시지는 일반적으로 :data:`sys.stderr`\\에 기록되지만, 모든 경고를 무시하는 것에서 예외로 변경하는 것에 "
"이르기까지 배치를 유연하게 변경할 수 있습니다. 경고의 처리는 :ref:`경고 범주 <warning-categories>`, 경고 "
"메시지의 텍스트 및 발행된 소스 위치에 따라 달라질 수 있습니다. 같은 소스 위치에 대한 특정 경고의 반복은 일반적으로 억제됩니다."

#: ../../library/warnings.rst:29
msgid ""
"There are two stages in warning control: first, each time a warning is "
"issued, a determination is made whether a message should be issued or "
"not; next, if a message is to be issued, it is formatted and printed "
"using a user-settable hook."
msgstr ""
"경고 제어에는 두 가지 단계가 있습니다; 첫째, 경고가 발행될 때마다, 메시지를 발행할지를 결정합니다; 다음으로, 메시지가 "
"발행된다면, 사용자 설정 가능한 훅을 사용하여 포맷되고 인쇄됩니다."

#: ../../library/warnings.rst:33
msgid ""
"The determination whether to issue a warning message is controlled by the"
" :ref:`warning filter <warning-filter>`, which is a sequence of matching "
"rules and actions. Rules can be added to the filter by calling "
":func:`filterwarnings` and reset to its default state by calling "
":func:`resetwarnings`."
msgstr ""
"경고 메시지를 발행할지는 :ref:`경고 필터 <warning-filter>`\\에 의해 제어되며, 이는 일치 규칙과 조치의 "
"시퀀스입니다. :func:`filterwarnings`\\를 호출하여 규칙을 필터에 추가하고 "
":func:`resetwarnings`\\를 호출하여 기본 상태로 재설정할 수 있습니다."

#: ../../library/warnings.rst:38
msgid ""
"The printing of warning messages is done by calling :func:`showwarning`, "
"which may be overridden; the default implementation of this function "
"formats the message by calling :func:`formatwarning`, which is also "
"available for use by custom implementations."
msgstr ""
"경고 메시지의 인쇄는 :func:`showwarning`\\을 호출하여 수행되며, 이는 재정의될 수 있습니다; 이 함수의 기본 "
"구현은 :func:`formatwarning`\\을 호출하여 메시지를 포맷하며, 사용자 정의 구현에서도 사용할 수 있습니다."

#: ../../library/warnings.rst:44
msgid ""
":func:`logging.captureWarnings` allows you to handle all warnings with "
"the standard logging infrastructure."
msgstr ":func:`logging.captureWarnings`\\를 사용하면 표준 로깅 인프라로 모든 경고를 처리할 수 있습니다."

#: ../../library/warnings.rst:51
msgid "Warning Categories"
msgstr "경고 범주"

#: ../../library/warnings.rst:53
msgid ""
"There are a number of built-in exceptions that represent warning "
"categories. This categorization is useful to be able to filter out groups"
" of warnings."
msgstr "경고 범주를 나타내는 여러 가지 내장 예외가 있습니다. 이 범주화는 경고 그룹을 필터링하는 데 유용합니다."

#: ../../library/warnings.rst:56
msgid ""
"While these are technically :ref:`built-in exceptions <warning-"
"categories-as-exceptions>`, they are documented here, because "
"conceptually they belong to the warnings mechanism."
msgstr ""
"이들은 기술적으로 :ref:`내장 예외 <warning-categories-as-exceptions>`\\이지만, 개념적으로 경고 "
"메커니즘에 속하기 때문에 여기에서 설명합니다."

#: ../../library/warnings.rst:60
msgid ""
"User code can define additional warning categories by subclassing one of "
"the standard warning categories.  A warning category must always be a "
"subclass of the :exc:`Warning` class."
msgstr ""
"사용자 코드는 표준 경고 범주 중 하나를 서브 클래싱 하여 추가 경고 범주를 정의할 수 있습니다. 경고 범주는 항상 "
":exc:`Warning` 클래스의 서브 클래스여야 합니다."

#: ../../library/warnings.rst:64
msgid "The following warnings category classes are currently defined:"
msgstr "다음과 같은 경고 범주 클래스가 현재 정의되어 있습니다:"

#: ../../library/warnings.rst:69
msgid "Class"
msgstr "클래스"

#: ../../library/warnings.rst:69
msgid "Description"
msgstr "설명"

#: ../../library/warnings.rst:71
msgid ":exc:`Warning`"
msgstr ":exc:`Warning`"

#: ../../library/warnings.rst:71
msgid ""
"This is the base class of all warning category classes.  It is a subclass"
" of :exc:`Exception`."
msgstr "이것은 모든 경고 범주 클래스의 베이스 클래스입니다. :exc:`Exception`\\의 서브 클래스입니다."

#: ../../library/warnings.rst:75
msgid ":exc:`UserWarning`"
msgstr ":exc:`UserWarning`"

#: ../../library/warnings.rst:75
msgid "The default category for :func:`warn`."
msgstr ":func:`warn`\\의 기본 범주."

#: ../../library/warnings.rst:77
msgid ":exc:`DeprecationWarning`"
msgstr ":exc:`DeprecationWarning`"

#: ../../library/warnings.rst:77
msgid ""
"Base category for warnings about deprecated features when those warnings "
"are intended for other Python developers (ignored by default, unless "
"triggered by code in ``__main__``)."
msgstr ""
"폐지된 기능에 대한 경고의 베이스 범주, 경고가 다른 파이썬 개발자를 대상으로 할 때 (``__main__``\\에 있는 코드로 "
"트리거 되지 않는 한 기본적으로 무시됩니다)."

#: ../../library/warnings.rst:82
msgid ":exc:`SyntaxWarning`"
msgstr ":exc:`SyntaxWarning`"

#: ../../library/warnings.rst:82
msgid "Base category for warnings about dubious syntactic features."
msgstr "모호한 구문 기능에 대한 경고의 베이스 범주."

#: ../../library/warnings.rst:85
msgid ":exc:`RuntimeWarning`"
msgstr ":exc:`RuntimeWarning`"

#: ../../library/warnings.rst:85
msgid "Base category for warnings about dubious runtime features."
msgstr "모호한 런타임 기능에 대한 경고의 베이스 범주."

#: ../../library/warnings.rst:88
msgid ":exc:`FutureWarning`"
msgstr ":exc:`FutureWarning`"

#: ../../library/warnings.rst:88
msgid ""
"Base category for warnings about deprecated features when those warnings "
"are intended for end users of applications that are written in Python."
msgstr "폐지된 기능에 대한 경고의 베이스 범주, 경고가 파이썬으로 작성된 응용 프로그램의 최종 사용자를 대상으로 할 때."

#: ../../library/warnings.rst:93
msgid ":exc:`PendingDeprecationWarning`"
msgstr ":exc:`PendingDeprecationWarning`"

#: ../../library/warnings.rst:93
msgid ""
"Base category for warnings about features that will be deprecated in the "
"future (ignored by default)."
msgstr "향후 폐지될 기능에 대한 경고의 베이스 범주 (기본적으로 무시됩니다)."

#: ../../library/warnings.rst:97
msgid ":exc:`ImportWarning`"
msgstr ":exc:`ImportWarning`"

#: ../../library/warnings.rst:97
msgid ""
"Base category for warnings triggered during the process of importing a "
"module (ignored by default)."
msgstr "모듈을 임포트 하는 과정에서 트리거 되는 경고의 베이스 범주 (기본적으로 무시됩니다)."

#: ../../library/warnings.rst:101
msgid ":exc:`UnicodeWarning`"
msgstr ":exc:`UnicodeWarning`"

#: ../../library/warnings.rst:101
msgid "Base category for warnings related to Unicode."
msgstr "유니코드와 관련된 경고의 베이스 범주."

#: ../../library/warnings.rst:104
msgid ":exc:`BytesWarning`"
msgstr ":exc:`BytesWarning`"

#: ../../library/warnings.rst:104
msgid ""
"Base category for warnings related to :class:`bytes` and "
":class:`bytearray`."
msgstr ":class:`bytes`\\와 :class:`bytearray`\\와 관련된 경고의 베이스 범주."

#: ../../library/warnings.rst:107
msgid ":exc:`ResourceWarning`"
msgstr ":exc:`ResourceWarning`"

#: ../../library/warnings.rst:107
msgid "Base category for warnings related to resource usage (ignored by default)."
msgstr "자원 사용과 관련된 경고의 베이스 범주 (기본적으로 무시됩니다)."

#: ../../library/warnings.rst:111
msgid ""
"Previously :exc:`DeprecationWarning` and :exc:`FutureWarning` were "
"distinguished based on whether a feature was being removed entirely or "
"changing its behaviour. They are now distinguished based on their "
"intended audience and the way they're handled by the default warnings "
"filters."
msgstr ""
"이전에는 :exc:`DeprecationWarning`\\과 :exc:`FutureWarning`\\은 기능이 완전히 제거되었는지 "
"또는 동작을 변경하는지에 따라 구별되었습니다. 이제 의도한 대상과 기본 경고 필터에서 처리하는 방식에 따라 구별됩니다."

#: ../../library/warnings.rst:122
msgid "The Warnings Filter"
msgstr "경고 필터"

#: ../../library/warnings.rst:124
msgid ""
"The warnings filter controls whether warnings are ignored, displayed, or "
"turned into errors (raising an exception)."
msgstr "경고 필터는 경고를 무시, 표시 또는 에러로 전환(예외 발생)할지를 제어합니다."

#: ../../library/warnings.rst:127
msgid ""
"Conceptually, the warnings filter maintains an ordered list of filter "
"specifications; any specific warning is matched against each filter "
"specification in the list in turn until a match is found; the filter "
"determines the disposition of the match.  Each entry is a tuple of the "
"form (*action*, *message*, *category*, *module*, *lineno*), where:"
msgstr ""
"개념적으로, 경고 필터는 필터 명세의 순서 있는 목록을 유지합니다; 일치가 발견될 때까지 목록의 각 필터 명세에 대해 특정 경고를 "
"일치시킵니다; 필터는 일치의 처리를 결정합니다. 각 항목은 (*action*, *message*, *category*, "
"*module*, *lineno*) 형식의 튜플입니다, 여기서:"

#: ../../library/warnings.rst:133
msgid "*action* is one of the following strings:"
msgstr "*action*\\은 다음 문자열 중 하나입니다:"

#: ../../library/warnings.rst:136
msgid "Value"
msgstr "값"

#: ../../library/warnings.rst:136
msgid "Disposition"
msgstr "처리"

#: ../../library/warnings.rst:138
msgid "``\"default\"``"
msgstr "``\"default\"``"

#: ../../library/warnings.rst:138
msgid ""
"print the first occurrence of matching warnings for each location (module"
" + line number) where the warning is issued"
msgstr "경고가 발행된 각 위치(모듈 + 줄 번호)에 대해 일치하는 경고의 첫 번째 발생을 인쇄합니다"

#: ../../library/warnings.rst:142
msgid "``\"error\"``"
msgstr "``\"error\"``"

#: ../../library/warnings.rst:142
msgid "turn matching warnings into exceptions"
msgstr "일치하는 경고를 예외로 바꿉니다"

#: ../../library/warnings.rst:144
msgid "``\"ignore\"``"
msgstr "``\"ignore\"``"

#: ../../library/warnings.rst:144
msgid "never print matching warnings"
msgstr "일치하는 경고를 인쇄하지 않습니다"

#: ../../library/warnings.rst:146
msgid "``\"always\"``"
msgstr "``\"always\"``"

#: ../../library/warnings.rst:146
msgid "always print matching warnings"
msgstr "일치하는 경고를 항상 인쇄합니다"

#: ../../library/warnings.rst:148
msgid "``\"module\"``"
msgstr "``\"module\"``"

#: ../../library/warnings.rst:148
msgid ""
"print the first occurrence of matching warnings for each module where the"
" warning is issued (regardless of line number)"
msgstr "경고가 발행된 모듈마다 (줄 번호와 관계없이) 일치하는 경고의 첫 번째 발생을 인쇄합니다"

#: ../../library/warnings.rst:152
msgid "``\"once\"``"
msgstr "``\"once\"``"

#: ../../library/warnings.rst:152
msgid ""
"print only the first occurrence of matching warnings, regardless of "
"location"
msgstr "위치와 관계없이 일치하는 경고의 첫 번째 발생만 인쇄합니다"

#: ../../library/warnings.rst:156
msgid ""
"*message* is a string containing a regular expression that the start of "
"the warning message must match, case-insensitively.  In :option:`-W` and "
":envvar:`PYTHONWARNINGS`, *message* is a literal string that the start of"
" the warning message must contain (case-insensitively), ignoring any "
"whitespace at the start or end of *message*."
msgstr ""
"*message*\\는 경고 메시지의 시작 부분이 대소문자를 구분 없이 일치해야 하는 정규식을 포함하는 문자열입니다. "
":option:`-W`\\와 :envvar:`PYTHONWARNINGS`\\에서, *message*\\는 경고 메시지의 시작 부분에"
" (대소문자 구분 없이) 포함되어야 하는 리터럴 문자열로, *message*\\의 시작이나 끝에 있는 공백은 무시합니다."

#: ../../library/warnings.rst:162
msgid ""
"*category* is a class (a subclass of :exc:`Warning`) of which the warning"
" category must be a subclass in order to match."
msgstr ""
"*category*\\는 클래스(:exc:`Warning`\\의 서브 클래스)이며, 일치하는 경고 범주는 이것의 서브 클래스여야 "
"합니다."

#: ../../library/warnings.rst:165
msgid ""
"*module* is a string containing a regular expression that the start of "
"the fully qualified module name must match, case-sensitively.  In "
":option:`-W` and :envvar:`PYTHONWARNINGS`, *module* is a literal string "
"that the fully qualified module name must be equal to (case-sensitively),"
" ignoring any whitespace at the start or end of *module*."
msgstr ""
"*module*\\은 완전히 정규화된 모듈 이름의 시작 부분이 대소문자를 구분하여 일치해야 하는 정규식을 포함하는 문자열입니다. "
":option:`-W`\\와 :envvar:`PYTHONWARNINGS`\\에서, *module*\\은 완전히 정규화된 모듈 이름과"
" (대소문자 구분하여) 같아야 하는 리터럴 문자열로, *module*\\의 시작이나 끝에 있는 공백은 무시합니다."

#: ../../library/warnings.rst:171
msgid ""
"*lineno* is an integer that the line number where the warning occurred "
"must match, or ``0`` to match all line numbers."
msgstr "*lineno*\\는 경고가 발생한 줄 번호가 일치해야 하는 정수이거나, 모든 줄 번호와 일치하려면 ``0``\\입니다."

#: ../../library/warnings.rst:174
msgid ""
"Since the :exc:`Warning` class is derived from the built-in "
":exc:`Exception` class, to turn a warning into an error we simply raise "
"``category(message)``."
msgstr ""
":exc:`Warning` 클래스는 내장 :exc:`Exception` 클래스에서 파생되므로, 경고를 에러로 바꾸려면 단순히 "
"``category(message)``\\를 raise 합니다."

#: ../../library/warnings.rst:177
msgid ""
"If a warning is reported and doesn't match any registered filter then the"
" \"default\" action is applied (hence its name)."
msgstr "경고가 보고되고 등록된 필터와 일치하지 않으면 \"default\" 조치가 적용됩니다 (그래서 그런 이름을 갖고 있습니다)."

#: ../../library/warnings.rst:185
msgid "Repeated Warning Suppression Criteria"
msgstr ""

#: ../../library/warnings.rst:187
msgid ""
"The filters that suppress repeated warnings apply the following criteria "
"to determine if a warning is considered a repeat:"
msgstr ""

#: ../../library/warnings.rst:189
msgid ""
"``\"default\"``: A warning is considered a repeat only if the (*message*,"
" *category*, *module*, *lineno*) are all the same."
msgstr ""

#: ../../library/warnings.rst:190
msgid ""
"``\"module\"``: A warning is considered a repeat if the (*message*, "
"*category*, *module*) are the same, ignoring the line number."
msgstr ""

#: ../../library/warnings.rst:191
msgid ""
"``\"once\"``: A warning is considered a repeat if the (*message*, "
"*category*) are the same, ignoring the module and line number."
msgstr ""

#: ../../library/warnings.rst:197
msgid "Describing Warning Filters"
msgstr "경고 필터 설명"

#: ../../library/warnings.rst:199
msgid ""
"The warnings filter is initialized by :option:`-W` options passed to the "
"Python interpreter command line and the :envvar:`PYTHONWARNINGS` "
"environment variable. The interpreter saves the arguments for all "
"supplied entries without interpretation in :data:`sys.warnoptions`; the "
":mod:`warnings` module parses these when it is first imported (invalid "
"options are ignored, after printing a message to :data:`sys.stderr`)."
msgstr ""
"경고 필터는 파이썬 인터프리터 명령 줄로 전달된 :option:`-W` 옵션과 :envvar:`PYTHONWARNINGS` 환경 "
"변수로 초기화됩니다. 인터프리터는 :data:`sys.warnoptions`\\에서 제공된 모든 항목에 대한 인자를 해석하지 않고 "
"저장합니다; :mod:`warnings` 모듈은 처음 임포트 될 때 이를 구문 분석합니다 (유효하지 않은 옵션은 메시지를 "
":data:`sys.stderr`\\에 인쇄한 후 무시됩니다)."

#: ../../library/warnings.rst:206
msgid ""
"Individual warnings filters are specified as a sequence of fields "
"separated by colons::"
msgstr "개별 경고 필터는 콜론으로 구분된 필드의 시퀀스로 지정됩니다::"

#: ../../library/warnings.rst:209
msgid "action:message:category:module:line"
msgstr "action:message:category:module:line"

#: ../../library/warnings.rst:211
msgid ""
"The meaning of each of these fields is as described in :ref:`warning-"
"filter`. When listing multiple filters on a single line (as for "
":envvar:`PYTHONWARNINGS`), the individual filters are separated by commas"
" and the filters listed later take precedence over those listed before "
"them (as they're applied left-to-right, and the most recently applied "
"filters take precedence over earlier ones)."
msgstr ""
"이러한 각 필드의 의미는 :ref:`warning-filter`\\에 설명된 대로입니다. 한 줄에 여러 필터를 나열할 때 "
"(:envvar:`PYTHONWARNINGS`\\와 같이), 개별 필터는 쉼표로 구분되고 나중에 나열된 필터가 그 앞에 나열된 "
"필터보다 우선합니다 (왼쪽에서 오른쪽으로 적용되고, 가장 최근에 적용된 필터가 앞서 나온 필터에 우선하기 때문입니다)."

#: ../../library/warnings.rst:218
msgid ""
"Commonly used warning filters apply to either all warnings, warnings in a"
" particular category, or warnings raised by particular modules or "
"packages. Some examples::"
msgstr ""
"일반적으로 사용되는 경고 필터는 모든 경고, 특정 범주의 경고 또는 특정 모듈이나 패키지에서 발생하는 경고에 적용됩니다. 몇 가지 "
"예::"

#: ../../library/warnings.rst:222
msgid ""
"default                      # Show all warnings (even those ignored by "
"default)\n"
"ignore                       # Ignore all warnings\n"
"error                        # Convert all warnings to errors\n"
"error::ResourceWarning       # Treat ResourceWarning messages as errors\n"
"default::DeprecationWarning  # Show DeprecationWarning messages\n"
"ignore,default:::mymodule    # Only report warnings triggered by "
"\"mymodule\"\n"
"error:::mymodule             # Convert warnings to errors in \"mymodule\""
msgstr ""
"default                      # 모든 경고를 표시합니다 (설사 기본적으로 무시되더라도)\n"
"ignore                       # 모든 경고를 무시합니다\n"
"error                        # 모든 경고를 에러로 변환합니다\n"
"error::ResourceWarning       # ResourceWarning 메시지를 에러로 취급합니다\n"
"default::DeprecationWarning  # DeprecationWarning 메시지를 표시합니다\n"
"ignore,default:::mymodule    # \"mymodule\"이 트리거 한 경고만 보고합니다\n"
"error:::mymodule             # \"mymodule\"에서 경고를 에러로 변환합니다"

#: ../../library/warnings.rst:234
msgid "Default Warning Filter"
msgstr "기본 경고 필터"

#: ../../library/warnings.rst:236
msgid ""
"By default, Python installs several warning filters, which can be "
"overridden by the :option:`-W` command-line option, the "
":envvar:`PYTHONWARNINGS` environment variable and calls to "
":func:`filterwarnings`."
msgstr ""
"기본적으로, 파이썬은 :option:`-W` 명령 줄 옵션, :envvar:`PYTHONWARNINGS` 환경 변수 및 "
":func:`filterwarnings` 호출로 재정의할 수 있는 몇 가지 경고 필터를 설치합니다."

#: ../../library/warnings.rst:240
msgid ""
"In regular release builds, the default warning filter has the following "
"entries (in order of precedence)::"
msgstr "정규 릴리스 빌드에서, 기본 경고 필터에는 다음과 같은 항목이 있습니다 (우선순위 순서로)::"

#: ../../library/warnings.rst:243
msgid ""
"default::DeprecationWarning:__main__\n"
"ignore::DeprecationWarning\n"
"ignore::PendingDeprecationWarning\n"
"ignore::ImportWarning\n"
"ignore::ResourceWarning"
msgstr ""
"default::DeprecationWarning:__main__\n"
"ignore::DeprecationWarning\n"
"ignore::PendingDeprecationWarning\n"
"ignore::ImportWarning\n"
"ignore::ResourceWarning"

#: ../../library/warnings.rst:249
msgid ""
"In a :ref:`debug build <debug-build>`, the list of default warning "
"filters is empty."
msgstr ":ref:`디버그 빌드 <debug-build>`\\에서, 기본 경고 필터 목록은 비어 있습니다."

#: ../../library/warnings.rst:251
msgid ""
":exc:`DeprecationWarning` is now ignored by default in addition to "
":exc:`PendingDeprecationWarning`."
msgstr ""
":exc:`DeprecationWarning`\\은 이제 :exc:`PendingDeprecationWarning` 에 더해 "
"기본적으로 무시됩니다."

#: ../../library/warnings.rst:255
msgid ""
":exc:`DeprecationWarning` is once again shown by default when triggered "
"directly by code in ``__main__``."
msgstr ""
":exc:`DeprecationWarning`\\은 ``__main__``\\의 코드에 의해 직접 트리거 될 때 기본적으로 다시 "
"한번 표시됩니다."

#: ../../library/warnings.rst:259
msgid ""
":exc:`BytesWarning` no longer appears in the default filter list and is "
"instead configured via :data:`sys.warnoptions` when :option:`-b` is "
"specified twice."
msgstr ""
":exc:`BytesWarning`\\은 더는 기본 필터 목록에 나타나지 않으며 대신 :option:`-b`\\가 두 번 지정되면 "
":data:`sys.warnoptions`\\를 통해 구성됩니다."

#: ../../library/warnings.rst:268
msgid "Overriding the default filter"
msgstr "기본 필터 재정의"

#: ../../library/warnings.rst:270
msgid ""
"Developers of applications written in Python may wish to hide *all* "
"Python level warnings from their users by default, and only display them "
"when running tests or otherwise working on the application. The "
":data:`sys.warnoptions` attribute used to pass filter configurations to "
"the interpreter can be used as a marker to indicate whether or not "
"warnings should be disabled::"
msgstr ""
"파이썬으로 작성된 응용 프로그램 개발자는 기본적으로 사용자에게 *모든* 파이썬 수준 경고를 숨기고, 테스트를 실행하거나 달리 응용 "
"프로그램에 대해 작업할 때만 표시하고 싶을 수 있습니다. 필터 구성을 인터프리터에 전달하는 데 사용되는 "
":data:`sys.warnoptions` 어트리뷰트는 경고를 비활성화해야 하는지를 나타내는 마커로 사용할 수 있습니다::"

#: ../../library/warnings.rst:276
msgid ""
"import sys\n"
"\n"
"if not sys.warnoptions:\n"
"    import warnings\n"
"    warnings.simplefilter(\"ignore\")"
msgstr ""
"import sys\n"
"\n"
"if not sys.warnoptions:\n"
"    import warnings\n"
"    warnings.simplefilter(\"ignore\")"

#: ../../library/warnings.rst:282
msgid ""
"Developers of test runners for Python code are advised to instead ensure "
"that *all* warnings are displayed by default for the code under test, "
"using code like::"
msgstr ""
"파이썬 코드용 테스트 실행기 개발자는 대신 다음과 같은 코드를 사용하여 테스트 대상 코드에 대해 기본적으로 *모든* 경고가 "
"표시되도록 하는 것이 좋습니다::"

#: ../../library/warnings.rst:286
msgid ""
"import sys\n"
"\n"
"if not sys.warnoptions:\n"
"    import os, warnings\n"
"    warnings.simplefilter(\"default\") # Change the filter in this "
"process\n"
"    os.environ[\"PYTHONWARNINGS\"] = \"default\" # Also affect "
"subprocesses"
msgstr ""
"import sys\n"
"\n"
"if not sys.warnoptions:\n"
"    import os, warnings\n"
"    warnings.simplefilter(\"default\") # 이 프로세스의 필터를 변경합니다\n"
"    os.environ[\"PYTHONWARNINGS\"] = \"default\" # 서브 프로세스에도 영향을 줍니다"

#: ../../library/warnings.rst:293
msgid ""
"Finally, developers of interactive shells that run user code in a "
"namespace other than ``__main__`` are advised to ensure that "
":exc:`DeprecationWarning` messages are made visible by default, using "
"code like the following (where ``user_ns`` is the module used to execute "
"code entered interactively)::"
msgstr ""
"마지막으로, ``__main__`` 이외의 이름 공간에서 사용자 코드를 실행하는 대화식 셸 개발자는 다음과 같은 코드를 사용하여 "
":exc:`DeprecationWarning` 메시지가 기본적으로 표시되도록 하는 것이 좋습니다 (여기서 ``user_ns``\\는"
" 대화식으로 입력된 코드를 실행하는 데 사용되는 모듈입니다)::"

#: ../../library/warnings.rst:298
msgid ""
"import warnings\n"
"warnings.filterwarnings(\"default\", category=DeprecationWarning,\n"
"                                   module=user_ns.get(\"__name__\"))"
msgstr ""
"import warnings\n"
"warnings.filterwarnings(\"default\", category=DeprecationWarning,\n"
"                                   module=user_ns.get(\"__name__\"))"

#: ../../library/warnings.rst:306
msgid "Temporarily Suppressing Warnings"
msgstr "일시적인 경고 억제"

#: ../../library/warnings.rst:308
msgid ""
"If you are using code that you know will raise a warning, such as a "
"deprecated function, but do not want to see the warning (even when "
"warnings have been explicitly configured via the command line), then it "
"is possible to suppress the warning using the :class:`catch_warnings` "
"context manager::"
msgstr ""
"폐지된 함수처럼, 경고를 발생시킬 것을 알고 있는 코드를 사용하고 있지만, 경고를 보고 싶지 않으면 (명령 줄을 통해 경고가 "
"명시적으로 구성된 경우조차), :class:`catch_warnings` 컨텍스트 관리자를 사용하여 경고를 억제할 수 있습니다::"

#: ../../library/warnings.rst:313
msgid ""
"import warnings\n"
"\n"
"def fxn():\n"
"    warnings.warn(\"deprecated\", DeprecationWarning)\n"
"\n"
"with warnings.catch_warnings():\n"
"    warnings.simplefilter(\"ignore\")\n"
"    fxn()"
msgstr ""
"import warnings\n"
"\n"
"def fxn():\n"
"    warnings.warn(\"deprecated\", DeprecationWarning)\n"
"\n"
"with warnings.catch_warnings():\n"
"    warnings.simplefilter(\"ignore\")\n"
"    fxn()"

#: ../../library/warnings.rst:322
msgid ""
"While within the context manager all warnings will simply be ignored. "
"This allows you to use known-deprecated code without having to see the "
"warning while not suppressing the warning for other code that might not "
"be aware of its use of deprecated code.  Note: this can only be "
"guaranteed in a single-threaded application. If two or more threads use "
"the :class:`catch_warnings` context manager at the same time, the "
"behavior is undefined."
msgstr ""
"컨텍스트 관리자 내에서 모든 경고는 무시됩니다. 이를 통해 폐지된 코드 사용을 인식하지 못하는 다른 코드에 대한 경고를 억제하지 "
"않으면서도 경고를 보는 일 없이 알려진 폐지된 코드를 사용할 수 있습니다. 참고: 이것은 단일 스레드 응용 프로그램에서만 보장될 수"
" 있습니다. 둘 이상의 스레드가 :class:`catch_warnings` 컨텍스트 관리자를 동시에 사용하면, 동작이 정의되지 "
"않습니다."

#: ../../library/warnings.rst:334
msgid "Testing Warnings"
msgstr "경고 테스트"

#: ../../library/warnings.rst:336
msgid ""
"To test warnings raised by code, use the :class:`catch_warnings` context "
"manager. With it you can temporarily mutate the warnings filter to "
"facilitate your testing. For instance, do the following to capture all "
"raised warnings to check::"
msgstr ""
"코드가 발생시키는 경고를 테스트하려면, :class:`catch_warnings` 컨텍스트 관리자를 사용하십시오. 이를 통해 쉽게 "
"테스트할 수 있도록 경고 필터를 일시적으로 변경할 수 있습니다. 예를 들어, 검사할 모든 경고를 캡처하려면 다음을 수행하십시오::"

#: ../../library/warnings.rst:341
msgid ""
"import warnings\n"
"\n"
"def fxn():\n"
"    warnings.warn(\"deprecated\", DeprecationWarning)\n"
"\n"
"with warnings.catch_warnings(record=True) as w:\n"
"    # Cause all warnings to always be triggered.\n"
"    warnings.simplefilter(\"always\")\n"
"    # Trigger a warning.\n"
"    fxn()\n"
"    # Verify some things\n"
"    assert len(w) == 1\n"
"    assert issubclass(w[-1].category, DeprecationWarning)\n"
"    assert \"deprecated\" in str(w[-1].message)"
msgstr ""
"import warnings\n"
"\n"
"def fxn():\n"
"    warnings.warn(\"deprecated\", DeprecationWarning)\n"
"\n"
"with warnings.catch_warnings(record=True) as w:\n"
"    # Cause all warnings to always be triggered.\n"
"    warnings.simplefilter(\"always\")\n"
"    # Trigger a warning.\n"
"    fxn()\n"
"    # Verify some things\n"
"    assert len(w) == 1\n"
"    assert issubclass(w[-1].category, DeprecationWarning)\n"
"    assert \"deprecated\" in str(w[-1].message)"

#: ../../library/warnings.rst:356
msgid ""
"One can also cause all warnings to be exceptions by using ``error`` "
"instead of ``always``. One thing to be aware of is that if a warning has "
"already been raised because of a ``once``/``default`` rule, then no "
"matter what filters are set the warning will not be seen again unless the"
" warnings registry related to the warning has been cleared."
msgstr ""
"``always`` 대신 ``error``\\를 사용하여 모든 경고를 예외로 만들 수도 있습니다. 한 가지 알아야 할 것은 "
"``once`` / ``default`` 규칙으로 인해 경고가 이미 발생했으면, 어떤 필터가 설정되어 있더라도 경고와 관련된 경고 "
"레지스트리가 지워지지 않으면 경고가 다시 표시되지 않는다는 것입니다."

#: ../../library/warnings.rst:362
msgid ""
"Once the context manager exits, the warnings filter is restored to its "
"state when the context was entered. This prevents tests from changing the"
" warnings filter in unexpected ways between tests and leading to "
"indeterminate test results. The :func:`showwarning` function in the "
"module is also restored to its original value.  Note: this can only be "
"guaranteed in a single-threaded application. If two or more threads use "
"the :class:`catch_warnings` context manager at the same time, the "
"behavior is undefined."
msgstr ""
"일단 컨텍스트 관리자가 종료되면, 경고 필터가 컨텍스트에 진입했을 때의 상태로 복원됩니다. 이것은 테스트 간에 경고 필터가 예기치 "
"않은 방식으로 변경되어 테스트 결과가 불확실해지는 것을 방지합니다. 모듈의 :func:`showwarning` 함수도 원래 값으로 "
"복원됩니다. 참고: 이것은 단일 스레드 응용 프로그램에서만 보장될 수 있습니다. 둘 이상의 스레드가 "
":class:`catch_warnings` 컨텍스트 관리자를 동시에 사용하면, 동작이 정의되지 않습니다."

#: ../../library/warnings.rst:370
msgid ""
"When testing multiple operations that raise the same kind of warning, it "
"is important to test them in a manner that confirms each operation is "
"raising a new warning (e.g. set warnings to be raised as exceptions and "
"check the operations raise exceptions, check that the length of the "
"warning list continues to increase after each operation, or else delete "
"the previous entries from the warnings list before each new operation)."
msgstr ""
"같은 종류의 경고를 발생시키는 여러 작업을 테스트할 때, 각 작업이 새로운 경고를 발생시키는지 확인하는 방식으로 테스트하는 것이 "
"중요합니다 (예를 들어 경고가 예외를 발생시키도록 설정하고 작업이 예외를 일으키는지 확인합니다, 각 작업 후에 경고 목록의 길이가 "
"계속 증가하는지 확인합니다, 또는 각 새 작업 전에 경고 목록에서 이전 항목을 삭제합니다)."

#: ../../library/warnings.rst:381
msgid "Updating Code For New Versions of Dependencies"
msgstr "새 버전의 종속성에 대한 코드 갱신"

#: ../../library/warnings.rst:383
msgid ""
"Warning categories that are primarily of interest to Python developers "
"(rather than end users of applications written in Python) are ignored by "
"default."
msgstr "(파이썬으로 작성된 응용 프로그램의 최종 사용자가 아닌) 파이썬 개발자가 주로 관심을 두는 경고 범주는 기본적으로 무시됩니다."

#: ../../library/warnings.rst:386
msgid ""
"Notably, this \"ignored by default\" list includes "
":exc:`DeprecationWarning` (for every module except ``__main__``), which "
"means developers should make sure to test their code with typically "
"ignored warnings made visible in order to receive timely notifications of"
" future breaking API changes (whether in the standard library or third "
"party packages)."
msgstr ""
"특히, 이 \"기본적으로 무시됨\" 목록에는 :exc:`DeprecationWarning`\\(``__main__``\\을 제외한 "
"모든 모듈에서)가 포함되어 있습니다. 이는 개발자가 (표준 라이브러리와 제삼자 패키지 모두에서) 호환성을 깨는 향후 API 변경에 "
"대한 시기적절한 알림을 받기 위해 일반적으로 무시되는 경고를 가시화해서 코드를 테스트해야 한다는 것을 의미합니다."

#: ../../library/warnings.rst:392
msgid ""
"In the ideal case, the code will have a suitable test suite, and the test"
" runner will take care of implicitly enabling all warnings when running "
"tests (the test runner provided by the :mod:`unittest` module does this)."
msgstr ""
"이상적인 경우, 코드에 적절한 테스트 스위트가 있고, 테스트 실행기는 테스트를 실행할 때 모든 경고를 묵시적으로 활성화합니다 "
"(:mod:`unittest` 모듈에서 제공하는 테스트 실행기가 이렇게 합니다)."

#: ../../library/warnings.rst:396
msgid ""
"In less ideal cases, applications can be checked for use of deprecated "
"interfaces by passing :option:`-Wd <-W>` to the Python interpreter (this "
"is shorthand for :option:`!-W default`) or setting "
"``PYTHONWARNINGS=default`` in the environment. This enables default "
"handling for all warnings, including those that are ignored by default. "
"To change what action is taken for encountered warnings you can change "
"what argument is passed to :option:`-W` (e.g. :option:`!-W error`). See "
"the :option:`-W` flag for more details on what is possible."
msgstr ""
"덜 이상적인 경우, :option:`-Wd <-W>` 를 파이썬 인터프리터에 전달하거나 (:option:`!-W "
"default`\\의 줄임 표현입니다), 환경에 ``PYTHONWARNINGS=default``\\를 설정하여 응용프로그램이 폐지된"
" 인터페이스를 사용하는지를 확인할 수 있습니다. 이를 통해 기본적으로 무시되는 경고를 포함한 모든 경고에 대한 default 처리가"
" 가능합니다. 발생한 경고에 대해 수행할 조치를 변경하려면 :option:`-W`\\로 전달되는 인자를 변경할 수 있습니다 (예를 "
"들어 :option:`!-W error`). 어떤 것이 가능한지에 대한 자세한 내용은 :option:`-W` 플래그를 참조하십시오."

#: ../../library/warnings.rst:409
msgid "Available Functions"
msgstr "사용 가능한 함수"

#: ../../library/warnings.rst:414
msgid ""
"Issue a warning, or maybe ignore it or raise an exception.  The "
"*category* argument, if given, must be a :ref:`warning category class "
"<warning-categories>`; it defaults to :exc:`UserWarning`.  Alternatively,"
" *message* can be a :exc:`Warning` instance, in which case *category* "
"will be ignored and ``message.__class__`` will be used. In this case, the"
" message text will be ``str(message)``. This function raises an exception"
" if the particular warning issued is changed into an error by the "
":ref:`warnings filter <warning-filter>`.  The *stacklevel* argument can "
"be used by wrapper functions written in Python, like this::"
msgstr ""
"경고를 발행하거나, 무시하거나 예외를 발생시킵니다. 주어지면 *category* 인자는 :ref:`경고 범주 클래스 "
"<warning-categories>`\\여야 합니다; 기본값은 :exc:`UserWarning`\\입니다. 또는, "
"*message*\\가 :exc:`Warning` 인스턴스일 수 있으며, 이 경우 *category*\\는 무시되고 "
"``message.__class__``\\가 사용됩니다. 이 경우, 메시지 텍스트는 ``str(message)``\\입니다. 이 "
"함수는 발행된 특정 경고가 :ref:`경고 필터 <warning-filter>`\\에 의해 에러로 변경되면 예외를 발생시킵니다. "
"*stacklevel* 인자는 다음과 같이 파이썬으로 작성된 래퍼 함수에서 사용할 수 있습니다::"

#: ../../library/warnings.rst:423
msgid ""
"def deprecated_api(message):\n"
"    warnings.warn(message, DeprecationWarning, stacklevel=2)"
msgstr ""
"def deprecated_api(message):\n"
"    warnings.warn(message, DeprecationWarning, stacklevel=2)"

#: ../../library/warnings.rst:426
msgid ""
"This makes the warning refer to ``deprecated_api``'s caller, rather than "
"to the source of ``deprecated_api`` itself (since the latter would defeat"
" the purpose of the warning message)."
msgstr ""
"이것은 경고가 ``deprecated_api`` 자체의 소스가 아닌 ``deprecated_api``\\의 호출자를 참조하게 합니다"
" (전자는 경고 메시지의 목적을 무효로 하기 때문입니다)."

#: ../../library/warnings.rst:430
msgid ""
"The *skip_file_prefixes* keyword argument can be used to indicate which "
"stack frames are ignored when counting stack levels. This can be useful "
"when you want the warning to always appear at call sites outside of a "
"package when a constant *stacklevel* does not fit all call paths or is "
"otherwise challenging to maintain. If supplied, it must be a tuple of "
"strings. When prefixes are supplied, stacklevel is implicitly overridden "
"to be ``max(2, stacklevel)``. To cause a warning to be attributed to the "
"caller from outside of the current package you might write::"
msgstr ""

#: ../../library/warnings.rst:439
msgid ""
"# example/lower.py\n"
"_warn_skips = (os.path.dirname(__file__),)\n"
"\n"
"def one_way(r_luxury_yacht=None, t_wobbler_mangrove=None):\n"
"    if r_luxury_yacht:\n"
"        warnings.warn(\"Please migrate to t_wobbler_mangrove=.\",\n"
"                      skip_file_prefixes=_warn_skips)\n"
"\n"
"# example/higher.py\n"
"from . import lower\n"
"\n"
"def another_way(**kw):\n"
"    lower.one_way(**kw)"
msgstr ""
"# example/lower.py\n"
"_warn_skips = (os.path.dirname(__file__),)\n"
"\n"
"def one_way(r_luxury_yacht=None, t_wobbler_mangrove=None):\n"
"    if r_luxury_yacht:\n"
"        warnings.warn(\"Please migrate to t_wobbler_mangrove=.\",\n"
"                      skip_file_prefixes=_warn_skips)\n"
"\n"
"# example/higher.py\n"
"from . import lower\n"
"\n"
"def another_way(**kw):\n"
"    lower.one_way(**kw)"

#: ../../library/warnings.rst:453
msgid ""
"This makes the warning refer to both the ``example.lower.one_way()`` and "
"``package.higher.another_way()`` call sites only from calling code living"
" outside of ``example`` package."
msgstr ""

#: ../../library/warnings.rst:457 ../../library/warnings.rst:483
msgid ""
"*source*, if supplied, is the destroyed object which emitted a "
":exc:`ResourceWarning`."
msgstr "제공되면, *source*\\는 :exc:`ResourceWarning`\\을 방출한 파괴된 객체입니다."

#: ../../library/warnings.rst:460
msgid "Added *source* parameter."
msgstr "*source* 매개 변수를 추가했습니다."

#: ../../library/warnings.rst:463
msgid "Added *skip_file_prefixes*."
msgstr ""

#: ../../library/warnings.rst:469
msgid ""
"This is a low-level interface to the functionality of :func:`warn`, "
"passing in explicitly the message, category, filename and line number, "
"and optionally the module name and the registry (which should be the "
"``__warningregistry__`` dictionary of the module).  The module name "
"defaults to the filename with ``.py`` stripped; if no registry is passed,"
" the warning is never suppressed. *message* must be a string and "
"*category* a subclass of :exc:`Warning` or *message* may be a "
":exc:`Warning` instance, in which case *category* will be ignored."
msgstr ""
"이것은 :func:`warn`\\의 기능에 대한 저수준 인터페이스로서, 메시지, 범주, 파일명 및 줄 번호, 그리고 선택적으로 모듈"
" 이름과 레지스트리(모듈의 ``__warningregistry__`` 딕셔너리이어야 합니다)를 명시적으로 전달합니다. 모듈 이름의 "
"기본값은 ``.py``\\가 제거된 파일명입니다; 레지스트리가 전달되지 않으면, 경고는 억제되지 않습니다. *message*\\는 "
"문자열이고 *category*\\는 :exc:`Warning`\\의 서브 클래스여야 하고, 또는 *message*\\가 "
":exc:`Warning` 인스턴스일 수 있는데, 이 경우 *category*\\는 무시됩니다."

#: ../../library/warnings.rst:478
msgid ""
"*module_globals*, if supplied, should be the global namespace in use by "
"the code for which the warning is issued.  (This argument is used to "
"support displaying source for modules found in zipfiles or other non-"
"filesystem import sources)."
msgstr ""
"제공되면, *module_globals*\\는 경고가 발행되는 코드에서 사용 중인 전역 이름 공간이어야 합니다. (이 인자는 zip"
" 파일이나 다른 파일 시스템이 아닌 임포트 소스에서 찾은 모듈의 소스 표시를 지원하는 데 사용됩니다)."

#: ../../library/warnings.rst:486
msgid "Add the *source* parameter."
msgstr "*source* 매개 변수를 추가합니다."

#: ../../library/warnings.rst:492
msgid ""
"Write a warning to a file.  The default implementation calls "
"``formatwarning(message, category, filename, lineno, line)`` and writes "
"the resulting string to *file*, which defaults to :data:`sys.stderr`.  "
"You may replace this function with any callable by assigning to "
"``warnings.showwarning``. *line* is a line of source code to be included "
"in the warning message; if *line* is not supplied, :func:`showwarning` "
"will try to read the line specified by *filename* and *lineno*."
msgstr ""
"파일에 경고를 기록합니다. 기본 구현은 ``formatwarning(message, category, filename, "
"lineno, line)``\\를 호출하고 결과 문자열을 *file*\\에 씁니다, *file*\\의 기본값은 "
":data:`sys.stderr`\\입니다. ``warnings.showwarning``\\에 대입하여 이 함수를 임의의 콜러블로 "
"대체할 수 있습니다. *line*\\은 경고 메시지에 포함될 소스 코드 줄입니다; *line*\\이 제공되지 않으면, "
":func:`showwarning`\\은 *filename*\\과 *lineno*\\로 지정된 줄을 읽으려고 시도합니다."

#: ../../library/warnings.rst:503
msgid ""
"Format a warning the standard way.  This returns a string which may "
"contain embedded newlines and ends in a newline.  *line* is a line of "
"source code to be included in the warning message; if *line* is not "
"supplied, :func:`formatwarning` will try to read the line specified by "
"*filename* and *lineno*."
msgstr ""
"표준 방식으로 경고를 포맷합니다. 내장된 개행 문자를 포함하고 개행 문자로 끝날 수 있는 문자열을 반환합니다. *line*\\은 "
"경고 메시지에 포함될 소스 코드 줄입니다; *line*\\이 제공되지 않으면, :func:`formatwarning`\\은 "
"*filename*\\과 *lineno*\\로 지정된 줄을 읽으려고 시도합니다."

#: ../../library/warnings.rst:512
msgid ""
"Insert an entry into the list of :ref:`warnings filter specifications "
"<warning-filter>`.  The entry is inserted at the front by default; if "
"*append* is true, it is inserted at the end.  This checks the types of "
"the arguments, compiles the *message* and *module* regular expressions, "
"and inserts them as a tuple in the list of warnings filters.  Entries "
"closer to the front of the list override entries later in the list, if "
"both match a particular warning.  Omitted arguments default to a value "
"that matches everything."
msgstr ""
":ref:`경고 필터 명세 <warning-filter>` 목록에 항목을 삽입합니다. 항목은 기본적으로 앞에 삽입됩니다; "
"*append*\\가 참이면, 끝에 삽입됩니다. 인자의 형을 확인하고, *message*\\와 *module* 정규식을 컴파일한 후"
" 경고 필터 목록에 튜플로 삽입합니다. 둘 다 특정 경고와 일치하면, 목록 앞쪽에 더 가까운 항목이 목록의 뒷부분에 있는 항목보다 "
"우선합니다. 생략된 인자의 기본값은 모든 것과 일치하는 값입니다."

#: ../../library/warnings.rst:524
msgid ""
"Insert a simple entry into the list of :ref:`warnings filter "
"specifications <warning-filter>`.  The meaning of the function parameters"
" is as for :func:`filterwarnings`, but regular expressions are not needed"
" as the filter inserted always matches any message in any module as long "
"as the category and line number match."
msgstr ""
":ref:`경고 필터 명세 <warning-filter>` 목록에 간단한 항목을 삽입합니다. 함수 매개 변수의 의미는 "
":func:`filterwarnings`\\와 같지만, 범주와 줄 번호가 일치하는 한 삽입 된 필터가 항상 모든 모듈의 메시지와 "
"일치하기 때문에 정규식이 필요하지 않습니다."

#: ../../library/warnings.rst:533
msgid ""
"Reset the warnings filter.  This discards the effect of all previous "
"calls to :func:`filterwarnings`, including that of the :option:`-W` "
"command line options and calls to :func:`simplefilter`."
msgstr ""
"경고 필터를 재설정합니다. 이는 :option:`-W` 명령 줄 옵션과 :func:`simplefilter`\\에 대한 호출을 "
"포함하여 :func:`filterwarnings`\\에 대한 모든 이전 호출의 영향을 되돌립니다."

#: ../../library/warnings.rst:540
msgid "Decorator to indicate that a class, function or overload is deprecated."
msgstr ""

#: ../../library/warnings.rst:542
msgid ""
"When this decorator is applied to an object, deprecation warnings may be "
"emitted at runtime when the object is used. :term:`static type checkers "
"<static type checker>` will also generate a diagnostic on usage of the "
"deprecated object."
msgstr ""

#: ../../library/warnings.rst:547
msgid "Usage::"
msgstr "사용법::"

#: ../../library/warnings.rst:549
msgid ""
"from warnings import deprecated\n"
"from typing import overload\n"
"\n"
"@deprecated(\"Use B instead\")\n"
"class A:\n"
"    pass\n"
"\n"
"@deprecated(\"Use g instead\")\n"
"def f():\n"
"    pass\n"
"\n"
"@overload\n"
"@deprecated(\"int support is deprecated\")\n"
"def g(x: int) -> int: ...\n"
"@overload\n"
"def g(x: str) -> int: ..."
msgstr ""
"from warnings import deprecated\n"
"from typing import overload\n"
"\n"
"@deprecated(\"Use B instead\")\n"
"class A:\n"
"    pass\n"
"\n"
"@deprecated(\"Use g instead\")\n"
"def f():\n"
"    pass\n"
"\n"
"@overload\n"
"@deprecated(\"int support is deprecated\")\n"
"def g(x: int) -> int: ...\n"
"@overload\n"
"def g(x: str) -> int: ..."

#: ../../library/warnings.rst:566
msgid ""
"The warning specified by *category* will be emitted at runtime on use of "
"deprecated objects. For functions, that happens on calls; for classes, on"
" instantiation and on creation of subclasses. If the *category* is "
"``None``, no warning is emitted at runtime. The *stacklevel* determines "
"where the warning is emitted. If it is ``1`` (the default), the warning "
"is emitted at the direct caller of the deprecated object; if it is "
"higher, it is emitted further up the stack. Static type checker behavior "
"is not affected by the *category* and *stacklevel* arguments."
msgstr ""

#: ../../library/warnings.rst:577
msgid ""
"The deprecation message passed to the decorator is saved in the "
"``__deprecated__`` attribute on the decorated object. If applied to an "
"overload, the decorator must be after the :func:`@overload "
"<typing.overload>` decorator for the attribute to exist on the overload "
"as returned by :func:`typing.get_overloads`."
msgstr ""

#: ../../library/warnings.rst:584
msgid "See :pep:`702`."
msgstr ""

#: ../../library/warnings.rst:589
msgid "Available Context Managers"
msgstr "사용 가능한 컨텍스트 관리자"

#: ../../library/warnings.rst:593
msgid ""
"A context manager that copies and, upon exit, restores the warnings "
"filter and the :func:`showwarning` function. If the *record* argument is "
":const:`False` (the default) the context manager returns :class:`None` on"
" entry. If *record* is :const:`True`, a list is returned that is "
"progressively populated with objects as seen by a custom "
":func:`showwarning` function (which also suppresses output to "
"``sys.stdout``). Each object in the list has attributes with the same "
"names as the arguments to :func:`showwarning`."
msgstr ""
"경고 필터와 :func:`showwarning` 함수를 복사하고 종료 시 복원하는 컨텍스트 관리자. *record* 인자가 "
":const:`False`\\(기본값)이면 컨텍스트 관리자는 진입할 때 :class:`None`\\을 반환합니다. "
"*record*\\가 :const:`True`\\이면, 재정의된 :func:`showwarning` 함수에 보이는 객체로 점진적으로"
" 채워지는 리스트가 반환됩니다 (``sys.stdout`` 으로의 출력도 억제합니다). 리스트의 각 객체에는 "
":func:`showwarning`\\에 대한 인자와 이름이 같은 어트리뷰트가 있습니다."

#: ../../library/warnings.rst:602
msgid ""
"The *module* argument takes a module that will be used instead of the "
"module returned when you import :mod:`warnings` whose filter will be "
"protected. This argument exists primarily for testing the :mod:`warnings`"
" module itself."
msgstr ""
"*module* 인자는 필터가 보호되는 :mod:`warnings`\\를 임포트 할 때 반환되는 모듈 대신 사용되는 모듈을 "
"취합니다. 이 인자는 주로 :mod:`warnings` 모듈 자체를 테스트하기 위해 존재합니다."

#: ../../library/warnings.rst:607
msgid ""
"If the *action* argument is not ``None``, the remaining arguments are "
"passed to :func:`simplefilter` as if it were called immediately on "
"entering the context."
msgstr ""

#: ../../library/warnings.rst:611
msgid ""
"See :ref:`warning-filter` for the meaning of the *category* and *lineno* "
"parameters."
msgstr ""

#: ../../library/warnings.rst:616
msgid ""
"The :class:`catch_warnings` manager works by replacing and then later "
"restoring the module's :func:`showwarning` function and internal list of "
"filter specifications.  This means the context manager is modifying "
"global state and therefore is not thread-safe."
msgstr ""
":class:`catch_warnings` 관리자는 모듈의 :func:`showwarning` 함수와 내부 필터 명세 목록을 교체한"
" 다음 나중에 복원하는 방식으로 작동합니다. 이는 컨텍스트 관리자가 전역 상태를 수정한다는 의미이고, 따라서 스레드 안전하지 "
"않습니다."

#: ../../library/warnings.rst:624
msgid "Added the *action*, *category*, *lineno*, and *append* parameters."
msgstr ""

#: ../../library/warnings.rst:9
msgid "warnings"
msgstr "경고"

