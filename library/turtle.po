# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2017, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-04-17 23:44+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: Dong-gweon Oh <flowdas@gmail.com>\n"
"Language-Team: Korean (https://python.flowdas.com)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.17.0\n"

#: ../../library/turtle.rst:3
msgid ":mod:`turtle` --- Turtle graphics"
msgstr ":mod:`turtle` --- 터틀 그래픽"

#: ../../library/turtle.rst:10
msgid "**Source code:** :source:`Lib/turtle.py`"
msgstr "**소스 코드:** :source:`Lib/turtle.py`"

#: ../../library/turtle.rst:20
msgid "Introduction"
msgstr "소개"

#: ../../library/turtle.rst:22
#, fuzzy
msgid ""
"Turtle graphics is an implementation of `the popular geometric drawing "
"tools introduced in Logo <https://en.wikipedia.org/wiki/Turtle_ "
"(robot)>`_, developed by Wally Feurzeig, Seymour Papert and Cynthia "
"Solomon in 1967."
msgstr ""
"터틀(거북이) 그래픽은 아이들에게 프로그래밍을 소개하는 데 널리 사용되는 방법입니다. 1967년 Wally Feurzeig, "
"Seymour Papert 및 Cynthia Solomon이 개발한 최초의 로고(Logo) 프로그래밍 언어의 일부였습니다."

#: ../../library/turtle.rst:29
#, fuzzy
msgid "Get started"
msgstr "거북이 상태"

#: ../../library/turtle.rst:31
msgid ""
"Imagine a robotic turtle starting at (0, 0) in the x-y plane.  After an "
"``import turtle``, give it the command ``turtle.forward(15)``, and it "
"moves (on-screen!) 15 pixels in the direction it is facing, drawing a "
"line as it moves.  Give it the command ``turtle.right(25)``, and it "
"rotates in-place 25 degrees clockwise."
msgstr ""
"x-y 평면의 (0, 0)에서 출발하는 로봇 거북이를 상상해보십시오. ``import turtle`` 후에, "
"``turtle.forward(15)`` 명령을 내리면, 그것이 향한 방향으로 15픽셀 움직이고 (화면에서!), 움직이면서 선을 "
"그립니다. ``turtle.right(25)`` 명령을 내려보십시오, 그러면 제자리에서 시계 방향으로 25도 회전합니다."

#: ../../library/turtle.rst:38
msgid "Turtle can draw intricate shapes using programs that repeat simple moves."
msgstr "turtle은 간단한 움직임을 반복하는 프로그램을 사용하여 복잡한 모양을 그릴 수 있습니다."

#: ../../library/turtle.rst:44
msgid ""
"In Python, turtle graphics provides a representation of a physical "
"\"turtle\" (a little robot with a pen) that draws on a sheet of paper on "
"the floor."
msgstr ""

#: ../../library/turtle.rst:47
msgid ""
"It's an effective and well-proven way for learners to encounter "
"programming concepts and interaction with software, as it provides "
"instant, visible feedback. It also provides convenient access to "
"graphical output in general."
msgstr ""

#: ../../library/turtle.rst:52
msgid ""
"Turtle drawing was originally created as an educational tool, to be used "
"by teachers in the classroom. For the programmer who needs to produce "
"some graphical output it can be a way to do that without the overhead of "
"introducing more complex or external libraries into their work."
msgstr ""

#: ../../library/turtle.rst:61
msgid "Tutorial"
msgstr ""

#: ../../library/turtle.rst:63
msgid ""
"New users should start here. In this tutorial we'll explore some of the "
"basics of turtle drawing."
msgstr ""

#: ../../library/turtle.rst:68
#, fuzzy
msgid "Starting a turtle environment"
msgstr "설정과 측정"

#: ../../library/turtle.rst:70
msgid "In a Python shell, import all the objects of the ``turtle`` module::"
msgstr ""

#: ../../library/turtle.rst:72
#, fuzzy
msgid "from turtle import *"
msgstr "거북이 움직임"

#: ../../library/turtle.rst:74
msgid ""
"If you run into a ``No module named '_tkinter'`` error, you'll have to "
"install the :mod:`Tk interface package <tkinter>` on your system."
msgstr ""

#: ../../library/turtle.rst:79
msgid "Basic drawing"
msgstr ""

#: ../../library/turtle.rst:81
msgid "Send the turtle forward 100 steps::"
msgstr ""

#: ../../library/turtle.rst:83
msgid "forward(100)"
msgstr ""

#: ../../library/turtle.rst:85
msgid ""
"You should see (most likely, in a new window on your display) a line "
"drawn by the turtle, heading East. Change the direction of the turtle, so"
" that it turns 120 degrees left (anti-clockwise)::"
msgstr ""

#: ../../library/turtle.rst:89
msgid "left(120)"
msgstr ""

#: ../../library/turtle.rst:91
msgid "Let's continue by drawing a triangle::"
msgstr ""

#: ../../library/turtle.rst:93
msgid ""
"forward(100)\n"
"left(120)\n"
"forward(100)"
msgstr ""

#: ../../library/turtle.rst:97
msgid ""
"Notice how the turtle, represented by an arrow, points in different "
"directions as you steer it."
msgstr ""

#: ../../library/turtle.rst:100
msgid ""
"Experiment with those commands, and also with ``backward()`` and "
"``right()``."
msgstr ""

#: ../../library/turtle.rst:105 ../../library/turtle.rst:334
#: ../../library/turtle.rst:1024
msgid "Pen control"
msgstr "펜 제어"

#: ../../library/turtle.rst:107
msgid ""
"Try changing the color - for example, ``color('blue')`` - and width of "
"the line - for example, ``width(3)`` - and then drawing again."
msgstr ""

#: ../../library/turtle.rst:110
msgid ""
"You can also move the turtle around without drawing, by lifting up the "
"pen: ``up()`` before moving. To start drawing again, use ``down()``."
msgstr ""

#: ../../library/turtle.rst:115
#, fuzzy
msgid "The turtle's position"
msgstr "거북이 움직임"

#: ../../library/turtle.rst:117
msgid ""
"Send your turtle back to its starting-point (useful if it has disappeared"
" off-screen)::"
msgstr ""

#: ../../library/turtle.rst:120
msgid "home()"
msgstr ""

#: ../../library/turtle.rst:122
msgid ""
"The home position is at the center of the turtle's screen. If you ever "
"need to know them, get the turtle's x-y coordinates with::"
msgstr ""

#: ../../library/turtle.rst:125
msgid "pos()"
msgstr ""

#: ../../library/turtle.rst:127
msgid "Home is at ``(0, 0)``."
msgstr ""

#: ../../library/turtle.rst:129
msgid ""
"And after a while, it will probably help to clear the window so we can "
"start anew::"
msgstr ""

#: ../../library/turtle.rst:132
msgid "clearscreen()"
msgstr ""

#: ../../library/turtle.rst:136
msgid "Making algorithmic patterns"
msgstr ""

#: ../../library/turtle.rst:138
msgid "Using loops, it's possible to build up geometric patterns::"
msgstr ""

#: ../../library/turtle.rst:140
msgid ""
"for steps in range(100):\n"
"    for c in ('blue', 'red', 'green'):\n"
"        color(c)\n"
"        forward(steps)\n"
"        right(30)"
msgstr ""

#: ../../library/turtle.rst:147
msgid "\\ - which of course, are limited only by the imagination!"
msgstr ""

#: ../../library/turtle.rst:149
msgid ""
"Let's draw the star shape at the top of this page. We want red lines, "
"filled in with yellow::"
msgstr ""

#: ../../library/turtle.rst:152
msgid ""
"color('red')\n"
"fillcolor('yellow')"
msgstr ""

#: ../../library/turtle.rst:155
msgid ""
"Just as ``up()`` and ``down()`` determine whether lines will be drawn, "
"filling can be turned on and off::"
msgstr ""

#: ../../library/turtle.rst:158
#, fuzzy
msgid "begin_fill()"
msgstr ":func:`begin_fill`"

#: ../../library/turtle.rst:160
msgid "Next we'll create a loop::"
msgstr ""

#: ../../library/turtle.rst:162
msgid ""
"while True:\n"
"    forward(200)\n"
"    left(170)\n"
"    if abs(pos()) < 1:\n"
"        break"
msgstr ""

#: ../../library/turtle.rst:168
msgid ""
"``abs(pos()) < 1`` is a good way to know when the turtle is back at its "
"home position."
msgstr ""

#: ../../library/turtle.rst:171
msgid "Finally, complete the filling::"
msgstr ""

#: ../../library/turtle.rst:173
#, fuzzy
msgid "end_fill()"
msgstr ":func:`end_fill`"

#: ../../library/turtle.rst:175
msgid ""
"(Note that filling only actually takes place when you give the "
"``end_fill()`` command.)"
msgstr ""

#: ../../library/turtle.rst:182
msgid "How to..."
msgstr ""

#: ../../library/turtle.rst:184
msgid "This section covers some typical turtle use-cases and approaches."
msgstr ""

#: ../../library/turtle.rst:188
msgid "Get started as quickly as possible"
msgstr ""

#: ../../library/turtle.rst:190
msgid ""
"One of the joys of turtle graphics is the immediate, visual feedback "
"that's available from simple commands - it's an excellent way to "
"introduce children to programming ideas, with a minimum of overhead (not "
"just children, of course)."
msgstr ""

#: ../../library/turtle.rst:195
msgid ""
"The turtle module makes this possible by exposing all its basic "
"functionality as functions, available with ``from turtle import *``. The "
":ref:`turtle graphics tutorial <turtle-tutorial>` covers this approach."
msgstr ""

#: ../../library/turtle.rst:199
msgid ""
"It's worth noting that many of the turtle commands also have even more "
"terse equivalents, such as ``fd()`` for :func:`forward`. These are "
"especially useful when working with learners for whom typing is not a "
"skill."
msgstr ""

#: ../../library/turtle.rst:205
msgid ""
"You'll need to have the :mod:`Tk interface package <tkinter>` installed "
"on your system for turtle graphics to work. Be warned that this is not "
"always straightforward, so check this in advance if you're planning to "
"use turtle graphics with a learner."
msgstr ""

#: ../../library/turtle.rst:212
msgid "Use the ``turtle`` module namespace"
msgstr ""

#: ../../library/turtle.rst:214
msgid ""
"Using ``from turtle import *`` is convenient - but be warned that it "
"imports a rather large collection of objects, and if you're doing "
"anything but turtle graphics you run the risk of a name conflict (this "
"becomes even more an issue if you're using turtle graphics in a script "
"where other modules might be imported)."
msgstr ""

#: ../../library/turtle.rst:220
msgid ""
"The solution is to use ``import turtle`` - ``fd()`` becomes "
"``turtle.fd()``, ``width()`` becomes ``turtle.width()`` and so on. (If "
"typing \"turtle\" over and over again becomes tedious, use for example "
"``import turtle as t`` instead.)"
msgstr ""

#: ../../library/turtle.rst:227
#, fuzzy
msgid "Use turtle graphics in a script"
msgstr "터틀 그래픽 창을 닫습니다."

#: ../../library/turtle.rst:229
msgid ""
"It's recommended to use the ``turtle`` module namespace as described "
"immediately above, for example::"
msgstr ""

#: ../../library/turtle.rst:232
msgid ""
"import turtle as t\n"
"from random import random\n"
"\n"
"for i in range(100):\n"
"    steps = int(random() * 100)\n"
"    angle = int(random() * 360)\n"
"    t.right(angle)\n"
"    t.fd(steps)"
msgstr ""

#: ../../library/turtle.rst:241
msgid ""
"Another step is also required though - as soon as the script ends, Python"
" will also close the turtle's window. Add::"
msgstr ""

#: ../../library/turtle.rst:244
msgid "t.mainloop()"
msgstr ""

#: ../../library/turtle.rst:246
msgid ""
"to the end of the script. The script will now wait to be dismissed and "
"will not exit until it is terminated, for example by closing the turtle "
"graphics window."
msgstr ""

#: ../../library/turtle.rst:252
msgid "Use object-oriented turtle graphics"
msgstr ""

#: ../../library/turtle.rst:254
msgid ":ref:`Explanation of the object-oriented interface <turtle-explanation>`"
msgstr ""

#: ../../library/turtle.rst:256
msgid ""
"Other than for very basic introductory purposes, or for trying things out"
" as quickly as possible, it's more usual and much more powerful to use "
"the object-oriented approach to turtle graphics. For example, this allows"
" multiple turtles on screen at once."
msgstr ""

#: ../../library/turtle.rst:261
msgid ""
"In this approach, the various turtle commands are methods of objects "
"(mostly of ``Turtle`` objects). You *can* use the object-oriented "
"approach in the shell, but it would be more typical in a Python script."
msgstr ""

#: ../../library/turtle.rst:265
msgid "The example above then becomes::"
msgstr ""

#: ../../library/turtle.rst:267
msgid ""
"from turtle import Turtle\n"
"from random import random\n"
"\n"
"t = Turtle()\n"
"for i in range(100):\n"
"    steps = int(random() * 100)\n"
"    angle = int(random() * 360)\n"
"    t.right(angle)\n"
"    t.fd(steps)\n"
"\n"
"t.screen.mainloop()"
msgstr ""

#: ../../library/turtle.rst:279
msgid ""
"Note the last line. ``t.screen`` is an instance of the :class:`Screen` "
"that a Turtle instance exists on; it's created automatically along with "
"the turtle."
msgstr ""

#: ../../library/turtle.rst:283
msgid "The turtle's screen can be customised, for example::"
msgstr ""

#: ../../library/turtle.rst:285
msgid ""
"t.screen.title('Object-oriented turtle demo')\n"
"t.screen.bgcolor(\"orange\")"
msgstr ""

#: ../../library/turtle.rst:290
msgid "Turtle graphics reference"
msgstr ""

#: ../../library/turtle.rst:294
msgid ""
"In the following documentation the argument list for functions is given. "
"Methods, of course, have the additional first argument *self* which is "
"omitted here."
msgstr "다음 설명서에서 함수의 인자 목록이 제공됩니다. 물론 메서드에는 추가의 첫 번째 인자 *self*\\가 있으며 여기서는 생략합니다."

#: ../../library/turtle.rst:300
msgid "Turtle methods"
msgstr "Turtle 메서드"

#: ../../library/turtle.rst:302 ../../library/turtle.rst:441
msgid "Turtle motion"
msgstr "거북이 움직임"

#: ../../library/turtle.rst:303
msgid "Move and draw"
msgstr "이동과 그리기"

#: ../../library/turtle.rst
msgid ":func:`forward` | :func:`fd`"
msgstr ":func:`forward` | :func:`fd`"

#: ../../library/turtle.rst
msgid ":func:`backward` | :func:`bk` | :func:`back`"
msgstr ":func:`backward` | :func:`bk` | :func:`back`"

#: ../../library/turtle.rst
msgid ":func:`right` | :func:`rt`"
msgstr ":func:`right` | :func:`rt`"

#: ../../library/turtle.rst
msgid ":func:`left` | :func:`lt`"
msgstr ":func:`left` | :func:`lt`"

#: ../../library/turtle.rst
msgid ":func:`goto` | :func:`setpos` | :func:`setposition`"
msgstr ":func:`goto` | :func:`setpos` | :func:`setposition`"

#: ../../library/turtle.rst
#, fuzzy
msgid ":func:`teleport`"
msgstr ":func:`tilt`"

#: ../../library/turtle.rst
msgid ":func:`setx`"
msgstr ":func:`setx`"

#: ../../library/turtle.rst
msgid ":func:`sety`"
msgstr ":func:`sety`"

#: ../../library/turtle.rst
msgid ":func:`setheading` | :func:`seth`"
msgstr ":func:`setheading` | :func:`seth`"

#: ../../library/turtle.rst
msgid ":func:`home`"
msgstr ":func:`home`"

#: ../../library/turtle.rst ../../library/turtle.rst:2709
msgid ":func:`circle`"
msgstr ":func:`circle`"

#: ../../library/turtle.rst
msgid ":func:`dot`"
msgstr ":func:`dot`"

#: ../../library/turtle.rst ../../library/turtle.rst:2687
msgid ":func:`stamp`"
msgstr ":func:`stamp`"

#: ../../library/turtle.rst
msgid ":func:`clearstamp`"
msgstr ":func:`clearstamp`"

#: ../../library/turtle.rst
msgid ":func:`clearstamps`"
msgstr ":func:`clearstamps`"

#: ../../library/turtle.rst
msgid ":func:`undo`"
msgstr ":func:`undo`"

#: ../../library/turtle.rst
msgid ":func:`speed`"
msgstr ":func:`speed`"

#: ../../library/turtle.rst:322 ../../library/turtle.rst:873
msgid "Tell Turtle's state"
msgstr "거북이의 상태 보고"

#: ../../library/turtle.rst
msgid ":func:`position` | :func:`pos`"
msgstr ":func:`position` | :func:`pos`"

#: ../../library/turtle.rst
msgid ":func:`towards`"
msgstr ":func:`towards`"

#: ../../library/turtle.rst
msgid ":func:`xcor`"
msgstr ":func:`xcor`"

#: ../../library/turtle.rst
msgid ":func:`ycor`"
msgstr ":func:`ycor`"

#: ../../library/turtle.rst
msgid ":func:`heading`"
msgstr ":func:`heading`"

#: ../../library/turtle.rst
msgid ":func:`distance`"
msgstr ":func:`distance`"

#: ../../library/turtle.rst:330
msgid "Setting and measurement"
msgstr "설정과 측정"

#: ../../library/turtle.rst
msgid ":func:`degrees`"
msgstr ":func:`degrees`"

#: ../../library/turtle.rst
msgid ":func:`radians`"
msgstr ":func:`radians`"

#: ../../library/turtle.rst:335 ../../library/turtle.rst:1027
msgid "Drawing state"
msgstr "그리기 상태"

#: ../../library/turtle.rst
msgid ":func:`pendown` | :func:`pd` | :func:`down`"
msgstr ":func:`pendown` | :func:`pd` | :func:`down`"

#: ../../library/turtle.rst
msgid ":func:`penup` | :func:`pu` | :func:`up`"
msgstr ":func:`penup` | :func:`pu` | :func:`up`"

#: ../../library/turtle.rst
msgid ":func:`pensize` | :func:`width`"
msgstr ":func:`pensize` | :func:`width`"

#: ../../library/turtle.rst
msgid ":func:`pen`"
msgstr ":func:`pen`"

#: ../../library/turtle.rst
msgid ":func:`isdown`"
msgstr ":func:`isdown`"

#: ../../library/turtle.rst:342 ../../library/turtle.rst:1119
msgid "Color control"
msgstr "색상 제어"

#: ../../library/turtle.rst
msgid ":func:`color`"
msgstr ":func:`color`"

#: ../../library/turtle.rst
msgid ":func:`pencolor`"
msgstr ":func:`pencolor`"

#: ../../library/turtle.rst
msgid ":func:`fillcolor`"
msgstr ":func:`fillcolor`"

#: ../../library/turtle.rst:347 ../../library/turtle.rst:1251
msgid "Filling"
msgstr "채우기"

#: ../../library/turtle.rst
msgid ":func:`filling`"
msgstr ":func:`filling`"

#: ../../library/turtle.rst
msgid ":func:`begin_fill`"
msgstr ":func:`begin_fill`"

#: ../../library/turtle.rst
msgid ":func:`end_fill`"
msgstr ":func:`end_fill`"

#: ../../library/turtle.rst:352 ../../library/turtle.rst:1298
msgid "More drawing control"
msgstr "더 많은 그리기 제어"

#: ../../library/turtle.rst
msgid ":func:`reset`"
msgstr ":func:`reset`"

#: ../../library/turtle.rst
msgid ":func:`clear`"
msgstr ":func:`clear`"

#: ../../library/turtle.rst
msgid ":func:`write`"
msgstr ":func:`write`"

#: ../../library/turtle.rst:357 ../../library/turtle.rst:1344
msgid "Turtle state"
msgstr "거북이 상태"

#: ../../library/turtle.rst:358 ../../library/turtle.rst:1347
msgid "Visibility"
msgstr "가시성"

#: ../../library/turtle.rst
msgid ":func:`showturtle` | :func:`st`"
msgstr ":func:`showturtle` | :func:`st`"

#: ../../library/turtle.rst
msgid ":func:`hideturtle` | :func:`ht`"
msgstr ":func:`hideturtle` | :func:`ht`"

#: ../../library/turtle.rst
msgid ":func:`isvisible`"
msgstr ":func:`isvisible`"

#: ../../library/turtle.rst:363 ../../library/turtle.rst:1386
msgid "Appearance"
msgstr "외관"

#: ../../library/turtle.rst
msgid ":func:`shape`"
msgstr ":func:`shape`"

#: ../../library/turtle.rst
msgid ":func:`resizemode`"
msgstr ":func:`resizemode`"

#: ../../library/turtle.rst
msgid ":func:`shapesize` | :func:`turtlesize`"
msgstr ":func:`shapesize` | :func:`turtlesize`"

#: ../../library/turtle.rst
msgid ":func:`shearfactor`"
msgstr ":func:`shearfactor`"

#: ../../library/turtle.rst
msgid ":func:`tiltangle`"
msgstr ":func:`tiltangle`"

#: ../../library/turtle.rst
msgid ":func:`tilt`"
msgstr ":func:`tilt`"

#: ../../library/turtle.rst
msgid ":func:`shapetransform`"
msgstr ":func:`shapetransform`"

#: ../../library/turtle.rst
msgid ":func:`get_shapepoly`"
msgstr ":func:`get_shapepoly`"

#: ../../library/turtle.rst:373 ../../library/turtle.rst:1569
msgid "Using events"
msgstr "이벤트 사용하기"

#: ../../library/turtle.rst ../../library/turtle.rst:2681
msgid ":func:`onclick`"
msgstr ":func:`onclick`"

#: ../../library/turtle.rst
msgid ":func:`onrelease`"
msgstr ":func:`onrelease`"

#: ../../library/turtle.rst ../../library/turtle.rst:2664
msgid ":func:`ondrag`"
msgstr ":func:`ondrag`"

#: ../../library/turtle.rst:378 ../../library/turtle.rst:1643
msgid "Special Turtle methods"
msgstr "특수 Turtle 메서드"

#: ../../library/turtle.rst
msgid ":func:`begin_poly`"
msgstr ":func:`begin_poly`"

#: ../../library/turtle.rst
msgid ":func:`end_poly`"
msgstr ":func:`end_poly`"

#: ../../library/turtle.rst
msgid ":func:`get_poly`"
msgstr ":func:`get_poly`"

#: ../../library/turtle.rst ../../library/turtle.rst:2703
msgid ":func:`clone`"
msgstr ":func:`clone`"

#: ../../library/turtle.rst
msgid ":func:`getturtle` | :func:`getpen`"
msgstr ":func:`getturtle` | :func:`getpen`"

#: ../../library/turtle.rst
msgid ":func:`getscreen`"
msgstr ":func:`getscreen`"

#: ../../library/turtle.rst
msgid ":func:`setundobuffer`"
msgstr ":func:`setundobuffer`"

#: ../../library/turtle.rst
msgid ":func:`undobufferentries`"
msgstr ":func:`undobufferentries`"

#: ../../library/turtle.rst:390
msgid "Methods of TurtleScreen/Screen"
msgstr "TurtleScreen/Screen의 메서드"

#: ../../library/turtle.rst:392 ../../library/turtle.rst:1797
msgid "Window control"
msgstr "창 제어"

#: ../../library/turtle.rst
msgid ":func:`bgcolor`"
msgstr ":func:`bgcolor`"

#: ../../library/turtle.rst
msgid ":func:`bgpic`"
msgstr ":func:`bgpic`"

#: ../../library/turtle.rst
#, fuzzy
msgid ":func:`clearscreen`"
msgstr ":func:`getscreen`"

#: ../../library/turtle.rst
#, fuzzy
msgid ":func:`resetscreen`"
msgstr ":func:`getscreen`"

#: ../../library/turtle.rst
msgid ":func:`screensize`"
msgstr ":func:`screensize`"

#: ../../library/turtle.rst
msgid ":func:`setworldcoordinates`"
msgstr ":func:`setworldcoordinates`"

#: ../../library/turtle.rst:400 ../../library/turtle.rst:1920
msgid "Animation control"
msgstr "애니메이션 제어"

#: ../../library/turtle.rst
msgid ":func:`delay`"
msgstr ":func:`delay`"

#: ../../library/turtle.rst
msgid ":func:`tracer`"
msgstr ":func:`tracer`"

#: ../../library/turtle.rst
msgid ":func:`update`"
msgstr ":func:`update`"

#: ../../library/turtle.rst:405 ../../library/turtle.rst:1973
msgid "Using screen events"
msgstr "화면 이벤트 사용하기"

#: ../../library/turtle.rst
msgid ":func:`listen`"
msgstr ":func:`listen`"

#: ../../library/turtle.rst
msgid ":func:`onkey` | :func:`onkeyrelease`"
msgstr ":func:`onkey` | :func:`onkeyrelease`"

#: ../../library/turtle.rst
msgid ":func:`onkeypress`"
msgstr ":func:`onkeypress`"

#: ../../library/turtle.rst
msgid ":func:`onclick` | :func:`onscreenclick`"
msgstr ":func:`onclick` | :func:`onscreenclick`"

#: ../../library/turtle.rst
msgid ":func:`ontimer`"
msgstr ":func:`ontimer`"

#: ../../library/turtle.rst
msgid ":func:`mainloop` | :func:`done`"
msgstr ":func:`mainloop` | :func:`done`"

#: ../../library/turtle.rst:413 ../../library/turtle.rst:2118
msgid "Settings and special methods"
msgstr "설정과 특수 메서드"

#: ../../library/turtle.rst
msgid ":func:`mode`"
msgstr ":func:`mode`"

#: ../../library/turtle.rst
msgid ":func:`colormode`"
msgstr ":func:`colormode`"

#: ../../library/turtle.rst
msgid ":func:`getcanvas`"
msgstr ":func:`getcanvas`"

#: ../../library/turtle.rst
msgid ":func:`getshapes`"
msgstr ":func:`getshapes`"

#: ../../library/turtle.rst
msgid ":func:`register_shape` | :func:`addshape`"
msgstr ":func:`register_shape` | :func:`addshape`"

#: ../../library/turtle.rst
msgid ":func:`turtles`"
msgstr ":func:`turtles`"

#: ../../library/turtle.rst
msgid ":func:`window_height`"
msgstr ":func:`window_height`"

#: ../../library/turtle.rst
msgid ":func:`window_width`"
msgstr ":func:`window_width`"

#: ../../library/turtle.rst:423 ../../library/turtle.rst:2082
msgid "Input methods"
msgstr "입력 메서드"

#: ../../library/turtle.rst
msgid ":func:`textinput`"
msgstr ":func:`textinput`"

#: ../../library/turtle.rst
msgid ":func:`numinput`"
msgstr ":func:`numinput`"

#: ../../library/turtle.rst:427
msgid "Methods specific to Screen"
msgstr "Screen 특정 메서드"

#: ../../library/turtle.rst
msgid ":func:`bye`"
msgstr ":func:`bye`"

#: ../../library/turtle.rst
msgid ":func:`exitonclick`"
msgstr ":func:`exitonclick`"

#: ../../library/turtle.rst
msgid ":func:`setup`"
msgstr ":func:`setup`"

#: ../../library/turtle.rst
msgid ":func:`title`"
msgstr ":func:`title`"

#: ../../library/turtle.rst:435
msgid "Methods of RawTurtle/Turtle and corresponding functions"
msgstr "RawTurtle/Turtl의 메서드와 해당 함수"

#: ../../library/turtle.rst:437
msgid ""
"Most of the examples in this section refer to a Turtle instance called "
"``turtle``."
msgstr "이 섹션의 대부분의 예제는 ``turtle``\\이라는 Turtle 인스턴스를 참조합니다."

#: ../../library/turtle.rst
msgid "Parameters"
msgstr "매개변수"

#: ../../library/turtle.rst:446 ../../library/turtle.rst:491
#: ../../library/turtle.rst:516 ../../library/turtle.rst:614
#: ../../library/turtle.rst:637 ../../library/turtle.rst:660
msgid "a number (integer or float)"
msgstr "숫자 (정수나 실수)"

#: ../../library/turtle.rst:448
msgid ""
"Move the turtle forward by the specified *distance*, in the direction the"
" turtle is headed."
msgstr "거북이가 향한 방향으로, 지정된 *distance*\\만큼 거북이를 앞으로 움직입니다."

#: ../../library/turtle.rst:451
msgid ""
">>> turtle.position()\n"
"(0.00,0.00)\n"
">>> turtle.forward(25)\n"
">>> turtle.position()\n"
"(25.00,0.00)\n"
">>> turtle.forward(-75)\n"
">>> turtle.position()\n"
"(-50.00,0.00)"
msgstr ""

#: ../../library/turtle.rst:468 ../../library/turtle.rst:710
#: ../../library/turtle.rst:977 ../../library/turtle.rst:1485
msgid "a number"
msgstr "숫자"

#: ../../library/turtle.rst:470
msgid ""
"Move the turtle backward by *distance*, opposite to the direction the "
"turtle is headed.  Do not change the turtle's heading."
msgstr "거북이가 향한 반대 방향으로, *distance*\\만큼 거북이를 뒤로 움직입니다. 거북이의 방향을 바꾸지 않습니다."

#: ../../library/turtle.rst:478
msgid ""
">>> turtle.position()\n"
"(0.00,0.00)\n"
">>> turtle.backward(30)\n"
">>> turtle.position()\n"
"(-30.00,0.00)"
msgstr ""

#: ../../library/turtle.rst:493
msgid ""
"Turn turtle right by *angle* units.  (Units are by default degrees, but "
"can be set via the :func:`degrees` and :func:`radians` functions.)  Angle"
" orientation depends on the turtle mode, see :func:`mode`."
msgstr ""
"*angle* 단위만큼 거북이를 오른쪽으로 회전합니다. (단위는 기본적으로 도(degree)이지만, "
":func:`degrees`\\와 :func:`radians` 함수를 통해 설정할 수 있습니다.) 각도 방향은 거북이 모드에 따라 "
"다릅니다, :func:`mode`\\를 참조하십시오."

#: ../../library/turtle.rst:503
msgid ""
">>> turtle.heading()\n"
"22.0\n"
">>> turtle.right(45)\n"
">>> turtle.heading()\n"
"337.0"
msgstr ""

#: ../../library/turtle.rst:518
msgid ""
"Turn turtle left by *angle* units.  (Units are by default degrees, but "
"can be set via the :func:`degrees` and :func:`radians` functions.)  Angle"
" orientation depends on the turtle mode, see :func:`mode`."
msgstr ""
"*angle* 단위만큼 거북이를 왼쪽으로 회전합니다. (단위는 기본적으로 도(degree)이지만, :func:`degrees`\\와"
" :func:`radians` 함수를 통해 설정할 수 있습니다.) 각도 방향은 거북이 모드에 따라 다릅니다, "
":func:`mode`\\를 참조하십시오."

#: ../../library/turtle.rst:528
msgid ""
">>> turtle.heading()\n"
"22.0\n"
">>> turtle.left(45)\n"
">>> turtle.heading()\n"
"67.0"
msgstr ""

#: ../../library/turtle.rst:542
msgid "a number or a pair/vector of numbers"
msgstr "숫자나 숫자의 쌍/벡터"

#: ../../library/turtle.rst:543 ../../library/turtle.rst:576
#: ../../library/turtle.rst:577
msgid "a number or ``None``"
msgstr "숫자나 ``None``"

#: ../../library/turtle.rst:545
msgid ""
"If *y* is ``None``, *x* must be a pair of coordinates or a :class:`Vec2D`"
" (e.g. as returned by :func:`pos`)."
msgstr ""
"*y*\\가 ``None``\\이면, *x*\\는 좌표 쌍이거나 :class:`Vec2D`\\여야 합니다 (예를 들어 "
":func:`pos`\\에서 반환된 것과 같은)."

#: ../../library/turtle.rst:548
msgid ""
"Move turtle to an absolute position.  If the pen is down, draw line.  Do "
"not change the turtle's orientation."
msgstr "거북이를 절대 위치로 움직입니다. 펜이 내려져 있으면, 선을 그립니다. 거북이의 방향을 바꾸지 않습니다."

#: ../../library/turtle.rst:557
msgid ""
">>> tp = turtle.pos()\n"
">>> tp\n"
"(0.00,0.00)\n"
">>> turtle.setpos(60,30)\n"
">>> turtle.pos()\n"
"(60.00,30.00)\n"
">>> turtle.setpos((20,80))\n"
">>> turtle.pos()\n"
"(20.00,80.00)\n"
">>> turtle.setpos(tp)\n"
">>> turtle.pos()\n"
"(0.00,0.00)"
msgstr ""

#: ../../library/turtle.rst:578
msgid "a boolean"
msgstr ""

#: ../../library/turtle.rst:580
msgid ""
"Move turtle to an absolute position. Unlike goto(x, y), a line will not "
"be drawn. The turtle's orientation does not change. If currently filling,"
" the polygon(s) teleported from will be filled after leaving, and filling"
" will begin again after teleporting. This can be disabled with "
"fill_gap=True, which makes the imaginary line traveled during teleporting"
" act as a fill barrier like in goto(x, y)."
msgstr ""

#: ../../library/turtle.rst:593
msgid ""
">>> tp = turtle.pos()\n"
">>> tp\n"
"(0.00,0.00)\n"
">>> turtle.teleport(60)\n"
">>> turtle.pos()\n"
"(60.00,0.00)\n"
">>> turtle.teleport(y=10)\n"
">>> turtle.pos()\n"
"(60.00,10.00)\n"
">>> turtle.teleport(20, 30)\n"
">>> turtle.pos()\n"
"(20.00,30.00)"
msgstr ""

#: ../../library/turtle.rst:616
msgid ""
"Set the turtle's first coordinate to *x*, leave second coordinate "
"unchanged."
msgstr "거북이의 첫 번째 좌표를 *x*\\로 설정하고, 두 번째 좌표는 변경하지 않습니다."

#: ../../library/turtle.rst:625
msgid ""
">>> turtle.position()\n"
"(0.00,240.00)\n"
">>> turtle.setx(10)\n"
">>> turtle.position()\n"
"(10.00,240.00)"
msgstr ""

#: ../../library/turtle.rst:639
msgid ""
"Set the turtle's second coordinate to *y*, leave first coordinate "
"unchanged."
msgstr "거북이의 두 번째 좌표를 *y*\\로 설정하고, 첫 번째 좌표는 변경하지 않습니다."

#: ../../library/turtle.rst:647
msgid ""
">>> turtle.position()\n"
"(0.00,40.00)\n"
">>> turtle.sety(-10)\n"
">>> turtle.position()\n"
"(0.00,-10.00)"
msgstr ""

#: ../../library/turtle.rst:662
msgid ""
"Set the orientation of the turtle to *to_angle*.  Here are some common "
"directions in degrees:"
msgstr "거북이의 방향을 *to_angle*\\로 설정합니다. 다음은 몇 가지 일반적인 도(degree)로 나타낸 방향입니다:"

#: ../../library/turtle.rst:666
msgid "standard mode"
msgstr "표준 모드"

#: ../../library/turtle.rst:666
msgid "logo mode"
msgstr "로고 모드"

#: ../../library/turtle.rst:668
msgid "0 - east"
msgstr "0 - 동"

#: ../../library/turtle.rst:668
msgid "0 - north"
msgstr "0 - 북"

#: ../../library/turtle.rst:669
msgid "90 - north"
msgstr "90 - 북"

#: ../../library/turtle.rst:669
msgid "90 - east"
msgstr "90 - 동"

#: ../../library/turtle.rst:670
msgid "180 - west"
msgstr "180 - 서"

#: ../../library/turtle.rst:670
msgid "180 - south"
msgstr "180 - 남"

#: ../../library/turtle.rst:671
msgid "270 - south"
msgstr "270 - 남"

#: ../../library/turtle.rst:671
msgid "270 - west"
msgstr "270 - 서"

#: ../../library/turtle.rst:674
msgid ""
">>> turtle.setheading(90)\n"
">>> turtle.heading()\n"
"90.0"
msgstr ""

#: ../../library/turtle.rst:684
msgid ""
"Move turtle to the origin -- coordinates (0,0) -- and set its heading to "
"its start-orientation (which depends on the mode, see :func:`mode`)."
msgstr ""
"거북이를 원점 -- 좌표 (0,0) -- 으로 이동하고 방향을 시작 방향으로 설정합니다 (모드에 따라 다릅니다, "
":func:`mode`\\를 참조하십시오)."

#: ../../library/turtle.rst:694
msgid ""
">>> turtle.heading()\n"
"90.0\n"
">>> turtle.position()\n"
"(0.00,-10.00)\n"
">>> turtle.home()\n"
">>> turtle.position()\n"
"(0.00,0.00)\n"
">>> turtle.heading()\n"
"0.0"
msgstr ""

#: ../../library/turtle.rst:711
msgid "a number (or ``None``)"
msgstr "숫자 (또는 ``None``)"

#: ../../library/turtle.rst:712 ../../library/turtle.rst:805
msgid "an integer (or ``None``)"
msgstr "정수 (또는 ``None``)"

#: ../../library/turtle.rst:714
msgid ""
"Draw a circle with given *radius*.  The center is *radius* units left of "
"the turtle; *extent* -- an angle -- determines which part of the circle "
"is drawn.  If *extent* is not given, draw the entire circle.  If *extent*"
" is not a full circle, one endpoint of the arc is the current pen "
"position.  Draw the arc in counterclockwise direction if *radius* is "
"positive, otherwise in clockwise direction.  Finally the direction of the"
" turtle is changed by the amount of *extent*."
msgstr ""
"주어진 반지름(*radius*)으로 원을 그립니다. 중심은 거북이 왼쪽으로 *radius* 단위입니다; *extent* -- 각도 "
"-- 는 원의 어느 부분이 그려지는지를 결정합니다. *extent*\\가 주어지지 않으면, 전체 원을 그립니다. "
"*extent*\\가 완전한 원이 아니면, 호의 한 끝점이 현재 펜 위치입니다. *radius*\\가 양수면 시계 반대 방향으로, "
"그렇지 않으면 시계 방향으로 호를 그립니다. 마지막으로 거북이의 방향이 *extent*\\만큼 변경됩니다."

#: ../../library/turtle.rst:722
msgid ""
"As the circle is approximated by an inscribed regular polygon, *steps* "
"determines the number of steps to use.  If not given, it will be "
"calculated automatically.  May be used to draw regular polygons."
msgstr ""
"원은 내접하는 정다각형으로 근사되므로, *steps*\\가 사용할 단계 수를 결정합니다. 제공하지 않으면, 자동으로 계산됩니다. "
"정다각형을 그리는 데 사용할 수 있습니다."

#: ../../library/turtle.rst:726
msgid ""
">>> turtle.home()\n"
">>> turtle.position()\n"
"(0.00,0.00)\n"
">>> turtle.heading()\n"
"0.0\n"
">>> turtle.circle(50)\n"
">>> turtle.position()\n"
"(-0.00,0.00)\n"
">>> turtle.heading()\n"
"0.0\n"
">>> turtle.circle(120, 180)  # draw a semicircle\n"
">>> turtle.position()\n"
"(0.00,240.00)\n"
">>> turtle.heading()\n"
"180.0"
msgstr ""

#: ../../library/turtle.rst:748
msgid "an integer >= 1 (if given)"
msgstr "정수 >= 1 (주어지면)"

#: ../../library/turtle.rst:749
msgid "a colorstring or a numeric color tuple"
msgstr "색상 문자열이나 숫자 색상 튜플"

#: ../../library/turtle.rst:751
msgid ""
"Draw a circular dot with diameter *size*, using *color*.  If *size* is "
"not given, the maximum of pensize+4 and 2*pensize is used."
msgstr ""
"*color*\\를 사용하여 지름이 *size*\\인 원형 점을 그립니다. *size*\\가 제공되지 않으면, pensize+4와 "
"2*pensize 중 큰 값이 사용됩니다."

#: ../../library/turtle.rst:755
msgid ""
">>> turtle.home()\n"
">>> turtle.dot()\n"
">>> turtle.fd(50); turtle.dot(20, \"blue\"); turtle.fd(50)\n"
">>> turtle.position()\n"
"(100.00,-0.00)\n"
">>> turtle.heading()\n"
"0.0"
msgstr ""

#: ../../library/turtle.rst:769
msgid ""
"Stamp a copy of the turtle shape onto the canvas at the current turtle "
"position.  Return a stamp_id for that stamp, which can be used to delete "
"it by calling ``clearstamp(stamp_id)``."
msgstr ""
"거북이 모양의 사본을 현재 거북이 위치에서 캔버스에 찍습니다. 해당 스탬프에 대한 stamp_id를 반환하는데, "
"``clearstamp(stamp_id)``\\를 호출하여 스탬프를 삭제하는 데 사용할 수 있습니다."

#: ../../library/turtle.rst:773
msgid ""
">>> turtle.color(\"blue\")\n"
">>> stamp_id = turtle.stamp()\n"
">>> turtle.fd(50)"
msgstr ""

#: ../../library/turtle.rst:783
msgid "an integer, must be return value of previous :func:`stamp` call"
msgstr "정수, 이전 :func:`stamp` 호출의 반환 값이어야 합니다"

#: ../../library/turtle.rst:786
msgid "Delete stamp with given *stampid*."
msgstr "지정된 *stampid*\\의 스탬프를 삭제합니다."

#: ../../library/turtle.rst:788
msgid ""
">>> turtle.position()\n"
"(150.00,-0.00)\n"
">>> turtle.color(\"blue\")\n"
">>> astamp = turtle.stamp()\n"
">>> turtle.fd(50)\n"
">>> turtle.position()\n"
"(200.00,-0.00)\n"
">>> turtle.clearstamp(astamp)\n"
">>> turtle.position()\n"
"(200.00,-0.00)"
msgstr ""

#: ../../library/turtle.rst:807
msgid ""
"Delete all or first/last *n* of turtle's stamps.  If *n* is ``None``, "
"delete all stamps, if *n* > 0 delete first *n* stamps, else if *n* < 0 "
"delete last *n* stamps."
msgstr ""
"거북이 스탬프의 전부나 처음/마지막 *n* 개를 삭제합니다. *n*\\이 ``None``\\이면, 모든 스탬프를 삭제합니다, *n*"
" > 0 이면 처음 *n* 스탬프를 삭제하고, *n* < 0 이면 마지막 *n* 스탬프를 삭제합니다."

#: ../../library/turtle.rst:811
msgid ""
">>> for i in range(8):\n"
"...     unused_stamp_id = turtle.stamp()\n"
"...     turtle.fd(30)\n"
">>> turtle.clearstamps(2)\n"
">>> turtle.clearstamps(-2)\n"
">>> turtle.clearstamps()"
msgstr ""

#: ../../library/turtle.rst:823
msgid ""
"Undo (repeatedly) the last turtle action(s).  Number of available undo "
"actions is determined by the size of the undobuffer."
msgstr ""
"마지막 거북이의 행동을 (반복적으로) 되돌립니다. 되돌릴 수 있는 행동의 수는 언두버퍼(undobuffer)의 크기에 따라 "
"결정됩니다."

#: ../../library/turtle.rst:826
msgid ""
">>> for i in range(4):\n"
"...     turtle.fd(50); turtle.lt(80)\n"
"...\n"
">>> for i in range(8):\n"
"...     turtle.undo()"
msgstr ""

#: ../../library/turtle.rst:838
msgid "an integer in the range 0..10 or a speedstring (see below)"
msgstr "0..10 범위의 정수나 속도 문자열 (아래를 참조하십시오)"

#: ../../library/turtle.rst:840
msgid ""
"Set the turtle's speed to an integer value in the range 0..10.  If no "
"argument is given, return current speed."
msgstr "거북이의 속도를 0..10 범위의 정숫값으로 설정합니다. 인자가 없으면, 현재 속도를 반환합니다."

#: ../../library/turtle.rst:843
msgid ""
"If input is a number greater than 10 or smaller than 0.5, speed is set to"
" 0.  Speedstrings are mapped to speedvalues as follows:"
msgstr "입력이 10보다 크거나 0.5보다 작은 숫자면, 속도는 0으로 설정됩니다. 속도 문자열은 다음과 같이 속도 값에 매핑됩니다:"

#: ../../library/turtle.rst:846
msgid "\"fastest\":  0"
msgstr "\"fastest\":  0"

#: ../../library/turtle.rst:847
msgid "\"fast\":  10"
msgstr "\"fast\":  10"

#: ../../library/turtle.rst:848
msgid "\"normal\":  6"
msgstr "\"normal\":  6"

#: ../../library/turtle.rst:849
msgid "\"slow\":  3"
msgstr "\"slow\":  3"

#: ../../library/turtle.rst:850
msgid "\"slowest\":  1"
msgstr "\"slowest\":  1"

#: ../../library/turtle.rst:852
msgid ""
"Speeds from 1 to 10 enforce increasingly faster animation of line drawing"
" and turtle turning."
msgstr "1에서 10까지의 속도는 선 그리기와 거북이 회전의 애니메이션이 점점 더 빨라집니다."

#: ../../library/turtle.rst:855
msgid ""
"Attention: *speed* = 0 means that *no* animation takes place. "
"forward/back makes turtle jump and likewise left/right make the turtle "
"turn instantly."
msgstr ""
"주의: *speed* = 0 은 애니메이션이 발생하지 *않음을* 의미합니다. forward/back은 거북이가 점프하게 만들고 "
"마찬가지로 left/right는 거북이가 순간적으로 방향을 바꾸게 만듭니다."

#: ../../library/turtle.rst:859
msgid ""
">>> turtle.speed()\n"
"3\n"
">>> turtle.speed('normal')\n"
">>> turtle.speed()\n"
"6\n"
">>> turtle.speed(9)\n"
">>> turtle.speed()\n"
"9"
msgstr ""

#: ../../library/turtle.rst:878
msgid "Return the turtle's current location (x,y) (as a :class:`Vec2D` vector)."
msgstr "거북이의 현재 위치 (x, y)를 (:class:`Vec2D` 벡터로) 반환합니다."

#: ../../library/turtle.rst:880
msgid ""
">>> turtle.pos()\n"
"(440.00,-0.00)"
msgstr ""

#: ../../library/turtle.rst:889 ../../library/turtle.rst:952
msgid "a number or a pair/vector of numbers or a turtle instance"
msgstr "숫자 또는 숫자 쌍/벡터 또는 거북이 인스턴스"

#: ../../library/turtle.rst:890 ../../library/turtle.rst:953
msgid "a number if *x* is a number, else ``None``"
msgstr "*x*\\가 숫자면 숫자, 그렇지 않으면 ``None``"

#: ../../library/turtle.rst:892
msgid ""
"Return the angle between the line from turtle position to position "
"specified by (x,y), the vector or the other turtle.  This depends on the "
"turtle's start orientation which depends on the mode - "
"\"standard\"/\"world\" or \"logo\"."
msgstr ""
"거북이 위치에서 (x, y), 벡터 또는 다른 거북이로 지정된 위치로의 선과의 각도를 반환합니다. 이것은 거북이의 시작 방향에 따라"
" 다른데, 이는 모드에 따라 다릅니다 - \"standard\"/\"world\" 또는 \"logo\"."

#: ../../library/turtle.rst:896
msgid ""
">>> turtle.goto(10, 10)\n"
">>> turtle.towards(0,0)\n"
"225.0"
msgstr ""

#: ../../library/turtle.rst:906
msgid "Return the turtle's x coordinate."
msgstr "거북이의 x 좌표를 반환합니다."

#: ../../library/turtle.rst:908
msgid ""
">>> turtle.home()\n"
">>> turtle.left(50)\n"
">>> turtle.forward(100)\n"
">>> turtle.pos()\n"
"(64.28,76.60)\n"
">>> print(round(turtle.xcor(), 5))\n"
"64.27876"
msgstr ""

#: ../../library/turtle.rst:922
msgid "Return the turtle's y coordinate."
msgstr "거북이의 y 좌표를 반환합니다."

#: ../../library/turtle.rst:924
msgid ""
">>> turtle.home()\n"
">>> turtle.left(60)\n"
">>> turtle.forward(100)\n"
">>> print(turtle.pos())\n"
"(50.00,86.60)\n"
">>> print(round(turtle.ycor(), 5))\n"
"86.60254"
msgstr ""

#: ../../library/turtle.rst:938
msgid ""
"Return the turtle's current heading (value depends on the turtle mode, "
"see :func:`mode`)."
msgstr "거북이의 현재 방향을 반환합니다 (값은 거북이 모드에 따라 다릅니다. :func:`mode`\\를 참조하십시오)."

#: ../../library/turtle.rst:941
msgid ""
">>> turtle.home()\n"
">>> turtle.left(67)\n"
">>> turtle.heading()\n"
"67.0"
msgstr ""

#: ../../library/turtle.rst:955
msgid ""
"Return the distance from the turtle to (x,y), the given vector, or the "
"given other turtle, in turtle step units."
msgstr "거북이에서 (x, y), 주어진 벡터 또는 주어진 다른 거북이까지의 거리를 거북이 단계 단위로 반환합니다."

#: ../../library/turtle.rst:958
msgid ""
">>> turtle.home()\n"
">>> turtle.distance(30,40)\n"
"50.0\n"
">>> turtle.distance((30,40))\n"
"50.0\n"
">>> joe = Turtle()\n"
">>> joe.forward(77)\n"
">>> turtle.distance(joe)\n"
"77.0"
msgstr ""

#: ../../library/turtle.rst:973
msgid "Settings for measurement"
msgstr "측정 설정"

#: ../../library/turtle.rst:979
msgid ""
"Set angle measurement units, i.e. set number of \"degrees\" for a full "
"circle. Default value is 360 degrees."
msgstr "각도 측정 단위를 설정합니다, 즉 전체 원에 대한 \"도(degrees)\"의 수를 설정합니다. 기본값은 360도입니다."

#: ../../library/turtle.rst:982
msgid ""
">>> turtle.home()\n"
">>> turtle.left(90)\n"
">>> turtle.heading()\n"
"90.0\n"
"\n"
">>> # Change angle measurement unit to grad (also known as gon,\n"
">>> # grade, or gradian and equals 1/100-th of the right angle.)\n"
">>> turtle.degrees(400.0)\n"
">>> turtle.heading()\n"
"100.0\n"
">>> turtle.degrees(360)\n"
">>> turtle.heading()\n"
"90.0"
msgstr ""

#: ../../library/turtle.rst:1002
msgid ""
"Set the angle measurement units to radians.  Equivalent to "
"``degrees(2*math.pi)``."
msgstr "각도 측정 단위를 라디안으로 설정합니다. ``degrees(2*math.pi)``\\와 동등합니다."

#: ../../library/turtle.rst:1005
msgid ""
">>> turtle.home()\n"
">>> turtle.left(90)\n"
">>> turtle.heading()\n"
"90.0\n"
">>> turtle.radians()\n"
">>> turtle.heading()\n"
"1.5707963267948966"
msgstr ""

#: ../../library/turtle.rst:1033
msgid "Pull the pen down -- drawing when moving."
msgstr "펜을 내립니다 -- 움직일 때 그립니다."

#: ../../library/turtle.rst:1040
msgid "Pull the pen up -- no drawing when moving."
msgstr "펜을 올립니다 -- 움직일 때 그리지 않습니다."

#: ../../library/turtle.rst:1046
msgid "a positive number"
msgstr "양수"

#: ../../library/turtle.rst:1048
msgid ""
"Set the line thickness to *width* or return it.  If resizemode is set to "
"\"auto\" and turtleshape is a polygon, that polygon is drawn with the "
"same line thickness.  If no argument is given, the current pensize is "
"returned."
msgstr ""
"선 두께를 *width*\\로 설정하거나 반환합니다. 크기 조정 모드(resizemode)가 \"auto\"로 설정되고 거북이 "
"모양(shape)이 다각형이면, 해당 다각형은 같은 선 두께로 그려집니다. 인자가 없으면, 현재 펜 크기가 반환됩니다."

#: ../../library/turtle.rst:1052
msgid ""
">>> turtle.pensize()\n"
"1\n"
">>> turtle.pensize(10)   # from here on lines of width 10 are drawn"
msgstr ""

#: ../../library/turtle.rst:1062
msgid "a dictionary with some or all of the below listed keys"
msgstr "아래 나열된 키 중 일부나 전부가 포함된 딕셔너리"

#: ../../library/turtle.rst:1063
msgid "one or more keyword-arguments with the below listed keys as keywords"
msgstr "아래에 나열된 키를 키워드로 사용하는 하나 이상의 키워드 인자"

#: ../../library/turtle.rst:1065
msgid ""
"Return or set the pen's attributes in a \"pen-dictionary\" with the "
"following key/value pairs:"
msgstr "다음 키/값 쌍으로 \"펜 딕셔너리\"에 있는 펜의 속성을 반환하거나 설정합니다:"

#: ../../library/turtle.rst:1068
msgid "\"shown\": True/False"
msgstr "\"shown\": True/False"

#: ../../library/turtle.rst:1069
msgid "\"pendown\": True/False"
msgstr "\"pendown\": True/False"

#: ../../library/turtle.rst:1070
msgid "\"pencolor\": color-string or color-tuple"
msgstr "\"pencolor\": 색상 문자열이나 색상 튜플"

#: ../../library/turtle.rst:1071
msgid "\"fillcolor\": color-string or color-tuple"
msgstr "\"fillcolor\": 색상 문자열이나 색상 튜플"

#: ../../library/turtle.rst:1072
msgid "\"pensize\": positive number"
msgstr "\"pensize\": 양수"

#: ../../library/turtle.rst:1073
msgid "\"speed\": number in range 0..10"
msgstr "\"speed\": 0..10 범위의 숫자"

#: ../../library/turtle.rst:1074
msgid "\"resizemode\": \"auto\" or \"user\" or \"noresize\""
msgstr "\"resizemode\": \"auto\" 또는 \"user\" 또는 \"noresize\""

#: ../../library/turtle.rst:1075
msgid "\"stretchfactor\": (positive number, positive number)"
msgstr "\"stretchfactor\": (양수, 양수)"

#: ../../library/turtle.rst:1076
msgid "\"outline\": positive number"
msgstr "\"outline\": 양수"

#: ../../library/turtle.rst:1077
msgid "\"tilt\": number"
msgstr "\"tilt\": 숫자"

#: ../../library/turtle.rst:1079
msgid ""
"This dictionary can be used as argument for a subsequent call to "
":func:`pen` to restore the former pen-state.  Moreover one or more of "
"these attributes can be provided as keyword-arguments.  This can be used "
"to set several pen attributes in one statement."
msgstr ""
"이 딕셔너리는 이전 펜 상태를 복원하기 위해 :func:`pen`\\의 후속 호출에 대한 인자로 사용될 수 있습니다. 또한 이러한 "
"속성 중 하나 이상을 키워드 인자로 제공할 수 있습니다. 하나의 문장에서 여러 펜 속성을 설정하는 데 사용할 수 있습니다."

#: ../../library/turtle.rst:1084
msgid ""
">>> turtle.pen(fillcolor=\"black\", pencolor=\"red\", pensize=10)\n"
">>> sorted(turtle.pen().items())\n"
"[('fillcolor', 'black'), ('outline', 1), ('pencolor', 'red'),\n"
" ('pendown', True), ('pensize', 10), ('resizemode', 'noresize'),\n"
" ('shearfactor', 0.0), ('shown', True), ('speed', 9),\n"
" ('stretchfactor', (1.0, 1.0)), ('tilt', 0.0)]\n"
">>> penstate=turtle.pen()\n"
">>> turtle.color(\"yellow\", \"\")\n"
">>> turtle.penup()\n"
">>> sorted(turtle.pen().items())[:3]\n"
"[('fillcolor', ''), ('outline', 1), ('pencolor', 'yellow')]\n"
">>> turtle.pen(penstate, fillcolor=\"green\")\n"
">>> sorted(turtle.pen().items())[:3]\n"
"[('fillcolor', 'green'), ('outline', 1), ('pencolor', 'red')]"
msgstr ""

#: ../../library/turtle.rst:1105
msgid "Return ``True`` if pen is down, ``False`` if it's up."
msgstr "펜이 내려가 있으면 ``True``\\를, 올라가 있으면 ``False``\\를 반환합니다."

#: ../../library/turtle.rst:1107
msgid ""
">>> turtle.penup()\n"
">>> turtle.isdown()\n"
"False\n"
">>> turtle.pendown()\n"
">>> turtle.isdown()\n"
"True"
msgstr ""

#: ../../library/turtle.rst:1123
msgid "Return or set the pencolor."
msgstr "펜 색상(pencolor)을 반환하거나 설정합니다."

#: ../../library/turtle.rst:1125 ../../library/turtle.rst:1174
msgid "Four input formats are allowed:"
msgstr "네 가지 입력 형식이 허용됩니다:"

#: ../../library/turtle.rst:1127
msgid "``pencolor()``"
msgstr "``pencolor()``"

#: ../../library/turtle.rst:1128
msgid ""
"Return the current pencolor as color specification string or as a tuple "
"(see example).  May be used as input to another color/pencolor/fillcolor "
"call."
msgstr ""
"현재 펜 색상을 색상 지정 문자열이나 튜플로 반환합니다 (예를 참조하십시오). 다른 color/pencolor/fillcolor "
"호출에 대한 입력으로 사용될 수 있습니다."

#: ../../library/turtle.rst:1132
msgid "``pencolor(colorstring)``"
msgstr "``pencolor(colorstring)``"

#: ../../library/turtle.rst:1133
msgid ""
"Set pencolor to *colorstring*, which is a Tk color specification string, "
"such as ``\"red\"``, ``\"yellow\"``, or ``\"#33cc8c\"``."
msgstr ""
"펜 색상을 ``\"red\"``, ``\"yellow\"`` 또는 ``\"#33cc8c\"``\\와 같은 Tk 색상 지정 문자열인 "
"*colorstring*\\으로 설정합니다."

#: ../../library/turtle.rst:1136
msgid "``pencolor((r, g, b))``"
msgstr "``pencolor((r, g, b))``"

#: ../../library/turtle.rst:1137
msgid ""
"Set pencolor to the RGB color represented by the tuple of *r*, *g*, and "
"*b*.  Each of *r*, *g*, and *b* must be in the range 0..colormode, where "
"colormode is either 1.0 or 255 (see :func:`colormode`)."
msgstr ""
"펜 색상을 *r*, *g* 및 *b*\\의 튜플로 표현되는 RGB 색상으로 설정합니다. *r*, *g* 및 *b* 각각은 "
"0..colormode 범위에 있어야 합니다. 여기서 colormode는 1.0이나 255입니다 "
"(:func:`colormode`\\를 참조하십시오)."

#: ../../library/turtle.rst:1141
msgid "``pencolor(r, g, b)``"
msgstr "``pencolor(r, g, b)``"

#: ../../library/turtle.rst:1142
msgid ""
"Set pencolor to the RGB color represented by *r*, *g*, and *b*.  Each of "
"*r*, *g*, and *b* must be in the range 0..colormode."
msgstr ""
"펜 색상을 *r*, *g* 및 *b*\\로 표현되는 RGB 색상으로 설정합니다. *r*, *g* 및 *b*\\는 각각 "
"0..colormode 범위에 있어야 합니다."

#: ../../library/turtle.rst:1145
msgid ""
"If turtleshape is a polygon, the outline of that polygon is drawn with "
"the newly set pencolor."
msgstr "거북이 모양이 다각형이면, 해당 다각형의 외곽선은 새로 설정된 펜 색상으로 그려집니다."

#: ../../library/turtle.rst:1148
msgid ""
">>> colormode()\n"
"1.0\n"
">>> turtle.pencolor()\n"
"'red'\n"
">>> turtle.pencolor(\"brown\")\n"
">>> turtle.pencolor()\n"
"'brown'\n"
">>> tup = (0.2, 0.8, 0.55)\n"
">>> turtle.pencolor(tup)\n"
">>> turtle.pencolor()\n"
"(0.2, 0.8, 0.5490196078431373)\n"
">>> colormode(255)\n"
">>> turtle.pencolor()\n"
"(51.0, 204.0, 140.0)\n"
">>> turtle.pencolor('#32c18f')\n"
">>> turtle.pencolor()\n"
"(50.0, 193.0, 143.0)"
msgstr ""

#: ../../library/turtle.rst:1172
msgid "Return or set the fillcolor."
msgstr "채우기 색상(fillcolor)을 반환하거나 설정합니다."

#: ../../library/turtle.rst:1176
msgid "``fillcolor()``"
msgstr "``fillcolor()``"

#: ../../library/turtle.rst:1177
msgid ""
"Return the current fillcolor as color specification string, possibly in "
"tuple format (see example).  May be used as input to another "
"color/pencolor/fillcolor call."
msgstr ""
"현재 채우기 색상을 색상 지정 문자열로 (튜플 형식으로도 가능합니다) 반환합니다 (예를 참조하십시오). 다른 "
"color/pencolor/fillcolor 호출에 대한 입력으로 사용될 수 있습니다."

#: ../../library/turtle.rst:1181
msgid "``fillcolor(colorstring)``"
msgstr "``fillcolor(colorstring)``"

#: ../../library/turtle.rst:1182
msgid ""
"Set fillcolor to *colorstring*, which is a Tk color specification string,"
" such as ``\"red\"``, ``\"yellow\"``, or ``\"#33cc8c\"``."
msgstr ""
"채우기 색상을 ``\"red\"``, ``\"yellow\"`` 또는 ``\"#33cc8c\"``\\와 같은 Tk 색상 지정 "
"문자열인 *colorstring*\\으로 설정합니다."

#: ../../library/turtle.rst:1185
msgid "``fillcolor((r, g, b))``"
msgstr "``fillcolor((r, g, b))``"

#: ../../library/turtle.rst:1186
msgid ""
"Set fillcolor to the RGB color represented by the tuple of *r*, *g*, and "
"*b*.  Each of *r*, *g*, and *b* must be in the range 0..colormode, where "
"colormode is either 1.0 or 255 (see :func:`colormode`)."
msgstr ""
"채우기 색상을 *r*, *g* 및 *b*\\의 튜플로 표현되는 RGB 색상으로 설정합니다. *r*, *g* 및 *b* 각각은 "
"0..colormode 범위에 있어야 합니다. 여기서 colormode는 1.0이나 255입니다 "
"(:func:`colormode`\\를 참조하십시오)."

#: ../../library/turtle.rst:1190
msgid "``fillcolor(r, g, b)``"
msgstr "``fillcolor(r, g, b)``"

#: ../../library/turtle.rst:1191
msgid ""
"Set fillcolor to the RGB color represented by *r*, *g*, and *b*.  Each of"
" *r*, *g*, and *b* must be in the range 0..colormode."
msgstr ""
"채우기 색상을 *r*, *g* 및 *b*\\로 표현되는 RGB 색상으로 설정합니다. *r*, *g* 및 *b*\\는 각각 "
"0..colormode 범위에 있어야 합니다."

#: ../../library/turtle.rst:1194
msgid ""
"If turtleshape is a polygon, the interior of that polygon is drawn with "
"the newly set fillcolor."
msgstr "거북이 모양이 다각형이면, 해당 다각형의 내부는 새로 설정된 채우기 색상으로 그려집니다."

#: ../../library/turtle.rst:1197
msgid ""
">>> turtle.fillcolor(\"violet\")\n"
">>> turtle.fillcolor()\n"
"'violet'\n"
">>> turtle.pencolor()\n"
"(50.0, 193.0, 143.0)\n"
">>> turtle.fillcolor((50, 193, 143))  # Integers, not floats\n"
">>> turtle.fillcolor()\n"
"(50.0, 193.0, 143.0)\n"
">>> turtle.fillcolor('#ffffff')\n"
">>> turtle.fillcolor()\n"
"(255.0, 255.0, 255.0)"
msgstr ""

#: ../../library/turtle.rst:1215
msgid "Return or set pencolor and fillcolor."
msgstr "펜 색상과 채우기 색상을 반환하거나 설정합니다."

#: ../../library/turtle.rst:1217
msgid "Several input formats are allowed.  They use 0 to 3 arguments as follows:"
msgstr "몇 가지 입력 형식이 허용됩니다. 다음과 같이 0에서 3개의 인자를 사용합니다:"

#: ../../library/turtle.rst:1220
msgid "``color()``"
msgstr "``color()``"

#: ../../library/turtle.rst:1221
msgid ""
"Return the current pencolor and the current fillcolor as a pair of color "
"specification strings or tuples as returned by :func:`pencolor` and "
":func:`fillcolor`."
msgstr ""
":func:`pencolor`\\와 :func:`fillcolor`\\에 의해 반환된 현재 펜 색상과 현재 채우기 색상을 한 쌍의 "
"색 지정 문자열이나 튜플로 반환합니다."

#: ../../library/turtle.rst:1225
msgid "``color(colorstring)``, ``color((r,g,b))``, ``color(r,g,b)``"
msgstr "``color(colorstring)``, ``color((r,g,b))``, ``color(r,g,b)``"

#: ../../library/turtle.rst:1226
msgid ""
"Inputs as in :func:`pencolor`, set both, fillcolor and pencolor, to the "
"given value."
msgstr ":func:`pencolor`\\에서와 같은 입력, 채우기 색상과 펜 색상을 모두 주어진 값으로 설정합니다."

#: ../../library/turtle.rst:1229
msgid "``color(colorstring1, colorstring2)``, ``color((r1,g1,b1), (r2,g2,b2))``"
msgstr "``color(colorstring1, colorstring2)``, ``color((r1,g1,b1), (r2,g2,b2))``"

#: ../../library/turtle.rst:1230
msgid ""
"Equivalent to ``pencolor(colorstring1)`` and ``fillcolor(colorstring2)`` "
"and analogously if the other input format is used."
msgstr ""
"``pencolor(colorstring1)``\\과 ``fillcolor(colorstring2)``\\와 동등하며 다른 입력 "
"형식을 사용하는 경우도 유사합니다."

#: ../../library/turtle.rst:1233
msgid ""
"If turtleshape is a polygon, outline and interior of that polygon is "
"drawn with the newly set colors."
msgstr "거북이 모양이 다각형이면, 해당 다각형의 외곽선과 내부가 새로 설정된 색상으로 그려집니다."

#: ../../library/turtle.rst:1236
msgid ""
">>> turtle.color(\"red\", \"green\")\n"
">>> turtle.color()\n"
"('red', 'green')\n"
">>> color(\"#285078\", \"#a0c8f0\")\n"
">>> color()\n"
"((40.0, 80.0, 120.0), (160.0, 200.0, 240.0))"
msgstr ""

#: ../../library/turtle.rst:1247
msgid "See also: Screen method :func:`colormode`."
msgstr "참조: Screen 메서드 :func:`colormode`."

#: ../../library/turtle.rst:1261
msgid "Return fillstate (``True`` if filling, ``False`` else)."
msgstr "채우기 상태(fillstate)를 반환합니다 (채우면 ``True``, 그렇지 않으면 ``False``)."

#: ../../library/turtle.rst:1263
msgid ""
">>> turtle.begin_fill()\n"
">>> if turtle.filling():\n"
"...    turtle.pensize(5)\n"
"... else:\n"
"...    turtle.pensize(3)"
msgstr ""

#: ../../library/turtle.rst:1276
msgid "To be called just before drawing a shape to be filled."
msgstr "채울 모양을 그리기 직전에 호출됩니다."

#: ../../library/turtle.rst:1281
msgid "Fill the shape drawn after the last call to :func:`begin_fill`."
msgstr ":func:`begin_fill`\\을 마지막으로 호출한 후 그린 모양을 채웁니다."

#: ../../library/turtle.rst:1283
msgid ""
"Whether or not overlap regions for self-intersecting polygons or multiple"
" shapes are filled depends on the operating system graphics, type of "
"overlap, and number of overlaps.  For example, the Turtle star above may "
"be either all yellow or have some white regions."
msgstr ""
"스스로 교차하는 다각형이나 여러 도형의 겹치는 영역이 채워지는지는 운영 체제 그래픽, 겹침의 유형 및 겹침의 수에 따라 다릅니다. "
"예를 들어, 위의 거북이 별은 모두 노란색이거나 일부 흰색 영역이 있을 수 있습니다."

#: ../../library/turtle.rst:1288
msgid ""
">>> turtle.color(\"black\", \"red\")\n"
">>> turtle.begin_fill()\n"
">>> turtle.circle(80)\n"
">>> turtle.end_fill()"
msgstr ""

#: ../../library/turtle.rst:1302
msgid ""
"Delete the turtle's drawings from the screen, re-center the turtle and "
"set variables to the default values."
msgstr "화면에서 거북이의 그림을 삭제하고, 거북이를 다시 중심으로 옮기고, 변수를 기본값으로 설정합니다."

#: ../../library/turtle.rst:1305
msgid ""
">>> turtle.goto(0,-22)\n"
">>> turtle.left(100)\n"
">>> turtle.position()\n"
"(0.00,-22.00)\n"
">>> turtle.heading()\n"
"100.0\n"
">>> turtle.reset()\n"
">>> turtle.position()\n"
"(0.00,0.00)\n"
">>> turtle.heading()\n"
"0.0"
msgstr ""

#: ../../library/turtle.rst:1323
msgid ""
"Delete the turtle's drawings from the screen.  Do not move turtle.  State"
" and position of the turtle as well as drawings of other turtles are not "
"affected."
msgstr ""
"화면에서 거북이 그림을 삭제합니다. 거북이를 움직이지 않습니다. 다른 거북이의 그림뿐만 아니라 거북이의 상태와 위치는 영향을 받지 "
"않습니다."

#: ../../library/turtle.rst:1329
msgid "object to be written to the TurtleScreen"
msgstr "TurtleScreen에 기록될 객체"

#: ../../library/turtle.rst:1330
msgid "True/False"
msgstr "True/False"

#: ../../library/turtle.rst:1331
msgid "one of the strings \"left\", \"center\" or right\""
msgstr "\"left\", \"center\" 또는 \"right\" 문자열 중 하나"

#: ../../library/turtle.rst:1332
msgid "a triple (fontname, fontsize, fonttype)"
msgstr "3-튜플 (fontname, fontsize, fonttype)"

#: ../../library/turtle.rst:1334
msgid ""
"Write text - the string representation of *arg* - at the current turtle "
"position according to *align* (\"left\", \"center\" or \"right\") and "
"with the given font.  If *move* is true, the pen is moved to the bottom-"
"right corner of the text.  By default, *move* is ``False``."
msgstr ""
"*align*\\(\"left\", \"center\" 또는 \"right\")에 따라 현재 거북이 위치에서 주어진 "
"글꼴(font)로 텍스트 - *arg*\\의 문자열 표현 - 를 기록합니다. *move*\\가 참이면, 펜이 텍스트의 오른쪽 아래 "
"모서리로 이동합니다. 기본적으로, *move*\\는 ``False``\\입니다."

#: ../../library/turtle.rst:1352
msgid ""
"Make the turtle invisible.  It's a good idea to do this while you're in "
"the middle of doing some complex drawing, because hiding the turtle "
"speeds up the drawing observably."
msgstr ""
"거북이를 보이지 않게 합니다. 거북이를 숨기면 그리기 속도가 눈에 띄게 빨라지므로, 복잡한 그리기를 하는 동안 이렇게 하는 것이 "
"좋습니다."

#: ../../library/turtle.rst:1356
msgid ">>> turtle.hideturtle()"
msgstr ""

#: ../../library/turtle.rst:1365
msgid "Make the turtle visible."
msgstr "거북이가 보이게 합니다."

#: ../../library/turtle.rst:1367
msgid ">>> turtle.showturtle()"
msgstr ""

#: ../../library/turtle.rst:1375
msgid "Return ``True`` if the Turtle is shown, ``False`` if it's hidden."
msgstr "거북이가 보이면 ``True``\\를, 숨겨져 있으면 ``False``\\를 반환합니다."

#: ../../library/turtle.rst:1390
msgid "a string which is a valid shapename"
msgstr "유효한 모양 이름(shapename)인 문자열"

#: ../../library/turtle.rst:1392
msgid ""
"Set turtle shape to shape with given *name* or, if name is not given, "
"return name of current shape.  Shape with *name* must exist in the "
"TurtleScreen's shape dictionary.  Initially there are the following "
"polygon shapes: \"arrow\", \"turtle\", \"circle\", \"square\", "
"\"triangle\", \"classic\".  To learn about how to deal with shapes see "
"Screen method :func:`register_shape`."
msgstr ""
"주어진 *name*\\의 모양으로 거북이 모양을 설정하거나, 이름이 없으면 현재 모양의 이름을 반환합니다. *name*\\의 모양은"
" TurtleScreen의 모양 딕셔너리에 있어야 합니다. 처음에는 다음과 같은 다각형 모양이 있습니다: \"arrow\", "
"\"turtle\", \"circle\", \"square\", \"triangle\", \"classic\". 모양을 다루는 "
"방법에 대한 자세한 내용은 Screen 메서드 :func:`register_shape`\\을 참조하십시오."

#: ../../library/turtle.rst:1398
msgid ""
">>> turtle.shape()\n"
"'classic'\n"
">>> turtle.shape(\"turtle\")\n"
">>> turtle.shape()\n"
"'turtle'"
msgstr ""

#: ../../library/turtle.rst:1410
msgid "one of the strings \"auto\", \"user\", \"noresize\""
msgstr "문자열 \"auto\", \"user\", \"noresize\" 중 하나"

#: ../../library/turtle.rst:1412
msgid ""
"Set resizemode to one of the values: \"auto\", \"user\", \"noresize\".  "
"If *rmode* is not given, return current resizemode.  Different "
"resizemodes have the following effects:"
msgstr ""
"크기 조정 모드(resizemode)를 다음 값 중 하나로 설정합니다: \"auto\", \"user\", \"noresize\"."
" *rmode*\\가 제공되지 않으면, 현재 크기 조정 모드를 반환합니다. 각 크기 조정 모드는 다음과 같은 효과가 있습니다:"

#: ../../library/turtle.rst:1416
msgid ""
"\"auto\": adapts the appearance of the turtle corresponding to the value "
"of pensize."
msgstr "\"auto\": 펜 크기(pensize)의 값에 맞춰 거북이의 외관을 조정합니다."

#: ../../library/turtle.rst:1417
msgid ""
"\"user\": adapts the appearance of the turtle according to the values of "
"stretchfactor and outlinewidth (outline), which are set by "
":func:`shapesize`."
msgstr ""
"\"user\": :func:`shapesize`\\로 설정된 stretchfactor와 outlinewidth (outline) "
"값에 따라 거북이의 외관을 조정합니다."

#: ../../library/turtle.rst:1420
msgid "\"noresize\": no adaption of the turtle's appearance takes place."
msgstr "\"noresize\": 거북이의 외관 조정이 일어나지 않습니다."

#: ../../library/turtle.rst:1422
msgid ""
"``resizemode(\"user\")`` is called by :func:`shapesize` when used with "
"arguments."
msgstr ":func:`shapesize`\\에 인자를 사용하면 ``resizemode(\"user\")`` 를 호출합니다."

#: ../../library/turtle.rst:1424
msgid ""
">>> turtle.resizemode()\n"
"'noresize'\n"
">>> turtle.resizemode(\"auto\")\n"
">>> turtle.resizemode()\n"
"'auto'"
msgstr ""

#: ../../library/turtle.rst:1437 ../../library/turtle.rst:1438
#: ../../library/turtle.rst:1439
msgid "positive number"
msgstr "양수"

#: ../../library/turtle.rst:1441
#, fuzzy
msgid ""
"Return or set the pen's attributes x/y-stretchfactors and/or outline.  "
"Set resizemode to \"user\".  If and only if resizemode is set to "
"\"user\", the turtle will be displayed stretched according to its "
"stretchfactors: *stretch_wid* is stretchfactor perpendicular to its "
"orientation, *stretch_len* is stretchfactor in direction of its "
"orientation, *outline* determines the width of the shape's outline."
msgstr ""
"펜의 속성 x/y-stretchfactor 및/또는 outline을 반환하거나 설정합니다. 크기 조정 모드(resizemode)를 "
"\"user\"로 설정합니다. 크기 조정 모드(resizemode)가 \"user\"로 설정될 때만, 거북이가 신축 "
"계수(stretchfactor)에 따라 늘려서 표시됩니다: *stretch_wid*\\는 방향에 수직인 신축 계수, "
"*stretch_len*\\은 방향 쪽의 신축 계수이고, *outline*\\은 모양의 윤곽의 너비를 결정합니다."

#: ../../library/turtle.rst:1448
msgid ""
">>> turtle.shapesize()\n"
"(1.0, 1.0, 1)\n"
">>> turtle.resizemode(\"user\")\n"
">>> turtle.shapesize(5, 5, 12)\n"
">>> turtle.shapesize()\n"
"(5, 5, 12)\n"
">>> turtle.shapesize(outline=8)\n"
">>> turtle.shapesize()\n"
"(5, 5, 8)"
msgstr ""

#: ../../library/turtle.rst:1464 ../../library/turtle.rst:2101
#: ../../library/turtle.rst:2102 ../../library/turtle.rst:2103
msgid "number (optional)"
msgstr "숫자 (선택 사항)"

#: ../../library/turtle.rst:1466
msgid ""
"Set or return the current shearfactor. Shear the turtleshape according to"
" the given shearfactor shear, which is the tangent of the shear angle. Do"
" *not* change the turtle's heading (direction of movement). If shear is "
"not given: return the current shearfactor, i. e. the tangent of the shear"
" angle, by which lines parallel to the heading of the turtle are sheared."
msgstr ""
"기울기 계수(shearfactor)를 설정하거나 반환합니다. 주어진 기울기 계수 shear(기울기 각의 탄젠트입니다)에 따라 거북이"
" 모양을 기울입니다. 거북이의 방향(이동 방향)을 변경하지 *않습니다*. shear가 제공되지 않으면: 현재 기울기 "
"계수(shearfactor)를, 즉 기울기 각도의 탄젠트를 반환합니다. 기울기 각도는 거북이의 방향에 평행한 직선이 기울어진 "
"각도입니다."

#: ../../library/turtle.rst:1473
msgid ""
">>> turtle.shape(\"circle\")\n"
">>> turtle.shapesize(5,2)\n"
">>> turtle.shearfactor(0.5)\n"
">>> turtle.shearfactor()\n"
"0.5"
msgstr ""

#: ../../library/turtle.rst:1487
msgid ""
"Rotate the turtleshape by *angle* from its current tilt-angle, but do "
"*not* change the turtle's heading (direction of movement)."
msgstr ""
"현재 틸트 각도(tilt-angle)에서 거북이 모양을 *angle*\\만큼 회전합니다. 그러나 거북이의 방향(이동 방향)을 "
"변경하지 *않습니다*."

#: ../../library/turtle.rst:1490
msgid ""
">>> turtle.reset()\n"
">>> turtle.shape(\"circle\")\n"
">>> turtle.shapesize(5,2)\n"
">>> turtle.tilt(30)\n"
">>> turtle.fd(50)\n"
">>> turtle.tilt(30)\n"
">>> turtle.fd(50)"
msgstr ""

#: ../../library/turtle.rst:1504 ../../library/turtle.rst:1527
#: ../../library/turtle.rst:1528 ../../library/turtle.rst:1529
#: ../../library/turtle.rst:1530
msgid "a number (optional)"
msgstr "숫자 (선택 사항)"

#: ../../library/turtle.rst:1506
msgid ""
"Set or return the current tilt-angle. If angle is given, rotate the "
"turtleshape to point in the direction specified by angle, regardless of "
"its current tilt-angle. Do *not* change the turtle's heading (direction "
"of movement). If angle is not given: return the current tilt-angle, i. e."
" the angle between the orientation of the turtleshape and the heading of "
"the turtle (its direction of movement)."
msgstr ""
"현재 틸트 각도(tilt-angle)를 설정하거나 반환합니다. angle이 주어지면, 현재 틸트 각도(tilt-angle)와 "
"관계없이 거북이 모양을 angle이 지정하는 방향을 가리키도록 회전합니다. 거북이의 방향(이동 방향)을 변경하지 *않습니다*. "
"angle이 주어지지 않으면: 현재 틸트 각도, 즉 거북이 모양의 방향과 거북이 방향(이동 방향) 사이의 각도를 반환합니다."

#: ../../library/turtle.rst:1514
msgid ""
">>> turtle.reset()\n"
">>> turtle.shape(\"circle\")\n"
">>> turtle.shapesize(5,2)\n"
">>> turtle.tilt(45)\n"
">>> turtle.tiltangle()\n"
"45.0"
msgstr ""

#: ../../library/turtle.rst:1532
msgid "Set or return the current transformation matrix of the turtle shape."
msgstr "거북이 모양의 현재 변환 행렬을 설정하거나 반환합니다."

#: ../../library/turtle.rst:1534
msgid ""
"If none of the matrix elements are given, return the transformation "
"matrix as a tuple of 4 elements. Otherwise set the given elements and "
"transform the turtleshape according to the matrix consisting of first row"
" t11, t12 and second row t21, t22. The determinant t11 * t22 - t12 * t21 "
"must not be zero, otherwise an error is raised. Modify stretchfactor, "
"shearfactor and tiltangle according to the given matrix."
msgstr ""
"행렬 요소가 아무것도 제공되지 않으면, 변환 행렬을 4개 요소의 튜플로 반환합니다. 그렇지 않으면, 주어진 요소를 설정하고 첫 번째"
" 행 t11, t12와 두 번째 행 t21, t22로 구성된 행렬에 따라 거북이 모양을 변환합니다. 행렬식(determinant) "
"t11 * t22 - t12 * t21은 0이 아니어야 합니다, 그렇지 않으면 에러가 발생합니다. 주어진 행렬에 따라 신축 "
"계수(stretchfactor), 기울기 계수(shearfactor) 및 틸트 각도(tiltangle)를 수정합니다."

#: ../../library/turtle.rst:1543
msgid ""
">>> turtle = Turtle()\n"
">>> turtle.shape(\"square\")\n"
">>> turtle.shapesize(4,2)\n"
">>> turtle.shearfactor(-0.5)\n"
">>> turtle.shapetransform()\n"
"(4.0, -1.0, -0.0, 2.0)"
msgstr ""

#: ../../library/turtle.rst:1556
msgid ""
"Return the current shape polygon as tuple of coordinate pairs. This can "
"be used to define a new shape or components of a compound shape."
msgstr "현재 모양 다각형을 좌표 쌍의 튜플로 반환합니다. 이것은 새로운 모양이나 복합 모양의 구성 요소를 정의하는 데 사용할 수 있습니다."

#: ../../library/turtle.rst:1559
msgid ""
">>> turtle.shape(\"square\")\n"
">>> turtle.shapetransform(4, -1, 0, 2)\n"
">>> turtle.get_shapepoly()\n"
"((50, -20), (30, 20), (-50, 20), (-30, -20))"
msgstr ""

#: ../../library/turtle.rst:1574 ../../library/turtle.rst:1596
#: ../../library/turtle.rst:1621 ../../library/turtle.rst:2025
msgid ""
"a function with two arguments which will be called with the coordinates "
"of the clicked point on the canvas"
msgstr "캔버스에서 클릭한 점의 좌표로 호출되는 두 개의 인자가 있는 함수"

#: ../../library/turtle.rst:1576 ../../library/turtle.rst:1598
#: ../../library/turtle.rst:1623 ../../library/turtle.rst:2027
msgid "number of the mouse-button, defaults to 1 (left mouse button)"
msgstr "마우스 버튼 수, 기본값은 1 (마우스 왼쪽 버튼)"

#: ../../library/turtle.rst:1577 ../../library/turtle.rst:1599
#: ../../library/turtle.rst:1624 ../../library/turtle.rst:2028
msgid ""
"``True`` or ``False`` -- if ``True``, a new binding will be added, "
"otherwise it will replace a former binding"
msgstr "``True`` 또는 ``False`` -- ``True``\\이면, 새 연결이 추가되고, 그렇지 않으면 이전 연결을 대체합니다"

#: ../../library/turtle.rst:1580
msgid ""
"Bind *fun* to mouse-click events on this turtle.  If *fun* is ``None``, "
"existing bindings are removed.  Example for the anonymous turtle, i.e. "
"the procedural way:"
msgstr ""
"이 거북이의 마우스 클릭 이벤트에 *fun*\\을 연결합니다. *fun*\\이 ``None``\\이면 기존 연결이 제거됩니다. "
"익명의 거북이, 즉 절차적 방법의 예:"

#: ../../library/turtle.rst:1584
msgid ""
">>> def turn(x, y):\n"
"...     left(180)\n"
"...\n"
">>> onclick(turn)  # Now clicking into the turtle will turn it.\n"
">>> onclick(None)  # event-binding will be removed"
msgstr ""

#: ../../library/turtle.rst:1602
msgid ""
"Bind *fun* to mouse-button-release events on this turtle.  If *fun* is "
"``None``, existing bindings are removed."
msgstr "이 거북이의 마우스 버튼 해제 이벤트에 *fun*\\을 연결합니다. *fun*\\이 ``None``\\이면 기존 연결이 제거됩니다."

#: ../../library/turtle.rst:1605
msgid ""
">>> class MyTurtle(Turtle):\n"
"...     def glow(self,x,y):\n"
"...         self.fillcolor(\"red\")\n"
"...     def unglow(self,x,y):\n"
"...         self.fillcolor(\"\")\n"
"...\n"
">>> turtle = MyTurtle()\n"
">>> turtle.onclick(turtle.glow)     # clicking on turtle turns fillcolor "
"red,\n"
">>> turtle.onrelease(turtle.unglow) # releasing turns it to transparent."
msgstr ""

#: ../../library/turtle.rst:1627
msgid ""
"Bind *fun* to mouse-move events on this turtle.  If *fun* is ``None``, "
"existing bindings are removed."
msgstr "이 거북이의 마우스 이동 이벤트에 *fun*\\을 연결합니다. *fun*\\이 ``None``\\이면 기존 연결이 제거됩니다."

#: ../../library/turtle.rst:1630
msgid ""
"Remark: Every sequence of mouse-move-events on a turtle is preceded by a "
"mouse-click event on that turtle."
msgstr "참고: 거북이의 모든 마우스 이동 이벤트에 앞서 해당 거북이의 마우스 클릭 이벤트가 선행합니다."

#: ../../library/turtle.rst:1633
msgid ">>> turtle.ondrag(turtle.goto)"
msgstr ""

#: ../../library/turtle.rst:1638
msgid ""
"Subsequently, clicking and dragging the Turtle will move it across the "
"screen thereby producing handdrawings (if pen is down)."
msgstr "그 후, 거북이를 클릭하고 드래그하면 화면을 가로질러 거북이가 움직여 손 그림을 생성합니다 (펜이 내려가 있다면)."

#: ../../library/turtle.rst:1647
msgid ""
"Start recording the vertices of a polygon.  Current turtle position is "
"first vertex of polygon."
msgstr "다각형의 꼭짓점 기록을 시작합니다. 현재 거북이 위치가 다각형의 첫 번째 꼭짓점입니다."

#: ../../library/turtle.rst:1653
msgid ""
"Stop recording the vertices of a polygon.  Current turtle position is "
"last vertex of polygon.  This will be connected with the first vertex."
msgstr "다각형의 꼭짓점 기록을 중지합니다. 현재 거북이 위치가 다각형의 마지막 꼭짓점입니다. 첫 번째 꼭짓점과 연결됩니다."

#: ../../library/turtle.rst:1659
msgid "Return the last recorded polygon."
msgstr "마지막으로 기록된 다각형을 반환합니다."

#: ../../library/turtle.rst:1661
msgid ""
">>> turtle.home()\n"
">>> turtle.begin_poly()\n"
">>> turtle.fd(100)\n"
">>> turtle.left(20)\n"
">>> turtle.fd(30)\n"
">>> turtle.left(60)\n"
">>> turtle.fd(50)\n"
">>> turtle.end_poly()\n"
">>> p = turtle.get_poly()\n"
">>> register_shape(\"myFavouriteShape\", p)"
msgstr ""

#: ../../library/turtle.rst:1678
msgid ""
"Create and return a clone of the turtle with same position, heading and "
"turtle properties."
msgstr "같은 위치, 방향 및 거북이 속성을 가진 거북이 복제본을 만들고 반환합니다."

#: ../../library/turtle.rst:1681
msgid ""
">>> mick = Turtle()\n"
">>> joe = mick.clone()"
msgstr ""

#: ../../library/turtle.rst:1691
msgid ""
"Return the Turtle object itself.  Only reasonable use: as a function to "
"return the \"anonymous turtle\":"
msgstr "거북이 객체 자체를 반환합니다. 합리적인 용도로만 사용하십시오: \"익명 거북이\"를 반환하는 함수로:"

#: ../../library/turtle.rst:1694
msgid ""
">>> pet = getturtle()\n"
">>> pet.fd(50)\n"
">>> pet\n"
"<turtle.Turtle object at 0x...>"
msgstr ""

#: ../../library/turtle.rst:1705
msgid ""
"Return the :class:`TurtleScreen` object the turtle is drawing on. "
"TurtleScreen methods can then be called for that object."
msgstr ""
"거북이가 그리는 :class:`TurtleScreen` 객체를 반환합니다. 그런 다음 해당 객체에 대해 TurtleScreen "
"메서드를 호출할 수 있습니다."

#: ../../library/turtle.rst:1708
msgid ""
">>> ts = turtle.getscreen()\n"
">>> ts\n"
"<turtle._Screen object at 0x...>\n"
">>> ts.bgcolor(\"pink\")"
msgstr ""

#: ../../library/turtle.rst:1719
msgid "an integer or ``None``"
msgstr "정수나 ``None``"

#: ../../library/turtle.rst:1721
msgid ""
"Set or disable undobuffer.  If *size* is an integer, an empty undobuffer "
"of given size is installed.  *size* gives the maximum number of turtle "
"actions that can be undone by the :func:`undo` method/function.  If "
"*size* is ``None``, the undobuffer is disabled."
msgstr ""
"언두버퍼(undobuffer)를 설정하거나 비활성화합니다. *size*\\가 정수이면, 지정된 크기의 빈 언두버퍼가 설치됩니다. "
"*size*\\는 :func:`undo` 메서드/함수로 취소할 수 있는 최대 거북이 액션 수를 제공합니다. *size*\\가 "
"``None``\\이면, 언두버퍼가 비활성화됩니다."

#: ../../library/turtle.rst:1726
msgid ">>> turtle.setundobuffer(42)"
msgstr ""

#: ../../library/turtle.rst:1734
msgid "Return number of entries in the undobuffer."
msgstr "언두버퍼에 있는 항목 수를 반환합니다."

#: ../../library/turtle.rst:1736
msgid ""
">>> while undobufferentries():\n"
"...     undo()"
msgstr ""

#: ../../library/turtle.rst:1747
msgid "Compound shapes"
msgstr "복합 모양"

#: ../../library/turtle.rst:1749
msgid ""
"To use compound turtle shapes, which consist of several polygons of "
"different color, you must use the helper class :class:`Shape` explicitly "
"as described below:"
msgstr ""
"다른 색상의 여러 다각형으로 구성된 복합 거북이 모양을 사용하려면, 아래 설명된 대로 도우미 클래스 :class:`Shape`\\을"
" 명시적으로 사용해야 합니다:"

#: ../../library/turtle.rst:1753
msgid "Create an empty Shape object of type \"compound\"."
msgstr "\"compound\" 유형의 빈 Shape 객체를 만듭니다."

#: ../../library/turtle.rst:1754
#, fuzzy
msgid ""
"Add as many components to this object as desired, using the "
":meth:`~Shape.addcomponent` method."
msgstr ":meth:`addcomponent` 메서드를 사용하여, 원하는 만큼 이 객체에 구성 요소를 추가합니다."

#: ../../library/turtle.rst:1757
msgid "For example:"
msgstr "예를 들면:"

#: ../../library/turtle.rst:1759
msgid ""
">>> s = Shape(\"compound\")\n"
">>> poly1 = ((0,0),(10,-5),(0,10),(-10,-5))\n"
">>> s.addcomponent(poly1, \"red\", \"blue\")\n"
">>> poly2 = ((0,0),(10,-5),(-10,-5))\n"
">>> s.addcomponent(poly2, \"blue\", \"red\")"
msgstr ""

#: ../../library/turtle.rst:1768
msgid "Now add the Shape to the Screen's shapelist and use it:"
msgstr "이제 Shape을 Screen의 모양 리스트(shapelist)에 추가하고 사용합니다:"

#: ../../library/turtle.rst:1770
msgid ""
">>> register_shape(\"myshape\", s)\n"
">>> shape(\"myshape\")"
msgstr ""

#: ../../library/turtle.rst:1779
msgid ""
"The :class:`Shape` class is used internally by the :func:`register_shape`"
" method in different ways.  The application programmer has to deal with "
"the Shape class *only* when using compound shapes like shown above!"
msgstr ""
":class:`Shape` 클래스는 :func:`register_shape` 메서드에 의해 내부적으로 다른 방식으로 사용됩니다. "
"응용 프로그램 프로그래머는 위와 같이 복합 모양을 사용할 때 *만* Shape 클래스를 다뤄야 합니다!"

#: ../../library/turtle.rst:1785
msgid "Methods of TurtleScreen/Screen and corresponding functions"
msgstr "TurtleScreen/Screen 메서드와 해당 함수"

#: ../../library/turtle.rst:1787
msgid ""
"Most of the examples in this section refer to a TurtleScreen instance "
"called ``screen``."
msgstr "이 섹션의 대부분의 예제는 ``screen``\\이라는 TurtleScreen 인스턴스를 참조합니다."

#: ../../library/turtle.rst:1801
msgid ""
"a color string or three numbers in the range 0..colormode or a 3-tuple of"
" such numbers"
msgstr "색상 문자열이나 0..colormode 범위의 3개의 숫자 또는 이러한 숫자의 3-튜플"

#: ../../library/turtle.rst:1805
msgid "Set or return background color of the TurtleScreen."
msgstr "TurtleScreen의 배경색을 설정하거나 반환합니다."

#: ../../library/turtle.rst:1807
msgid ""
">>> screen.bgcolor(\"orange\")\n"
">>> screen.bgcolor()\n"
"'orange'\n"
">>> screen.bgcolor(\"#800080\")\n"
">>> screen.bgcolor()\n"
"(128.0, 0.0, 128.0)"
msgstr ""

#: ../../library/turtle.rst:1820
msgid "a string, name of a gif-file or ``\"nopic\"``, or ``None``"
msgstr "문자열, gif 파일의 이름 또는 ``\"nopic\"``, 또는 ``None``"

#: ../../library/turtle.rst:1822
msgid ""
"Set background image or return name of current backgroundimage.  If "
"*picname* is a filename, set the corresponding image as background.  If "
"*picname* is ``\"nopic\"``, delete background image, if present.  If "
"*picname* is ``None``, return the filename of the current "
"backgroundimage. ::"
msgstr ""
"배경 이미지를 설정하거나 현재 배경 이미지(backgroundimage)의 이름을 반환합니다. *picname*\\이 파일명이면, "
"해당 이미지를 배경으로 설정합니다. *picname*\\이 ``\"nopic\"``\\이면, 배경 이미지가 있다면 삭제합니다. "
"*picname*\\이 ``None``\\이면, 현재 배경 이미지(backgroundimage)의 파일명을 반환합니다. ::"

#: ../../library/turtle.rst:1827
msgid ""
">>> screen.bgpic()\n"
"'nopic'\n"
">>> screen.bgpic(\"landscape.gif\")\n"
">>> screen.bgpic()\n"
"\"landscape.gif\""
msgstr ""

#: ../../library/turtle.rst:1838
msgid ""
"This TurtleScreen method is available as a global function only under the"
" name ``clearscreen``.  The global function ``clear`` is a different one "
"derived from the Turtle method ``clear``."
msgstr ""
"이 TurtleScreen 메서드는 ``clearscreen``\\이라는 이름으로만 전역 함수로 사용할 수 있습니다. 전역 함수 "
"``clear``\\는 Turtle 메서드 ``clear``\\에서 파생된 다른 것입니다."

#: ../../library/turtle.rst:1845
msgid ""
"Delete all drawings and all turtles from the TurtleScreen.  Reset the now"
" empty TurtleScreen to its initial state: white background, no background"
" image, no event bindings and tracing on."
msgstr ""
"TurtleScreen에서 모든 그림과 모든 거북이를 삭제합니다. 이제 비어있는 TurtleScreen을 초기 상태로 재설정합니다:"
" 흰색 배경, 배경 이미지 없음, 이벤트 연결과 추적 없음."

#: ../../library/turtle.rst:1854
msgid ""
"This TurtleScreen method is available as a global function only under the"
" name ``resetscreen``.  The global function ``reset`` is another one "
"derived from the Turtle method ``reset``."
msgstr ""
"이 TurtleScreen 메서드는 ``resetscreen``\\이라는 이름으로만 전역 함수로 사용할 수 있습니다. 전역 함수 "
"``reset``\\은 Turtle 메서드 ``reset``\\에서 파생된 또 다른 함수입니다."

#: ../../library/turtle.rst:1861
msgid "Reset all Turtles on the Screen to their initial state."
msgstr "Screen의 모든 거북이를 초기 상태로 재설정합니다."

#: ../../library/turtle.rst:1866
msgid "positive integer, new width of canvas in pixels"
msgstr "양의 정수, 픽셀 단위의 새 캔버스 너비"

#: ../../library/turtle.rst:1867
msgid "positive integer, new height of canvas in pixels"
msgstr "양의 정수, 픽셀 단위의 새 캔버스 높이"

#: ../../library/turtle.rst:1868
msgid "colorstring or color-tuple, new background color"
msgstr "색상 문자열(colorstring)이나 색상 튜플, 새 배경색"

#: ../../library/turtle.rst:1870
msgid ""
"If no arguments are given, return current (canvaswidth, canvasheight).  "
"Else resize the canvas the turtles are drawing on.  Do not alter the "
"drawing window.  To observe hidden parts of the canvas, use the "
"scrollbars. With this method, one can make visible those parts of a "
"drawing which were outside the canvas before."
msgstr ""
"인자가 제공되지 않으면, 현재  (canvaswidth, canvasheight)를 반환합니다. 그렇지 않으면 거북이가 그리는 "
"캔버스의 크기를 조정합니다. 그리는 창을 변경하지 마십시오. 캔버스의 숨겨진 부분을 보려면, 스크롤 막대를 사용하십시오. 이 "
"메서드를 사용하면, 이전에 캔버스 외부에 있던 그림의 부분을 볼 수 있습니다."

#: ../../library/turtle.rst:1882
msgid "e.g. to search for an erroneously escaped turtle ;-)"
msgstr "예를 들어 잘못 탈출한 거북이를 찾기 위해 ;-)"

#: ../../library/turtle.rst:1887
msgid "a number, x-coordinate of lower left corner of canvas"
msgstr "숫자, 캔버스의 왼쪽 아래 모서리의 x-좌표"

#: ../../library/turtle.rst:1888
msgid "a number, y-coordinate of lower left corner of canvas"
msgstr "숫자, 캔버스의 왼쪽 아래 모서리의 y-좌표"

#: ../../library/turtle.rst:1889
msgid "a number, x-coordinate of upper right corner of canvas"
msgstr "숫자, 캔버스의 오른쪽 상단 모서리의 x-좌표"

#: ../../library/turtle.rst:1890
msgid "a number, y-coordinate of upper right corner of canvas"
msgstr "숫자, 캔버스의 오른쪽 상단 모서리의 y-좌표"

#: ../../library/turtle.rst:1892
msgid ""
"Set up user-defined coordinate system and switch to mode \"world\" if "
"necessary.  This performs a ``screen.reset()``.  If mode \"world\" is "
"already active, all drawings are redrawn according to the new "
"coordinates."
msgstr ""
"사용자 정의 좌표계를 설정하고 필요하면 \"world\" 모드로 전환합니다. 이것은 ``screen.reset()``\\을 "
"수행합니다. \"world\" 모드가 이미 활성화되었으면, 모든 그림은 새 좌표에 따라 다시 그려집니다."

#: ../../library/turtle.rst:1896
msgid ""
"**ATTENTION**: in user-defined coordinate systems angles may appear "
"distorted."
msgstr "**주의**: 사용자 정의 좌표계에서 각도가 왜곡되어 나타날 수 있습니다."

#: ../../library/turtle.rst:1899
msgid ""
">>> screen.reset()\n"
">>> screen.setworldcoordinates(-50,-7.5,50,7.5)\n"
">>> for _ in range(72):\n"
"...     left(10)\n"
"...\n"
">>> for _ in range(8):\n"
"...     left(45); fd(2)   # a regular octagon"
msgstr ""

#: ../../library/turtle.rst:1924
msgid "positive integer"
msgstr "양의 정수"

#: ../../library/turtle.rst:1926
msgid ""
"Set or return the drawing *delay* in milliseconds.  (This is "
"approximately the time interval between two consecutive canvas updates.)"
"  The longer the drawing delay, the slower the animation."
msgstr ""
"그리기 *지연(delay)*\\을 밀리초 단위로 설정하거나 반환합니다. (이는 대략 두 개의 연속 캔버스 갱신 사이의 시간 "
"간격입니다.) 그리기 지연이 길수록, 애니메이션이 느려집니다."

#: ../../library/turtle.rst:1930
msgid "Optional argument:"
msgstr "선택적 인자:"

#: ../../library/turtle.rst:1932
msgid ""
">>> screen.delay()\n"
"10\n"
">>> screen.delay(5)\n"
">>> screen.delay()\n"
"5"
msgstr ""

#: ../../library/turtle.rst:1944 ../../library/turtle.rst:1945
msgid "nonnegative integer"
msgstr "음이 아닌 정수"

#: ../../library/turtle.rst:1947
msgid ""
"Turn turtle animation on/off and set delay for update drawings.  If *n* "
"is given, only each n-th regular screen update is really performed.  (Can"
" be used to accelerate the drawing of complex graphics.)  When called "
"without arguments, returns the currently stored value of n. Second "
"argument sets delay value (see :func:`delay`)."
msgstr ""
"거북이 애니메이션을 켜거나 끄고 그림 갱신 지연을 설정합니다. *n*\\이 제공되면, n 번째 정기 화면 갱신만 실제로 수행됩니다."
" (복잡한 그래픽의 그리기를 가속하는 데 사용할 수 있습니다.) 인자 없이 호출되면, 현재 저장된 n 값을 반환합니다. 두 번째 "
"인자는 지연(delay) 값을 설정합니다 (:func:`delay`\\를 참조하십시오)."

#: ../../library/turtle.rst:1954
msgid ""
">>> screen.tracer(8, 25)\n"
">>> dist = 2\n"
">>> for i in range(200):\n"
"...     fd(dist)\n"
"...     rt(90)\n"
"...     dist += 2"
msgstr ""

#: ../../library/turtle.rst:1967
msgid "Perform a TurtleScreen update. To be used when tracer is turned off."
msgstr "TurtleScreen 갱신을 수행합니다. tracer가 꺼져있을 때 사용됩니다."

#: ../../library/turtle.rst:1969
msgid "See also the RawTurtle/Turtle method :func:`speed`."
msgstr "RawTurtle/Turtle 메서드 :func:`speed`\\도 참조하십시오."

#: ../../library/turtle.rst:1977
msgid ""
"Set focus on TurtleScreen (in order to collect key-events).  Dummy "
"arguments are provided in order to be able to pass :func:`listen` to the "
"onclick method."
msgstr ""
"(키 이벤트를 수집하기 위해) TurtleScreen에 포커스를 설정합니다. :func:`listen`\\을 onclick 메서드에"
" 전달할 수 있도록 더미 인자가 제공됩니다."

#: ../../library/turtle.rst:1984 ../../library/turtle.rst:2004
msgid "a function with no arguments or ``None``"
msgstr "인자가 없는 함수나 ``None``"

#: ../../library/turtle.rst:1985 ../../library/turtle.rst:2005
msgid "a string: key (e.g. \"a\") or key-symbol (e.g. \"space\")"
msgstr "문자열: 키 (예를 들어 \"a\") 또는 키-기호 (예를 들어 \"space\")"

#: ../../library/turtle.rst:1987
msgid ""
"Bind *fun* to key-release event of key.  If *fun* is ``None``, event "
"bindings are removed. Remark: in order to be able to register key-events,"
" TurtleScreen must have the focus. (See method :func:`listen`.)"
msgstr ""
"key의 키-릴리스 이벤트에 *fun*\\을 연결합니다. *fun*\\이 ``None``\\이면, 이벤트 연결이 제거됩니다. 비고:"
" 키 이벤트를 등록하려면, TurtleScreen에 포커스가 있어야 합니다. (메서드 :func:`listen`\\을 "
"참조하십시오.)"

#: ../../library/turtle.rst:1991
msgid ""
">>> def f():\n"
"...     fd(50)\n"
"...     lt(60)\n"
"...\n"
">>> screen.onkey(f, \"Up\")\n"
">>> screen.listen()"
msgstr ""

#: ../../library/turtle.rst:2007
msgid ""
"Bind *fun* to key-press event of key if key is given, or to any key-"
"press-event if no key is given. Remark: in order to be able to register "
"key-events, TurtleScreen must have focus. (See method :func:`listen`.)"
msgstr ""
"key가 제공되면 key의 키-누르기 이벤트에 또는 key를 제공하지 않으면 임의의 키 누르기 이벤트에 *fun*\\을 연결합니다."
" 비고: 키 이벤트를 등록하려면, TurtleScreen에 포커스가 있어야 합니다. (메서드 :func:`listen`\\을 "
"참조하십시오.)"

#: ../../library/turtle.rst:2012
msgid ""
">>> def f():\n"
"...     fd(50)\n"
"...\n"
">>> screen.onkey(f, \"Up\")\n"
">>> screen.listen()"
msgstr ""

#: ../../library/turtle.rst:2031
msgid ""
"Bind *fun* to mouse-click events on this screen.  If *fun* is ``None``, "
"existing bindings are removed."
msgstr "이 화면의 마우스-클릭 이벤트에 *fun*\\을 연결합니다. *fun*\\이 ``None``\\이면, 기존 연결이 제거됩니다."

#: ../../library/turtle.rst:2034
msgid ""
"Example for a TurtleScreen instance named ``screen`` and a Turtle "
"instance named ``turtle``:"
msgstr "이름이 ``screen``\\인 TurtleScreen 인스턴스와 이름이 ``turtle``\\인 거북이 인스턴스의 예:"

#: ../../library/turtle.rst:2037
msgid ""
">>> screen.onclick(turtle.goto) # Subsequently clicking into the "
"TurtleScreen will\n"
">>>                             # make the turtle move to the clicked "
"point.\n"
">>> screen.onclick(None)        # remove event binding again"
msgstr ""

#: ../../library/turtle.rst:2045
msgid ""
"This TurtleScreen method is available as a global function only under the"
" name ``onscreenclick``.  The global function ``onclick`` is another one "
"derived from the Turtle method ``onclick``."
msgstr ""
"이 TurtleScreen 메서드는 ``onscreenclick``\\이라는 이름으로만 전역 함수로 사용할 수 있습니다. 전역 함수"
" ``onclick``\\은 Turtle 메서드 ``onclick``\\에서 파생된 또 다른 함수입니다."

#: ../../library/turtle.rst:2052
msgid "a function with no arguments"
msgstr "인자가 없는 함수"

#: ../../library/turtle.rst:2053
msgid "a number >= 0"
msgstr "숫자 >= 0"

#: ../../library/turtle.rst:2055
msgid "Install a timer that calls *fun* after *t* milliseconds."
msgstr "*t* 밀리초 후에 *fun*\\을 호출하는 타이머를 설치합니다."

#: ../../library/turtle.rst:2057
msgid ""
">>> running = True\n"
">>> def f():\n"
"...     if running:\n"
"...         fd(50)\n"
"...         lt(60)\n"
"...         screen.ontimer(f, 250)\n"
">>> f()   ### makes the turtle march around\n"
">>> running = False"
msgstr ""

#: ../../library/turtle.rst:2073
msgid ""
"Starts event loop - calling Tkinter's mainloop function. Must be the last"
" statement in a turtle graphics program. Must *not* be used if a script "
"is run from within IDLE in -n mode (No subprocess) - for interactive use "
"of turtle graphics. ::"
msgstr ""
"이벤트 루프를 시작합니다 - Tkinter의 mainloop 함수를 호출합니다. 터틀 그래픽 프로그램의 마지막 문장이어야 합니다. "
"터틀 그래픽을 대화식으로 사용하기 위해 -n 모드(서브 프로세스 없음)로 IDLE에서 스크립트를 실행할 때는 사용되지 *않아야* "
"합니다. ::"

#: ../../library/turtle.rst:2078
msgid ">>> screen.mainloop()"
msgstr ""

#: ../../library/turtle.rst:2086 ../../library/turtle.rst:2087
#: ../../library/turtle.rst:2099 ../../library/turtle.rst:2100
msgid "string"
msgstr "문자열"

#: ../../library/turtle.rst:2089
msgid ""
"Pop up a dialog window for input of a string. Parameter title is the "
"title of the dialog window, prompt is a text mostly describing what "
"information to input. Return the string input. If the dialog is canceled,"
" return ``None``. ::"
msgstr ""
"문자열 입력을 위한 대화 상자 창을 띄웁니다. 매개변수 title은 대화 상자 창의 제목이고, prompt는 주로 어떤 정보를 "
"입력해야 하는지 설명하는 텍스트입니다. 문자열 입력을 반환합니다. 대화 상자가 취소되면, ``None``\\을 반환합니다. ::"

#: ../../library/turtle.rst:2094
msgid ">>> screen.textinput(\"NIM\", \"Name of first player:\")"
msgstr ""

#: ../../library/turtle.rst:2105
#, fuzzy
msgid ""
"Pop up a dialog window for input of a number. title is the title of the "
"dialog window, prompt is a text mostly describing what numerical "
"information to input. default: default value, minval: minimum value for "
"input, maxval: maximum value for input. The number input must be in the "
"range minval .. maxval if these are given. If not, a hint is issued and "
"the dialog remains open for correction. Return the number input. If the "
"dialog is canceled,  return ``None``. ::"
msgstr ""
"숫자 입력을 위한 대화 상자 창을 띄웁니다. title은 대화 창의 제목이고, prompt는 주로 어떤 숫자 정보를 입력해야 하는지"
" 설명하는 텍스트입니다. default: 기본값, minval: 입력의 최솟값, maxval: 입력의 최댓값. 이것들이 주어지면 "
"숫자 입력은 minval .. maxval 범위에 있어야 합니다. 그렇지 않으면, 힌트가 발행되고 수정을 위해 대화 상자가 열려 "
"있습니다. 숫자 입력을 반환합니다. 대화 상자가 취소되면, ``None``\\을 반환합니다. ::"

#: ../../library/turtle.rst:2114
msgid ""
">>> screen.numinput(\"Poker\", \"Your stakes:\", 1000, minval=10, "
"maxval=10000)"
msgstr ""

#: ../../library/turtle.rst:2122
msgid "one of the strings \"standard\", \"logo\" or \"world\""
msgstr "문자열 \"standard\", \"logo\" 또는 \"world\" 중 하나"

#: ../../library/turtle.rst:2124
msgid ""
"Set turtle mode (\"standard\", \"logo\" or \"world\") and perform reset."
"  If mode is not given, current mode is returned."
msgstr ""
"거북이 모드(\"standard\", \"logo\" 또는 \"world\")를 설정하고 재설정을 수행합니다. mode가 제공되지 "
"않으면, 현재 모드가 반환됩니다."

#: ../../library/turtle.rst:2127
msgid ""
"Mode \"standard\" is compatible with old :mod:`turtle`.  Mode \"logo\" is"
" compatible with most Logo turtle graphics.  Mode \"world\" uses user-"
"defined \"world coordinates\". **Attention**: in this mode angles appear "
"distorted if ``x/y`` unit-ratio doesn't equal 1."
msgstr ""
"\"standard\" 모드는 이전 :mod:`turtle`\\과 호환됩니다. \"logo\" 모드는 대부분의 로고 터틀 그래픽과 "
"호환됩니다. \"world\" 모드는 사용자 정의 \"세계 좌표\"를 사용합니다. **주의**: 이 모드에서는 ``x/y`` 단위 "
"비율이 1이 아니면 각도가 왜곡되어 나타납니다."

#: ../../library/turtle.rst:2133
msgid "Mode"
msgstr "모드"

#: ../../library/turtle.rst:2133
msgid "Initial turtle heading"
msgstr "초기 거북이 방향"

#: ../../library/turtle.rst:2133
msgid "positive angles"
msgstr "양의 각도"

#: ../../library/turtle.rst:2135
msgid "\"standard\""
msgstr "\"standard\""

#: ../../library/turtle.rst:2135
msgid "to the right (east)"
msgstr "오른쪽 (동)"

#: ../../library/turtle.rst:2135
msgid "counterclockwise"
msgstr "시계 반대 방향"

#: ../../library/turtle.rst:2136
msgid "\"logo\""
msgstr "\"logo\""

#: ../../library/turtle.rst:2136
msgid "upward    (north)"
msgstr "위쪽 (북)"

#: ../../library/turtle.rst:2136
msgid "clockwise"
msgstr "시계 방향"

#: ../../library/turtle.rst:2139
msgid ""
">>> mode(\"logo\")   # resets turtle heading to north\n"
">>> mode()\n"
"'logo'"
msgstr ""

#: ../../library/turtle.rst:2149
msgid "one of the values 1.0 or 255"
msgstr "값 1.0이나 255중 하나"

#: ../../library/turtle.rst:2151
#, fuzzy
msgid ""
"Return the colormode or set it to 1.0 or 255.  Subsequently *r*, *g*, *b*"
" values of color triples have to be in the range 0..*cmode*."
msgstr ""
"색상 모드(colormode)를 반환하거나 1.0이나 255로 설정합니다. 이후 색상 트리플의 *r*, *g*, *b* 값은 "
"0..\\ *cmode* 범위에 있어야 합니다."

#: ../../library/turtle.rst:2154
msgid ""
">>> screen.colormode(1)\n"
">>> turtle.pencolor(240, 160, 80)\n"
"Traceback (most recent call last):\n"
"     ...\n"
"TurtleGraphicsError: bad color sequence: (240, 160, 80)\n"
">>> screen.colormode()\n"
"1.0\n"
">>> screen.colormode(255)\n"
">>> screen.colormode()\n"
"255\n"
">>> turtle.pencolor(240,160,80)"
msgstr ""

#: ../../library/turtle.rst:2172
msgid ""
"Return the Canvas of this TurtleScreen.  Useful for insiders who know "
"what to do with a Tkinter Canvas."
msgstr "이 TurtleScreen의 캔버스를 반환합니다. Tkinter Canvas로 작업하는 법을 알고 있는 내부자에게 유용합니다."

#: ../../library/turtle.rst:2175
msgid ""
">>> cv = screen.getcanvas()\n"
">>> cv\n"
"<turtle.ScrolledCanvas object ...>"
msgstr ""

#: ../../library/turtle.rst:2185
msgid "Return a list of names of all currently available turtle shapes."
msgstr "현재 사용 가능한 모든 거북이 모양의 이름 리스트를 반환합니다."

#: ../../library/turtle.rst:2187
msgid ""
">>> screen.getshapes()\n"
"['arrow', 'blank', 'circle', ..., 'turtle']"
msgstr ""

#: ../../library/turtle.rst:2197
msgid "There are three different ways to call this function:"
msgstr "이 함수를 호출하는 방법에는 세 가지가 있습니다:"

#: ../../library/turtle.rst:2199
msgid ""
"*name* is the name of a gif-file and *shape* is ``None``: Install the "
"corresponding image shape. ::"
msgstr "*name*\\은 gif 파일의 이름이고 *shape*\\은 ``None``\\입니다: 해당 이미지 모양을 설치합니다. ::"

#: ../../library/turtle.rst:2202
msgid ">>> screen.register_shape(\"turtle.gif\")"
msgstr ""

#: ../../library/turtle.rst:2205
msgid ""
"Image shapes *do not* rotate when turning the turtle, so they do not "
"display the heading of the turtle!"
msgstr "거북이를 회전할 때 이미지 모양은 회전하지 *않아서*, 거북이 방향을 표시하지 않습니다!"

#: ../../library/turtle.rst:2208
msgid ""
"*name* is an arbitrary string and *shape* is a tuple of pairs of "
"coordinates: Install the corresponding polygon shape."
msgstr "*name*\\은 임의의 문자열이고 *shape*\\은 좌표 쌍의 튜플입니다: 해당 다각형 모양을 설치합니다."

#: ../../library/turtle.rst:2211
msgid ">>> screen.register_shape(\"triangle\", ((5,-3), (0,5), (-5,-3)))"
msgstr ""

#: ../../library/turtle.rst:2216
#, fuzzy
msgid ""
"*name* is an arbitrary string and *shape* is a (compound) :class:`Shape` "
"object: Install the corresponding compound shape."
msgstr "*name*\\은 임의의 문자열이고 shape은 (복합) :class:`Shape` 객체입니다: 해당 복합 모양을 설치합니다."

#: ../../library/turtle.rst:2219
msgid ""
"Add a turtle shape to TurtleScreen's shapelist.  Only thusly registered "
"shapes can be used by issuing the command ``shape(shapename)``."
msgstr ""
"TurtleScreen의 모양 리스트(shapelist)에 거북이 모양을 추가합니다. ``shape(shapename)`` 명령을 "
"실행하면 이처럼 등록된 모양만 사용할 수 있습니다."

#: ../../library/turtle.rst:2225
msgid "Return the list of turtles on the screen."
msgstr "화면에 있는 거북이의 리스트를 반환합니다."

#: ../../library/turtle.rst:2227
msgid ""
">>> for turtle in screen.turtles():\n"
"...     turtle.color(\"red\")"
msgstr ""

#: ../../library/turtle.rst:2236
msgid "Return the height of the turtle window. ::"
msgstr "거북이 창의 높이를 반환합니다. ::"

#: ../../library/turtle.rst:2238
msgid ""
">>> screen.window_height()\n"
"480"
msgstr ""

#: ../../library/turtle.rst:2244
msgid "Return the width of the turtle window. ::"
msgstr "거북이 창의 너비를 반환합니다. ::"

#: ../../library/turtle.rst:2246
msgid ""
">>> screen.window_width()\n"
"640"
msgstr ""

#: ../../library/turtle.rst:2253
msgid "Methods specific to Screen, not inherited from TurtleScreen"
msgstr "TurtleScreen에서 상속되지 않은, Screen만의 메서드"

#: ../../library/turtle.rst:2257
msgid "Shut the turtlegraphics window."
msgstr "터틀 그래픽 창을 닫습니다."

#: ../../library/turtle.rst:2262
msgid "Bind ``bye()`` method to mouse clicks on the Screen."
msgstr "``bye()`` 메서드를 Screen에서의 마우스 클릭에 연결합니다."

#: ../../library/turtle.rst:2265
msgid ""
"If the value \"using_IDLE\" in the configuration dictionary is ``False`` "
"(default value), also enter mainloop.  Remark: If IDLE with the ``-n`` "
"switch (no subprocess) is used, this value should be set to ``True`` in "
":file:`turtle.cfg`.  In this case IDLE's own mainloop is active also for "
"the client script."
msgstr ""
"구성 딕셔너리의 \"using_IDLE\" 값이 ``False``\\(기본값)면, 에인 루프에 진입하기도 합니다. 비고: "
"``-n`` 스위치로 IDLE(서브 프로세스 없음)을 사용하면, 이 값은 :file:`turtle.cfg`\\에서 "
"``True``\\로 설정되어야 합니다. 이 경우 IDLE의 자체 메인 루프는 클라이언트 스크립트에서도 활성화됩니다."

#: ../../library/turtle.rst:2274
msgid ""
"Set the size and position of the main window.  Default values of "
"arguments are stored in the configuration dictionary and can be changed "
"via a :file:`turtle.cfg` file."
msgstr ""
"메인 창의 크기와 위치를 설정합니다. 인자의 기본값은 구성 딕셔너리에 저장되며 :file:`turtle.cfg` 파일을 통해 변경할"
" 수 있습니다."

#: ../../library/turtle.rst:2278
#, python-format
msgid ""
"if an integer, a size in pixels, if a float, a fraction of the screen; "
"default is 50% of screen"
msgstr "정수면 픽셀 단위의 크기, 실수면 화면의 비율; 기본값은 화면의 50%입니다"

#: ../../library/turtle.rst:2280
#, python-format
msgid ""
"if an integer, the height in pixels, if a float, a fraction of the "
"screen; default is 75% of screen"
msgstr "정수면 픽셀 단위의 높이, 실수면 화면의 비율; 기본값은 화면의 75%입니다"

#: ../../library/turtle.rst:2282
msgid ""
"if positive, starting position in pixels from the left edge of the "
"screen, if negative from the right edge, if ``None``, center window "
"horizontally"
msgstr ""
"양수이면 화면의 왼쪽 가장자리에서부터의 픽셀 단위의 시작 위치, 음수이면 오른쪽 가장자리에서부터, ``None``\\이면 창을 "
"가로로 가운데 정렬합니다"

#: ../../library/turtle.rst:2285
msgid ""
"if positive, starting position in pixels from the top edge of the screen,"
" if negative from the bottom edge, if ``None``, center window vertically"
msgstr ""
"양수이면 화면 위쪽 가장자리에서부터의 픽셀 단위의 시작 위치, 음수이면 아래쪽 가장자리에서부터, ``None``\\이면 창을 세로로"
" 가운데 정렬합니다"

#: ../../library/turtle.rst:2289
#, python-format
msgid ""
">>> screen.setup (width=200, height=200, startx=0, starty=0)\n"
">>>              # sets window to 200x200 pixels, in upper left of screen"
"\n"
">>> screen.setup(width=.75, height=0.5, startx=None, starty=None)\n"
">>>              # sets window to 75% of screen by 50% of screen and "
"centers"
msgstr ""

#: ../../library/turtle.rst:2300
msgid "a string that is shown in the titlebar of the turtle graphics window"
msgstr "터틀 그래픽 창의 제목 표시 줄에 표시되는 문자열"

#: ../../library/turtle.rst:2303
msgid "Set title of turtle window to *titlestring*."
msgstr "거북이 창의 제목을 *titlestring*\\으로 설정합니다."

#: ../../library/turtle.rst:2305
msgid ">>> screen.title(\"Welcome to the turtle zoo!\")"
msgstr ""

#: ../../library/turtle.rst:2312
msgid "Public classes"
msgstr "공개 클래스"

#: ../../library/turtle.rst:2318
#, fuzzy
msgid ""
"a :class:`!tkinter.Canvas`, a :class:`ScrolledCanvas` or a "
":class:`TurtleScreen`"
msgstr ":class:`tkinter.Canvas`, :class:`ScrolledCanvas`\\나 :class:`TurtleScreen`"

#: ../../library/turtle.rst:2321
msgid ""
"Create a turtle.  The turtle has all methods described above as \"methods"
" of Turtle/RawTurtle\"."
msgstr "거북이를 만듭니다. 거북이는 위에서 \"Turtle/RawTurtle의 메서드\"라고 언급한 모든 메서드를 갖습니다."

#: ../../library/turtle.rst:2327
msgid ""
"Subclass of RawTurtle, has the same interface but draws on a default "
":class:`Screen` object created automatically when needed for the first "
"time."
msgstr ""
"RawTurtle의 서브 클래스. 인터페이스는 같지만 처음 필요할 때 자동으로 생성된 기본 :class:`Screen` 객체에 "
"그립니다."

#: ../../library/turtle.rst:2333
#, fuzzy
msgid "a :class:`!tkinter.Canvas`"
msgstr ":class:`tkinter.Canvas`"

#: ../../library/turtle.rst:2335
#, fuzzy
msgid ""
"Provides screen oriented methods like :func:`bgcolor` etc. that are "
"described above."
msgstr "위에서 설명한 :func:`setbg` 등과 같은 화면 지향 메서드를 제공합니다."

#: ../../library/turtle.rst:2340
msgid "Subclass of TurtleScreen, with :ref:`four methods added <screenspecific>`."
msgstr "TurtleScreen의 서브 클래스. :ref:`4개의 메서드가 추가되었습니다 <screenspecific>`."

#: ../../library/turtle.rst:2345
msgid ""
"some Tkinter widget to contain the ScrolledCanvas, i.e. a Tkinter-canvas "
"with scrollbars added"
msgstr "ScrolledCanvas, 즉 스크롤 막대가 추가된 Tkinter-Canvas를 담을 어떤 Tkinter 위젯"

#: ../../library/turtle.rst:2348
msgid ""
"Used by class Screen, which thus automatically provides a ScrolledCanvas "
"as playground for the turtles."
msgstr "클래스 Screen에서 사용되며, 거북 놀이터로 ScrolledCanvas를 자동으로 제공합니다."

#: ../../library/turtle.rst:2353
msgid "one of the strings \"polygon\", \"image\", \"compound\""
msgstr "문자열 \"polygon\", \"image\", \"compound\" 중 하나"

#: ../../library/turtle.rst:2355
msgid ""
"Data structure modeling shapes.  The pair ``(type_, data)`` must follow "
"this specification:"
msgstr "모양을 모델링하는 데이터 구조. 쌍 ``(type_, data)``\\는 다음 명세를 따라야 합니다:"

#: ../../library/turtle.rst:2360
msgid "*type_*"
msgstr "*type_*"

#: ../../library/turtle.rst:2360
msgid "*data*"
msgstr "*data*"

#: ../../library/turtle.rst:2362
msgid "\"polygon\""
msgstr "\"polygon\""

#: ../../library/turtle.rst:2362
msgid "a polygon-tuple, i.e. a tuple of pairs of coordinates"
msgstr "다각형 튜플, 즉 좌표 쌍의 튜플"

#: ../../library/turtle.rst:2363
msgid "\"image\""
msgstr "\"image\""

#: ../../library/turtle.rst:2363
msgid "an image  (in this form only used internally!)"
msgstr "이미지 (이 형식은 내부적으로만 사용됩니다!)"

#: ../../library/turtle.rst:2364
msgid "\"compound\""
msgstr "\"compound\""

#: ../../library/turtle.rst:2364
msgid ""
"``None`` (a compound shape has to be constructed using the "
":meth:`addcomponent` method)"
msgstr "``None`` (복합 모양을 :meth:`addcomponent` 메서드를 사용하여 구성해야 합니다)"

#: ../../library/turtle.rst:2370
msgid "a polygon, i.e. a tuple of pairs of numbers"
msgstr "다각형, 즉 숫자 쌍의 튜플"

#: ../../library/turtle.rst:2371
msgid "a color the *poly* will be filled with"
msgstr "*poly*\\가 채워질 색상"

#: ../../library/turtle.rst:2372
msgid "a color for the poly's outline (if given)"
msgstr "poly 외곽선의 색상 (제공되면)"

#: ../../library/turtle.rst:2374
msgid "Example:"
msgstr "예:"

#: ../../library/turtle.rst:2376
msgid ""
">>> poly = ((0,0),(10,-5),(0,10),(-10,-5))\n"
">>> s = Shape(\"compound\")\n"
">>> s.addcomponent(poly, \"red\", \"blue\")\n"
">>> # ... add more components and then use register_shape()"
msgstr ""

#: ../../library/turtle.rst:2384
msgid "See :ref:`compoundshapes`."
msgstr ":ref:`compoundshapes`\\을 참조하십시오."

#: ../../library/turtle.rst:2389
msgid ""
"A two-dimensional vector class, used as a helper class for implementing "
"turtle graphics.  May be useful for turtle graphics programs too.  "
"Derived from tuple, so a vector is a tuple!"
msgstr ""
"2차원 벡터 클래스. 터틀 그래픽을 구현하기 위한 도우미 클래스로 사용됩니다. 터틀 그래픽 프로그램에도 유용할 수 있습니다. "
"튜플에서 파생되기 때문에, 벡터는 튜플입니다!"

#: ../../library/turtle.rst:2393
msgid "Provides (for *a*, *b* vectors, *k* number):"
msgstr "다음을 제공합니다 (*a*, *b*\\는 벡터, *k*\\는 번호):"

#: ../../library/turtle.rst:2395
msgid "``a + b`` vector addition"
msgstr "``a + b`` 벡터 덧셈"

#: ../../library/turtle.rst:2396
msgid "``a - b`` vector subtraction"
msgstr "``a - b`` 벡터 뺄셈"

#: ../../library/turtle.rst:2397
msgid "``a * b`` inner product"
msgstr "``a * b`` 내적(inner product)"

#: ../../library/turtle.rst:2398
msgid "``k * a`` and ``a * k`` multiplication with scalar"
msgstr "``k * a``\\와 ``a * k`` 스칼라를 사용한 곱셈"

#: ../../library/turtle.rst:2399
msgid "``abs(a)`` absolute value of a"
msgstr "``abs(a)`` a\\의 절댓값"

#: ../../library/turtle.rst:2400
msgid "``a.rotate(angle)`` rotation"
msgstr "``a.rotate(angle)`` 회전"

#: ../../library/turtle.rst:2406
msgid "Explanation"
msgstr ""

#: ../../library/turtle.rst:2408
msgid ""
"A turtle object draws on a screen object, and there a number of key "
"classes in the turtle object-oriented interface that can be used to "
"create them and relate them to each other."
msgstr ""

#: ../../library/turtle.rst:2412
msgid ""
"A :class:`Turtle` instance will automatically create a :class:`Screen` "
"instance if one is not already present."
msgstr ""

#: ../../library/turtle.rst:2415
msgid ""
"``Turtle`` is a subclass of :class:`RawTurtle`, which *doesn't* "
"automatically create a drawing surface - a *canvas* will need to be "
"provided or created for it. The *canvas* can be a "
":class:`!tkinter.Canvas`, :class:`ScrolledCanvas` or "
":class:`TurtleScreen`."
msgstr ""

#: ../../library/turtle.rst:2421
msgid ""
":class:`TurtleScreen` is the basic drawing surface for a turtle. "
":class:`Screen` is a subclass of ``TurtleScreen``, and includes "
":ref:`some additional methods <screenspecific>` for managing its "
"appearance (including size and title) and behaviour. ``TurtleScreen``'s "
"constructor needs a :class:`!tkinter.Canvas` or a :class:`ScrolledCanvas`"
" as an argument."
msgstr ""

#: ../../library/turtle.rst:2428
#, fuzzy
msgid ""
"The functional interface for turtle graphics uses the various methods of "
"``Turtle`` and ``TurtleScreen``/``Screen``. Behind the scenes, a screen "
"object is automatically created whenever a function derived from a "
"``Screen`` method is called. Similarly, a turtle object is automatically "
"created whenever any of the functions derived from a Turtle method is "
"called."
msgstr ""
"절차적 인터페이스는 :class:`Screen`\\과 :class:`Turtle` 클래스의 메서드에서 파생된 함수를 제공합니다. "
"해당 메서드와 이름이 같습니다. Screen 객체는 Screen 메서드에서 파생된 함수가 호출될 때 자동으로 만들어집니다. "
"Turtle 메서드에서 파생된 함수가 호출될 때 (이름이 없는) Turtle 객체가 자동으로 생성됩니다."

#: ../../library/turtle.rst:2434
#, fuzzy
msgid ""
"To use multiple turtles on a screen, the object-oriented interface must "
"be used."
msgstr "화면에 여러 거북을 사용하려면 객체 지향 인터페이스를 사용해야 합니다."

#: ../../library/turtle.rst:2439
msgid "Help and configuration"
msgstr "도움말과 구성"

#: ../../library/turtle.rst:2442
msgid "How to use help"
msgstr "도움말 사용법"

#: ../../library/turtle.rst:2444
msgid ""
"The public methods of the Screen and Turtle classes are documented "
"extensively via docstrings.  So these can be used as online-help via the "
"Python help facilities:"
msgstr ""
"Screen과 Turtle 클래스의 공개 메서드는 독스트링을 통해 광범위하게 설명됩니다. 파이썬 도움말 기능을 통해 온라인 도움말로"
" 사용할 수 있습니다:"

#: ../../library/turtle.rst:2448
msgid ""
"When using IDLE, tooltips show the signatures and first lines of the "
"docstrings of typed in function-/method calls."
msgstr "IDLE을 사용할 때, 툴팁은 입력된 함수/메서드 호출의 서명과 독스트링의 첫 줄을 보여줍니다."

#: ../../library/turtle.rst:2451
msgid "Calling :func:`help` on methods or functions displays the docstrings::"
msgstr "메서드나 함수에 대해 :func:`help`\\를 호출하면 독스트링을 표시합니다::"

#: ../../library/turtle.rst:2453
msgid ""
">>> help(Screen.bgcolor)\n"
"Help on method bgcolor in module turtle:\n"
"\n"
"bgcolor(self, *args) unbound turtle.Screen method\n"
"    Set or return backgroundcolor of the TurtleScreen.\n"
"\n"
"    Arguments (if given): a color string or three numbers\n"
"    in the range 0..colormode or a 3-tuple of such numbers.\n"
"\n"
"\n"
"    >>> screen.bgcolor(\"orange\")\n"
"    >>> screen.bgcolor()\n"
"    \"orange\"\n"
"    >>> screen.bgcolor(0.5,0,0.5)\n"
"    >>> screen.bgcolor()\n"
"    \"#800080\"\n"
"\n"
">>> help(Turtle.penup)\n"
"Help on method penup in module turtle:\n"
"\n"
"penup(self) unbound turtle.Turtle method\n"
"    Pull the pen up -- no drawing when moving.\n"
"\n"
"    Aliases: penup | pu | up\n"
"\n"
"    No argument\n"
"\n"
"    >>> turtle.penup()"
msgstr ""

#: ../../library/turtle.rst:2482
msgid ""
"The docstrings of the functions which are derived from methods have a "
"modified form::"
msgstr "메서드에서 파생된 함수의 독스트링은 다음과 같이 수정된 형식을 갖습니다::"

#: ../../library/turtle.rst:2485
msgid ""
">>> help(bgcolor)\n"
"Help on function bgcolor in module turtle:\n"
"\n"
"bgcolor(*args)\n"
"    Set or return backgroundcolor of the TurtleScreen.\n"
"\n"
"    Arguments (if given): a color string or three numbers\n"
"    in the range 0..colormode or a 3-tuple of such numbers.\n"
"\n"
"    Example::\n"
"\n"
"      >>> bgcolor(\"orange\")\n"
"      >>> bgcolor()\n"
"      \"orange\"\n"
"      >>> bgcolor(0.5,0,0.5)\n"
"      >>> bgcolor()\n"
"      \"#800080\"\n"
"\n"
">>> help(penup)\n"
"Help on function penup in module turtle:\n"
"\n"
"penup()\n"
"    Pull the pen up -- no drawing when moving.\n"
"\n"
"    Aliases: penup | pu | up\n"
"\n"
"    No argument\n"
"\n"
"    Example:\n"
"    >>> penup()"
msgstr ""

#: ../../library/turtle.rst:2516
msgid ""
"These modified docstrings are created automatically together with the "
"function definitions that are derived from the methods at import time."
msgstr "이러한 수정된 독스트링은 임포트 시점에 메서드에서 파생된 함수 정의와 함께 자동으로 만들어집니다."

#: ../../library/turtle.rst:2521
msgid "Translation of docstrings into different languages"
msgstr "독스트링을 다른 언어로 번역"

#: ../../library/turtle.rst:2523
msgid ""
"There is a utility to create a dictionary the keys of which are the "
"method names and the values of which are the docstrings of the public "
"methods of the classes Screen and Turtle."
msgstr "키가 메서드 이름이고 값이 Screen과 Turtle 클래스의 공개 메서드의 독스트링인 딕셔너리를 만드는 유틸리티가 있습니다."

#: ../../library/turtle.rst:2529
msgid "a string, used as filename"
msgstr "파일명으로 사용되는 문자열"

#: ../../library/turtle.rst:2531
#, python-brace-format
msgid ""
"Create and write docstring-dictionary to a Python script with the given "
"filename.  This function has to be called explicitly (it is not used by "
"the turtle graphics classes).  The docstring dictionary will be written "
"to the Python script :file:`{filename}.py`.  It is intended to serve as a"
" template for translation of the docstrings into different languages."
msgstr ""
"주어진 파일명의 파이썬 스크립트에 독스트링-딕셔너리를 만들고 씁니다. 이 함수는 명시적으로 호출해야 합니다 (터틀 그래픽 "
"클래스에서는 사용되지 않습니다). 독스트링 딕셔너리는 파이썬 스크립트 :file:`{filename}.py`\\에 기록됩니다. "
"독스트링을 다른 언어로 번역하기 위한 템플릿으로 사용하려는 목적입니다."

#: ../../library/turtle.rst:2537
msgid ""
"If you (or your students) want to use :mod:`turtle` with online help in "
"your native language, you have to translate the docstrings and save the "
"resulting file as e.g. :file:`turtle_docstringdict_german.py`."
msgstr ""
"여러분(또는 여러분의 학생)이 모국어로 된 온라인 도움말과 함께 :mod:`turtle`\\을 사용하려면, 독스트링을 번역하고 결과"
" 파일을 예를 들어 :file:`turtle_docstringdict_german.py`\\와 같은 파일로 저장해야 합니다."

#: ../../library/turtle.rst:2541
msgid ""
"If you have an appropriate entry in your :file:`turtle.cfg` file this "
"dictionary will be read in at import time and will replace the original "
"English docstrings."
msgstr ""
"여러분의 :file:`turtle.cfg` 파일에 적절한 항목이 있으면 임포트 시점에 이 딕셔너리를 읽고 원래 영어 독스트링을 "
"대체합니다."

#: ../../library/turtle.rst:2544
msgid ""
"At the time of this writing there are docstring dictionaries in German "
"and in Italian.  (Requests please to glingl@aon.at.)"
msgstr "이 글을 쓰는 시점에는 독일어와 이탈리아어로 된 독스트링 딕셔너리가 있습니다. (glingl@aon.at 에 요청하십시오.)"

#: ../../library/turtle.rst:2550
msgid "How to configure Screen and Turtles"
msgstr "Screen과 Turtle을 구성하는 방법"

#: ../../library/turtle.rst:2552
msgid ""
"The built-in default configuration mimics the appearance and behaviour of"
" the old turtle module in order to retain best possible compatibility "
"with it."
msgstr "내장된 기본 구성은 최상의 호환성을 유지하기 위해 기존 turtle 모듈의 외관과 동작을 모방합니다."

#: ../../library/turtle.rst:2555
msgid ""
"If you want to use a different configuration which better reflects the "
"features of this module or which better fits to your needs, e.g. for use "
"in a classroom, you can prepare a configuration file ``turtle.cfg`` which"
" will be read at import time and modify the configuration according to "
"its settings."
msgstr ""
"이 모듈의 기능을 더 잘 반영하거나 예를 들어 교실에서 사용하기 위해 필요에 더 잘 맞는 다른 구성을 사용하려면, 임포트 시점에 "
"읽는 구성 파일 ``turtle.cfg``\\를 준비하고 구성을 그 설정에 따라 수정할 수 있습니다."

#: ../../library/turtle.rst:2560
#, fuzzy
msgid ""
"The built in configuration would correspond to the following "
"``turtle.cfg``:"
msgstr "내장 구성은 다음 turtle.cfg에 해당합니다::"

#: ../../library/turtle.rst:2562
msgid ""
"width = 0.5\n"
"height = 0.75\n"
"leftright = None\n"
"topbottom = None\n"
"canvwidth = 400\n"
"canvheight = 300\n"
"mode = standard\n"
"colormode = 1.0\n"
"delay = 10\n"
"undobuffersize = 1000\n"
"shape = classic\n"
"pencolor = black\n"
"fillcolor = black\n"
"resizemode = noresize\n"
"visible = True\n"
"language = english\n"
"exampleturtle = turtle\n"
"examplescreen = screen\n"
"title = Python Turtle Graphics\n"
"using_IDLE = False"
msgstr ""

#: ../../library/turtle.rst:2585
msgid "Short explanation of selected entries:"
msgstr "선택된 항목에 대한 간단한 설명:"

#: ../../library/turtle.rst:2587
#, fuzzy
msgid ""
"The first four lines correspond to the arguments of the "
":func:`Screen.setup <setup>` method."
msgstr "처음 네 줄은 :meth:`Screen.setup` 메서드의 인자에 해당합니다."

#: ../../library/turtle.rst:2589
#, fuzzy
msgid ""
"Line 5 and 6 correspond to the arguments of the method "
":func:`Screen.screensize <screensize>`."
msgstr "줄 5와 6은 :meth:`Screen.screensize` 메서드의 인자에 해당합니다."

#: ../../library/turtle.rst:2591
msgid ""
"*shape* can be any of the built-in shapes, e.g: arrow, turtle, etc.  For "
"more info try ``help(shape)``."
msgstr ""
"*shape*\\은 내장 도형 중 하나일 수 있습니다, 예를 들어 arrow, turtle 등. 자세한 정보는 "
"``help(shape)``\\을 시도해 보십시오."

#: ../../library/turtle.rst:2593
#, fuzzy
msgid ""
"If you want to use no fill color (i.e. make the turtle transparent), you "
"have to write ``fillcolor = \"\"`` (but all nonempty strings must not "
"have quotes in the cfg file)."
msgstr ""
"아무런 채우기 색상(fillcolor)도 사용하지 않으려면 (즉, 거북이를 투명하게 만들려면), ``fillcolor = "
"\"\"``\\라고 작성해야 합니다 (그러나 비어 있지 않은 모든 문자열은 cfg 파일에서 따옴표가 없어야 합니다)."

#: ../../library/turtle.rst:2596
msgid ""
"If you want to reflect the turtle its state, you have to use ``resizemode"
" = auto``."
msgstr "거북이의 상태를 반영하려면, ``resizemode = auto``\\를 사용해야 합니다."

#: ../../library/turtle.rst:2598
#, fuzzy
msgid ""
"If you set e.g. ``language = italian`` the docstringdict "
":file:`turtle_docstringdict_italian.py` will be loaded at import time (if"
" present on the import path, e.g. in the same directory as "
":mod:`turtle`)."
msgstr ""
"예를 들어 ``language = italian``\\을 설정하면 임포트 시점에 독스트링 딕셔너리 "
":file:`turtle_docstringdict_italian.py`\\가 로드됩니다 (임포트 경로에 있다면, 예를 들어 "
":mod:`turtle`\\과 같은 디렉터리에)."

#: ../../library/turtle.rst:2601
msgid ""
"The entries *exampleturtle* and *examplescreen* define the names of these"
" objects as they occur in the docstrings.  The transformation of method-"
"docstrings to function-docstrings will delete these names from the "
"docstrings."
msgstr ""
"*exampleturtle*\\과 *examplescreen* 항목은 독스트링에서 등장하는 이러한 객체들의 이름을 정의합니다. "
"메서드 독스트링을 함수 독스트링으로 변환하면 이러한 이름이 독스트링에서 삭제됩니다."

#: ../../library/turtle.rst:2605
#, fuzzy
msgid ""
"*using_IDLE*: Set this to ``True`` if you regularly work with IDLE and "
"its ``-n`` switch (\"no subprocess\").  This will prevent "
":func:`exitonclick` to enter the mainloop."
msgstr ""
"*using_IDLE*: IDLE과 그것의 -n 스위치( \"서브 프로세스 없음\")를 정기적으로 사용하면 이 값을 "
"``True``\\로 설정하십시오. 이것은 :func:`exitonclick`\\이 메인 루프에 들어가지 못하게 합니다."

#: ../../library/turtle.rst:2609
msgid ""
"There can be a :file:`turtle.cfg` file in the directory where "
":mod:`turtle` is stored and an additional one in the current working "
"directory.  The latter will override the settings of the first one."
msgstr ""
":mod:`turtle`\\이 저장된 디렉터리에 :file:`turtle.cfg` 파일이 있고 현재 작업 디렉터리에도 추가 파일이 "
"있을 수 있습니다. 후자가 첫 번째 설정을 재정의합니다."

#: ../../library/turtle.rst:2613
msgid ""
"The :file:`Lib/turtledemo` directory contains a :file:`turtle.cfg` file."
"  You can study it as an example and see its effects when running the "
"demos (preferably not from within the demo-viewer)."
msgstr ""
":file:`Lib/turtledemo` 디렉터리는 :file:`turtle.cfg` 파일을 포함합니다. 예제로 공부하고 데모를 "
"실행할 때 그 효과를 볼 수 있습니다 (바람직하게는 데모 뷰어 내에서는 아닙니다)."

#: ../../library/turtle.rst:2619
msgid ":mod:`turtledemo` --- Demo scripts"
msgstr ":mod:`turtledemo` --- 데모 스크립트"

#: ../../library/turtle.rst:2624
msgid ""
"The :mod:`turtledemo` package includes a set of demo scripts.  These "
"scripts can be run and viewed using the supplied demo viewer as follows::"
msgstr ""
":mod:`turtledemo` 패키지에는 데모 스크립트 집합이 포함되어 있습니다. 이 스크립트는 다음과 같이 제공된 데모 뷰어를 "
"사용하여 실행하고 볼 수 있습니다::"

#: ../../library/turtle.rst:2627
msgid "python -m turtledemo"
msgstr ""

#: ../../library/turtle.rst:2629
msgid "Alternatively, you can run the demo scripts individually.  For example, ::"
msgstr "또는, 데모 스크립트를 개별적으로 실행할 수 있습니다. 예를 들면, ::"

#: ../../library/turtle.rst:2631
msgid "python -m turtledemo.bytedesign"
msgstr ""

#: ../../library/turtle.rst:2633
msgid "The :mod:`turtledemo` package directory contains:"
msgstr ":mod:`turtledemo` 패키지 디렉터리는 다음과 같은 것들을 포함합니다:"

#: ../../library/turtle.rst:2635
msgid ""
"A demo viewer :file:`__main__.py` which can be used to view the "
"sourcecode of the scripts and run them at the same time."
msgstr "스크립트의 소스 코드를 보고 동시에 실행하는 데 사용할 수 있는 데모 뷰어 :file:`__main__.py`."

#: ../../library/turtle.rst:2637
msgid ""
"Multiple scripts demonstrating different features of the :mod:`turtle` "
"module.  Examples can be accessed via the Examples menu.  They can also "
"be run standalone."
msgstr ""
":mod:`turtle` 모듈의 다른 기능을 보여주는 여러 스크립트. 예제는 Examples 메뉴를 통해 액세스할 수 있습니다. "
"독립형으로 실행할 수도 있습니다."

#: ../../library/turtle.rst:2640
msgid ""
"A :file:`turtle.cfg` file which serves as an example of how to write and "
"use such files."
msgstr "구성 파일을 작성하고 사용하는 방법의 예인 :file:`turtle.cfg` 파일."

#: ../../library/turtle.rst:2643
msgid "The demo scripts are:"
msgstr "데모 스크립트는 다음과 같습니다:"

#: ../../library/turtle.rst:2650
msgid "Name"
msgstr "이름"

#: ../../library/turtle.rst:2650
msgid "Description"
msgstr "설명"

#: ../../library/turtle.rst:2650
msgid "Features"
msgstr "기능"

#: ../../library/turtle.rst:2652
msgid "bytedesign"
msgstr "bytedesign"

#: ../../library/turtle.rst:2652
msgid "complex classical turtle graphics pattern"
msgstr "복잡한 클래식 터틀 그래픽 패턴"

#: ../../library/turtle.rst:2652
msgid ":func:`tracer`, delay, :func:`update`"
msgstr ":func:`tracer`, delay, :func:`update`"

#: ../../library/turtle.rst:2655
msgid "chaos"
msgstr "chaos"

#: ../../library/turtle.rst:2655
msgid ""
"graphs Verhulst dynamics, shows that computer's computations can generate"
" results sometimes against the common sense expectations"
msgstr ""
"베르홀스트(Verhulst) 동역학의 그래프를 그립니다, 컴퓨터의 계산이 때때로 상식적인 기대에 반하는 결과를 생 할 수 있음을 "
"보여줍니다"

#: ../../library/turtle.rst:2655
msgid "world coordinates"
msgstr "세계 좌표"

#: ../../library/turtle.rst:2661
msgid "clock"
msgstr "clock"

#: ../../library/turtle.rst:2661
msgid "analog clock showing time of your computer"
msgstr "컴퓨터의 시간을 보여주는 아날로그 시계"

#: ../../library/turtle.rst:2661
msgid "turtles as clock's hands, ontimer"
msgstr "시곗바늘 거북이, ontimer"

#: ../../library/turtle.rst:2664
msgid "colormixer"
msgstr "colormixer"

#: ../../library/turtle.rst:2664
msgid "experiment with r, g, b"
msgstr "r, g, b 실험"

#: ../../library/turtle.rst:2666
msgid "forest"
msgstr "forest"

#: ../../library/turtle.rst:2666
msgid "3 breadth-first trees"
msgstr "3개의 너비 우선 나무"

#: ../../library/turtle.rst:2666
msgid "randomization"
msgstr "무작위화"

#: ../../library/turtle.rst:2668
msgid "fractalcurves"
msgstr "fractalcurves"

#: ../../library/turtle.rst:2668
msgid "Hilbert & Koch curves"
msgstr "힐버트(Hilbert)와 코흐(Koch) 곡선"

#: ../../library/turtle.rst:2668
msgid "recursion"
msgstr "재귀"

#: ../../library/turtle.rst:2670
msgid "lindenmayer"
msgstr "lindenmayer"

#: ../../library/turtle.rst:2670
msgid "ethnomathematics (indian kolams)"
msgstr "민족 수학 (인도 콜람)"

#: ../../library/turtle.rst:2670
msgid "L-System"
msgstr "L-System"

#: ../../library/turtle.rst:2673
msgid "minimal_hanoi"
msgstr "minimal_hanoi"

#: ../../library/turtle.rst:2673
msgid "Towers of Hanoi"
msgstr "하노이의 탑"

#: ../../library/turtle.rst:2673
msgid "Rectangular Turtles as Hanoi discs (shape, shapesize)"
msgstr "하노이 디스크로 쓰는 직사각형 거북 (모양, 모양 크기)"

#: ../../library/turtle.rst:2677
msgid "nim"
msgstr "nim"

#: ../../library/turtle.rst:2677
msgid ""
"play the classical nim game with three heaps of sticks against the "
"computer."
msgstr "3개의 막대 더미로 컴퓨터와 고전적인 님 게임을 합니다."

#: ../../library/turtle.rst:2677
msgid "turtles as nimsticks, event driven (mouse, keyboard)"
msgstr "님 막대로 쓰는 거북, 이벤트 구동 (마우스, 키보드)"

#: ../../library/turtle.rst:2681
msgid "paint"
msgstr "paint"

#: ../../library/turtle.rst:2681
msgid "super minimalistic drawing program"
msgstr "극도로 단순한 그리기 프로그램"

#: ../../library/turtle.rst:2684
msgid "peace"
msgstr "peace"

#: ../../library/turtle.rst:2684
msgid "elementary"
msgstr "기초"

#: ../../library/turtle.rst:2684
msgid "turtle: appearance and animation"
msgstr "거북이: 외관과 애니메이션"

#: ../../library/turtle.rst:2687
msgid "penrose"
msgstr "penrose"

#: ../../library/turtle.rst:2687
msgid "aperiodic tiling with kites and darts"
msgstr "연과 다트가 있는 비주기적 타일링"

#: ../../library/turtle.rst:2690
msgid "planet_and_moon"
msgstr "planet_and_moon"

#: ../../library/turtle.rst:2690
msgid "simulation of gravitational system"
msgstr "중력 시스템 시뮬레이션"

#: ../../library/turtle.rst:2690
msgid "compound shapes, :class:`Vec2D`"
msgstr "복합 모양, :class:`Vec2D`"

#: ../../library/turtle.rst:2693
msgid "rosette"
msgstr ""

#: ../../library/turtle.rst:2693
msgid "a pattern from the wikipedia article on turtle graphics"
msgstr "터틀 그래픽에 관한 위키피디아 기사의 패턴"

#: ../../library/turtle.rst:2693
msgid ":func:`clone`, :func:`undo`"
msgstr ":func:`clone`, :func:`undo`"

#: ../../library/turtle.rst:2696
msgid "round_dance"
msgstr "round_dance"

#: ../../library/turtle.rst:2696
msgid "dancing turtles rotating pairwise in opposite direction"
msgstr "반대 방향으로 쌍으로 회전하는 춤추는 거북이"

#: ../../library/turtle.rst:2696
msgid "compound shapes, clone shapesize, tilt, get_shapepoly, update"
msgstr "복합 모양, 모양 크기 복제, tilt, get_shapepoly, update"

#: ../../library/turtle.rst:2700
msgid "sorting_animate"
msgstr "sorting_animate"

#: ../../library/turtle.rst:2700
msgid "visual demonstration of different sorting methods"
msgstr "여러 정렬 방법의 시각적 데모"

#: ../../library/turtle.rst:2700
msgid "simple alignment, randomization"
msgstr "간단한 정렬, 무작위화"

#: ../../library/turtle.rst:2703
msgid "tree"
msgstr "tree"

#: ../../library/turtle.rst:2703
msgid "a (graphical) breadth first tree (using generators)"
msgstr "(그래픽) 너비 우선 나무 (제너레이터 사용)"

#: ../../library/turtle.rst:2706
msgid "two_canvases"
msgstr "two_canvases"

#: ../../library/turtle.rst:2706
msgid "simple design"
msgstr "간단한 디자인"

#: ../../library/turtle.rst:2706
msgid "turtles on two canvases"
msgstr "두 캔버스의 거북이"

#: ../../library/turtle.rst:2709
msgid "yinyang"
msgstr "yinyang"

#: ../../library/turtle.rst:2709
msgid "another elementary example"
msgstr "또 하나의 기초 예제"

#: ../../library/turtle.rst:2712
msgid "Have fun!"
msgstr "즐기세요!"

#: ../../library/turtle.rst:2716
msgid "Changes since Python 2.6"
msgstr "파이썬 2.6 이후의 변화"

#: ../../library/turtle.rst:2718
#, fuzzy
msgid ""
"The methods :func:`Turtle.tracer <tracer>`, :func:`Turtle.window_width "
"<window_width>` and :func:`Turtle.window_height <window_height>` have "
"been eliminated. Methods with these names and functionality are now "
"available only as methods of :class:`Screen`. The functions derived from "
"these remain available. (In fact already in Python 2.6 these methods were"
" merely duplications of the corresponding "
":class:`TurtleScreen`/:class:`Screen` methods.)"
msgstr ""
"메서드 :meth:`Turtle.tracer`, :meth:`Turtle.window_width` 및 "
":meth:`Turtle.window_height`\\가 제거되었습니다. 이러한 이름과 기능을 가진 메서드는 이제 "
":class:`Screen`\\의 메서드로만 사용 가능합니다. 이들에서 파생된 함수는 계속 사용할 수 있습니다. (실제로 파이썬 "
"2.6에서 이 메서드는 해당 :class:`TurtleScreen`/:class:`Screen`-메서드의 복제일 뿐입니다.)"

#: ../../library/turtle.rst:2726
#, fuzzy
msgid ""
"The method :func:`!Turtle.fill` has been eliminated. The behaviour of "
":func:`begin_fill` and :func:`end_fill` have changed slightly: now every "
"filling process must be completed with an ``end_fill()`` call."
msgstr ""
"메서드 :meth:`Turtle.fill`\\이 제거되었습니다. :meth:`begin_fill`\\과 "
":meth:`end_fill`\\의 동작이 약간 변경되었습니다: 이제 모든 채우기 프로세스를 ``end_fill()`` 호출로 "
"완료해야 합니다."

#: ../../library/turtle.rst:2731
#, fuzzy
msgid ""
"A method :func:`Turtle.filling <filling>` has been added. It returns a "
"boolean value: ``True`` if a filling process is under way, ``False`` "
"otherwise. This behaviour corresponds to a ``fill()`` call without "
"arguments in Python 2.6."
msgstr ""
"메서드 :meth:`Turtle.filling`\\이 추가되었습니다. 불리언 값을 반환합니다: 채우기 프로세스가 진행 중이면 "
"``True``\\를, 그렇지 않으면 ``False``\\를 반환합니다. 이 동작은 파이썬 2.6에서 인자가 없는 "
"``fill()`` 호출에 해당합니다."

#: ../../library/turtle.rst:2737
msgid "Changes since Python 3.0"
msgstr "파이썬 3.0 이후의 변화"

#: ../../library/turtle.rst:2739
#, fuzzy
msgid ""
"The :class:`Turtle` methods :func:`shearfactor`, :func:`shapetransform` "
"and :func:`get_shapepoly` have been added. Thus the full range of regular"
" linear transforms is now available for transforming turtle shapes. "
":func:`tiltangle` has been enhanced in functionality: it now can be used "
"to get or set the tilt angle."
msgstr ""
"메서드 :meth:`Turtle.shearfactor`, :meth:`Turtle.shapetransform` 및 "
":meth:`Turtle.get_shapepoly`\\가 추가되었습니다. 따라서 이제 거북이 모양을 변환하기 위해 전체 범위의 일반"
" 선형 변환을 사용할 수 있습니다. :meth:`Turtle.tiltangle`\\의 기능이 향상되었습니다: 이제 틸트 각도를 "
"가져오거나 설정하는 데 사용할 수 있습니다. :meth:`Turtle.settiltangle`\\은 폐지되었습니다."

#: ../../library/turtle.rst:2745
#, fuzzy
msgid ""
"The :class:`Screen` method :func:`onkeypress` has been added as a "
"complement to :func:`onkey`. As the latter binds actions to the key "
"release event, an alias: :func:`onkeyrelease` was also added for it."
msgstr ""
":meth:`Screen.onkeypress` 메서드는 실제로는 키 릴리스 이벤트에 액션을 연결하는 "
":meth:`Screen.onkey`\\의 보완으로 추가되었습니다. 이에 따라 후자는 "
":meth:`Screen.onkeyrelease` 별칭을 갖습니다."

#: ../../library/turtle.rst:2749
msgid ""
"The method :func:`Screen.mainloop <mainloop>` has been added, so there is"
" no longer a need to use the standalone :func:`mainloop` function when "
"working with :class:`Screen` and :class:`Turtle` objects."
msgstr ""

#: ../../library/turtle.rst:2753
#, fuzzy
msgid ""
"Two input methods have been added: :func:`Screen.textinput <textinput>` "
"and :func:`Screen.numinput <numinput>`. These pop up input dialogs and "
"return strings and numbers respectively."
msgstr ""
":meth:`Screen.textinput`\\과 :meth:`Screen.numinput`\\의 두 가지 입력 메서드가 "
"추가되었습니다. 입력 대화 상자를 띄우고 각각 문자열과 숫자를 반환합니다."

#: ../../library/turtle.rst:2757
msgid ""
"Two example scripts :file:`tdemo_nim.py` and :file:`tdemo_round_dance.py`"
" have been added to the :file:`Lib/turtledemo` directory."
msgstr ""
":file:`tdemo_nim.py`\\와 :file:`tdemo_round_dance.py`\\의 두 가지 예제 스크립트가 "
":file:`Lib/turtledemo` 디렉터리에 추가되었습니다."

#~ msgid ""
#~ "By combining together these and similar"
#~ " commands, intricate shapes and pictures"
#~ " can easily be drawn."
#~ msgstr "이러한 명령과 유사한 명령을 함께 결합하여, 복잡한 모양과 그림을 쉽게 그릴 수 있습니다."

#~ msgid ""
#~ "The :mod:`turtle` module is an extended"
#~ " reimplementation of the same-named "
#~ "module from the Python standard "
#~ "distribution up to version Python 2.5."
#~ msgstr ":mod:`turtle` 모듈은 버전 파이썬 2.5까지의 파이썬 표준 배포에 있던, 같은 이름의 모듈을 확장 재구현한 것입니다."

#~ msgid ""
#~ "It tries to keep the merits of "
#~ "the old turtle module and to be"
#~ " (nearly) 100% compatible with it.  "
#~ "This means in the first place to"
#~ " enable the learning programmer to "
#~ "use all the commands, classes and "
#~ "methods interactively when using the "
#~ "module from within IDLE run with "
#~ "the ``-n`` switch."
#~ msgstr ""
#~ "예전 turtle 모듈의 장점을 유지하고 (거의) 100%"
#~ " 호환되도록 노력합니다. 이는 ``-n`` 스위치로 실행된 "
#~ "IDLE 내에서 모듈을 사용할 때, 학습하는 프로그래머가"
#~ " 대화식으로 모든 명령, 클래스 및 메서드를 사용할"
#~ " 수 있게 됨을 뜻합니다."

#~ msgid ""
#~ "The turtle module provides turtle "
#~ "graphics primitives, in both object-"
#~ "oriented and procedure-oriented ways.  "
#~ "Because it uses :mod:`tkinter` for the"
#~ " underlying graphics, it needs a "
#~ "version of Python installed with Tk "
#~ "support."
#~ msgstr ""
#~ "turtle 모듈은 객체 지향과 절차 지향 방식 "
#~ "모두로 터틀 그래픽 프리미티브를 제공합니다. 하부 그래픽에"
#~ " :mod:`tkinter`\\를 사용하기 때문에, Tk 지원과 "
#~ "함께 설치된 파이썬 버전이 필요합니다."

#~ msgid "The object-oriented interface uses essentially two+two classes:"
#~ msgstr "객체 지향 인터페이스는 기본적으로 2+2 클래스를 사용합니다:"

#~ msgid ""
#~ "The :class:`TurtleScreen` class defines "
#~ "graphics windows as a playground for "
#~ "the drawing turtles.  Its constructor "
#~ "needs a :class:`tkinter.Canvas` or a "
#~ ":class:`ScrolledCanvas` as argument.  It "
#~ "should be used when :mod:`turtle` is "
#~ "used as part of some application."
#~ msgstr ""
#~ ":class:`TurtleScreen` 클래스는 그림 그리는 거북이의 "
#~ "놀이터로 그래픽 창을 정의합니다. 생성자는 인자로 "
#~ ":class:`tkinter.Canvas`\\나 :class:`ScrolledCanvas`\\가 "
#~ "필요합니다. :mod:`turtle`\\이 어떤 응용 프로그램의 일부로"
#~ " 사용될 때 사용해야 합니다."

#~ msgid ""
#~ "The function :func:`Screen` returns a "
#~ "singleton object of a :class:`TurtleScreen`"
#~ " subclass. This function should be "
#~ "used when :mod:`turtle` is used as "
#~ "a standalone tool for doing graphics."
#~ " As a singleton object, inheriting "
#~ "from its class is not possible."
#~ msgstr ""
#~ ":func:`Screen` 함수는 :class:`TurtleScreen` 서브 "
#~ "클래스의 싱글톤 객체를 반환합니다. 이 함수는 "
#~ ":mod:`turtle`\\이 그래픽을 위한 독립형 도구로 사용될 "
#~ "때 사용해야 합니다. 싱글톤 객체이기 때문에, 클래스를 "
#~ "상속할 수는 없습니다."

#~ msgid ""
#~ "All methods of TurtleScreen/Screen also "
#~ "exist as functions, i.e. as part "
#~ "of the procedure-oriented interface."
#~ msgstr "TurtleScreen/Screen의 모든 메서드는 함수, 즉 절차 지향 인터페이스의 일부로도 존재합니다."

#~ msgid ""
#~ ":class:`RawTurtle` (alias: :class:`RawPen`) defines"
#~ " Turtle objects which draw on a "
#~ ":class:`TurtleScreen`.  Its constructor needs "
#~ "a Canvas, ScrolledCanvas or TurtleScreen "
#~ "as argument, so the RawTurtle objects"
#~ " know where to draw."
#~ msgstr ""
#~ ":class:`RawTurtle`\\(별칭: :class:`RawPen`)은 "
#~ ":class:`TurtleScreen`\\에 그리는 Turtle 객체를 정의합니다."
#~ " 생성자는 인자로 Canvas, ScrolledCanvas 또는 "
#~ "TurtleScreen이 필요해서, RawTurtle 객체는 어디에 "
#~ "그리는지 압니다."

#~ msgid ""
#~ "Derived from RawTurtle is the subclass"
#~ " :class:`Turtle` (alias: :class:`Pen`), which "
#~ "draws on \"the\" :class:`Screen` instance "
#~ "which is automatically created, if not"
#~ " already present."
#~ msgstr ""
#~ "RawTurtle에서 파생된 서브 클래스 :class:`Turtle`\\(별칭:"
#~ " :class:`Pen`)은 (없으면 자동으로 만드는) "
#~ ":class:`Screen` 인스턴스에 그립니다."

#~ msgid ""
#~ "All methods of RawTurtle/Turtle also "
#~ "exist as functions, i.e. part of "
#~ "the procedure-oriented interface."
#~ msgstr "RawTurtle/Turtle의 모든 메서드는 함수, 즉 절차 지향 인터페이스의 일부로도 존재합니다."

#~ msgid "Overview of available Turtle and Screen methods"
#~ msgstr "사용 가능한 Turtle과 Screen 메서드 개요"

#~ msgid ":func:`settiltangle`"
#~ msgstr ":func:`settiltangle`"

#~ msgid ":func:`clear` | :func:`clearscreen`"
#~ msgstr ":func:`clear` | :func:`clearscreen`"

#~ msgid ":func:`reset` | :func:`resetscreen`"
#~ msgstr ":func:`reset` | :func:`resetscreen`"

#~ msgid ""
#~ "Rotate the turtleshape to point in "
#~ "the direction specified by *angle*, "
#~ "regardless of its current tilt-angle."
#~ "  *Do not* change the turtle's "
#~ "heading (direction of movement)."
#~ msgstr ""
#~ "현재 틸트 각도(tilt-angle)와 관계없이 거북이 모양을"
#~ " *angle*\\이 지정하는 방향을 가리키도록 회전합니다. "
#~ "거북이의 방향(이동 방향)을 변경하지 *않습니다*."

#~ msgid "wikipedia"
#~ msgstr "wikipedia"

#~ msgid ""
#~ "The method  :meth:`Screen.mainloop` has been"
#~ " added. So when working only with "
#~ "Screen and Turtle objects one must "
#~ "not additionally import :func:`mainloop` "
#~ "anymore."
#~ msgstr ""
#~ "메서드 :meth:`Screen.mainloop`\\가 추가되었습니다. 따라서 "
#~ "Screen과 Turtle 객체로만 작업할 때 "
#~ ":func:`mainloop`\\를 더는 임포트 하지 않아야 합니다."

