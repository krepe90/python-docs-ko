# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2017, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-04-17 23:44+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: Dong-gweon Oh <flowdas@gmail.com>\n"
"Language-Team: Korean (https://python.flowdas.com)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.17.0\n"

#: ../../library/pathlib.rst:2
#, fuzzy
msgid ":mod:`!pathlib` --- Object-oriented filesystem paths"
msgstr ":mod:`pathlib` --- 객체 지향 파일 시스템 경로"

#: ../../library/pathlib.rst:9
#, fuzzy
msgid "**Source code:** :source:`Lib/pathlib/`"
msgstr "**소스 코드:** :source:`Lib/pathlib.py`"

#: ../../library/pathlib.rst:15
msgid ""
"This module offers classes representing filesystem paths with semantics "
"appropriate for different operating systems.  Path classes are divided "
"between :ref:`pure paths <pure-paths>`, which provide purely "
"computational operations without I/O, and :ref:`concrete paths <concrete-"
"paths>`, which inherit from pure paths but also provide I/O operations."
msgstr ""
"이 모듈은 다른 운영 체제에 적합한 의미 체계를 가진 파일 시스템 경로를 나타내는 클래스를 제공합니다. 경로 클래스는 I/O 없이 "
"순수한 계산 연산을 제공하는 :ref:`순수한 경로 <pure-paths>`\\와 순수한 경로를 상속하지만, I/O 연산도 제공하는"
" :ref:`구상 경로 <concrete-paths>`\\로 구분됩니다."

#: ../../library/pathlib.rst:21
msgid ""
"Inheritance diagram showing the classes available in pathlib. The\n"
"most basic class is PurePath, which has three direct subclasses:\n"
"PurePosixPath, PureWindowsPath, and Path. Further to these four\n"
"classes, there are two classes that use multiple inheritance:\n"
"PosixPath subclasses PurePosixPath and Path, and WindowsPath\n"
"subclasses PureWindowsPath and Path."
msgstr ""

#: ../../library/pathlib.rst:31
msgid ""
"If you've never used this module before or just aren't sure which class "
"is right for your task, :class:`Path` is most likely what you need. It "
"instantiates a :ref:`concrete path <concrete-paths>` for the platform the"
" code is running on."
msgstr ""
"이전에 이 모듈을 사용한 적이 없거나 어떤 클래스가 작업에 적합한지 확신이 없다면, :class:`Path`\\가 가장 적합할 "
"가능성이 높습니다. 코드가 실행되는 플랫폼의 :ref:`구상 경로 <concrete-paths>`\\를 인스턴스화 합니다."

#: ../../library/pathlib.rst:35
msgid "Pure paths are useful in some special cases; for example:"
msgstr "순수한 경로는 특별한 경우에 유용합니다; 예를 들면:"

#: ../../library/pathlib.rst:37
msgid ""
"If you want to manipulate Windows paths on a Unix machine (or vice "
"versa). You cannot instantiate a :class:`WindowsPath` when running on "
"Unix, but you can instantiate :class:`PureWindowsPath`."
msgstr ""
"유닉스 기계에서 윈도우 경로를 조작하려고 할 때 (또는 그 반대). 유닉스에서 실행할 때는 "
":class:`WindowsPath`\\를 인스턴스화 할 수 없지만, :class:`PureWindowsPath`\\는 인스턴스화 "
"할 수 있습니다."

#: ../../library/pathlib.rst:40
msgid ""
"You want to make sure that your code only manipulates paths without "
"actually accessing the OS. In this case, instantiating one of the pure "
"classes may be useful since those simply don't have any OS-accessing "
"operations."
msgstr ""
"코드가 실제로 OS에 액세스하지 않고 경로만 조작한다는 확신이 필요할 때. 이 경우, 순수 클래스 중 하나를 인스턴스화 하면 OS "
"액세스 연산이 없어서 유용 할 수 있습니다."

#: ../../library/pathlib.rst:45
msgid ":pep:`428`: The pathlib module -- object-oriented filesystem paths."
msgstr ":pep:`428`: pathlib 모듈 -- 객체 지향 파일 시스템 경로."

#: ../../library/pathlib.rst:48
msgid ""
"For low-level path manipulation on strings, you can also use the "
":mod:`os.path` module."
msgstr "문자열에 대한 저수준 경로 조작을 위해, :mod:`os.path` 모듈을 사용할 수도 있습니다."

#: ../../library/pathlib.rst:53
msgid "Basic use"
msgstr "기본 사용"

#: ../../library/pathlib.rst:55
msgid "Importing the main class::"
msgstr "메인 클래스 임포트 하기::"

#: ../../library/pathlib.rst:57
msgid ">>> from pathlib import Path"
msgstr ""

#: ../../library/pathlib.rst:59
msgid "Listing subdirectories::"
msgstr "서브 디렉터리 나열하기::"

#: ../../library/pathlib.rst:61
msgid ""
">>> p = Path('.')\n"
">>> [x for x in p.iterdir() if x.is_dir()]\n"
"[PosixPath('.hg'), PosixPath('docs'), PosixPath('dist'),\n"
" PosixPath('__pycache__'), PosixPath('build')]"
msgstr ""

#: ../../library/pathlib.rst:66
msgid "Listing Python source files in this directory tree::"
msgstr "이 디렉터리 트리에 있는 파이썬 소스 파일 나열하기::"

#: ../../library/pathlib.rst:68
msgid ""
">>> list(p.glob('**/*.py'))\n"
"[PosixPath('test_pathlib.py'), PosixPath('setup.py'),\n"
" PosixPath('pathlib.py'), PosixPath('docs/conf.py'),\n"
" PosixPath('build/lib/pathlib.py')]"
msgstr ""

#: ../../library/pathlib.rst:73
msgid "Navigating inside a directory tree::"
msgstr "디렉터리 트리 내에서 탐색하기::"

#: ../../library/pathlib.rst:75
msgid ""
">>> p = Path('/etc')\n"
">>> q = p / 'init.d' / 'reboot'\n"
">>> q\n"
"PosixPath('/etc/init.d/reboot')\n"
">>> q.resolve()\n"
"PosixPath('/etc/rc.d/init.d/halt')"
msgstr ""

#: ../../library/pathlib.rst:82
msgid "Querying path properties::"
msgstr "경로 속성 조회하기::"

#: ../../library/pathlib.rst:84
msgid ""
">>> q.exists()\n"
"True\n"
">>> q.is_dir()\n"
"False"
msgstr ""

#: ../../library/pathlib.rst:89
msgid "Opening a file::"
msgstr "파일 열기::"

#: ../../library/pathlib.rst:91
msgid ""
">>> with q.open() as f: f.readline()\n"
"...\n"
"'#!/bin/bash\\n'"
msgstr ""

#: ../../library/pathlib.rst:97
msgid "Exceptions"
msgstr ""

#: ../../library/pathlib.rst:101
msgid ""
"An exception inheriting :exc:`NotImplementedError` that is raised when an"
" unsupported operation is called on a path object."
msgstr ""

#: ../../library/pathlib.rst:110
msgid "Pure paths"
msgstr "순수한 경로"

#: ../../library/pathlib.rst:112
msgid ""
"Pure path objects provide path-handling operations which don't actually "
"access a filesystem.  There are three ways to access these classes, which"
" we also call *flavours*:"
msgstr ""
"순수한 경로 객체는 실제로 파일 시스템에 액세스하지 않는 경로 처리 연산을 제공합니다. 이 클래스에 액세스하는 방법에는 세 가지가 "
"있으며, *플레이버(flavours)*\\라고도 부릅니다:"

#: ../../library/pathlib.rst:118
msgid ""
"A generic class that represents the system's path flavour (instantiating "
"it creates either a :class:`PurePosixPath` or a "
":class:`PureWindowsPath`)::"
msgstr ""
"시스템의 경로 플레이버를 나타내는 일반 클래스 (인스턴스화 하면 :class:`PurePosixPath`\\나 "
":class:`PureWindowsPath`\\를 만듭니다)::"

#: ../../library/pathlib.rst:121
msgid ""
">>> PurePath('setup.py')      # Running on a Unix machine\n"
"PurePosixPath('setup.py')"
msgstr ""

#: ../../library/pathlib.rst:124
#, fuzzy
msgid ""
"Each element of *pathsegments* can be either a string representing a path"
" segment, or an object implementing the :class:`os.PathLike` interface "
"where the :meth:`~os.PathLike.__fspath__` method returns a string, such "
"as another path object::"
msgstr ""
"*pathsegments*\\의 각 요소는 경로 세그먼트를 나타내는 문자열, 문자열을 반환하는 :class:`os.PathLike`"
" 인터페이스를 구현하는 객체 또는 다른 경로 객체일 수 있습니다::"

#: ../../library/pathlib.rst:129
msgid ""
">>> PurePath('foo', 'some/path', 'bar')\n"
"PurePosixPath('foo/some/path/bar')\n"
">>> PurePath(Path('foo'), Path('bar'))\n"
"PurePosixPath('foo/bar')"
msgstr ""

#: ../../library/pathlib.rst:134
msgid "When *pathsegments* is empty, the current directory is assumed::"
msgstr "*pathsegments*\\가 비어 있으면, 현재 디렉터리를 가정합니다::"

#: ../../library/pathlib.rst:136
msgid ""
">>> PurePath()\n"
"PurePosixPath('.')"
msgstr ""

#: ../../library/pathlib.rst:139
msgid ""
"If a segment is an absolute path, all previous segments are ignored (like"
" :func:`os.path.join`)::"
msgstr ""

#: ../../library/pathlib.rst:142
msgid ""
">>> PurePath('/etc', '/usr', 'lib64')\n"
"PurePosixPath('/usr/lib64')\n"
">>> PureWindowsPath('c:/Windows', 'd:bar')\n"
"PureWindowsPath('d:bar')"
msgstr ""

#: ../../library/pathlib.rst:147
msgid ""
"On Windows, the drive is not reset when a rooted relative path segment "
"(e.g., ``r'\\foo'``) is encountered::"
msgstr ""

#: ../../library/pathlib.rst:150
msgid ""
">>> PureWindowsPath('c:/Windows', '/Program Files')\n"
"PureWindowsPath('c:/Program Files')"
msgstr ""

#: ../../library/pathlib.rst:153
#, fuzzy
msgid ""
"Spurious slashes and single dots are collapsed, but double dots "
"(``'..'``) and leading double slashes (``'//'``) are not, since this "
"would change the meaning of a path for various reasons (e.g. symbolic "
"links, UNC paths)::"
msgstr ""
"의미 없는 슬래시와 단일 점은 축소되지만, 이중 점(``'..'``)은 그렇지 않은데, 심볼릭 링크에서 경로의 의미가 변경되기 "
"때문입니다::"

#: ../../library/pathlib.rst:157
msgid ""
">>> PurePath('foo//bar')\n"
"PurePosixPath('foo/bar')\n"
">>> PurePath('//foo/bar')\n"
"PurePosixPath('//foo/bar')\n"
">>> PurePath('foo/./bar')\n"
"PurePosixPath('foo/bar')\n"
">>> PurePath('foo/../bar')\n"
"PurePosixPath('foo/../bar')"
msgstr ""

#: ../../library/pathlib.rst:166
msgid ""
"(a naïve approach would make ``PurePosixPath('foo/../bar')`` equivalent "
"to ``PurePosixPath('bar')``, which is wrong if ``foo`` is a symbolic link"
" to another directory)"
msgstr ""
"(나이브한 접근법은 ``PurePosixPath('foo/../bar')``\\를 ``PurePosixPath('bar')``\\와"
" 동등하게 만드는데, ``foo``\\가 다른 디렉터리에 대한 심볼릭 링크일 때는 잘못됩니다)"

#: ../../library/pathlib.rst:170
msgid ""
"Pure path objects implement the :class:`os.PathLike` interface, allowing "
"them to be used anywhere the interface is accepted."
msgstr ""
"순수한 경로 객체는 :class:`os.PathLike` 인터페이스를 구현하여, 이 인터페이스가 허용되는 모든 위치에서 사용할 수 "
"있습니다."

#: ../../library/pathlib.rst:173
msgid "Added support for the :class:`os.PathLike` interface."
msgstr ":class:`os.PathLike` 인터페이스에 대한 지원이 추가되었습니다."

#: ../../library/pathlib.rst:178
msgid ""
"A subclass of :class:`PurePath`, this path flavour represents non-Windows"
" filesystem paths::"
msgstr ":class:`PurePath`\\의 서브 클래스, 이 경로 플레이버는 윈도우 이외의 파일 시스템 경로를 나타냅니다::"

#: ../../library/pathlib.rst:181
msgid ""
">>> PurePosixPath('/etc/hosts')\n"
"PurePosixPath('/etc/hosts')"
msgstr ""

#: ../../library/pathlib.rst:184 ../../library/pathlib.rst:196
#: ../../library/pathlib.rst:766 ../../library/pathlib.rst:776
#: ../../library/pathlib.rst:791
msgid "*pathsegments* is specified similarly to :class:`PurePath`."
msgstr "*pathsegments*\\는 :class:`PurePath`\\와 유사하게 지정됩니다."

#: ../../library/pathlib.rst:188
#, fuzzy
msgid ""
"A subclass of :class:`PurePath`, this path flavour represents Windows "
"filesystem paths, including `UNC paths`_::"
msgstr ":class:`PurePath`\\의 서브 클래스, 이 경로 플레이버는 윈도우 파일 시스템 경로를 나타냅니다::"

#: ../../library/pathlib.rst:191
msgid ""
">>> PureWindowsPath('c:/', 'Users', 'Ximénez')\n"
"PureWindowsPath('c:/Users/Ximénez')\n"
">>> PureWindowsPath('//server/share/file')\n"
"PureWindowsPath('//server/share/file')"
msgstr ""

#: ../../library/pathlib.rst:200
msgid ""
"Regardless of the system you're running on, you can instantiate all of "
"these classes, since they don't provide any operation that does system "
"calls."
msgstr ""
"실행 중인 시스템과 관계없이, 이러한 모든 클래스를 인스턴스화 할 수 있는데, 시스템 호출을 수행하는 연산을 제공하지 않기 "
"때문입니다."

#: ../../library/pathlib.rst:205
msgid "General properties"
msgstr "일반 속성"

#: ../../library/pathlib.rst:207
#, fuzzy
msgid ""
"Paths are immutable and :term:`hashable`.  Paths of a same flavour are "
"comparable and orderable.  These properties respect the flavour's case-"
"folding semantics::"
msgstr ""
"경로는 불변이고 해시 가능합니다. 같은 플레이버의 경로는 비교할 수 있고 순서가 정의됩니다. 이러한 특성은 플레이버의 케이스 폴딩 "
"의미론(case-folding semantics)을 존중합니다::"

#: ../../library/pathlib.rst:211
#, python-brace-format
msgid ""
">>> PurePosixPath('foo') == PurePosixPath('FOO')\n"
"False\n"
">>> PureWindowsPath('foo') == PureWindowsPath('FOO')\n"
"True\n"
">>> PureWindowsPath('FOO') in { PureWindowsPath('foo') }\n"
"True\n"
">>> PureWindowsPath('C:') < PureWindowsPath('d:')\n"
"True"
msgstr ""

#: ../../library/pathlib.rst:220
msgid "Paths of a different flavour compare unequal and cannot be ordered::"
msgstr "다른 플레이버의 경로는 다르다고 비교되며 대소 비교할 수 없습니다::"

#: ../../library/pathlib.rst:222
msgid ""
">>> PureWindowsPath('foo') == PurePosixPath('foo')\n"
"False\n"
">>> PureWindowsPath('foo') < PurePosixPath('foo')\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"TypeError: '<' not supported between instances of 'PureWindowsPath' and "
"'PurePosixPath'"
msgstr ""

#: ../../library/pathlib.rst:231
msgid "Operators"
msgstr "연산자"

#: ../../library/pathlib.rst:233
msgid ""
"The slash operator helps create child paths, like :func:`os.path.join`. "
"If the argument is an absolute path, the previous path is ignored. On "
"Windows, the drive is not reset when the argument is a rooted relative "
"path (e.g., ``r'\\foo'``)::"
msgstr ""

#: ../../library/pathlib.rst:238
msgid ""
">>> p = PurePath('/etc')\n"
">>> p\n"
"PurePosixPath('/etc')\n"
">>> p / 'init.d' / 'apache2'\n"
"PurePosixPath('/etc/init.d/apache2')\n"
">>> q = PurePath('bin')\n"
">>> '/usr' / q\n"
"PurePosixPath('/usr/bin')\n"
">>> p / '/an_absolute_path'\n"
"PurePosixPath('/an_absolute_path')\n"
">>> PureWindowsPath('c:/Windows', '/Program Files')\n"
"PureWindowsPath('c:/Program Files')"
msgstr ""

#: ../../library/pathlib.rst:251
msgid ""
"A path object can be used anywhere an object implementing "
":class:`os.PathLike` is accepted::"
msgstr "경로 객체는 :class:`os.PathLike`\\을 구현하는 객체가 허용되는 모든 곳에서 사용할 수 있습니다::"

#: ../../library/pathlib.rst:254
msgid ""
">>> import os\n"
">>> p = PurePath('/etc')\n"
">>> os.fspath(p)\n"
"'/etc'"
msgstr ""

#: ../../library/pathlib.rst:259
msgid ""
"The string representation of a path is the raw filesystem path itself (in"
" native form, e.g. with backslashes under Windows), which you can pass to"
" any function taking a file path as a string::"
msgstr ""
"경로의 문자열 표현은 원시 파일 시스템 경로 자체(네이티브 형식으로, 예를 들어 윈도우에서 역 슬래시)로, 파일 경로를 문자열로 "
"받아들이는 모든 함수에 전달할 수 있습니다::"

#: ../../library/pathlib.rst:263
msgid ""
">>> p = PurePath('/etc')\n"
">>> str(p)\n"
"'/etc'\n"
">>> p = PureWindowsPath('c:/Program Files')\n"
">>> str(p)\n"
"'c:\\\\Program Files'"
msgstr ""

#: ../../library/pathlib.rst:270
msgid ""
"Similarly, calling :class:`bytes` on a path gives the raw filesystem path"
" as a bytes object, as encoded by :func:`os.fsencode`::"
msgstr ""
"마찬가지로, 경로에 대해 :class:`bytes`\\를 호출하면 :func:`os.fsencode`\\로 인코딩된 바이트열 객체로"
" 원시 파일 시스템 경로를 제공합니다::"

#: ../../library/pathlib.rst:273
msgid ""
">>> bytes(p)\n"
"b'/etc'"
msgstr ""

#: ../../library/pathlib.rst:277
msgid ""
"Calling :class:`bytes` is only recommended under Unix.  Under Windows, "
"the unicode form is the canonical representation of filesystem paths."
msgstr ""
":class:`bytes` 호출은 유닉스에서만 권장됩니다. 윈도우에서, 유니코드 형식이 파일 시스템 경로의 "
"규범적(canonical) 표현입니다."

#: ../../library/pathlib.rst:282
msgid "Accessing individual parts"
msgstr "개별 부분에 액세스하기"

#: ../../library/pathlib.rst:284
msgid ""
"To access the individual \"parts\" (components) of a path, use the "
"following property:"
msgstr "경로의 개별 \"부분\"(구성 요소)에 액세스하려면, 다음 프로퍼티를 사용하십시오:"

#: ../../library/pathlib.rst:289
msgid "A tuple giving access to the path's various components::"
msgstr "경로의 다양한 구성 요소로의 액세스를 제공하는 튜플::"

#: ../../library/pathlib.rst:291
msgid ""
">>> p = PurePath('/usr/bin/python3')\n"
">>> p.parts\n"
"('/', 'usr', 'bin', 'python3')\n"
"\n"
">>> p = PureWindowsPath('c:/Program Files/PSF')\n"
">>> p.parts\n"
"('c:\\\\', 'Program Files', 'PSF')"
msgstr ""

#: ../../library/pathlib.rst:299
msgid "(note how the drive and local root are regrouped in a single part)"
msgstr "(드라이브와 로컬 루트가 단일 부분으로 다시 그룹화되는 방식에 유의하십시오)"

#: ../../library/pathlib.rst:303
msgid "Methods and properties"
msgstr "메서드와 프로퍼티"

#: ../../library/pathlib.rst:309
msgid "Pure paths provide the following methods and properties:"
msgstr "순수한 경로는 다음과 같은 메서드와 프로퍼티를 제공합니다:"

#: ../../library/pathlib.rst:313
msgid ""
"The implementation of the :mod:`os.path` module used for low-level path "
"parsing and joining: either :mod:`posixpath` or :mod:`ntpath`."
msgstr ""

#: ../../library/pathlib.rst:320
msgid "A string representing the drive letter or name, if any::"
msgstr "드라이브 문자나 이름을 나타내는 문자열, 있다면::"

#: ../../library/pathlib.rst:322
msgid ""
">>> PureWindowsPath('c:/Program Files/').drive\n"
"'c:'\n"
">>> PureWindowsPath('/Program Files/').drive\n"
"''\n"
">>> PurePosixPath('/etc').drive\n"
"''"
msgstr ""

#: ../../library/pathlib.rst:329
msgid "UNC shares are also considered drives::"
msgstr "UNC 공유도 드라이브로 간주합니다::"

#: ../../library/pathlib.rst:331
msgid ""
">>> PureWindowsPath('//host/share/foo.txt').drive\n"
"'\\\\\\\\host\\\\share'"
msgstr ""

#: ../../library/pathlib.rst:336
msgid "A string representing the (local or global) root, if any::"
msgstr "(로컬이나 글로벌) 루트를 나타내는 문자열, 있다면::"

#: ../../library/pathlib.rst:338
msgid ""
">>> PureWindowsPath('c:/Program Files/').root\n"
"'\\\\'\n"
">>> PureWindowsPath('c:Program Files/').root\n"
"''\n"
">>> PurePosixPath('/etc').root\n"
"'/'"
msgstr ""

#: ../../library/pathlib.rst:345
msgid "UNC shares always have a root::"
msgstr "UNC 공유에는 항상 루트가 있습니다::"

#: ../../library/pathlib.rst:347
msgid ""
">>> PureWindowsPath('//host/share').root\n"
"'\\\\'"
msgstr ""

#: ../../library/pathlib.rst:350
msgid ""
"If the path starts with more than two successive slashes, "
":class:`~pathlib.PurePosixPath` collapses them::"
msgstr ""

#: ../../library/pathlib.rst:353
msgid ""
">>> PurePosixPath('//etc').root\n"
"'//'\n"
">>> PurePosixPath('///etc').root\n"
"'/'\n"
">>> PurePosixPath('////etc').root\n"
"'/'"
msgstr ""

#: ../../library/pathlib.rst:362
msgid ""
"This behavior conforms to *The Open Group Base Specifications Issue 6*, "
"paragraph `4.11 Pathname Resolution "
"<https://pubs.opengroup.org/onlinepubs/009695399/basedefs/xbd_chap04.html#tag_04_11>`_:"
msgstr ""

#: ../../library/pathlib.rst:366
msgid ""
"*\"A pathname that begins with two successive slashes may be interpreted "
"in an implementation-defined manner, although more than two leading "
"slashes shall be treated as a single slash.\"*"
msgstr ""

#: ../../library/pathlib.rst:372
msgid "The concatenation of the drive and root::"
msgstr "드라이브와 루트의 이어 붙이기::"

#: ../../library/pathlib.rst:374
msgid ""
">>> PureWindowsPath('c:/Program Files/').anchor\n"
"'c:\\\\'\n"
">>> PureWindowsPath('c:Program Files/').anchor\n"
"'c:'\n"
">>> PurePosixPath('/etc').anchor\n"
"'/'\n"
">>> PureWindowsPath('//host/share').anchor\n"
"'\\\\\\\\host\\\\share\\\\'"
msgstr ""

#: ../../library/pathlib.rst:386
msgid ""
"An immutable sequence providing access to the logical ancestors of the "
"path::"
msgstr "경로의 논리적 조상에 대한 액세스를 제공하는 불변 시퀀스::"

#: ../../library/pathlib.rst:389
msgid ""
">>> p = PureWindowsPath('c:/foo/bar/setup.py')\n"
">>> p.parents[0]\n"
"PureWindowsPath('c:/foo/bar')\n"
">>> p.parents[1]\n"
"PureWindowsPath('c:/foo')\n"
">>> p.parents[2]\n"
"PureWindowsPath('c:/')"
msgstr ""

#: ../../library/pathlib.rst:397
msgid ""
"The parents sequence now supports :term:`slices <slice>` and negative "
"index values."
msgstr ""

#: ../../library/pathlib.rst:402
msgid "The logical parent of the path::"
msgstr "경로의 논리적 부모::"

#: ../../library/pathlib.rst:404
msgid ""
">>> p = PurePosixPath('/a/b/c/d')\n"
">>> p.parent\n"
"PurePosixPath('/a/b/c')"
msgstr ""

#: ../../library/pathlib.rst:408
msgid "You cannot go past an anchor, or empty path::"
msgstr "앵커나 빈 경로를 넘어갈 수 없습니다::"

#: ../../library/pathlib.rst:410
msgid ""
">>> p = PurePosixPath('/')\n"
">>> p.parent\n"
"PurePosixPath('/')\n"
">>> p = PurePosixPath('.')\n"
">>> p.parent\n"
"PurePosixPath('.')"
msgstr ""

#: ../../library/pathlib.rst:418
msgid "This is a purely lexical operation, hence the following behaviour::"
msgstr "이것은 순수한 어휘(lexical) 연산이라서, 다음과 같이 동작합니다::"

#: ../../library/pathlib.rst:420
msgid ""
">>> p = PurePosixPath('foo/..')\n"
">>> p.parent\n"
"PurePosixPath('foo')"
msgstr ""

#: ../../library/pathlib.rst:424
#, fuzzy
msgid ""
"If you want to walk an arbitrary filesystem path upwards, it is "
"recommended to first call :meth:`Path.resolve` so as to resolve symlinks "
"and eliminate ``\"..\"`` components."
msgstr ""
"임의의 파일 시스템 경로를 위쪽으로 걸어가려면, 먼저 :meth:`Path.resolve`\\를 호출해서 심볼릭 링크를 결정하고 "
"`\"..\"` 구성 요소를 제거하는 것이 좋습니다."

#: ../../library/pathlib.rst:431
msgid ""
"A string representing the final path component, excluding the drive and "
"root, if any::"
msgstr "드라이브와 루트를 제외하고, 마지막 경로 구성 요소를 나타내는 문자열, 있다면::"

#: ../../library/pathlib.rst:434
msgid ""
">>> PurePosixPath('my/library/setup.py').name\n"
"'setup.py'"
msgstr ""

#: ../../library/pathlib.rst:437
msgid "UNC drive names are not considered::"
msgstr "UNC 드라이브 이름은 고려되지 않습니다::"

#: ../../library/pathlib.rst:439
msgid ""
">>> PureWindowsPath('//some/share/setup.py').name\n"
"'setup.py'\n"
">>> PureWindowsPath('//some/share').name\n"
"''"
msgstr ""

#: ../../library/pathlib.rst:447
#, fuzzy
msgid "The last dot-separated portion of the final component, if any::"
msgstr "마지막 구성 요소의 파일 확장자, 있다면::"

#: ../../library/pathlib.rst:449
msgid ""
">>> PurePosixPath('my/library/setup.py').suffix\n"
"'.py'\n"
">>> PurePosixPath('my/library.tar.gz').suffix\n"
"'.gz'\n"
">>> PurePosixPath('my/library').suffix\n"
"''"
msgstr ""

#: ../../library/pathlib.rst:456
msgid "This is commonly called the file extension."
msgstr ""

#: ../../library/pathlib.rst:460
#, fuzzy
msgid "A list of the path's suffixes, often called file extensions::"
msgstr "경로의 파일 확장자 리스트::"

#: ../../library/pathlib.rst:462
msgid ""
">>> PurePosixPath('my/library.tar.gar').suffixes\n"
"['.tar', '.gar']\n"
">>> PurePosixPath('my/library.tar.gz').suffixes\n"
"['.tar', '.gz']\n"
">>> PurePosixPath('my/library').suffixes\n"
"[]"
msgstr ""

#: ../../library/pathlib.rst:472
msgid "The final path component, without its suffix::"
msgstr "suffix가 없는, 마지막 경로 구성 요소::"

#: ../../library/pathlib.rst:474
msgid ""
">>> PurePosixPath('my/library.tar.gz').stem\n"
"'library.tar'\n"
">>> PurePosixPath('my/library.tar').stem\n"
"'library'\n"
">>> PurePosixPath('my/library').stem\n"
"'library'"
msgstr ""

#: ../../library/pathlib.rst:484
msgid "Return a string representation of the path with forward slashes (``/``)::"
msgstr "슬래시(``/``)가 있는 경로의 문자열 표현을 반환합니다::"

#: ../../library/pathlib.rst:486
msgid ""
">>> p = PureWindowsPath('c:\\\\windows')\n"
">>> str(p)\n"
"'c:\\\\windows'\n"
">>> p.as_posix()\n"
"'c:/windows'"
msgstr ""

#: ../../library/pathlib.rst:495
msgid ""
"Return whether the path is absolute or not.  A path is considered "
"absolute if it has both a root and (if the flavour allows) a drive::"
msgstr "경로가 절대적인지 아닌지를 반환합니다. 루트와 (플레이버가 허락하면) 드라이브가 모두 있으면 경로를 절대적이라고 간주합니다::"

#: ../../library/pathlib.rst:498
msgid ""
">>> PurePosixPath('/a/b').is_absolute()\n"
"True\n"
">>> PurePosixPath('a/b').is_absolute()\n"
"False\n"
"\n"
">>> PureWindowsPath('c:/a/b').is_absolute()\n"
"True\n"
">>> PureWindowsPath('/a/b').is_absolute()\n"
"False\n"
">>> PureWindowsPath('c:').is_absolute()\n"
"False\n"
">>> PureWindowsPath('//some/share').is_absolute()\n"
"True"
msgstr ""

#: ../../library/pathlib.rst:515
msgid "Return whether or not this path is relative to the *other* path."
msgstr "이 경로가 *other* 경로에 상대적인지를 반환합니다."

#: ../../library/pathlib.rst:523
msgid ""
"This method is string-based; it neither accesses the filesystem nor "
"treats \"``..``\" segments specially. The following code is equivalent:"
msgstr ""

#: ../../library/pathlib.rst:534
msgid ""
"Passing additional arguments is deprecated; if supplied, they are joined "
"with *other*."
msgstr ""

#: ../../library/pathlib.rst:539
msgid ""
"With :class:`PureWindowsPath`, return ``True`` if the path is considered "
"reserved under Windows, ``False`` otherwise.  With "
":class:`PurePosixPath`, ``False`` is always returned."
msgstr ""
":class:`PureWindowsPath`\\에서는, 경로를 윈도우에서 예약된 것으로 간주하면 ``True``\\를, 그렇지 "
"않으면 ``False``\\를 반환합니다. :class:`PurePosixPath`\\에서는, 항상 ``False``\\가 "
"반환됩니다."

#: ../../library/pathlib.rst:543
msgid ""
"Windows path names that contain a colon, or end with a dot or a space, "
"are considered reserved. UNC paths may be reserved."
msgstr ""

#: ../../library/pathlib.rst:547
msgid ""
"This method is deprecated; use :func:`os.path.isreserved` to detect "
"reserved paths on Windows."
msgstr ""

#: ../../library/pathlib.rst:553
#, fuzzy
msgid ""
"Calling this method is equivalent to combining the path with each of the "
"given *pathsegments* in turn::"
msgstr "이 메서드를 호출하는 것은 경로를 각 *other* 인자와 차례로 결합하는 것과 동등합니다::"

#: ../../library/pathlib.rst:556
msgid ""
">>> PurePosixPath('/etc').joinpath('passwd')\n"
"PurePosixPath('/etc/passwd')\n"
">>> PurePosixPath('/etc').joinpath(PurePosixPath('passwd'))\n"
"PurePosixPath('/etc/passwd')\n"
">>> PurePosixPath('/etc').joinpath('init.d', 'apache2')\n"
"PurePosixPath('/etc/init.d/apache2')\n"
">>> PureWindowsPath('c:').joinpath('/Program Files')\n"
"PureWindowsPath('c:/Program Files')"
msgstr ""

#: ../../library/pathlib.rst:568
#, fuzzy
msgid ""
"Match this path against the provided glob-style pattern.  Return ``True``"
" if matching is successful, ``False`` otherwise.  For example::"
msgstr ""
"이 경로를 제공된 glob 스타일 패턴과 일치시킵니다. 일치하면 ``True``\\를, 그렇지 않으면 ``False``\\를 "
"반환합니다."

#: ../../library/pathlib.rst:571
msgid ""
">>> PurePath('a/b.py').full_match('a/*.py')\n"
"True\n"
">>> PurePath('a/b.py').full_match('*.py')\n"
"False\n"
">>> PurePath('/a/b/c.py').full_match('/a/**')\n"
"True\n"
">>> PurePath('/a/b/c.py').full_match('**/*.py')\n"
"True"
msgstr ""

#: ../../library/pathlib.rst:581 ../../library/pathlib.rst:1291
msgid ":ref:`pathlib-pattern-language` documentation."
msgstr ""

#: ../../library/pathlib.rst:583
msgid "As with other methods, case-sensitivity follows platform defaults::"
msgstr "다른 메서드와 마찬가지로, 대소 문자를 구분할지는 플랫폼 기본값을 따릅니다::"

#: ../../library/pathlib.rst:585
msgid ""
">>> PurePosixPath('b.py').full_match('*.PY')\n"
"False\n"
">>> PureWindowsPath('b.py').full_match('*.PY')\n"
"True"
msgstr ""

#: ../../library/pathlib.rst:590
msgid "Set *case_sensitive* to ``True`` or ``False`` to override this behaviour."
msgstr ""

#: ../../library/pathlib.rst:597
#, fuzzy
msgid ""
"Match this path against the provided non-recursive glob-style pattern. "
"Return ``True`` if matching is successful, ``False`` otherwise."
msgstr ""
"이 경로를 제공된 glob 스타일 패턴과 일치시킵니다. 일치하면 ``True``\\를, 그렇지 않으면 ``False``\\를 "
"반환합니다."

#: ../../library/pathlib.rst:600
msgid ""
"This method is similar to :meth:`~PurePath.full_match`, but empty "
"patterns aren't allowed (:exc:`ValueError` is raised), the recursive "
"wildcard \"``**``\" isn't supported (it acts like non-recursive "
"\"``*``\"), and if a relative pattern is provided, then matching is done "
"from the right::"
msgstr ""

#: ../../library/pathlib.rst:605
msgid ""
">>> PurePath('a/b.py').match('*.py')\n"
"True\n"
">>> PurePath('/a/b/c.py').match('b/*.py')\n"
"True\n"
">>> PurePath('/a/b/c.py').match('a/*.py')\n"
"False"
msgstr ""

#: ../../library/pathlib.rst:612 ../../library/pathlib.rst:1310
#: ../../library/pathlib.rst:1335
msgid "The *pattern* parameter accepts a :term:`path-like object`."
msgstr ""

#: ../../library/pathlib.rst:615 ../../library/pathlib.rst:1304
#: ../../library/pathlib.rst:1329
#, fuzzy
msgid "The *case_sensitive* parameter was added."
msgstr "*exist_ok* 매개 변수가 추가되었습니다."

#: ../../library/pathlib.rst:621
#, fuzzy
msgid ""
"Compute a version of this path relative to the path represented by "
"*other*.  If it's impossible, :exc:`ValueError` is raised::"
msgstr "이 경로의 *other*\\로 표시되는 경로에 상대적인 버전을 계산합니다. 불가능하면 ValueError가 발생합니다::"

#: ../../library/pathlib.rst:624
msgid ""
">>> p = PurePosixPath('/etc/passwd')\n"
">>> p.relative_to('/')\n"
"PurePosixPath('etc/passwd')\n"
">>> p.relative_to('/etc')\n"
"PurePosixPath('passwd')\n"
">>> p.relative_to('/usr')\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"  File \"pathlib.py\", line 941, in relative_to\n"
"    raise ValueError(error_message.format(str(self), str(formatted)))\n"
"ValueError: '/etc/passwd' is not in the subpath of '/usr' OR one path is "
"relative and the other is absolute."
msgstr ""

#: ../../library/pathlib.rst:636
msgid ""
"When *walk_up* is false (the default), the path must start with *other*. "
"When the argument is true, ``..`` entries may be added to form the "
"relative path. In all other cases, such as the paths referencing "
"different drives, :exc:`ValueError` is raised.::"
msgstr ""

#: ../../library/pathlib.rst:641
msgid ""
">>> p.relative_to('/usr', walk_up=True)\n"
"PurePosixPath('../etc/passwd')\n"
">>> p.relative_to('foo', walk_up=True)\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"  File \"pathlib.py\", line 941, in relative_to\n"
"    raise ValueError(error_message.format(str(self), str(formatted)))\n"
"ValueError: '/etc/passwd' is not on the same drive as 'foo' OR one path "
"is relative and the other is absolute."
msgstr ""

#: ../../library/pathlib.rst:651
#, fuzzy
msgid ""
"This function is part of :class:`PurePath` and works with strings. It "
"does not check or access the underlying file structure. This can impact "
"the *walk_up* option as it assumes that no symlinks are present in the "
"path; call :meth:`~Path.resolve` first if necessary to resolve symlinks."
msgstr ""
"참고: 이 함수는 :class:`PurePath`\\의 일부이며 문자열과 함께 작동합니다. 하부 파일 구조를 확인하거나 액세스하지 "
"않습니다."

#: ../../library/pathlib.rst:657
msgid ""
"The *walk_up* parameter was added (old behavior is the same as "
"``walk_up=False``)."
msgstr ""

#: ../../library/pathlib.rst:662
msgid ""
"Passing additional positional arguments is deprecated; if supplied, they "
"are joined with *other*."
msgstr ""

#: ../../library/pathlib.rst:667
msgid ""
"Return a new path with the :attr:`name` changed.  If the original path "
"doesn't have a name, ValueError is raised::"
msgstr ":attr:`name`\\이 변경된 새 경로를 반환합니다. 원래 경로에 이름(name)이 없으면 ValueError가 발생합니다::"

#: ../../library/pathlib.rst:670
#, python-format
msgid ""
">>> p = PureWindowsPath('c:/Downloads/pathlib.tar.gz')\n"
">>> p.with_name('setup.py')\n"
"PureWindowsPath('c:/Downloads/setup.py')\n"
">>> p = PureWindowsPath('c:/')\n"
">>> p.with_name('setup.py')\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"  File \"/home/antoine/cpython/default/Lib/pathlib.py\", line 751, in "
"with_name\n"
"    raise ValueError(\"%r has an empty name\" % (self,))\n"
"ValueError: PureWindowsPath('c:/') has an empty name"
msgstr ""

#: ../../library/pathlib.rst:684
msgid ""
"Return a new path with the :attr:`stem` changed.  If the original path "
"doesn't have a name, ValueError is raised::"
msgstr ":attr:`stem`\\이 변경된 새 경로를 반환합니다. 원래 경로에 이름(name)이 없으면, ValueError가 발생합니다::"

#: ../../library/pathlib.rst:687
#, python-format
msgid ""
">>> p = PureWindowsPath('c:/Downloads/draft.txt')\n"
">>> p.with_stem('final')\n"
"PureWindowsPath('c:/Downloads/final.txt')\n"
">>> p = PureWindowsPath('c:/Downloads/pathlib.tar.gz')\n"
">>> p.with_stem('lib')\n"
"PureWindowsPath('c:/Downloads/lib.gz')\n"
">>> p = PureWindowsPath('c:/')\n"
">>> p.with_stem('')\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"  File \"/home/antoine/cpython/default/Lib/pathlib.py\", line 861, in "
"with_stem\n"
"    return self.with_name(stem + self.suffix)\n"
"  File \"/home/antoine/cpython/default/Lib/pathlib.py\", line 851, in "
"with_name\n"
"    raise ValueError(\"%r has an empty name\" % (self,))\n"
"ValueError: PureWindowsPath('c:/') has an empty name"
msgstr ""

#: ../../library/pathlib.rst:708
msgid ""
"Return a new path with the :attr:`suffix` changed.  If the original path "
"doesn't have a suffix, the new *suffix* is appended instead.  If the "
"*suffix* is an empty string, the original suffix is removed::"
msgstr ""
":attr:`suffix`\\가 변경된 새 경로를 반환합니다. 원래 경로에 접미사(suffix)가 없으면, 새 *suffix*\\가"
" 대신 추가됩니다. *suffix*\\가 빈 문자열이면, 원래 접미사가 제거됩니다::"

#: ../../library/pathlib.rst:712
msgid ""
">>> p = PureWindowsPath('c:/Downloads/pathlib.tar.gz')\n"
">>> p.with_suffix('.bz2')\n"
"PureWindowsPath('c:/Downloads/pathlib.tar.bz2')\n"
">>> p = PureWindowsPath('README')\n"
">>> p.with_suffix('.txt')\n"
"PureWindowsPath('README.txt')\n"
">>> p = PureWindowsPath('README.txt')\n"
">>> p.with_suffix('')\n"
"PureWindowsPath('README')"
msgstr ""

#: ../../library/pathlib.rst:725
msgid ""
"Create a new path object of the same type by combining the given "
"*pathsegments*. This method is called whenever a derivative path is "
"created, such as from :attr:`parent` and :meth:`relative_to`. Subclasses "
"may override this method to pass information to derivative paths, for "
"example::"
msgstr ""

#: ../../library/pathlib.rst:730
msgid ""
"from pathlib import PurePosixPath\n"
"\n"
"class MyPath(PurePosixPath):\n"
"    def __init__(self, *pathsegments, session_id):\n"
"        super().__init__(*pathsegments)\n"
"        self.session_id = session_id\n"
"\n"
"    def with_segments(self, *pathsegments):\n"
"        return type(self)(*pathsegments, session_id=self.session_id)\n"
"\n"
"etc = MyPath('/etc', session_id=42)\n"
"hosts = etc / 'hosts'\n"
"print(hosts.session_id)  # 42"
msgstr ""

#: ../../library/pathlib.rst:751
msgid "Concrete paths"
msgstr "구상 경로"

#: ../../library/pathlib.rst:753
msgid ""
"Concrete paths are subclasses of the pure path classes.  In addition to "
"operations provided by the latter, they also provide methods to do system"
" calls on path objects.  There are three ways to instantiate concrete "
"paths:"
msgstr ""
"구상 경로는 순수한 경로 클래스의 서브 클래스입니다. 후자가 제공하는 연산 외에도, 경로 객체에 대해 시스템 호출을 수행하는 "
"메서드도 제공합니다. 구상 경로를 인스턴스화 하는 세 가지 방법이 있습니다:"

#: ../../library/pathlib.rst:759
msgid ""
"A subclass of :class:`PurePath`, this class represents concrete paths of "
"the system's path flavour (instantiating it creates either a "
":class:`PosixPath` or a :class:`WindowsPath`)::"
msgstr ""
":class:`PurePath`\\의 서브 클래스, 이 클래스는 시스템의 경로 플레이버의 구상 경로를 나타냅니다 (인스턴스화 하면 "
":class:`PosixPath`\\나 :class:`WindowsPath`\\를 만듭니다)::"

#: ../../library/pathlib.rst:763
msgid ""
">>> Path('setup.py')\n"
"PosixPath('setup.py')"
msgstr ""

#: ../../library/pathlib.rst:770
msgid ""
"A subclass of :class:`Path` and :class:`PurePosixPath`, this class "
"represents concrete non-Windows filesystem paths::"
msgstr ""
":class:`Path`\\와 :class:`PurePosixPath`\\의 서브 클래스, 이 클래스는 윈도우 이외의 구상 파일 "
"시스템 경로를 나타냅니다::"

#: ../../library/pathlib.rst:773
msgid ""
">>> PosixPath('/etc/hosts')\n"
"PosixPath('/etc/hosts')"
msgstr ""

#: ../../library/pathlib.rst:778
msgid ""
"Raises :exc:`UnsupportedOperation` on Windows. In previous versions, "
":exc:`NotImplementedError` was raised instead."
msgstr ""

#: ../../library/pathlib.rst:785
msgid ""
"A subclass of :class:`Path` and :class:`PureWindowsPath`, this class "
"represents concrete Windows filesystem paths::"
msgstr ""
":class:`Path`\\와 :class:`PureWindowsPath`\\의 서브 클래스, 이 클래스는 구상 윈도우 파일 시스템"
" 경로를 나타냅니다::"

#: ../../library/pathlib.rst:788
msgid ""
">>> WindowsPath('c:/', 'Users', 'Ximénez')\n"
"WindowsPath('c:/Users/Ximénez')"
msgstr ""

#: ../../library/pathlib.rst:793
msgid ""
"Raises :exc:`UnsupportedOperation` on non-Windows platforms. In previous "
"versions, :exc:`NotImplementedError` was raised instead."
msgstr ""

#: ../../library/pathlib.rst:798
msgid ""
"You can only instantiate the class flavour that corresponds to your "
"system (allowing system calls on non-compatible path flavours could lead "
"to bugs or failures in your application)::"
msgstr ""
"여러분의 시스템에 해당하는 클래스 플레이버만 인스턴스화 할 수 있습니다 (호환되지 않는 경로 플레이버에 대한 시스템 호출을 허용하면"
" 응용 프로그램에서 버그나 실패가 발생할 수 있습니다)::"

#: ../../library/pathlib.rst:802
msgid ""
">>> import os\n"
">>> os.name\n"
"'posix'\n"
">>> Path('setup.py')\n"
"PosixPath('setup.py')\n"
">>> PosixPath('setup.py')\n"
"PosixPath('setup.py')\n"
">>> WindowsPath('setup.py')\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"  File \"pathlib.py\", line 798, in __new__\n"
"    % (cls.__name__,))\n"
"UnsupportedOperation: cannot instantiate 'WindowsPath' on your system"
msgstr ""

#: ../../library/pathlib.rst:816
#, fuzzy
msgid ""
"Some concrete path methods can raise an :exc:`OSError` if a system call "
"fails (for example because the path doesn't exist)."
msgstr ""
"구상 경로는 순수한 경로 메서드 외에도 다음과 같은 메서드를 제공합니다. 이 메서드 중 많은 것들이 시스템 호출이 실패할 때 (예를"
" 들어 경로가 존재하지 않아서) :exc:`OSError`\\를 발생시킬 수 있습니다."

#: ../../library/pathlib.rst:821
msgid "Parsing and generating URIs"
msgstr ""

#: ../../library/pathlib.rst:823
msgid ""
"Concrete path objects can be created from, and represented as, 'file' "
"URIs conforming to :rfc:`8089`."
msgstr ""

#: ../../library/pathlib.rst:828
msgid ""
"File URIs are not portable across machines with different "
":ref:`filesystem encodings <filesystem-encoding>`."
msgstr ""

#: ../../library/pathlib.rst:833
msgid "Return a new path object from parsing a 'file' URI. For example::"
msgstr ""

#: ../../library/pathlib.rst:835
msgid ""
">>> p = Path.from_uri('file:///etc/hosts')\n"
"PosixPath('/etc/hosts')"
msgstr ""

#: ../../library/pathlib.rst:838
msgid "On Windows, DOS device and UNC paths may be parsed from URIs::"
msgstr ""

#: ../../library/pathlib.rst:840
msgid ""
">>> p = Path.from_uri('file:///c:/windows')\n"
"WindowsPath('c:/windows')\n"
">>> p = Path.from_uri('file://server/share')\n"
"WindowsPath('//server/share')"
msgstr ""

#: ../../library/pathlib.rst:845
msgid "Several variant forms are supported::"
msgstr ""

#: ../../library/pathlib.rst:847
msgid ""
">>> p = Path.from_uri('file:////server/share')\n"
"WindowsPath('//server/share')\n"
">>> p = Path.from_uri('file://///server/share')\n"
"WindowsPath('//server/share')\n"
">>> p = Path.from_uri('file:c:/windows')\n"
"WindowsPath('c:/windows')\n"
">>> p = Path.from_uri('file:/c|/windows')\n"
"WindowsPath('c:/windows')"
msgstr ""

#: ../../library/pathlib.rst:856
msgid ""
":exc:`ValueError` is raised if the URI does not start with ``file:``, or "
"the parsed path isn't absolute."
msgstr ""

#: ../../library/pathlib.rst:864
#, fuzzy
msgid ""
"Represent the path as a 'file' URI.  :exc:`ValueError` is raised if the "
"path isn't absolute."
msgstr "경로를 ``file`` URI로 나타냅니다. 경로가 절대적이지 않으면 :exc:`ValueError`\\가 발생합니다."

#: ../../library/pathlib.rst:867
msgid ""
">>> p = PosixPath('/etc/passwd')\n"
">>> p.as_uri()\n"
"'file:///etc/passwd'\n"
">>> p = WindowsPath('c:/Windows')\n"
">>> p.as_uri()\n"
"'file:///c:/Windows'"
msgstr ""

#: ../../library/pathlib.rst:876
msgid ""
"For historical reasons, this method is also available from "
":class:`PurePath` objects. However, its use of :func:`os.fsencode` makes "
"it strictly impure."
msgstr ""

#: ../../library/pathlib.rst:882
msgid "Expanding and resolving paths"
msgstr ""

#: ../../library/pathlib.rst:886
#, fuzzy
msgid ""
"Return a new path object representing the user's home directory (as "
"returned by :func:`os.path.expanduser` with ``~`` construct). If the home"
" directory can't be resolved, :exc:`RuntimeError` is raised."
msgstr ""
"사용자의 홈 디렉터리를 나타내는 새 경로 객체를 반환합니다. ``~`` 구문에 대해 "
":func:`os.path.expanduser`\\가 반환하는 것과 유사합니다::"

#: ../../library/pathlib.rst:892
msgid ""
">>> Path.home()\n"
"PosixPath('/home/antoine')"
msgstr ""

#: ../../library/pathlib.rst:900
#, fuzzy
msgid ""
"Return a new path with expanded ``~`` and ``~user`` constructs, as "
"returned by :meth:`os.path.expanduser`. If a home directory can't be "
"resolved, :exc:`RuntimeError` is raised."
msgstr ""
"``~``\\와 ``~user`` 구문을 확장한 새 경로를 반환합니다. :meth:`os.path.expanduser`\\와 "
"유사합니다::"

#: ../../library/pathlib.rst:906
msgid ""
">>> p = PosixPath('~/films/Monty Python')\n"
">>> p.expanduser()\n"
"PosixPath('/home/eric/films/Monty Python')"
msgstr ""

#: ../../library/pathlib.rst:915
msgid ""
"Return a new path object representing the current directory (as returned "
"by :func:`os.getcwd`)::"
msgstr "현재 디렉터리를 나타내는 새 경로 객체를 반환합니다. :func:`os.getcwd`\\가 반환하는 것과 유사합니다::"

#: ../../library/pathlib.rst:918
msgid ""
">>> Path.cwd()\n"
"PosixPath('/home/antoine/pathlib')"
msgstr ""

#: ../../library/pathlib.rst:924
#, fuzzy
msgid ""
"Make the path absolute, without normalization or resolving symlinks. "
"Returns a new path object::"
msgstr "심볼릭 링크를 결정하여, 경로를 절대적으로 만듭니다. 새로운 경로 객체가 반환됩니다::"

#: ../../library/pathlib.rst:927
msgid ""
">>> p = Path('tests')\n"
">>> p\n"
"PosixPath('tests')\n"
">>> p.absolute()\n"
"PosixPath('/home/antoine/pathlib/tests')"
msgstr ""

#: ../../library/pathlib.rst:936
msgid ""
"Make the path absolute, resolving any symlinks.  A new path object is "
"returned::"
msgstr "심볼릭 링크를 결정하여, 경로를 절대적으로 만듭니다. 새로운 경로 객체가 반환됩니다::"

#: ../../library/pathlib.rst:939
msgid ""
">>> p = Path()\n"
">>> p\n"
"PosixPath('.')\n"
">>> p.resolve()\n"
"PosixPath('/home/antoine/pathlib')"
msgstr ""

#: ../../library/pathlib.rst:945
msgid ""
"\"``..``\" components are also eliminated (this is the only method to do "
"so)::"
msgstr "\"``..``\" 구성 요소도 제거됩니다 (이것이 이렇게 하는 유일한 메서드입니다)::"

#: ../../library/pathlib.rst:947
msgid ""
">>> p = Path('docs/../setup.py')\n"
">>> p.resolve()\n"
"PosixPath('/home/antoine/pathlib/setup.py')"
msgstr ""

#: ../../library/pathlib.rst:951
#, fuzzy
msgid ""
"If a path doesn't exist or a symlink loop is encountered, and *strict* is"
" ``True``, :exc:`OSError` is raised.  If *strict* is ``False``, the path "
"is resolved as far as possible and any remainder is appended without "
"checking whether it exists."
msgstr ""
"경로가 존재하지 않고 *strict*\\가 ``True``\\이면, :exc:`FileNotFoundError`\\가 발생합니다. "
"*strict*\\가 ``False``\\이면, 경로는 가능한 만큼 결정되고 나머지는 존재하는지 확인하지 않고 추가됩니다. 경로를 "
"결정하는 도중 무한 루프를 만나면, :exc:`RuntimeError`\\가 발생합니다."

#: ../../library/pathlib.rst:956
#, fuzzy
msgid "The *strict* parameter was added (pre-3.6 behavior is strict)."
msgstr "*strict* 인자 (3.6 이전 동작은 엄격(strict)합니다)."

#: ../../library/pathlib.rst:959
msgid ""
"Symlink loops are treated like other errors: :exc:`OSError` is raised in "
"strict mode, and no exception is raised in non-strict mode. In previous "
"versions, :exc:`RuntimeError` is raised no matter the value of *strict*."
msgstr ""

#: ../../library/pathlib.rst:967
msgid ""
"Return the path to which the symbolic link points (as returned by "
":func:`os.readlink`)::"
msgstr "심볼릭 링크가 가리키는 경로를 반환합니다 (:func:`os.readlink`\\가 반환하는 것과 유사합니다)::"

#: ../../library/pathlib.rst:970
msgid ""
">>> p = Path('mylink')\n"
">>> p.symlink_to('setup.py')\n"
">>> p.readlink()\n"
"PosixPath('setup.py')"
msgstr ""

#: ../../library/pathlib.rst:977
msgid ""
"Raises :exc:`UnsupportedOperation` if :func:`os.readlink` is not "
"available. In previous versions, :exc:`NotImplementedError` was raised."
msgstr ""

#: ../../library/pathlib.rst:983
msgid "Querying file type and status"
msgstr ""

#: ../../library/pathlib.rst:987
#, fuzzy
msgid ""
":meth:`~Path.exists`, :meth:`~Path.is_dir`, :meth:`~Path.is_file`, "
":meth:`~Path.is_mount`, :meth:`~Path.is_symlink`, "
":meth:`~Path.is_block_device`, :meth:`~Path.is_char_device`, "
":meth:`~Path.is_fifo`, :meth:`~Path.is_socket` now return ``False`` "
"instead of raising an exception for paths that contain characters "
"unrepresentable at the OS level."
msgstr ""
":meth:`~Path.exists()`, :meth:`~Path.is_dir()`, :meth:`~Path.is_file()`, "
":meth:`~Path.is_mount()`, :meth:`~Path.is_symlink()`, "
":meth:`~Path.is_block_device()`, :meth:`~Path.is_char_device()`, "
":meth:`~Path.is_fifo()`, :meth:`~Path.is_socket()`\\은 이제 OS 수준에서 표현할 수 없는"
" 문자가 포함된 경로에 대해 예외를 발생시키는 대신 ``False``\\를 반환합니다."

#: ../../library/pathlib.rst:997
#, fuzzy
msgid ""
"Return an :class:`os.stat_result` object containing information about "
"this path, like :func:`os.stat`. The result is looked up at each call to "
"this method."
msgstr ""
":func:`os.stat`\\과 유사하게, 이 경로에 대한 정보를 포함하는 :class:`os.stat_result` 객체를 "
"반환합니다. 결과는 이 메서드를 호출할 때마다 조회됩니다."

#: ../../library/pathlib.rst:1000
msgid ""
"This method normally follows symlinks; to stat a symlink add the argument"
" ``follow_symlinks=False``, or use :meth:`~Path.lstat`."
msgstr ""

#: ../../library/pathlib.rst:1005
msgid ""
">>> p = Path('setup.py')\n"
">>> p.stat().st_size\n"
"956\n"
">>> p.stat().st_mtime\n"
"1327883547.852554"
msgstr ""

#: ../../library/pathlib.rst:1011 ../../library/pathlib.rst:1039
#: ../../library/pathlib.rst:1054 ../../library/pathlib.rst:1069
#: ../../library/pathlib.rst:1600 ../../library/pathlib.rst:1616
#: ../../library/pathlib.rst:1637
#, fuzzy
msgid "The *follow_symlinks* parameter was added."
msgstr "*missing_ok* 매개 변수가 추가되었습니다."

#: ../../library/pathlib.rst:1017
msgid ""
"Like :meth:`Path.stat` but, if the path points to a symbolic link, return"
" the symbolic link's information rather than its target's."
msgstr ":meth:`Path.stat`\\과 비슷하지만, 경로가 심볼릭 링크를 가리키면, 대상이 아닌 심볼릭 링크의 정보를 반환합니다."

#: ../../library/pathlib.rst:1023
#, fuzzy
msgid "Return ``True`` if the path points to an existing file or directory."
msgstr "경로가 기존 파일이나 디렉터리를 가리키는지 여부::"

#: ../../library/pathlib.rst:1025
msgid ""
"This method normally follows symlinks; to check if a symlink exists, add "
"the argument ``follow_symlinks=False``."
msgstr ""

#: ../../library/pathlib.rst:1030
msgid ""
">>> Path('.').exists()\n"
"True\n"
">>> Path('setup.py').exists()\n"
"True\n"
">>> Path('/etc').exists()\n"
"True\n"
">>> Path('nonexistentfile').exists()\n"
"False"
msgstr ""

#: ../../library/pathlib.rst:1045
#, fuzzy
msgid ""
"Return ``True`` if the path points to a regular file, ``False`` if it "
"points to another kind of file."
msgstr ""
"경로가 일반 파일(또는 일반 파일을 가리키는 심볼릭 링크)을 가리키면 ``True``\\를, 다른 유형의 파일을 가리키면 "
"``False``\\를 반환합니다."

#: ../../library/pathlib.rst:1048 ../../library/pathlib.rst:1063
#: ../../library/pathlib.rst:1111 ../../library/pathlib.rst:1120
#: ../../library/pathlib.rst:1129 ../../library/pathlib.rst:1138
msgid ""
"``False`` is also returned if the path doesn't exist or is a broken "
"symlink; other errors (such as permission errors) are propagated."
msgstr "경로가 존재하지 않거나 깨진 심볼릭 링크일 때도 ``False``\\가 반환됩니다; 다른 에러(가령 권한 에러)는 전파됩니다."

#: ../../library/pathlib.rst:1051
msgid ""
"This method normally follows symlinks; to exclude symlinks, add the "
"argument ``follow_symlinks=False``."
msgstr ""

#: ../../library/pathlib.rst:1060
#, fuzzy
msgid ""
"Return ``True`` if the path points to a directory, ``False`` if it points"
" to another kind of file."
msgstr ""
"경로가 디렉터리(또는 디렉터리를 가리키는 심볼릭 링크)를 가리키면 ``True``\\를 반환하고, 다른 유형의 파일을 가리키면 "
"``False``\\를 반환합니다."

#: ../../library/pathlib.rst:1066
msgid ""
"This method normally follows symlinks; to exclude symlinks to "
"directories, add the argument ``follow_symlinks=False``."
msgstr ""

#: ../../library/pathlib.rst:1075
msgid ""
"Return ``True`` if the path points to a symbolic link, ``False`` "
"otherwise."
msgstr "경로가 심볼릭 링크를 가리키면 ``True``\\를, 그렇지 않으면 ``False``\\를 반환합니다."

#: ../../library/pathlib.rst:1077
msgid ""
"``False`` is also returned if the path doesn't exist; other errors (such "
"as permission errors) are propagated."
msgstr "경로가 존재하지 않아도 ``False``\\가 반환됩니다; 다른 에러(가령 권한 오류)는 전파됩니다."

#: ../../library/pathlib.rst:1083
#, fuzzy
msgid ""
"Return ``True`` if the path points to a junction, and ``False`` for any "
"other type of file. Currently only Windows supports junctions."
msgstr "경로가 심볼릭 링크를 가리키면 ``True``\\를, 그렇지 않으면 ``False``\\를 반환합니다."

#: ../../library/pathlib.rst:1091
#, fuzzy
msgid ""
"Return ``True`` if the path is a :dfn:`mount point`: a point in a file "
"system where a different file system has been mounted.  On POSIX, the "
"function checks whether *path*'s parent, :file:`path/..`, is on a "
"different device than *path*, or whether :file:`path/..` and *path* point"
" to the same i-node on the same device --- this should detect mount "
"points for all Unix and POSIX variants.  On Windows, a mount point is "
"considered to be a drive letter root (e.g. ``c:\\``), a UNC share (e.g. "
"``\\\\server\\share``), or a mounted filesystem directory."
msgstr ""
"경로가 :dfn:`마운트 지점(mount point)`\\이면 ``True``\\를 반환합니다. 마운트 지점은 다른 파일 시스템이 "
"마운트된 파일 시스템의 지점입니다. POSIX에서, 이 함수는 *path*\\의 부모 :file:`path/..` 가 "
"*path*\\와 다른 장치에 있는지, 또는 :file:`path/..` 와 *path*\\가 같은 장치에서 같은 i-노드를 "
"가리키는지를 확인합니다 --- 모든 유닉스와 POSIX 변형에서 마운트 지점을 감지해야 합니다. 윈도우에서는 구현되지 않습니다."

#: ../../library/pathlib.rst:1102
msgid "Windows support was added."
msgstr ""

#: ../../library/pathlib.rst:1108
msgid ""
"Return ``True`` if the path points to a Unix socket (or a symbolic link "
"pointing to a Unix socket), ``False`` if it points to another kind of "
"file."
msgstr ""
"경로가 유닉스 소켓(또는 유닉스 소켓을 가리키는 심볼릭 링크)을 가리키면 ``True``\\를, 다른 유형의 파일을 가리키면 "
"``False``\\를 반환합니다."

#: ../../library/pathlib.rst:1117
msgid ""
"Return ``True`` if the path points to a FIFO (or a symbolic link pointing"
" to a FIFO), ``False`` if it points to another kind of file."
msgstr ""
"경로가 FIFO(또는 FIFO를 가리키는 심볼릭 링크)를 가리키면 ``True``\\를, 다른 유형의 파일을 가리키면 "
"``False``\\를 반환합니다."

#: ../../library/pathlib.rst:1126
msgid ""
"Return ``True`` if the path points to a block device (or a symbolic link "
"pointing to a block device), ``False`` if it points to another kind of "
"file."
msgstr ""
"경로가 블록 장치(또는 블록 장치를 가리키는 심볼릭 링크)를 가리키면 ``True``\\를, 다른 유형의 파일을 가리키면 "
"``False``\\를 반환합니다."

#: ../../library/pathlib.rst:1135
msgid ""
"Return ``True`` if the path points to a character device (or a symbolic "
"link pointing to a character device), ``False`` if it points to another "
"kind of file."
msgstr ""
"경로가 문자 장치(또는 문자 장치를 가리키는 심볼릭 링크)를 가리키면 ``True``\\를, 다른 유형의 파일을 가리키면 "
"``False``\\를 반환합니다."

#: ../../library/pathlib.rst:1144
msgid ""
"Return whether this path points to the same file as *other_path*, which "
"can be either a Path object, or a string.  The semantics are similar to "
":func:`os.path.samefile` and :func:`os.path.samestat`."
msgstr ""
"이 경로가 *other_path*\\와 같은 파일을 가리키는지를 반환합니다. *other_path*\\는 Path 객체이거나 "
"문자열일 수 있습니다. 의미는 :func:`os.path.samefile`\\과 :func:`os.path.samestat`\\과 "
"유사합니다."

#: ../../library/pathlib.rst:1148
msgid ""
"An :exc:`OSError` can be raised if either file cannot be accessed for "
"some reason."
msgstr "어떤 이유로 파일에 액세스할 수 없으면 :exc:`OSError`\\가 발생할 수 있습니다."

#: ../../library/pathlib.rst:1153
msgid ""
">>> p = Path('spam')\n"
">>> q = Path('eggs')\n"
">>> p.samefile(q)\n"
"False\n"
">>> p.samefile('spam')\n"
"True"
msgstr ""

#: ../../library/pathlib.rst:1164
msgid "Reading and writing files"
msgstr ""

#: ../../library/pathlib.rst:1169
msgid ""
"Open the file pointed to by the path, like the built-in :func:`open` "
"function does::"
msgstr "내장 :func:`open` 함수처럼, 경로가 가리키는 파일을 엽니다::"

#: ../../library/pathlib.rst:1172
msgid ""
">>> p = Path('setup.py')\n"
">>> with p.open() as f:\n"
"...     f.readline()\n"
"...\n"
"'#!/usr/bin/env python3\\n'"
msgstr ""

#: ../../library/pathlib.rst:1181
msgid "Return the decoded contents of the pointed-to file as a string::"
msgstr "가리키는 파일의 디코딩된 내용을 문자열로 반환합니다::"

#: ../../library/pathlib.rst:1183 ../../library/pathlib.rst:1216
msgid ""
">>> p = Path('my_text_file')\n"
">>> p.write_text('Text file contents')\n"
"18\n"
">>> p.read_text()\n"
"'Text file contents'"
msgstr ""

#: ../../library/pathlib.rst:1189
msgid ""
"The file is opened and then closed. The optional parameters have the same"
" meaning as in :func:`open`."
msgstr "파일이 열린 다음에 닫힙니다. 선택적 매개 변수는 :func:`open`\\과 같은 의미입니다."

#: ../../library/pathlib.rst:1194 ../../library/pathlib.rst:1227
#, fuzzy
msgid "The *newline* parameter was added."
msgstr "*exist_ok* 매개 변수가 추가되었습니다."

#: ../../library/pathlib.rst:1200
msgid "Return the binary contents of the pointed-to file as a bytes object::"
msgstr "가리키는 파일의 바이너리 내용을 바이트열 객체로 반환합니다::"

#: ../../library/pathlib.rst:1202 ../../library/pathlib.rst:1236
msgid ""
">>> p = Path('my_binary_file')\n"
">>> p.write_bytes(b'Binary file contents')\n"
"20\n"
">>> p.read_bytes()\n"
"b'Binary file contents'"
msgstr ""

#: ../../library/pathlib.rst:1213
msgid ""
"Open the file pointed to in text mode, write *data* to it, and close the "
"file::"
msgstr "가리키는 파일을 텍스트 모드로 열고, *data*\\를 쓴 다음, 파일을 닫습니다::"

#: ../../library/pathlib.rst:1222
msgid ""
"An existing file of the same name is overwritten. The optional parameters"
" have the same meaning as in :func:`open`."
msgstr "같은 이름의 기존 파일을 덮어씁니다. 선택적 매개 변수는 :func:`open`\\에서와 같은 의미입니다."

#: ../../library/pathlib.rst:1233
msgid ""
"Open the file pointed to in bytes mode, write *data* to it, and close the"
" file::"
msgstr "가리키는 파일을 바이너리 모드로 열고, *data*\\를 쓴 다음, 파일을 닫습니다::"

#: ../../library/pathlib.rst:1242
msgid "An existing file of the same name is overwritten."
msgstr "같은 이름의 기존 파일을 덮어씁니다."

#: ../../library/pathlib.rst:1248
#, fuzzy
msgid "Reading directories"
msgstr "서브 디렉터리 나열하기::"

#: ../../library/pathlib.rst:1252
msgid ""
"When the path points to a directory, yield path objects of the directory "
"contents::"
msgstr "경로가 디렉터리를 가리킬 때, 디렉터리 내용의 경로 객체를 산출합니다::"

#: ../../library/pathlib.rst:1255
msgid ""
">>> p = Path('docs')\n"
">>> for child in p.iterdir(): child\n"
"...\n"
"PosixPath('docs/conf.py')\n"
"PosixPath('docs/_templates')\n"
"PosixPath('docs/make.bat')\n"
"PosixPath('docs/index.rst')\n"
"PosixPath('docs/_build')\n"
"PosixPath('docs/_static')\n"
"PosixPath('docs/Makefile')"
msgstr ""

#: ../../library/pathlib.rst:1266
#, fuzzy
msgid ""
"The children are yielded in arbitrary order, and the special entries "
"``'.'`` and ``'..'`` are not included.  If a file is removed from or "
"added to the directory after creating the iterator, it is unspecified "
"whether a path object for that file is included."
msgstr ""
"자식은 임의의 순서로 산출되며, 특수 항목 ``'.'``\\과 ``'..'``\\는 포함되지 않습니다. 이터레이터를 만든 후 파일이"
" 디렉터리에서 제거되거나 추가되면, 해당 파일에 대한 경로 객체가 포함되는지는 지정되지 않습니다."

#: ../../library/pathlib.rst:1271
msgid ""
"If the path is not a directory or otherwise inaccessible, :exc:`OSError` "
"is raised."
msgstr ""

#: ../../library/pathlib.rst:1276
msgid ""
"Glob the given relative *pattern* in the directory represented by this "
"path, yielding all matching files (of any kind)::"
msgstr ""
"이 경로로 표현되는 디렉터리에서, 주어진 상대 *pattern*\\을 glob 하여, 일치하는 모든 파일을 (종류와 관계없이) "
"산출합니다::"

#: ../../library/pathlib.rst:1279
msgid ""
">>> sorted(Path('.').glob('*.py'))\n"
"[PosixPath('pathlib.py'), PosixPath('setup.py'), "
"PosixPath('test_pathlib.py')]\n"
">>> sorted(Path('.').glob('*/*.py'))\n"
"[PosixPath('docs/conf.py')]\n"
">>> sorted(Path('.').glob('**/*.py'))\n"
"[PosixPath('build/lib/pathlib.py'),\n"
" PosixPath('docs/conf.py'),\n"
" PosixPath('pathlib.py'),\n"
" PosixPath('setup.py'),\n"
" PosixPath('test_pathlib.py')]"
msgstr ""

#: ../../library/pathlib.rst:1293
msgid ""
"By default, or when the *case_sensitive* keyword-only argument is set to "
"``None``, this method matches paths using platform-specific casing rules:"
" typically, case-sensitive on POSIX, and case-insensitive on Windows. Set"
" *case_sensitive* to ``True`` or ``False`` to override this behaviour."
msgstr ""

#: ../../library/pathlib.rst:1298
msgid ""
"By default, or when the *recurse_symlinks* keyword-only argument is set "
"to ``False``, this method follows symlinks except when expanding "
"\"``**``\" wildcards. Set *recurse_symlinks* to ``True`` to always follow"
" symlinks."
msgstr ""

#: ../../library/pathlib.rst:1302
msgid ""
"Raises an :ref:`auditing event <auditing>` ``pathlib.Path.glob`` with "
"arguments ``self``, ``pattern``."
msgstr ""
"인자 ``self``, ``pattern``\\으로 :ref:`감사 이벤트 <auditing>` "
"``pathlib.Path.glob``\\을 발생시킵니다."

#: ../../library/pathlib.rst:1307 ../../library/pathlib.rst:1332
#, fuzzy
msgid "The *recurse_symlinks* parameter was added."
msgstr "*missing_ok* 매개 변수가 추가되었습니다."

#: ../../library/pathlib.rst:1313
msgid ""
"Any :exc:`OSError` exceptions raised from scanning the filesystem are "
"suppressed. In previous versions, such exceptions are suppressed in many "
"cases, but not all."
msgstr ""

#: ../../library/pathlib.rst:1321
#, fuzzy
msgid ""
"Glob the given relative *pattern* recursively.  This is like calling "
":func:`Path.glob` with \"``**/``\" added in front of the *pattern*."
msgstr ""
"이것은 주어진 상대 *pattern* 앞에 \"``**/``\"가 추가된 :func:`Path.glob`\\을 호출하는 것과 "
"같습니다::"

#: ../../library/pathlib.rst:1325
msgid ":ref:`pathlib-pattern-language` and :meth:`Path.glob` documentation."
msgstr ""

#: ../../library/pathlib.rst:1327
msgid ""
"Raises an :ref:`auditing event <auditing>` ``pathlib.Path.rglob`` with "
"arguments ``self``, ``pattern``."
msgstr ""
"인자 ``self``, ``pattern``\\으로 :ref:`감사 이벤트 <auditing>` "
"``pathlib.Path.rglob``\\을 발생시킵니다."

#: ../../library/pathlib.rst:1341
msgid ""
"Generate the file names in a directory tree by walking the tree either "
"top-down or bottom-up."
msgstr ""

#: ../../library/pathlib.rst:1344
msgid ""
"For each directory in the directory tree rooted at *self* (including "
"*self* but excluding '.' and '..'), the method yields a 3-tuple of "
"``(dirpath, dirnames, filenames)``."
msgstr ""

#: ../../library/pathlib.rst:1348
msgid ""
"*dirpath* is a :class:`Path` to the directory currently being walked, "
"*dirnames* is a list of strings for the names of subdirectories in "
"*dirpath* (excluding ``'.'`` and ``'..'``), and *filenames* is a list of "
"strings for the names of the non-directory files in *dirpath*. To get a "
"full path (which begins with *self*) to a file or directory in *dirpath*,"
" do ``dirpath / name``. Whether or not the lists are sorted is file "
"system-dependent."
msgstr ""

#: ../../library/pathlib.rst:1356
msgid ""
"If the optional argument *top_down* is true (which is the default), the "
"triple for a directory is generated before the triples for any of its "
"subdirectories (directories are walked top-down).  If *top_down* is "
"false, the triple for a directory is generated after the triples for all "
"of its subdirectories (directories are walked bottom-up). No matter the "
"value of *top_down*, the list of subdirectories is retrieved before the "
"triples for the directory and its subdirectories are walked."
msgstr ""

#: ../../library/pathlib.rst:1364
msgid ""
"When *top_down* is true, the caller can modify the *dirnames* list in-"
"place (for example, using :keyword:`del` or slice assignment), and "
":meth:`Path.walk` will only recurse into the subdirectories whose names "
"remain in *dirnames*. This can be used to prune the search, or to impose "
"a specific order of visiting, or even to inform :meth:`Path.walk` about "
"directories the caller creates or renames before it resumes "
":meth:`Path.walk` again. Modifying *dirnames* when *top_down* is false "
"has no effect on the behavior of :meth:`Path.walk` since the directories "
"in *dirnames* have already been generated by the time *dirnames* is "
"yielded to the caller."
msgstr ""

#: ../../library/pathlib.rst:1374
msgid ""
"By default, errors from :func:`os.scandir` are ignored.  If the optional "
"argument *on_error* is specified, it should be a callable; it will be "
"called with one argument, an :exc:`OSError` instance. The callable can "
"handle the error to continue the walk or re-raise it to stop the walk. "
"Note that the filename is available as the ``filename`` attribute of the "
"exception object."
msgstr ""

#: ../../library/pathlib.rst:1380
msgid ""
"By default, :meth:`Path.walk` does not follow symbolic links, and instead"
" adds them to the *filenames* list. Set *follow_symlinks* to true to "
"resolve symlinks and place them in *dirnames* and *filenames* as "
"appropriate for their targets, and consequently visit directories pointed"
" to by symlinks (where supported)."
msgstr ""

#: ../../library/pathlib.rst:1387
msgid ""
"Be aware that setting *follow_symlinks* to true can lead to infinite "
"recursion if a link points to a parent directory of itself. "
":meth:`Path.walk` does not keep track of the directories it has already "
"visited."
msgstr ""

#: ../../library/pathlib.rst:1392
msgid ""
":meth:`Path.walk` assumes the directories it walks are not modified "
"during execution. For example, if a directory from *dirnames* has been "
"replaced with a symlink and *follow_symlinks* is false, :meth:`Path.walk`"
" will still try to descend into it. To prevent such behavior, remove "
"directories from *dirnames* as appropriate."
msgstr ""

#: ../../library/pathlib.rst:1400
msgid ""
"Unlike :func:`os.walk`, :meth:`Path.walk` lists symlinks to directories "
"in *filenames* if *follow_symlinks* is false."
msgstr ""

#: ../../library/pathlib.rst:1403
msgid ""
"This example displays the number of bytes used by all files in each "
"directory, while ignoring ``__pycache__`` directories::"
msgstr ""

#: ../../library/pathlib.rst:1406
msgid ""
"from pathlib import Path\n"
"for root, dirs, files in "
"Path(\"cpython/Lib/concurrent\").walk(on_error=print):\n"
"  print(\n"
"      root,\n"
"      \"consumes\",\n"
"      sum((root / file).stat().st_size for file in files),\n"
"      \"bytes in\",\n"
"      len(files),\n"
"      \"non-directory files\"\n"
"  )\n"
"  if '__pycache__' in dirs:\n"
"        dirs.remove('__pycache__')"
msgstr ""

#: ../../library/pathlib.rst:1419
msgid ""
"This next example is a simple implementation of :func:`shutil.rmtree`. "
"Walking the tree bottom-up is essential as :func:`rmdir` doesn't allow "
"deleting a directory before it is empty::"
msgstr ""

#: ../../library/pathlib.rst:1423
msgid ""
"# Delete everything reachable from the directory \"top\".\n"
"# CAUTION:  This is dangerous! For example, if top == Path('/'),\n"
"# it could delete all of your files.\n"
"for root, dirs, files in top.walk(top_down=False):\n"
"    for name in files:\n"
"        (root / name).unlink()\n"
"    for name in dirs:\n"
"        (root / name).rmdir()"
msgstr ""

#: ../../library/pathlib.rst:1436
#, fuzzy
msgid "Creating files and directories"
msgstr "서브 디렉터리 나열하기::"

#: ../../library/pathlib.rst:1440
#, fuzzy
msgid ""
"Create a file at this given path.  If *mode* is given, it is combined "
"with the process's ``umask`` value to determine the file mode and access "
"flags.  If the file already exists, the function succeeds when *exist_ok*"
" is true (and its modification time is updated to the current time), "
"otherwise :exc:`FileExistsError` is raised."
msgstr ""
"이 지정된 경로에 파일을 만듭니다. *mode*\\가 제공되면, 프로세스의 ``umask`` 값과 결합하여 파일 모드와 액세스 "
"플래그를 결정합니다. 파일이 이미 존재하면, *exist_ok*\\가 참일 때 함수가 성공하고 (그리고 수정 시간이 현재 시각으로 "
"갱신됩니다), 그렇지 않으면 :exc:`FileExistsError`\\가 발생합니다."

#: ../../library/pathlib.rst:1447
msgid ""
"The :meth:`~Path.open`, :meth:`~Path.write_text` and "
":meth:`~Path.write_bytes` methods are often used to create files."
msgstr ""

#: ../../library/pathlib.rst:1453
#, fuzzy
msgid ""
"Create a new directory at this given path.  If *mode* is given, it is "
"combined with the process's ``umask`` value to determine the file mode "
"and access flags.  If the path already exists, :exc:`FileExistsError` is "
"raised."
msgstr ""
"이 지정된 경로에 새 디렉터리를 만듭니다. *mode*\\가 제공되면, 프로세스의 ``umask`` 값과 결합하여 파일 모드와 "
"액세스 플래그를 결정합니다. 경로가 이미 존재하면, :exc:`FileExistsError`\\가 발생합니다."

#: ../../library/pathlib.rst:1458
msgid ""
"If *parents* is true, any missing parents of this path are created as "
"needed; they are created with the default permissions without taking "
"*mode* into account (mimicking the POSIX ``mkdir -p`` command)."
msgstr ""
"*parents*\\가 참이면, 이 경로의 누락 된 부모를 필요하면 만듭니다; 이것들은 *mode*\\를 고려하지 않고 기본 "
"권한으로 만들어집니다 (POSIX ``mkdir -p`` 명령을 모방합니다)."

#: ../../library/pathlib.rst:1462
msgid ""
"If *parents* is false (the default), a missing parent raises "
":exc:`FileNotFoundError`."
msgstr "*parents*\\가 거짓(기본값)이면, 누락된 부모가 :exc:`FileNotFoundError`\\를 발생시킵니다."

#: ../../library/pathlib.rst:1465
msgid ""
"If *exist_ok* is false (the default), :exc:`FileExistsError` is raised if"
" the target directory already exists."
msgstr "*exist_ok*\\가 거짓(기본값)이면, 대상 디렉터리가 이미 존재하면 :exc:`FileExistsError`\\가 발생합니다."

#: ../../library/pathlib.rst:1468
#, fuzzy
msgid ""
"If *exist_ok* is true, :exc:`FileExistsError` will not be raised unless "
"the given path already exists in the file system and is not a directory "
"(same behavior as the POSIX ``mkdir -p`` command)."
msgstr ""
"*missing_ok*\\가 참이면, :exc:`FileNotFoundError` 예외는 무시됩니다 (POSIX ``rm -f`` "
"명령과 같은 동작)."

#: ../../library/pathlib.rst:1472
msgid "The *exist_ok* parameter was added."
msgstr "*exist_ok* 매개 변수가 추가되었습니다."

#: ../../library/pathlib.rst:1478
#, fuzzy
msgid "Make this path a symbolic link pointing to *target*."
msgstr "*target*\\이라는 이름의 경로를 가리키는 하드 링크를 만듭니다."

#: ../../library/pathlib.rst:1480
msgid ""
"On Windows, a symlink represents either a file or a directory, and does "
"not morph to the target dynamically.  If the target is present, the type "
"of the symlink will be created to match. Otherwise, the symlink will be "
"created as a directory if *target_is_directory* is true or a file symlink"
" (the default) otherwise.  On non-Windows platforms, "
"*target_is_directory* is ignored."
msgstr ""

#: ../../library/pathlib.rst:1488
msgid ""
">>> p = Path('mylink')\n"
">>> p.symlink_to('setup.py')\n"
">>> p.resolve()\n"
"PosixPath('/home/antoine/pathlib/setup.py')\n"
">>> p.stat().st_size\n"
"956\n"
">>> p.lstat().st_size\n"
"8"
msgstr ""

#: ../../library/pathlib.rst:1498
msgid ""
"The order of arguments (link, target) is the reverse of "
":func:`os.symlink`'s."
msgstr "인자의 순서(링크, 대상)는 :func:`os.symlink`\\와 반대입니다."

#: ../../library/pathlib.rst:1501
msgid ""
"Raises :exc:`UnsupportedOperation` if :func:`os.symlink` is not "
"available. In previous versions, :exc:`NotImplementedError` was raised."
msgstr ""

#: ../../library/pathlib.rst:1508
#, fuzzy
msgid "Make this path a hard link to the same file as *target*."
msgstr "*target*\\이라는 이름의 경로를 가리키는 하드 링크를 만듭니다."

#: ../../library/pathlib.rst:1511
#, fuzzy
msgid "The order of arguments (link, target) is the reverse of :func:`os.link`'s."
msgstr "인자의 순서(링크, 대상)는 :func:`os.symlink`\\와 반대입니다."

#: ../../library/pathlib.rst:1516
msgid ""
"Raises :exc:`UnsupportedOperation` if :func:`os.link` is not available. "
"In previous versions, :exc:`NotImplementedError` was raised."
msgstr ""

#: ../../library/pathlib.rst:1522
msgid "Renaming and deleting"
msgstr ""

#: ../../library/pathlib.rst:1526
#, fuzzy
msgid ""
"Rename this file or directory to the given *target*, and return a new "
":class:`!Path` instance pointing to *target*.  On Unix, if *target* "
"exists and is a file, it will be replaced silently if the user has "
"permission. On Windows, if *target* exists, :exc:`FileExistsError` will "
"be raised. *target* can be either a string or another path object::"
msgstr ""
"이 파일이나 디렉터리의 이름을 지정된 *target*\\으로 바꾸고, *target*\\을 가리키는 새 Path 인스턴스를 "
"반환합니다. 유닉스에서, *target*\\이 존재하고 파일이면, 사용자에게 권한이 있으면 자동으로 교체됩니다. "
"*target*\\은 문자열이거나 다른 경로 객체일 수 있습니다::"

#: ../../library/pathlib.rst:1532
msgid ""
">>> p = Path('foo')\n"
">>> p.open('w').write('some text')\n"
"9\n"
">>> target = Path('bar')\n"
">>> p.rename(target)\n"
"PosixPath('bar')\n"
">>> target.open().read()\n"
"'some text'"
msgstr ""

#: ../../library/pathlib.rst:1541 ../../library/pathlib.rst:1557
#, fuzzy
msgid ""
"The target path may be absolute or relative. Relative paths are "
"interpreted relative to the current working directory, *not* the "
"directory of the :class:`!Path` object."
msgstr ""
"target 경로는 절대나 상대 경로일 수 있습니다. 상대 경로는 Path 객체의 디렉터리가 *아니라*, 현재 작업 디렉터리를 "
"기준으로 해석됩니다."

#: ../../library/pathlib.rst:1545
msgid ""
"It is implemented in terms of :func:`os.rename` and gives the same "
"guarantees."
msgstr ""

#: ../../library/pathlib.rst:1547 ../../library/pathlib.rst:1561
#, fuzzy
msgid "Added return value, return the new :class:`!Path` instance."
msgstr "반환 값을 추가했습니다. 새 Path 인스턴스를 반환합니다."

#: ../../library/pathlib.rst:1553
#, fuzzy
msgid ""
"Rename this file or directory to the given *target*, and return a new "
":class:`!Path` instance pointing to *target*.  If *target* points to an "
"existing file or empty directory, it will be unconditionally replaced."
msgstr ""
"이 파일이나 디렉터리의 이름을 지정된 *target*\\으로 바꾸고, *target*\\을 가리키는 새 Path 인스턴스를 "
"반환합니다. *target*\\이 기존 파일이나 디렉터리를 가리키면, 무조건 교체됩니다."

#: ../../library/pathlib.rst:1567
msgid ""
"Remove this file or symbolic link.  If the path points to a directory, "
"use :func:`Path.rmdir` instead."
msgstr "이 파일이나 심볼릭 링크를 제거합니다. 경로가 디렉터리를 가리키면, :func:`Path.rmdir`\\을 대신 사용하십시오."

#: ../../library/pathlib.rst:1570
msgid ""
"If *missing_ok* is false (the default), :exc:`FileNotFoundError` is "
"raised if the path does not exist."
msgstr "*missing_ok*\\가 거짓(기본값)이면, 경로가 없을 때 :exc:`FileNotFoundError`\\가 발생합니다."

#: ../../library/pathlib.rst:1573
msgid ""
"If *missing_ok* is true, :exc:`FileNotFoundError` exceptions will be "
"ignored (same behavior as the POSIX ``rm -f`` command)."
msgstr ""
"*missing_ok*\\가 참이면, :exc:`FileNotFoundError` 예외는 무시됩니다 (POSIX ``rm -f`` "
"명령과 같은 동작)."

#: ../../library/pathlib.rst:1576
msgid "The *missing_ok* parameter was added."
msgstr "*missing_ok* 매개 변수가 추가되었습니다."

#: ../../library/pathlib.rst:1582
msgid "Remove this directory.  The directory must be empty."
msgstr "이 디렉터리를 제거합니다. 디렉터리는 비어 있어야 합니다."

#: ../../library/pathlib.rst:1586
msgid "Permissions and ownership"
msgstr ""

#: ../../library/pathlib.rst:1590
#, fuzzy
msgid ""
"Return the name of the user owning the file. :exc:`KeyError` is raised if"
" the file's user identifier (UID) isn't found in the system database."
msgstr ""
"파일을 소유한 사용자의 이름을 반환합니다. 시스템 데이터베이스에서 파일의 uid를 찾을 수 없으면 :exc:`KeyError`\\가"
" 발생합니다."

#: ../../library/pathlib.rst:1593
msgid ""
"This method normally follows symlinks; to get the owner of the symlink, "
"add the argument ``follow_symlinks=False``."
msgstr ""

#: ../../library/pathlib.rst:1596
msgid ""
"Raises :exc:`UnsupportedOperation` if the :mod:`pwd` module is not "
"available. In earlier versions, :exc:`NotImplementedError` was raised."
msgstr ""

#: ../../library/pathlib.rst:1606
#, fuzzy
msgid ""
"Return the name of the group owning the file. :exc:`KeyError` is raised "
"if the file's group identifier (GID) isn't found in the system database."
msgstr ""
"파일을 소유한 그룹의 이름을 반환합니다. 시스템 데이터베이스에서 파일의 gid를 찾을 수 없으면 :exc:`KeyError`\\가 "
"발생합니다."

#: ../../library/pathlib.rst:1609
msgid ""
"This method normally follows symlinks; to get the group of the symlink, "
"add the argument ``follow_symlinks=False``."
msgstr ""

#: ../../library/pathlib.rst:1612
msgid ""
"Raises :exc:`UnsupportedOperation` if the :mod:`grp` module is not "
"available. In earlier versions, :exc:`NotImplementedError` was raised."
msgstr ""

#: ../../library/pathlib.rst:1622
#, fuzzy
msgid "Change the file mode and permissions, like :func:`os.chmod`."
msgstr "파일 모드와 권한을 변경합니다. :func:`os.chmod`\\와 유사합니다::"

#: ../../library/pathlib.rst:1624
msgid ""
"This method normally follows symlinks. Some Unix flavours support "
"changing permissions on the symlink itself; on these platforms you may "
"add the argument ``follow_symlinks=False``, or use :meth:`~Path.lchmod`."
msgstr ""

#: ../../library/pathlib.rst:1630
msgid ""
">>> p = Path('setup.py')\n"
">>> p.stat().st_mode\n"
"33277\n"
">>> p.chmod(0o444)\n"
">>> p.stat().st_mode\n"
"33060"
msgstr ""

#: ../../library/pathlib.rst:1643
msgid ""
"Like :meth:`Path.chmod` but, if the path points to a symbolic link, the "
"symbolic link's mode is changed rather than its target's."
msgstr ":meth:`Path.chmod`\\와 비슷하지만, 경로가 심볼릭 링크를 가리키면, 대상이 아닌 심볼릭 링크의 모드가 변경됩니다."

#: ../../library/pathlib.rst:1650
msgid "Pattern language"
msgstr ""

#: ../../library/pathlib.rst:1652
msgid ""
"The following wildcards are supported in patterns for "
":meth:`~PurePath.full_match`, :meth:`~Path.glob` and :meth:`~Path.rglob`:"
msgstr ""

#: ../../library/pathlib.rst:1655
msgid "``**`` (entire segment)"
msgstr ""

#: ../../library/pathlib.rst:1656
msgid "Matches any number of file or directory segments, including zero."
msgstr ""

#: ../../library/pathlib.rst:1657
msgid "``*`` (entire segment)"
msgstr ""

#: ../../library/pathlib.rst:1658
msgid "Matches one file or directory segment."
msgstr ""

#: ../../library/pathlib.rst:1659
msgid "``*`` (part of a segment)"
msgstr ""

#: ../../library/pathlib.rst:1660
msgid "Matches any number of non-separator characters, including zero."
msgstr ""

#: ../../library/pathlib.rst:1661
msgid "``?``"
msgstr ""

#: ../../library/pathlib.rst:1662
msgid "Matches one non-separator character."
msgstr ""

#: ../../library/pathlib.rst:1663
msgid "``[seq]``"
msgstr ""

#: ../../library/pathlib.rst:1664
msgid "Matches one character in *seq*."
msgstr ""

#: ../../library/pathlib.rst:1665
msgid "``[!seq]``"
msgstr ""

#: ../../library/pathlib.rst:1666
msgid "Matches one character not in *seq*."
msgstr ""

#: ../../library/pathlib.rst:1668
msgid ""
"For a literal match, wrap the meta-characters in brackets. For example, "
"``\"[?]\"`` matches the character ``\"?\"``."
msgstr ""

#: ../../library/pathlib.rst:1671
msgid "The \"``**``\" wildcard enables recursive globbing. A few examples:"
msgstr ""

#: ../../library/pathlib.rst:1674
msgid "Pattern"
msgstr ""

#: ../../library/pathlib.rst:1674
msgid "Meaning"
msgstr ""

#: ../../library/pathlib.rst:1676
msgid "\"``**/*``\""
msgstr ""

#: ../../library/pathlib.rst:1676
msgid "Any path with at least one segment."
msgstr ""

#: ../../library/pathlib.rst:1677
msgid "\"``**/*.py``\""
msgstr ""

#: ../../library/pathlib.rst:1677
msgid "Any path with a final segment ending \"``.py``\"."
msgstr ""

#: ../../library/pathlib.rst:1678
msgid "\"``assets/**``\""
msgstr ""

#: ../../library/pathlib.rst:1678
msgid "Any path starting with \"``assets/``\"."
msgstr ""

#: ../../library/pathlib.rst:1679
msgid "\"``assets/**/*``\""
msgstr ""

#: ../../library/pathlib.rst:1679
msgid "Any path starting with \"``assets/``\", excluding \"``assets/``\" itself."
msgstr ""

#: ../../library/pathlib.rst:1683
msgid ""
"Globbing with the \"``**``\" wildcard visits every directory in the tree."
" Large directory trees may take a long time to search."
msgstr ""

#: ../../library/pathlib.rst:1686
msgid ""
"Globbing with a pattern that ends with \"``**``\" returns both files and "
"directories. In previous versions, only directories were returned."
msgstr ""

#: ../../library/pathlib.rst:1690
msgid ""
"In :meth:`Path.glob` and :meth:`~Path.rglob`, a trailing slash may be "
"added to the pattern to match only directories."
msgstr ""

#: ../../library/pathlib.rst:1693
msgid ""
"Globbing with a pattern that ends with a pathname components separator "
"(:data:`~os.sep` or :data:`~os.altsep`) returns only directories."
msgstr ""

#: ../../library/pathlib.rst:1699
#, fuzzy
msgid "Comparison to the :mod:`glob` module"
msgstr ":mod:`os` 모듈에 있는 도구와 대조"

#: ../../library/pathlib.rst:1701
msgid ""
"The patterns accepted and results generated by :meth:`Path.glob` and "
":meth:`Path.rglob` differ slightly from those by the :mod:`glob` module:"
msgstr ""

#: ../../library/pathlib.rst:1704
msgid ""
"Files beginning with a dot are not special in pathlib. This is like "
"passing ``include_hidden=True`` to :func:`glob.glob`."
msgstr ""

#: ../../library/pathlib.rst:1706
msgid ""
"\"``**``\" pattern components are always recursive in pathlib. This is "
"like passing ``recursive=True`` to :func:`glob.glob`."
msgstr ""

#: ../../library/pathlib.rst:1708
msgid ""
"\"``**``\" pattern components do not follow symlinks by default in "
"pathlib. This behaviour has no equivalent in :func:`glob.glob`, but you "
"can pass ``recurse_symlinks=True`` to :meth:`Path.glob` for compatible "
"behaviour."
msgstr ""

#: ../../library/pathlib.rst:1711
msgid ""
"Like all :class:`PurePath` and :class:`Path` objects, the values returned"
" from :meth:`Path.glob` and :meth:`Path.rglob` don't include trailing "
"slashes."
msgstr ""

#: ../../library/pathlib.rst:1714
msgid ""
"The values returned from pathlib's ``path.glob()`` and ``path.rglob()`` "
"include the *path* as a prefix, unlike the results of "
"``glob.glob(root_dir=path)``."
msgstr ""

#: ../../library/pathlib.rst:1717
msgid ""
"The values returned from pathlib's ``path.glob()`` and ``path.rglob()`` "
"may include *path* itself, for example when globbing \"``**``\", whereas "
"the results of ``glob.glob(root_dir=path)`` never include an empty string"
" that would correspond to *path*."
msgstr ""

#: ../../library/pathlib.rst:1724
msgid "Comparison to the :mod:`os` and :mod:`os.path` modules"
msgstr ""

#: ../../library/pathlib.rst:1726
msgid ""
"pathlib implements path operations using :class:`PurePath` and "
":class:`Path` objects, and so it's said to be *object-oriented*. On the "
"other hand, the :mod:`os` and :mod:`os.path` modules supply functions "
"that work with low-level ``str`` and ``bytes`` objects, which is a more "
"*procedural* approach. Some users consider the object-oriented style to "
"be more readable."
msgstr ""

#: ../../library/pathlib.rst:1732
msgid ""
"Many functions in :mod:`os` and :mod:`os.path` support ``bytes`` paths "
"and :ref:`paths relative to directory descriptors <dir_fd>`. These "
"features aren't available in pathlib."
msgstr ""

#: ../../library/pathlib.rst:1736
msgid ""
"Python's ``str`` and ``bytes`` types, and portions of the :mod:`os` and "
":mod:`os.path` modules, are written in C and are very speedy. pathlib is "
"written in pure Python and is often slower, but rarely slow enough to "
"matter."
msgstr ""

#: ../../library/pathlib.rst:1740
msgid ""
"pathlib's path normalization is slightly more opinionated and consistent "
"than :mod:`os.path`. For example, whereas :func:`os.path.abspath` "
"eliminates \"``..``\" segments from a path, which may change its meaning "
"if symlinks are involved, :meth:`Path.absolute` preserves these segments "
"for greater safety."
msgstr ""

#: ../../library/pathlib.rst:1745
msgid ""
"pathlib's path normalization may render it unsuitable for some "
"applications:"
msgstr ""

#: ../../library/pathlib.rst:1747
msgid ""
"pathlib normalizes ``Path(\"my_folder/\")`` to ``Path(\"my_folder\")``, "
"which changes a path's meaning when supplied to various operating system "
"APIs and command-line utilities. Specifically, the absence of a trailing "
"separator may allow the path to be resolved as either a file or "
"directory, rather than a directory only."
msgstr ""

#: ../../library/pathlib.rst:1752
msgid ""
"pathlib normalizes ``Path(\"./my_program\")`` to "
"``Path(\"my_program\")``, which changes a path's meaning when used as an "
"executable search path, such as in a shell or when spawning a child "
"process. Specifically, the absence of a separator in the path may force "
"it to be looked up in :envvar:`PATH` rather than the current directory."
msgstr ""

#: ../../library/pathlib.rst:1758
msgid ""
"As a consequence of these differences, pathlib is not a drop-in "
"replacement for :mod:`os.path`."
msgstr ""

#: ../../library/pathlib.rst:1763
msgid "Corresponding tools"
msgstr ""

#: ../../library/pathlib.rst:1765
msgid ""
"Below is a table mapping various :mod:`os` functions to their "
"corresponding :class:`PurePath`/:class:`Path` equivalent."
msgstr "아래는 다양한 :mod:`os` 함수를 해당 :class:`PurePath`/:class:`Path` 대응 물에 매핑하는 표입니다."

#: ../../library/pathlib.rst:1769
#, fuzzy
msgid ":mod:`os` and :mod:`os.path`"
msgstr "os와 os.path"

#: ../../library/pathlib.rst:1769
#, fuzzy
msgid ":mod:`pathlib`"
msgstr "pathlib"

#: ../../library/pathlib.rst:1771
msgid ":func:`os.path.dirname`"
msgstr ":func:`os.path.dirname`"

#: ../../library/pathlib.rst:1771
#, fuzzy
msgid ":attr:`PurePath.parent`"
msgstr ":data:`PurePath.parent`"

#: ../../library/pathlib.rst:1772
msgid ":func:`os.path.basename`"
msgstr ":func:`os.path.basename`"

#: ../../library/pathlib.rst:1772
#, fuzzy
msgid ":attr:`PurePath.name`"
msgstr ":data:`PurePath.name`"

#: ../../library/pathlib.rst:1773
msgid ":func:`os.path.splitext`"
msgstr ":func:`os.path.splitext`"

#: ../../library/pathlib.rst:1773
#, fuzzy
msgid ":attr:`PurePath.stem`, :attr:`PurePath.suffix`"
msgstr ":data:`PurePath.suffix`"

#: ../../library/pathlib.rst:1774
msgid ":func:`os.path.join`"
msgstr ":func:`os.path.join`"

#: ../../library/pathlib.rst:1774
#, fuzzy
msgid ":meth:`PurePath.joinpath`"
msgstr ":func:`PurePath.joinpath`"

#: ../../library/pathlib.rst:1775
msgid ":func:`os.path.isabs`"
msgstr ":func:`os.path.isabs`"

#: ../../library/pathlib.rst:1775
msgid ":meth:`PurePath.is_absolute`"
msgstr ":meth:`PurePath.is_absolute`"

#: ../../library/pathlib.rst:1776
#, fuzzy
msgid ":func:`os.path.relpath`"
msgstr ":func:`os.path.abspath`"

#: ../../library/pathlib.rst:1776
#, fuzzy
msgid ":meth:`PurePath.relative_to` [1]_"
msgstr ":meth:`Path.resolve`"

#: ../../library/pathlib.rst:1777
msgid ":func:`os.path.expanduser`"
msgstr ":func:`os.path.expanduser`"

#: ../../library/pathlib.rst:1777
#, fuzzy
msgid ":meth:`Path.expanduser` [2]_"
msgstr ":func:`os.path.expanduser`"

#: ../../library/pathlib.rst:1778
#, fuzzy
msgid ":func:`os.path.realpath`"
msgstr ":func:`os.path.abspath`"

#: ../../library/pathlib.rst:1778
msgid ":meth:`Path.resolve`"
msgstr ":meth:`Path.resolve`"

#: ../../library/pathlib.rst:1779
msgid ":func:`os.path.abspath`"
msgstr ":func:`os.path.abspath`"

#: ../../library/pathlib.rst:1779
#, fuzzy
msgid ":meth:`Path.absolute` [3]_"
msgstr ":meth:`PurePath.is_absolute`"

#: ../../library/pathlib.rst:1780
msgid ":func:`os.path.exists`"
msgstr ":func:`os.path.exists`"

#: ../../library/pathlib.rst:1780
msgid ":meth:`Path.exists`"
msgstr ":meth:`Path.exists`"

#: ../../library/pathlib.rst:1781
msgid ":func:`os.path.isfile`"
msgstr ":func:`os.path.isfile`"

#: ../../library/pathlib.rst:1781
msgid ":meth:`Path.is_file`"
msgstr ":meth:`Path.is_file`"

#: ../../library/pathlib.rst:1782
msgid ":func:`os.path.isdir`"
msgstr ":func:`os.path.isdir`"

#: ../../library/pathlib.rst:1782
msgid ":meth:`Path.is_dir`"
msgstr ":meth:`Path.is_dir`"

#: ../../library/pathlib.rst:1783
msgid ":func:`os.path.islink`"
msgstr ":func:`os.path.islink`"

#: ../../library/pathlib.rst:1783
msgid ":meth:`Path.is_symlink`"
msgstr ":meth:`Path.is_symlink`"

#: ../../library/pathlib.rst:1784
#, fuzzy
msgid ":func:`os.path.isjunction`"
msgstr ":func:`os.path.islink`"

#: ../../library/pathlib.rst:1784
#, fuzzy
msgid ":meth:`Path.is_junction`"
msgstr ":meth:`Path.unlink`"

#: ../../library/pathlib.rst:1785
#, fuzzy
msgid ":func:`os.path.ismount`"
msgstr ":func:`os.path.islink`"

#: ../../library/pathlib.rst:1785
#, fuzzy
msgid ":meth:`Path.is_mount`"
msgstr ":meth:`Path.is_symlink`"

#: ../../library/pathlib.rst:1786
msgid ":func:`os.path.samefile`"
msgstr ":func:`os.path.samefile`"

#: ../../library/pathlib.rst:1786
msgid ":meth:`Path.samefile`"
msgstr ":meth:`Path.samefile`"

#: ../../library/pathlib.rst:1787
msgid ":func:`os.getcwd`"
msgstr ":func:`os.getcwd`"

#: ../../library/pathlib.rst:1787
#, fuzzy
msgid ":meth:`Path.cwd`"
msgstr ":meth:`Path.chmod`"

#: ../../library/pathlib.rst:1788
msgid ":func:`os.stat`"
msgstr ":func:`os.stat`"

#: ../../library/pathlib.rst:1788
#, fuzzy
msgid ":meth:`Path.stat`"
msgstr ":meth:`Path.exists`"

#: ../../library/pathlib.rst:1789
#, fuzzy
msgid ":func:`os.lstat`"
msgstr ":func:`os.stat`"

#: ../../library/pathlib.rst:1789
#, fuzzy
msgid ":meth:`Path.lstat`"
msgstr ":meth:`Path.exists`"

#: ../../library/pathlib.rst:1790
msgid ":func:`os.listdir`"
msgstr ":func:`os.listdir`"

#: ../../library/pathlib.rst:1790
msgid ":meth:`Path.iterdir`"
msgstr ":meth:`Path.iterdir`"

#: ../../library/pathlib.rst:1791
#, fuzzy
msgid ":func:`os.walk`"
msgstr ":func:`os.link`"

#: ../../library/pathlib.rst:1791
#, fuzzy
msgid ":meth:`Path.walk` [4]_"
msgstr ":meth:`Path.readlink`"

#: ../../library/pathlib.rst:1792
#, fuzzy
msgid ":func:`os.mkdir`, :func:`os.makedirs`"
msgstr ":func:`os.remove`, :func:`os.unlink`"

#: ../../library/pathlib.rst:1792
msgid ":meth:`Path.mkdir`"
msgstr ":meth:`Path.mkdir`"

#: ../../library/pathlib.rst:1793
msgid ":func:`os.link`"
msgstr ":func:`os.link`"

#: ../../library/pathlib.rst:1793
#, fuzzy
msgid ":meth:`Path.hardlink_to`"
msgstr ":meth:`Path.link_to`"

#: ../../library/pathlib.rst:1794
msgid ":func:`os.symlink`"
msgstr ":func:`os.symlink`"

#: ../../library/pathlib.rst:1794
msgid ":meth:`Path.symlink_to`"
msgstr ":meth:`Path.symlink_to`"

#: ../../library/pathlib.rst:1795
msgid ":func:`os.readlink`"
msgstr ":func:`os.readlink`"

#: ../../library/pathlib.rst:1795
msgid ":meth:`Path.readlink`"
msgstr ":meth:`Path.readlink`"

#: ../../library/pathlib.rst:1796
msgid ":func:`os.rename`"
msgstr ":func:`os.rename`"

#: ../../library/pathlib.rst:1796
msgid ":meth:`Path.rename`"
msgstr ":meth:`Path.rename`"

#: ../../library/pathlib.rst:1797
msgid ":func:`os.replace`"
msgstr ":func:`os.replace`"

#: ../../library/pathlib.rst:1797
msgid ":meth:`Path.replace`"
msgstr ":meth:`Path.replace`"

#: ../../library/pathlib.rst:1798
msgid ":func:`os.remove`, :func:`os.unlink`"
msgstr ":func:`os.remove`, :func:`os.unlink`"

#: ../../library/pathlib.rst:1798
msgid ":meth:`Path.unlink`"
msgstr ":meth:`Path.unlink`"

#: ../../library/pathlib.rst:1799
msgid ":func:`os.rmdir`"
msgstr ":func:`os.rmdir`"

#: ../../library/pathlib.rst:1799
msgid ":meth:`Path.rmdir`"
msgstr ":meth:`Path.rmdir`"

#: ../../library/pathlib.rst:1800
msgid ":func:`os.chmod`"
msgstr ":func:`os.chmod`"

#: ../../library/pathlib.rst:1800
msgid ":meth:`Path.chmod`"
msgstr ":meth:`Path.chmod`"

#: ../../library/pathlib.rst:1801
#, fuzzy
msgid ":func:`os.lchmod`"
msgstr ":func:`os.chmod`"

#: ../../library/pathlib.rst:1801
#, fuzzy
msgid ":meth:`Path.lchmod`"
msgstr ":meth:`Path.chmod`"

#: ../../library/pathlib.rst:1805
msgid "Footnotes"
msgstr ""

#: ../../library/pathlib.rst:1806
msgid ""
":func:`os.path.relpath` calls :func:`~os.path.abspath` to make paths "
"absolute and remove \"``..``\" parts, whereas "
":meth:`PurePath.relative_to` is a lexical operation that raises "
":exc:`ValueError` when its inputs' anchors differ (e.g. if one path is "
"absolute and the other relative.)"
msgstr ""

#: ../../library/pathlib.rst:1810
msgid ""
":func:`os.path.expanduser` returns the path unchanged if the home "
"directory can't be resolved, whereas :meth:`Path.expanduser` raises "
":exc:`RuntimeError`."
msgstr ""

#: ../../library/pathlib.rst:1813
msgid ""
":func:`os.path.abspath` removes \"``..``\" components without resolving "
"symlinks, which may change the meaning of the path, whereas "
":meth:`Path.absolute` leaves any \"``..``\" components in the path."
msgstr ""

#: ../../library/pathlib.rst:1816
msgid ""
":func:`os.walk` always follows symlinks when categorizing paths into "
"*dirnames* and *filenames*, whereas :meth:`Path.walk` categorizes all "
"symlinks into *filenames* when *follow_symlinks* is false (the default.)"
msgstr ""

#: ../../library/pathlib.rst:11
#, fuzzy
msgid "path"
msgstr "pathlib"

#: ../../library/pathlib.rst:11
#, fuzzy
msgid "operations"
msgstr "연산자"

#~ msgid ""
#~ "When several absolute paths are given,"
#~ " the last is taken as an anchor"
#~ " (mimicking :func:`os.path.join`'s behaviour)::"
#~ msgstr "몇 개의 절대 경로가 주어지면, 마지막을 앵커로 취합니다 (:func:`os.path.join`\\의 동작을 모방합니다)::"

#~ msgid ""
#~ "However, in a Windows path, changing "
#~ "the local root doesn't discard the "
#~ "previous drive setting::"
#~ msgstr "그러나, 윈도우 경로에서, 로컬 루트를 변경해도 이전 드라이브 설정은 취소되지 않습니다::"

#~ msgid ""
#~ "The slash operator helps create child"
#~ " paths, similarly to :func:`os.path.join`::"
#~ msgstr "슬래시 연산자는 :func:`os.path.join`\\과 유사하게 자식 경로를 만드는 데 도움이 됩니다::"

#~ msgid ""
#~ "File system calls on reserved paths "
#~ "can fail mysteriously or have unintended"
#~ " effects."
#~ msgstr "예약된 경로에 대한 파일 시스템 호출은 실마리 없이 실패하거나 의도하지 않은 결과를 초래할 수 있습니다."

#~ msgid ""
#~ "If *pattern* is relative, the path "
#~ "can be either relative or absolute, "
#~ "and matching is done from the "
#~ "right::"
#~ msgstr "*pattern*\\이 상대적이면, 경로는 상대적이거나 절대적일 수 있으며, 일치는 오른쪽으로부터 수행됩니다::"

#~ msgid ""
#~ "If *pattern* is absolute, the path "
#~ "must be absolute, and the whole "
#~ "path must match::"
#~ msgstr "*pattern*\\이 절대적이면, 경로는 절대적이어야 하고, 전체 경로가 일치해야 합니다::"

#~ msgid "Methods"
#~ msgstr "메서드"

#~ msgid ""
#~ "If the path points to a symlink,"
#~ " :meth:`exists` returns whether the symlink"
#~ " *points to* an existing file or "
#~ "directory."
#~ msgstr ""
#~ "경로가 심볼릭 링크를 가리키면, :meth:`exists`\\는 심볼릭"
#~ " 링크가 기존 파일이나 디렉터리를 *가리키는*\\지를 반환합니다."

#~ msgid ""
#~ "The \"``**``\" pattern means \"this "
#~ "directory and all subdirectories, "
#~ "recursively\".  In other words, it "
#~ "enables recursive globbing::"
#~ msgstr ""
#~ "\"``**``\" 패턴은 \"이 디렉터리와 모든 서브 "
#~ "디렉터리를 재귀적으로\"를 뜻합니다. 다시 말해, 재귀적 "
#~ "glob을 활성화합니다::"

#~ msgid ""
#~ "Using the \"``**``\" pattern in large"
#~ " directory trees may consume an "
#~ "inordinate amount of time."
#~ msgstr "큰 디렉터리 트리에서 \"``**``\" 패턴을 사용하면 시간이 오래 걸릴 수 있습니다."

#~ msgid ""
#~ "If *exist_ok* is true, :exc:`FileExistsError`"
#~ " exceptions will be ignored (same "
#~ "behavior as the POSIX ``mkdir -p`` "
#~ "command), but only if the last "
#~ "path component is not an existing "
#~ "non-directory file."
#~ msgstr ""
#~ "*exist_ok*\\가 참이면, :exc:`FileExistsError` 예외가 "
#~ "무시되는데 (POSIX ``mkdir -p`` 명령과 같은 "
#~ "동작), 마지막 경로 구성 요소가 이미 존재하는 비"
#~ " 디렉터리 파일이 아닐 때만 그렇습니다."

#~ msgid ""
#~ "Make this path a symbolic link to"
#~ " *target*.  Under Windows, *target_is_directory*"
#~ " must be true (default ``False``) if"
#~ " the link's target is a directory."
#~ "  Under POSIX, *target_is_directory*'s value "
#~ "is ignored."
#~ msgstr ""
#~ "이 경로를 *target*\\에 대한 심볼릭 링크로 만듭니다."
#~ " 윈도우에서, 링크의 대상이 디렉터리이면 "
#~ "*target_is_directory*\\는 참(기본값 ``False``)이어야 합니다."
#~ " POSIX에서, *target_is_directory*\\의 값이 무시됩니다."

#~ msgid ""
#~ "Although :func:`os.path.relpath` and "
#~ ":meth:`PurePath.relative_to` have some overlapping"
#~ " use-cases, their semantics differ "
#~ "enough to warrant not considering them"
#~ " equivalent."
#~ msgstr ""
#~ ":func:`os.path.relpath`\\와 :meth:`PurePath.relative_to`\\에는 "
#~ "겹치는 사용 사례가 있지만, 그들의 의미론은 동등한 "
#~ "것으로 간주하지 않을 만큼 아주 다릅니다."

#~ msgid ":func:`os.mkdir`"
#~ msgstr ":func:`os.mkdir`"

#~ msgid ":func:`os.makedirs`"
#~ msgstr ":func:`os.makedirs`"

#~ msgid ":func:`Path.cwd`"
#~ msgstr ":func:`Path.cwd`"

#~ msgid ":meth:`Path.expanduser` and :meth:`Path.home`"
#~ msgstr ":meth:`Path.expanduser`\\와 :meth:`Path.home`"

#~ msgid ":meth:`Path.stat`, :meth:`Path.owner`, :meth:`Path.group`"
#~ msgstr ":meth:`Path.stat`, :meth:`Path.owner`, :meth:`Path.group`"

