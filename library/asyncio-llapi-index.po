# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2018, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-04-17 23:44+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: Dong-gweon Oh <flowdas@gmail.com>\n"
"Language-Team: Korean (https://python.flowdas.com)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.17.0\n"

#: ../../library/asyncio-llapi-index.rst:6
msgid "Low-level API Index"
msgstr "저수준 API 색인"

#: ../../library/asyncio-llapi-index.rst:8
msgid "This page lists all low-level asyncio APIs."
msgstr "이 페이지는 모든 저수준 asyncio API를 나열합니다."

#: ../../library/asyncio-llapi-index.rst:12
msgid "Obtaining the Event Loop"
msgstr "이벤트 루프 얻기"

#: ../../library/asyncio-llapi-index.rst:18
msgid ":func:`asyncio.get_running_loop`"
msgstr ":func:`asyncio.get_running_loop`"

#: ../../library/asyncio-llapi-index.rst:19
msgid "The **preferred** function to get the running event loop."
msgstr "실행 중인 이벤트 루프를 가져오는 데 **선호되는** 함수."

#: ../../library/asyncio-llapi-index.rst:21
msgid ":func:`asyncio.get_event_loop`"
msgstr ":func:`asyncio.get_event_loop`"

#: ../../library/asyncio-llapi-index.rst:22
#, fuzzy
msgid "Get an event loop instance (running or current via the current policy)."
msgstr "이벤트 루프 인스턴스를 가져옵니다 (현재 또는 정책을 통해)."

#: ../../library/asyncio-llapi-index.rst:24
msgid ":func:`asyncio.set_event_loop`"
msgstr ":func:`asyncio.set_event_loop`"

#: ../../library/asyncio-llapi-index.rst:25
msgid "Set the event loop as current via the current policy."
msgstr "현재 정책을 통해 현재 이벤트 루프를 설정합니다."

#: ../../library/asyncio-llapi-index.rst:27
msgid ":func:`asyncio.new_event_loop`"
msgstr ":func:`asyncio.new_event_loop`"

#: ../../library/asyncio-llapi-index.rst:28
msgid "Create a new event loop."
msgstr "새 이벤트 루프를 만듭니다."

#: ../../library/asyncio-llapi-index.rst:32
#: ../../library/asyncio-llapi-index.rst:269
msgid "Examples"
msgstr "예제"

#: ../../library/asyncio-llapi-index.rst:33
msgid ":ref:`Using asyncio.get_running_loop() <asyncio_example_future>`."
msgstr ":ref:`asyncio.get_running_loop() 사용하기 <asyncio_example_future>`."

#: ../../library/asyncio-llapi-index.rst:37
msgid "Event Loop Methods"
msgstr "이벤트 루프 메서드"

#: ../../library/asyncio-llapi-index.rst:39
#, fuzzy
msgid ""
"See also the main documentation section about the :ref:`asyncio-event-"
"loop-methods`."
msgstr ":ref:`이벤트 루프 메서드 <asyncio-event-loop>`\\에 관한 주 설명서 절도 참조하십시오."

#: ../../library/asyncio-llapi-index.rst:42
msgid "Lifecycle"
msgstr "수명주기"

#: ../../library/asyncio-llapi-index.rst:47
msgid ":meth:`loop.run_until_complete`"
msgstr ":meth:`loop.run_until_complete`"

#: ../../library/asyncio-llapi-index.rst:48
msgid "Run a Future/Task/awaitable until complete."
msgstr "완료할 때까지 퓨처/태스크/어웨이터블을 실행합니다."

#: ../../library/asyncio-llapi-index.rst:50
msgid ":meth:`loop.run_forever`"
msgstr ":meth:`loop.run_forever`"

#: ../../library/asyncio-llapi-index.rst:51
msgid "Run the event loop forever."
msgstr "이벤트 루프를 영원히 실행합니다."

#: ../../library/asyncio-llapi-index.rst:53
msgid ":meth:`loop.stop`"
msgstr ":meth:`loop.stop`"

#: ../../library/asyncio-llapi-index.rst:54
msgid "Stop the event loop."
msgstr "이벤트 루프를 중지합니다."

#: ../../library/asyncio-llapi-index.rst:56
msgid ":meth:`loop.close`"
msgstr ":meth:`loop.close`"

#: ../../library/asyncio-llapi-index.rst:57
msgid "Close the event loop."
msgstr "이벤트 루프를 닫습니다."

#: ../../library/asyncio-llapi-index.rst:59
#, fuzzy
msgid ":meth:`loop.is_running`"
msgstr ":meth:`loop.is_running()`"

#: ../../library/asyncio-llapi-index.rst:60
msgid "Return ``True`` if the event loop is running."
msgstr "이벤트 루프가 실행 중이면 ``True``\\를 반환합니다."

#: ../../library/asyncio-llapi-index.rst:62
#, fuzzy
msgid ":meth:`loop.is_closed`"
msgstr ":meth:`loop.is_closed()`"

#: ../../library/asyncio-llapi-index.rst:63
msgid "Return ``True`` if the event loop is closed."
msgstr "이벤트 루프가 닫혔으면 ``True``\\를 반환합니다."

#: ../../library/asyncio-llapi-index.rst:65
msgid "``await`` :meth:`loop.shutdown_asyncgens`"
msgstr "``await`` :meth:`loop.shutdown_asyncgens`"

#: ../../library/asyncio-llapi-index.rst:66
msgid "Close asynchronous generators."
msgstr "비동기 제너레이터를 닫습니다."

#: ../../library/asyncio-llapi-index.rst:69
msgid "Debugging"
msgstr "디버깅"

#: ../../library/asyncio-llapi-index.rst:74
msgid ":meth:`loop.set_debug`"
msgstr ":meth:`loop.set_debug`"

#: ../../library/asyncio-llapi-index.rst:75
msgid "Enable or disable the debug mode."
msgstr "디버그 모드를 활성화 또는 비활성화합니다."

#: ../../library/asyncio-llapi-index.rst:77
msgid ":meth:`loop.get_debug`"
msgstr ":meth:`loop.get_debug`"

#: ../../library/asyncio-llapi-index.rst:78
msgid "Get the current debug mode."
msgstr "현재의 디버그 모드를 얻습니다."

#: ../../library/asyncio-llapi-index.rst:81
msgid "Scheduling Callbacks"
msgstr "콜백 예약하기"

#: ../../library/asyncio-llapi-index.rst:86
msgid ":meth:`loop.call_soon`"
msgstr ":meth:`loop.call_soon`"

#: ../../library/asyncio-llapi-index.rst:87
msgid "Invoke a callback soon."
msgstr "콜백을 곧 호출합니다."

#: ../../library/asyncio-llapi-index.rst:89
msgid ":meth:`loop.call_soon_threadsafe`"
msgstr ":meth:`loop.call_soon_threadsafe`"

#: ../../library/asyncio-llapi-index.rst:90
msgid "A thread-safe variant of :meth:`loop.call_soon`."
msgstr "스레드 안전한 :meth:`loop.call_soon`\\의 변형입니다."

#: ../../library/asyncio-llapi-index.rst:92
msgid ":meth:`loop.call_later`"
msgstr ":meth:`loop.call_later`"

#: ../../library/asyncio-llapi-index.rst:93
msgid "Invoke a callback *after* the given time."
msgstr "주어진 시간 *후*\\에 콜백을 호출합니다."

#: ../../library/asyncio-llapi-index.rst:95
msgid ":meth:`loop.call_at`"
msgstr ":meth:`loop.call_at`"

#: ../../library/asyncio-llapi-index.rst:96
msgid "Invoke a callback *at* the given time."
msgstr "주어진 시간 *에* 콜백을 호출합니다."

#: ../../library/asyncio-llapi-index.rst:99
msgid "Thread/Process Pool"
msgstr "스레드/프로세스 풀"

#: ../../library/asyncio-llapi-index.rst:104
msgid "``await`` :meth:`loop.run_in_executor`"
msgstr "``await`` :meth:`loop.run_in_executor`"

#: ../../library/asyncio-llapi-index.rst:105
msgid ""
"Run a CPU-bound or other blocking function in a :mod:`concurrent.futures`"
" executor."
msgstr ":mod:`concurrent.futures` 실행기에서 CPU-병목이나 다른 블로킹 함수를 실행합니다."

#: ../../library/asyncio-llapi-index.rst:108
msgid ":meth:`loop.set_default_executor`"
msgstr ":meth:`loop.set_default_executor`"

#: ../../library/asyncio-llapi-index.rst:109
msgid "Set the default executor for :meth:`loop.run_in_executor`."
msgstr ":meth:`loop.run_in_executor`\\의 기본 실행기를 설정합니다."

#: ../../library/asyncio-llapi-index.rst:112
msgid "Tasks and Futures"
msgstr "태스크와 퓨처"

#: ../../library/asyncio-llapi-index.rst:117
msgid ":meth:`loop.create_future`"
msgstr ":meth:`loop.create_future`"

#: ../../library/asyncio-llapi-index.rst:118
msgid "Create a :class:`Future` object."
msgstr ":class:`Future` 객체를 만듭니다."

#: ../../library/asyncio-llapi-index.rst:120
msgid ":meth:`loop.create_task`"
msgstr ":meth:`loop.create_task`"

#: ../../library/asyncio-llapi-index.rst:121
msgid "Schedule coroutine as a :class:`Task`."
msgstr "코루틴을 :class:`Task`\\로 예약합니다."

#: ../../library/asyncio-llapi-index.rst:123
msgid ":meth:`loop.set_task_factory`"
msgstr ":meth:`loop.set_task_factory`"

#: ../../library/asyncio-llapi-index.rst:124
msgid ""
"Set a factory used by :meth:`loop.create_task` to create :class:`Tasks "
"<Task>`."
msgstr ":meth:`loop.create_task`\\가 :class:`태스크 <Task>`\\를 만드는데 사용하는 팩토리를 설정합니다."

#: ../../library/asyncio-llapi-index.rst:127
msgid ":meth:`loop.get_task_factory`"
msgstr ":meth:`loop.get_task_factory`"

#: ../../library/asyncio-llapi-index.rst:128
msgid ""
"Get the factory :meth:`loop.create_task` uses to create :class:`Tasks "
"<Task>`."
msgstr ":meth:`loop.create_task`\\가 :class:`태스크 <Task>`\\를 만드는데 사용하는 팩토리를 얻습니다."

#: ../../library/asyncio-llapi-index.rst:132
msgid "DNS"
msgstr "DNS"

#: ../../library/asyncio-llapi-index.rst:137
msgid "``await`` :meth:`loop.getaddrinfo`"
msgstr "``await`` :meth:`loop.getaddrinfo`"

#: ../../library/asyncio-llapi-index.rst:138
msgid "Asynchronous version of :meth:`socket.getaddrinfo`."
msgstr ":meth:`socket.getaddrinfo`\\의 비동기 버전."

#: ../../library/asyncio-llapi-index.rst:140
msgid "``await`` :meth:`loop.getnameinfo`"
msgstr "``await`` :meth:`loop.getnameinfo`"

#: ../../library/asyncio-llapi-index.rst:141
msgid "Asynchronous version of :meth:`socket.getnameinfo`."
msgstr ":meth:`socket.getnameinfo`\\의 비동기 버전."

#: ../../library/asyncio-llapi-index.rst:144
msgid "Networking and IPC"
msgstr "네트워킹과 IPC"

#: ../../library/asyncio-llapi-index.rst:149
msgid "``await`` :meth:`loop.create_connection`"
msgstr "``await`` :meth:`loop.create_connection`"

#: ../../library/asyncio-llapi-index.rst:150
msgid "Open a TCP connection."
msgstr "TCP 연결을 엽니다."

#: ../../library/asyncio-llapi-index.rst:152
msgid "``await`` :meth:`loop.create_server`"
msgstr "``await`` :meth:`loop.create_server`"

#: ../../library/asyncio-llapi-index.rst:153
msgid "Create a TCP server."
msgstr "TCP 서버를 만듭니다."

#: ../../library/asyncio-llapi-index.rst:155
msgid "``await`` :meth:`loop.create_unix_connection`"
msgstr "``await`` :meth:`loop.create_unix_connection`"

#: ../../library/asyncio-llapi-index.rst:156
msgid "Open a Unix socket connection."
msgstr "유닉스 소켓 연결을 엽니다."

#: ../../library/asyncio-llapi-index.rst:158
msgid "``await`` :meth:`loop.create_unix_server`"
msgstr "``await`` :meth:`loop.create_unix_server`"

#: ../../library/asyncio-llapi-index.rst:159
msgid "Create a Unix socket server."
msgstr "Unix 소켓 서버를 만듭니다."

#: ../../library/asyncio-llapi-index.rst:161
msgid "``await`` :meth:`loop.connect_accepted_socket`"
msgstr "``await`` :meth:`loop.connect_accepted_socket`"

#: ../../library/asyncio-llapi-index.rst:162
msgid "Wrap a :class:`~socket.socket` into a ``(transport, protocol)`` pair."
msgstr ":class:`~socket.socket`\\을 ``(transport, protocol)`` 쌍으로 감쌉니다."

#: ../../library/asyncio-llapi-index.rst:165
msgid "``await`` :meth:`loop.create_datagram_endpoint`"
msgstr "``await`` :meth:`loop.create_datagram_endpoint`"

#: ../../library/asyncio-llapi-index.rst:166
msgid "Open a datagram (UDP) connection."
msgstr "데이터 그램 (UDP) 연결을 엽니다."

#: ../../library/asyncio-llapi-index.rst:168
msgid "``await`` :meth:`loop.sendfile`"
msgstr "``await`` :meth:`loop.sendfile`"

#: ../../library/asyncio-llapi-index.rst:169
msgid "Send a file over a transport."
msgstr "트랜스포트를 통해 파일을 보냅니다."

#: ../../library/asyncio-llapi-index.rst:171
msgid "``await`` :meth:`loop.start_tls`"
msgstr "``await`` :meth:`loop.start_tls`"

#: ../../library/asyncio-llapi-index.rst:172
msgid "Upgrade an existing connection to TLS."
msgstr "기존 연결을 TLS로 업그레이드합니다."

#: ../../library/asyncio-llapi-index.rst:174
msgid "``await`` :meth:`loop.connect_read_pipe`"
msgstr "``await`` :meth:`loop.connect_read_pipe`"

#: ../../library/asyncio-llapi-index.rst:175
msgid "Wrap a read end of a pipe into a ``(transport, protocol)`` pair."
msgstr "파이프의 읽기 끝을 ``(transport, protocol)`` 쌍으로 감쌉니다."

#: ../../library/asyncio-llapi-index.rst:177
msgid "``await`` :meth:`loop.connect_write_pipe`"
msgstr "``await`` :meth:`loop.connect_write_pipe`"

#: ../../library/asyncio-llapi-index.rst:178
msgid "Wrap a write end of a pipe into a ``(transport, protocol)`` pair."
msgstr "파이프의 쓰기 끝을 ``(transport, protocol)`` 쌍으로 감쌉니다."

#: ../../library/asyncio-llapi-index.rst:181
msgid "Sockets"
msgstr "소켓"

#: ../../library/asyncio-llapi-index.rst:186
msgid "``await`` :meth:`loop.sock_recv`"
msgstr "``await`` :meth:`loop.sock_recv`"

#: ../../library/asyncio-llapi-index.rst:187
msgid "Receive data from the :class:`~socket.socket`."
msgstr ":class:`~socket.socket`\\에서 데이터를 수신합니다."

#: ../../library/asyncio-llapi-index.rst:189
msgid "``await`` :meth:`loop.sock_recv_into`"
msgstr "``await`` :meth:`loop.sock_recv_into`"

#: ../../library/asyncio-llapi-index.rst:190
msgid "Receive data from the :class:`~socket.socket` into a buffer."
msgstr ":class:`~socket.socket`\\에서 데이터를 버퍼로 수신합니다."

#: ../../library/asyncio-llapi-index.rst:192
#, fuzzy
msgid "``await`` :meth:`loop.sock_recvfrom`"
msgstr "``await`` :meth:`loop.sock_recv`"

#: ../../library/asyncio-llapi-index.rst:193
#, fuzzy
msgid "Receive a datagram from the :class:`~socket.socket`."
msgstr ":class:`~socket.socket`\\에서 데이터를 수신합니다."

#: ../../library/asyncio-llapi-index.rst:195
#, fuzzy
msgid "``await`` :meth:`loop.sock_recvfrom_into`"
msgstr "``await`` :meth:`loop.sock_recv_into`"

#: ../../library/asyncio-llapi-index.rst:196
#, fuzzy
msgid "Receive a datagram from the :class:`~socket.socket` into a buffer."
msgstr ":class:`~socket.socket`\\에서 데이터를 버퍼로 수신합니다."

#: ../../library/asyncio-llapi-index.rst:198
msgid "``await`` :meth:`loop.sock_sendall`"
msgstr "``await`` :meth:`loop.sock_sendall`"

#: ../../library/asyncio-llapi-index.rst:199
msgid "Send data to the :class:`~socket.socket`."
msgstr "데이터를 :class:`~socket.socket`\\으로 보냅니다."

#: ../../library/asyncio-llapi-index.rst:201
#, fuzzy
msgid "``await`` :meth:`loop.sock_sendto`"
msgstr "``await`` :meth:`loop.sock_sendall`"

#: ../../library/asyncio-llapi-index.rst:202
#, fuzzy
msgid "Send a datagram via the :class:`~socket.socket` to the given address."
msgstr "데이터를 :class:`~socket.socket`\\으로 보냅니다."

#: ../../library/asyncio-llapi-index.rst:204
msgid "``await`` :meth:`loop.sock_connect`"
msgstr "``await`` :meth:`loop.sock_connect`"

#: ../../library/asyncio-llapi-index.rst:205
msgid "Connect the :class:`~socket.socket`."
msgstr ":class:`~socket.socket`\\을 연결합니다."

#: ../../library/asyncio-llapi-index.rst:207
msgid "``await`` :meth:`loop.sock_accept`"
msgstr "``await`` :meth:`loop.sock_accept`"

#: ../../library/asyncio-llapi-index.rst:208
msgid "Accept a :class:`~socket.socket` connection."
msgstr ":class:`~socket.socket` 연결을 수락합니다."

#: ../../library/asyncio-llapi-index.rst:210
msgid "``await`` :meth:`loop.sock_sendfile`"
msgstr "``await`` :meth:`loop.sock_sendfile`"

#: ../../library/asyncio-llapi-index.rst:211
msgid "Send a file over the :class:`~socket.socket`."
msgstr ":class:`~socket.socket`\\를 통해 파일을 보냅니다."

#: ../../library/asyncio-llapi-index.rst:213
msgid ":meth:`loop.add_reader`"
msgstr ":meth:`loop.add_reader`"

#: ../../library/asyncio-llapi-index.rst:214
msgid "Start watching a file descriptor for read availability."
msgstr "파일 기술자가 읽기 가능한지 관찰하기 시작합니다."

#: ../../library/asyncio-llapi-index.rst:216
msgid ":meth:`loop.remove_reader`"
msgstr ":meth:`loop.remove_reader`"

#: ../../library/asyncio-llapi-index.rst:217
msgid "Stop watching a file descriptor for read availability."
msgstr "파일 기술자가 읽기 가능한지 관찰하는 것을 중단합니다."

#: ../../library/asyncio-llapi-index.rst:219
msgid ":meth:`loop.add_writer`"
msgstr ":meth:`loop.add_writer`"

#: ../../library/asyncio-llapi-index.rst:220
msgid "Start watching a file descriptor for write availability."
msgstr "파일 기술자가 쓰기 가능한지 관찰하기 시작합니다."

#: ../../library/asyncio-llapi-index.rst:222
msgid ":meth:`loop.remove_writer`"
msgstr ":meth:`loop.remove_writer`"

#: ../../library/asyncio-llapi-index.rst:223
msgid "Stop watching a file descriptor for write availability."
msgstr "파일 기술자가 쓰기 가능한지 관찰하는 것을 중단합니다."

#: ../../library/asyncio-llapi-index.rst:226
msgid "Unix Signals"
msgstr "유닉스 시그널"

#: ../../library/asyncio-llapi-index.rst:231
msgid ":meth:`loop.add_signal_handler`"
msgstr ":meth:`loop.add_signal_handler`"

#: ../../library/asyncio-llapi-index.rst:232
msgid "Add a handler for a :mod:`signal`."
msgstr ":mod:`signal`\\에 대한 처리기를 추가합니다."

#: ../../library/asyncio-llapi-index.rst:234
msgid ":meth:`loop.remove_signal_handler`"
msgstr ":meth:`loop.remove_signal_handler`"

#: ../../library/asyncio-llapi-index.rst:235
msgid "Remove a handler for a :mod:`signal`."
msgstr ":mod:`signal`\\에 대한 처리기를 제거합니다."

#: ../../library/asyncio-llapi-index.rst:238
msgid "Subprocesses"
msgstr "서브 프로세스"

#: ../../library/asyncio-llapi-index.rst:243
msgid ":meth:`loop.subprocess_exec`"
msgstr ":meth:`loop.subprocess_exec`"

#: ../../library/asyncio-llapi-index.rst:244
msgid "Spawn a subprocess."
msgstr "서브 프로세스를 스폰합니다."

#: ../../library/asyncio-llapi-index.rst:246
msgid ":meth:`loop.subprocess_shell`"
msgstr ":meth:`loop.subprocess_shell`"

#: ../../library/asyncio-llapi-index.rst:247
msgid "Spawn a subprocess from a shell command."
msgstr "셸 명령으로 서브 프로세스를 스폰합니다."

#: ../../library/asyncio-llapi-index.rst:250
msgid "Error Handling"
msgstr "에러 처리"

#: ../../library/asyncio-llapi-index.rst:255
msgid ":meth:`loop.call_exception_handler`"
msgstr ":meth:`loop.call_exception_handler`"

#: ../../library/asyncio-llapi-index.rst:256
msgid "Call the exception handler."
msgstr "예외 처리기를 호출합니다."

#: ../../library/asyncio-llapi-index.rst:258
msgid ":meth:`loop.set_exception_handler`"
msgstr ":meth:`loop.set_exception_handler`"

#: ../../library/asyncio-llapi-index.rst:259
msgid "Set a new exception handler."
msgstr "새로운 예외 처리기를 설정합니다."

#: ../../library/asyncio-llapi-index.rst:261
msgid ":meth:`loop.get_exception_handler`"
msgstr ":meth:`loop.get_exception_handler`"

#: ../../library/asyncio-llapi-index.rst:262
msgid "Get the current exception handler."
msgstr "현재 예외 처리기를 가져옵니다."

#: ../../library/asyncio-llapi-index.rst:264
msgid ":meth:`loop.default_exception_handler`"
msgstr ":meth:`loop.default_exception_handler`"

#: ../../library/asyncio-llapi-index.rst:265
msgid "The default exception handler implementation."
msgstr "기본 예외 처리기 구현."

#: ../../library/asyncio-llapi-index.rst:270
#, fuzzy
msgid ""
":ref:`Using asyncio.new_event_loop() and loop.run_forever() "
"<asyncio_example_lowlevel_helloworld>`."
msgstr ""
":ref:`asyncio.get_event_loop() 와 loop.run_forever() 사용하기 "
"<asyncio_example_lowlevel_helloworld>`."

#: ../../library/asyncio-llapi-index.rst:273
msgid ":ref:`Using loop.call_later() <asyncio_example_call_later>`."
msgstr ":ref:`loop.call_later() 사용하기 <asyncio_example_call_later>`."

#: ../../library/asyncio-llapi-index.rst:275
msgid ""
"Using ``loop.create_connection()`` to implement :ref:`an echo-client "
"<asyncio_example_tcp_echo_client_protocol>`."
msgstr ""
"``loop.create_connection()``\\을 사용하여 :ref:`메아리 클라이언트 "
"<asyncio_example_tcp_echo_client_protocol>` 구현하기."

#: ../../library/asyncio-llapi-index.rst:278
msgid ""
"Using ``loop.create_connection()`` to :ref:`connect a socket "
"<asyncio_example_create_connection>`."
msgstr ""
"``loop.create_connection()``\\을 사용하여 :ref:`소켓 연결하기 "
"<asyncio_example_create_connection>`."

#: ../../library/asyncio-llapi-index.rst:281
msgid ""
":ref:`Using add_reader() to watch an FD for read events "
"<asyncio_example_watch_fd>`."
msgstr ":ref:`add_reader()를 사용하여 FD에서 읽기 이벤트 관찰하기 <asyncio_example_watch_fd>`."

#: ../../library/asyncio-llapi-index.rst:284
msgid ":ref:`Using loop.add_signal_handler() <asyncio_example_unix_signals>`."
msgstr ":ref:`loop.add_signal_handler() 사용하기 <asyncio_example_unix_signals>`."

#: ../../library/asyncio-llapi-index.rst:286
msgid ":ref:`Using loop.subprocess_exec() <asyncio_example_subprocess_proto>`."
msgstr ":ref:`loop.subprocess_exec() 사용하기 <asyncio_example_subprocess_proto>`."

#: ../../library/asyncio-llapi-index.rst:290
msgid "Transports"
msgstr "트랜스포트"

#: ../../library/asyncio-llapi-index.rst:292
msgid "All transports implement the following methods:"
msgstr "모든 트랜스포트는 다음과 같은 메서드를 구현합니다:"

#: ../../library/asyncio-llapi-index.rst:298
msgid ":meth:`transport.close() <BaseTransport.close>`"
msgstr ":meth:`transport.close() <BaseTransport.close>`"

#: ../../library/asyncio-llapi-index.rst:299
msgid "Close the transport."
msgstr "트랜스포트를 닫습니다."

#: ../../library/asyncio-llapi-index.rst:301
msgid ":meth:`transport.is_closing() <BaseTransport.is_closing>`"
msgstr ":meth:`transport.is_closing() <BaseTransport.is_closing>`"

#: ../../library/asyncio-llapi-index.rst:302
msgid "Return ``True`` if the transport is closing or is closed."
msgstr "트랜스포트가 닫히고 있거나 닫혔으면 ``True``\\를 반환합니다."

#: ../../library/asyncio-llapi-index.rst:304
msgid ":meth:`transport.get_extra_info() <BaseTransport.get_extra_info>`"
msgstr ":meth:`transport.get_extra_info() <BaseTransport.get_extra_info>`"

#: ../../library/asyncio-llapi-index.rst:305
msgid "Request for information about the transport."
msgstr "트랜스포트에 대한 정보를 요청합니다."

#: ../../library/asyncio-llapi-index.rst:307
msgid ":meth:`transport.set_protocol() <BaseTransport.set_protocol>`"
msgstr ":meth:`transport.set_protocol() <BaseTransport.set_protocol>`"

#: ../../library/asyncio-llapi-index.rst:308
msgid "Set a new protocol."
msgstr "새 프로토콜을 설정합니다."

#: ../../library/asyncio-llapi-index.rst:310
msgid ":meth:`transport.get_protocol() <BaseTransport.get_protocol>`"
msgstr ":meth:`transport.get_protocol() <BaseTransport.get_protocol>`"

#: ../../library/asyncio-llapi-index.rst:311
msgid "Return the current protocol."
msgstr "현재 프로토콜을 돌려줍니다."

#: ../../library/asyncio-llapi-index.rst:314
msgid ""
"Transports that can receive data (TCP and Unix connections, pipes, etc)."
"  Returned from methods like :meth:`loop.create_connection`, "
":meth:`loop.create_unix_connection`, :meth:`loop.connect_read_pipe`, etc:"
msgstr ""
"데이터를 받을 수 있는 트랜스포트 (TCP 및 유닉스 연결, 파이프 등). :meth:`loop.create_connection`,"
" :meth:`loop.create_unix_connection`, :meth:`loop.connect_read_pipe` 등의 "
"메서드에서 반환됩니다:"

#: ../../library/asyncio-llapi-index.rst:319
msgid "Read Transports"
msgstr "트랜스포트 읽기"

#: ../../library/asyncio-llapi-index.rst:324
msgid ":meth:`transport.is_reading() <ReadTransport.is_reading>`"
msgstr ":meth:`transport.is_reading() <ReadTransport.is_reading>`"

#: ../../library/asyncio-llapi-index.rst:325
msgid "Return ``True`` if the transport is receiving."
msgstr "트랜스포트가 수신 중이면 ``True``\\를 반환합니다."

#: ../../library/asyncio-llapi-index.rst:327
msgid ":meth:`transport.pause_reading() <ReadTransport.pause_reading>`"
msgstr ":meth:`transport.pause_reading() <ReadTransport.pause_reading>`"

#: ../../library/asyncio-llapi-index.rst:328
msgid "Pause receiving."
msgstr "수신을 일시 정지합니다."

#: ../../library/asyncio-llapi-index.rst:330
msgid ":meth:`transport.resume_reading() <ReadTransport.resume_reading>`"
msgstr ":meth:`transport.resume_reading() <ReadTransport.resume_reading>`"

#: ../../library/asyncio-llapi-index.rst:331
msgid "Resume receiving."
msgstr "수신을 재개합니다."

#: ../../library/asyncio-llapi-index.rst:334
msgid ""
"Transports that can Send data (TCP and Unix connections, pipes, etc).  "
"Returned from methods like :meth:`loop.create_connection`, "
":meth:`loop.create_unix_connection`, :meth:`loop.connect_write_pipe`, "
"etc:"
msgstr ""
"데이터를 전송할 수 있는 트랜스포트 (TCP와 유닉스 연결, 파이프 등). :meth:`loop.create_connection`,"
" :meth:`loop.create_unix_connection`, :meth:`loop.connect_write_pipe` 등의 "
"메서드에서 반환됩니다:"

#: ../../library/asyncio-llapi-index.rst:339
msgid "Write Transports"
msgstr "트랜스포트 쓰기"

#: ../../library/asyncio-llapi-index.rst:344
msgid ":meth:`transport.write() <WriteTransport.write>`"
msgstr ":meth:`transport.write() <WriteTransport.write>`"

#: ../../library/asyncio-llapi-index.rst:345
msgid "Write data to the transport."
msgstr "데이터를 트랜스포트에 씁니다."

#: ../../library/asyncio-llapi-index.rst:347
msgid ":meth:`transport.writelines() <WriteTransport.writelines>`"
msgstr ":meth:`transport.writelines() <WriteTransport.writelines>`"

#: ../../library/asyncio-llapi-index.rst:348
msgid "Write buffers to the transport."
msgstr "버퍼들을 트랜스포트에 씁니다."

#: ../../library/asyncio-llapi-index.rst:350
msgid ":meth:`transport.can_write_eof() <WriteTransport.can_write_eof>`"
msgstr ":meth:`transport.can_write_eof() <WriteTransport.can_write_eof>`"

#: ../../library/asyncio-llapi-index.rst:351
msgid "Return :const:`True` if the transport supports sending EOF."
msgstr "트랜스포트가 EOF 전송을 지원하면 :const:`True`\\를 반환합니다."

#: ../../library/asyncio-llapi-index.rst:353
msgid ":meth:`transport.write_eof() <WriteTransport.write_eof>`"
msgstr ":meth:`transport.write_eof() <WriteTransport.write_eof>`"

#: ../../library/asyncio-llapi-index.rst:354
msgid "Close and send EOF after flushing buffered data."
msgstr "버퍼 된 데이터를 플러시 한 후 닫고 EOF를 보냅니다."

#: ../../library/asyncio-llapi-index.rst:356
msgid ":meth:`transport.abort() <WriteTransport.abort>`"
msgstr ":meth:`transport.abort() <WriteTransport.abort>`"

#: ../../library/asyncio-llapi-index.rst:357
#: ../../library/asyncio-llapi-index.rst:383
msgid "Close the transport immediately."
msgstr "즉시 트랜스포트를 닫습니다."

#: ../../library/asyncio-llapi-index.rst:359
msgid ""
":meth:`transport.get_write_buffer_size() "
"<WriteTransport.get_write_buffer_size>`"
msgstr ""
":meth:`transport.get_write_buffer_size() "
"<WriteTransport.get_write_buffer_size>`"

#: ../../library/asyncio-llapi-index.rst:361
#, fuzzy
msgid "Return the current size of the output buffer."
msgstr "현재 프로토콜을 돌려줍니다."

#: ../../library/asyncio-llapi-index.rst:363
#, fuzzy
msgid ""
":meth:`transport.get_write_buffer_limits() "
"<WriteTransport.get_write_buffer_limits>`"
msgstr ""
":meth:`transport.set_write_buffer_limits() "
"<WriteTransport.set_write_buffer_limits>`"

#: ../../library/asyncio-llapi-index.rst:365
msgid "Return high and low water marks for write flow control."
msgstr "쓰기 흐름 제어를 위한 높은 수위와 낮은 수위를 반환합니다."

#: ../../library/asyncio-llapi-index.rst:367
msgid ""
":meth:`transport.set_write_buffer_limits() "
"<WriteTransport.set_write_buffer_limits>`"
msgstr ""
":meth:`transport.set_write_buffer_limits() "
"<WriteTransport.set_write_buffer_limits>`"

#: ../../library/asyncio-llapi-index.rst:369
msgid "Set new high and low water marks for write flow control."
msgstr "쓰기 흐름 제어를 위한 새로운 높은 수위와 낮은 수위를 설정합니다."

#: ../../library/asyncio-llapi-index.rst:372
msgid "Transports returned by :meth:`loop.create_datagram_endpoint`:"
msgstr ":meth:`loop.create_datagram_endpoint`\\에서 반환된 트랜스포트:"

#: ../../library/asyncio-llapi-index.rst:374
msgid "Datagram Transports"
msgstr "데이터 그램 트랜스포트"

#: ../../library/asyncio-llapi-index.rst:379
msgid ":meth:`transport.sendto() <DatagramTransport.sendto>`"
msgstr ":meth:`transport.sendto() <DatagramTransport.sendto>`"

#: ../../library/asyncio-llapi-index.rst:380
msgid "Send data to the remote peer."
msgstr "데이터를 원격 피어로 보냅니다."

#: ../../library/asyncio-llapi-index.rst:382
msgid ":meth:`transport.abort() <DatagramTransport.abort>`"
msgstr ":meth:`transport.abort() <DatagramTransport.abort>`"

#: ../../library/asyncio-llapi-index.rst:386
msgid ""
"Low-level transport abstraction over subprocesses. Returned by "
":meth:`loop.subprocess_exec` and :meth:`loop.subprocess_shell`:"
msgstr ""
"서브 프로세스에 대한 저수준 트랜스포트 추상화. :meth:`loop.subprocess_exec` 와 "
":meth:`loop.subprocess_shell`\\가 반환합니다:"

#: ../../library/asyncio-llapi-index.rst:390
msgid "Subprocess Transports"
msgstr "서브 프로세스 트랜스포트"

#: ../../library/asyncio-llapi-index.rst:395
msgid ":meth:`transport.get_pid() <SubprocessTransport.get_pid>`"
msgstr ":meth:`transport.get_pid() <SubprocessTransport.get_pid>`"

#: ../../library/asyncio-llapi-index.rst:396
msgid "Return the subprocess process id."
msgstr "서브 프로세스의 프로세스 ID를 돌려줍니다."

#: ../../library/asyncio-llapi-index.rst:398
msgid ""
":meth:`transport.get_pipe_transport() "
"<SubprocessTransport.get_pipe_transport>`"
msgstr ""
":meth:`transport.get_pipe_transport() "
"<SubprocessTransport.get_pipe_transport>`"

#: ../../library/asyncio-llapi-index.rst:400
msgid ""
"Return the transport for the requested communication pipe (*stdin*, "
"*stdout*, or *stderr*)."
msgstr "요청한 통신 파이프 (*stdin*, *stdout* 또는 *stderr*)에 대한 트랜스포트를 반환합니다."

#: ../../library/asyncio-llapi-index.rst:403
msgid ":meth:`transport.get_returncode() <SubprocessTransport.get_returncode>`"
msgstr ":meth:`transport.get_returncode() <SubprocessTransport.get_returncode>`"

#: ../../library/asyncio-llapi-index.rst:404
msgid "Return the subprocess return code."
msgstr "서브 프로세스 반환 코드를 돌려줍니다."

#: ../../library/asyncio-llapi-index.rst:406
msgid ":meth:`transport.kill() <SubprocessTransport.kill>`"
msgstr ":meth:`transport.kill() <SubprocessTransport.kill>`"

#: ../../library/asyncio-llapi-index.rst:407
msgid "Kill the subprocess."
msgstr "서브 프로세스를 죽입니다."

#: ../../library/asyncio-llapi-index.rst:409
msgid ":meth:`transport.send_signal() <SubprocessTransport.send_signal>`"
msgstr ":meth:`transport.send_signal() <SubprocessTransport.send_signal>`"

#: ../../library/asyncio-llapi-index.rst:410
msgid "Send a signal to the subprocess."
msgstr "서브 프로세스에 시그널을 보냅니다."

#: ../../library/asyncio-llapi-index.rst:412
msgid ":meth:`transport.terminate() <SubprocessTransport.terminate>`"
msgstr ":meth:`transport.terminate() <SubprocessTransport.terminate>`"

#: ../../library/asyncio-llapi-index.rst:413
msgid "Stop the subprocess."
msgstr "서브 프로세스를 중지합니다."

#: ../../library/asyncio-llapi-index.rst:415
msgid ":meth:`transport.close() <SubprocessTransport.close>`"
msgstr ":meth:`transport.close() <SubprocessTransport.close>`"

#: ../../library/asyncio-llapi-index.rst:416
msgid "Kill the subprocess and close all pipes."
msgstr "서브 프로세스를 죽이고 모든 파이프를 닫습니다."

#: ../../library/asyncio-llapi-index.rst:420
msgid "Protocols"
msgstr "프로토콜"

#: ../../library/asyncio-llapi-index.rst:422
msgid "Protocol classes can implement the following **callback methods**:"
msgstr "프로토콜 클래스는 다음 **콜백 메서드를** 구현할 수 있습니다:"

#: ../../library/asyncio-llapi-index.rst:428
msgid "``callback`` :meth:`connection_made() <BaseProtocol.connection_made>`"
msgstr "``callback`` :meth:`connection_made() <BaseProtocol.connection_made>`"

#: ../../library/asyncio-llapi-index.rst:429
msgid "Called when a connection is made."
msgstr "연결이 이루어질 때 호출됩니다."

#: ../../library/asyncio-llapi-index.rst:431
msgid "``callback`` :meth:`connection_lost() <BaseProtocol.connection_lost>`"
msgstr "``callback`` :meth:`connection_lost() <BaseProtocol.connection_lost>`"

#: ../../library/asyncio-llapi-index.rst:432
msgid "Called when the connection is lost or closed."
msgstr "연결이 끊어지거나 닫힐 때 호출됩니다."

#: ../../library/asyncio-llapi-index.rst:434
msgid "``callback`` :meth:`pause_writing() <BaseProtocol.pause_writing>`"
msgstr "``callback`` :meth:`pause_writing() <BaseProtocol.pause_writing>`"

#: ../../library/asyncio-llapi-index.rst:435
msgid "Called when the transport's buffer goes over the high water mark."
msgstr "트랜스포트 버퍼가 높은 수위를 초과할 때 호출됩니다."

#: ../../library/asyncio-llapi-index.rst:437
msgid "``callback`` :meth:`resume_writing() <BaseProtocol.resume_writing>`"
msgstr "``callback`` :meth:`resume_writing() <BaseProtocol.resume_writing>`"

#: ../../library/asyncio-llapi-index.rst:438
msgid "Called when the transport's buffer drains below the low water mark."
msgstr "트랜스포트 버퍼가 낮은 수위 아래로 내려갈 때 호출됩니다."

#: ../../library/asyncio-llapi-index.rst:441
msgid "Streaming Protocols (TCP, Unix Sockets, Pipes)"
msgstr "스트리밍 프로토콜 (TCP, 유닉스 소켓, 파이프)"

#: ../../library/asyncio-llapi-index.rst:446
msgid "``callback`` :meth:`data_received() <Protocol.data_received>`"
msgstr "``callback`` :meth:`data_received() <Protocol.data_received>`"

#: ../../library/asyncio-llapi-index.rst:447
msgid "Called when some data is received."
msgstr "어떤 데이터가 수신될 때 호출됩니다."

#: ../../library/asyncio-llapi-index.rst:449
msgid "``callback`` :meth:`eof_received() <Protocol.eof_received>`"
msgstr "``callback`` :meth:`eof_received() <Protocol.eof_received>`"

#: ../../library/asyncio-llapi-index.rst:450
#: ../../library/asyncio-llapi-index.rst:465
msgid "Called when an EOF is received."
msgstr "EOF가 수신될 때 호출됩니다."

#: ../../library/asyncio-llapi-index.rst:453
msgid "Buffered Streaming Protocols"
msgstr "버퍼 된 스트리밍 프로토콜"

#: ../../library/asyncio-llapi-index.rst:458
msgid "``callback`` :meth:`get_buffer() <BufferedProtocol.get_buffer>`"
msgstr "``callback`` :meth:`get_buffer() <BufferedProtocol.get_buffer>`"

#: ../../library/asyncio-llapi-index.rst:459
msgid "Called to allocate a new receive buffer."
msgstr "새로운 수신 버퍼를 할당하기 위해서 호출됩니다."

#: ../../library/asyncio-llapi-index.rst:461
msgid "``callback`` :meth:`buffer_updated() <BufferedProtocol.buffer_updated>`"
msgstr "``callback`` :meth:`buffer_updated() <BufferedProtocol.buffer_updated>`"

#: ../../library/asyncio-llapi-index.rst:462
msgid "Called when the buffer was updated with the received data."
msgstr "수신된 데이터로 버퍼가 갱신될 때 호출됩니다."

#: ../../library/asyncio-llapi-index.rst:464
msgid "``callback`` :meth:`eof_received() <BufferedProtocol.eof_received>`"
msgstr "``callback`` :meth:`eof_received() <BufferedProtocol.eof_received>`"

#: ../../library/asyncio-llapi-index.rst:468
msgid "Datagram Protocols"
msgstr "데이터 그램 프로토콜"

#: ../../library/asyncio-llapi-index.rst:473
msgid ""
"``callback`` :meth:`datagram_received() "
"<DatagramProtocol.datagram_received>`"
msgstr ""
"``callback`` :meth:`datagram_received() "
"<DatagramProtocol.datagram_received>`"

#: ../../library/asyncio-llapi-index.rst:475
msgid "Called when a datagram is received."
msgstr "데이터 그램이 수신될 때 호출됩니다."

#: ../../library/asyncio-llapi-index.rst:477
msgid "``callback`` :meth:`error_received() <DatagramProtocol.error_received>`"
msgstr "``callback`` :meth:`error_received() <DatagramProtocol.error_received>`"

#: ../../library/asyncio-llapi-index.rst:478
msgid ""
"Called when a previous send or receive operation raises an "
":class:`OSError`."
msgstr "이전의 송신이나 수신 연산이 :class:`OSError`\\를 일으킬 때 호출됩니다."

#: ../../library/asyncio-llapi-index.rst:482
msgid "Subprocess Protocols"
msgstr "서브 프로세스 프로토콜"

#: ../../library/asyncio-llapi-index.rst:487
#, fuzzy
msgid "``callback`` :meth:`~SubprocessProtocol.pipe_data_received`"
msgstr ""
"``callback`` :meth:`pipe_data_received() "
"<SubprocessProtocol.pipe_data_received>`"

#: ../../library/asyncio-llapi-index.rst:488
msgid ""
"Called when the child process writes data into its *stdout* or *stderr* "
"pipe."
msgstr "자식 프로세스가 *stdout* 이나 *stderr* 파이프에 데이터를 쓸 때 호출됩니다."

#: ../../library/asyncio-llapi-index.rst:491
#, fuzzy
msgid "``callback`` :meth:`~SubprocessProtocol.pipe_connection_lost`"
msgstr ""
"``callback`` :meth:`pipe_connection_lost() "
"<SubprocessProtocol.pipe_connection_lost>`"

#: ../../library/asyncio-llapi-index.rst:492
msgid ""
"Called when one of the pipes communicating with the child process is "
"closed."
msgstr "자식 프로세스와 통신하는 파이프 중 하나가 닫힐 때 호출됩니다."

#: ../../library/asyncio-llapi-index.rst:495
msgid "``callback`` :meth:`process_exited() <SubprocessProtocol.process_exited>`"
msgstr "``callback`` :meth:`process_exited() <SubprocessProtocol.process_exited>`"

#: ../../library/asyncio-llapi-index.rst:497
msgid ""
"Called when the child process has exited. It can be called before "
":meth:`~SubprocessProtocol.pipe_data_received` and "
":meth:`~SubprocessProtocol.pipe_connection_lost` methods."
msgstr ""

#: ../../library/asyncio-llapi-index.rst:503
msgid "Event Loop Policies"
msgstr "이벤트 루프 정책"

#: ../../library/asyncio-llapi-index.rst:505
msgid ""
"Policies is a low-level mechanism to alter the behavior of functions like"
" :func:`asyncio.get_event_loop`.  See also the main :ref:`policies "
"section <asyncio-policies>` for more details."
msgstr ""
"정책은 :func:`asyncio.get_event_loop`\\와 같은 함수의 동작을 변경하는 저수준 메커니즘입니다. 자세한 "
"내용은 주 :ref:`정책 절 <asyncio-policies>`\\을 참조하십시오."

#: ../../library/asyncio-llapi-index.rst:511
msgid "Accessing Policies"
msgstr "정책 액세스하기"

#: ../../library/asyncio-llapi-index.rst:516
msgid ":meth:`asyncio.get_event_loop_policy`"
msgstr ":meth:`asyncio.get_event_loop_policy`"

#: ../../library/asyncio-llapi-index.rst:517
msgid "Return the current process-wide policy."
msgstr "현재 프로세스 전반의 정책을 돌려줍니다."

#: ../../library/asyncio-llapi-index.rst:519
msgid ":meth:`asyncio.set_event_loop_policy`"
msgstr ":meth:`asyncio.set_event_loop_policy`"

#: ../../library/asyncio-llapi-index.rst:520
msgid "Set a new process-wide policy."
msgstr "새로운 프로세스 전반의 정책을 설정합니다."

#: ../../library/asyncio-llapi-index.rst:522
msgid ":class:`AbstractEventLoopPolicy`"
msgstr ":class:`AbstractEventLoopPolicy`"

#: ../../library/asyncio-llapi-index.rst:523
msgid "Base class for policy objects."
msgstr "정책 객체의 베이스 클래스."

#~ msgid "Called when the child process has exited."
#~ msgstr "자식 프로세스가 종료할 때 호출됩니다."

