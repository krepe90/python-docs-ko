# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2017, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-04-17 23:44+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: Dong-gweon Oh <flowdas@gmail.com>\n"
"Language-Team: Korean (https://python.flowdas.com)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.17.0\n"

#: ../../library/runpy.rst:2
msgid ":mod:`!runpy` --- Locating and executing Python modules"
msgstr ":mod:`!runpy` --- 파이썬 모듈 찾기와 실행"

#: ../../library/runpy.rst:9
msgid "**Source code:** :source:`Lib/runpy.py`"
msgstr "**소스 코드:** :source:`Lib/runpy.py`"

#: ../../library/runpy.rst:13
msgid ""
"The :mod:`runpy` module is used to locate and run Python modules without "
"importing them first. Its main use is to implement the :option:`-m` "
"command line switch that allows scripts to be located using the Python "
"module namespace rather than the filesystem."
msgstr ""
":mod:`runpy` 모듈은 파이썬 모듈을 먼저 임포트 하지 않고 찾아서 실행하는 데 사용합니다. 주요 용도는 파일 시스템이 아닌"
" 파이썬 모듈 이름 공간을 사용하여 스크립트를 찾을 수 있는 :option:`-m` 명령 줄 스위치를 구현하는 것입니다."

#: ../../library/runpy.rst:18
msgid ""
"Note that this is *not* a sandbox module - all code is executed in the "
"current process, and any side effects (such as cached imports of other "
"modules) will remain in place after the functions have returned."
msgstr ""
"이것은 샌드박스 모듈이 *아닙니다* - 모든 코드가 현재 프로세스에서 실행되고, 모든 부작용(가령 다른 모듈의 캐시된 임포트)은 "
"함수가 반환된 후에도 그대로 유지됩니다."

#: ../../library/runpy.rst:22
msgid ""
"Furthermore, any functions and classes defined by the executed code are "
"not guaranteed to work correctly after a :mod:`runpy` function has "
"returned. If that limitation is not acceptable for a given use case, "
":mod:`importlib` is likely to be a more suitable choice than this module."
msgstr ""
"또한, 실행된 코드에서 정의된 모든 함수와 클래스는 :mod:`runpy` 함수가 반환된 후 올바르게 작동하지 않을 수 있습니다. "
"이러한 제한이 주어진 사용 사례에 적합하지 않으면, 이 모듈보다 :mod:`importlib`\\가 더 적합한 선택일 수 있습니다."

#: ../../library/runpy.rst:27
msgid "The :mod:`runpy` module provides two functions:"
msgstr ":mod:`runpy` 모듈은 두 가지 함수를 제공합니다:"

#: ../../library/runpy.rst:35
msgid ""
"Execute the code of the specified module and return the resulting "
"module's globals dictionary. The module's code is first located using the"
" standard import mechanism (refer to :pep:`302` for details) and then "
"executed in a fresh module namespace."
msgstr ""
"지정된 모듈의 코드를 실행하고 결과 모듈의 전역 딕셔너리를 반환합니다. 모듈의 코드는 먼저 표준 임포트 메커니즘(자세한 내용은 "
":pep:`302`\\를 참조하십시오)을 사용하여 찾은 다음 새로운 모듈 이름 공간에서 실행됩니다."

#: ../../library/runpy.rst:40
msgid ""
"The *mod_name* argument should be an absolute module name. If the module "
"name refers to a package rather than a normal module, then that package "
"is imported and the :mod:`__main__` submodule within that package is then"
" executed and the resulting module globals dictionary returned."
msgstr ""
"*mod_name* 인자는 절대 모듈 이름이어야 합니다. 모듈 이름이 일반 모듈이 아닌 패키지를 참조하면, 해당 패키지를 임포트하고"
" 그 패키지 내의 :mod:`__main__` 서브 모듈을 실행하고 결과 모듈 전역 딕셔너리를 반환합니다."

#: ../../library/runpy.rst:46
msgid ""
"The optional dictionary argument *init_globals* may be used to pre-"
"populate the module's globals dictionary before the code is executed. "
"*init_globals* will not be modified. If any of the special global "
"variables below are defined in *init_globals*, those definitions are "
"overridden by :func:`run_module`."
msgstr ""
"선택적 딕셔너리 인자 *init_globals*\\는 코드가 실행되기 전에 모듈의 전역 딕셔너리를 미리 채우기 위해 사용될 수 "
"있습니다. *init_globals*\\는 수정되지 않습니다. 아래의 특수 전역 변수가 *init_globals*\\에 정의되어 "
"있으면, 해당 정의가 :func:`run_module`\\에 의해 대체됩니다."

#: ../../library/runpy.rst:52 ../../library/runpy.rst:127
msgid ""
"The special global variables ``__name__``, ``__spec__``, ``__file__``, "
"``__cached__``, ``__loader__`` and ``__package__`` are set in the globals"
" dictionary before the module code is executed. (Note that this is a "
"minimal set of variables - other variables may be set implicitly as an "
"interpreter implementation detail.)"
msgstr ""
"특수 전역 변수 ``__name__``, ``__spec__``, ``__file__``, ``__cached__``, "
"``__loader__`` 및 ``__package__``\\는 모듈 코드가 실행되기 전에 전역 딕셔너리에 설정됩니다. (이 변수는"
" 최소한의 변수 집합임에 유의하십시오 - 인터프리터 구현 세부 사항에 따라 다른 변수가 묵시적으로 설정될 수 있습니다.)"

#: ../../library/runpy.rst:58
msgid ""
"``__name__`` is set to *run_name* if this optional argument is not "
":const:`None`, to ``mod_name + '.__main__'`` if the named module is a "
"package and to the *mod_name* argument otherwise."
msgstr ""
"``__name__``\\은 (이 선택적 인자가 :const:`None`\\이 아니면) *run_name*\\으로, 명명된 모듈이 "
"패키지면 ``mod_name + '.__main__'``\\으로, 그렇지 않으면 *mod_name* 인자로 설정됩니다."

#: ../../library/runpy.rst:62
msgid ""
"``__spec__`` will be set appropriately for the *actually* imported module"
" (that is, ``__spec__.name`` will always be *mod_name* or ``mod_name + "
"'.__main__'``, never *run_name*)."
msgstr ""
"``__spec__``\\은 *실제로* 임포트 된 모듈에 맞게 설정됩니다 (즉, ``__spec__.name``\\은 항상 "
"*mod_name*\\이나 ``mod_name + '.__main__'``\\이 됩니다, 절대 *run_name*\\은 아닙니다)."

#: ../../library/runpy.rst:66
msgid ""
"``__file__``, ``__cached__``, ``__loader__`` and ``__package__`` are "
":ref:`set as normal <import-mod-attrs>` based on the module spec."
msgstr ""
"``__file__``, ``__cached__``, ``__loader__`` 및 ``__package__``\\는 모듈 스펙에 "
"따라 :ref:`표준적으로 설정됩니다 <import-mod-attrs>`."

#: ../../library/runpy.rst:69
msgid ""
"If the argument *alter_sys* is supplied and evaluates to :const:`True`, "
"then ``sys.argv[0]`` is updated with the value of ``__file__`` and "
"``sys.modules[__name__]`` is updated with a temporary module object for "
"the module being executed. Both ``sys.argv[0]`` and "
"``sys.modules[__name__]`` are restored to their original values before "
"the function returns."
msgstr ""
"인자 *alter_sys*\\가 제공되고 :const:`True`\\로 평가되면, ``sys.argv[0]``\\은 "
"``__file__`` 값으로 갱신되고 ``sys.modules[__name__]``\\은 실행 중인 모듈에 대한 임시 모듈 객체로"
" 갱신됩니다. ``sys.argv[0]``\\과 ``sys.modules[__name__]``\\은 함수가 반환되기 전에 원래 "
"값으로 복원됩니다."

#: ../../library/runpy.rst:75
msgid ""
"Note that this manipulation of :mod:`sys` is not thread-safe. Other "
"threads may see the partially initialised module, as well as the altered "
"list of arguments. It is recommended that the ``sys`` module be left "
"alone when invoking this function from threaded code."
msgstr ""
"이 :mod:`sys` 조작은 스레드-안전하지 않습니다. 다른 스레드가 부분적으로 초기화된 모듈과 변경된 인자 목록을 볼 수 "
"있습니다. 스레드를 사용하는 코드에서 이 함수를 호출할 때 ``sys`` 모듈을 단독으로 두는 것이 좋습니다."

#: ../../library/runpy.rst:81
msgid ""
"The :option:`-m` option offering equivalent functionality from the "
"command line."
msgstr "명령 줄에서 동등한 기능을 제공하는 :option:`-m` 옵션."

#: ../../library/runpy.rst:84
msgid ""
"Added ability to execute packages by looking for a :mod:`__main__` "
"submodule."
msgstr ":mod:`__main__` 서브 모듈을 찾아 패키지를 실행할 수 있는 기능 추가."

#: ../../library/runpy.rst:87
msgid "Added ``__cached__`` global variable (see :pep:`3147`)."
msgstr "``__cached__`` 전역 변수 추가 (:pep:`3147`\\을 참조하십시오)."

#: ../../library/runpy.rst:90
msgid ""
"Updated to take advantage of the module spec feature added by :pep:`451`."
" This allows ``__cached__`` to be set correctly for modules run this way,"
" as well as ensuring the real module name is always accessible as "
"``__spec__.name``."
msgstr ""
":pep:`451`\\이 추가한 모듈 스펙 기능을 활용하도록 갱신되었습니다. 이것은 실제 모듈 이름을 항상 "
"``__spec__.name``\\으로 액세스할 수 있으면서, ``__cached__``\\가 이 방법으로 실행되는 모듈에 대해 "
"올바르게 설정되도록 합니다."

#: ../../library/runpy.rst:96
msgid ""
"The setting of ``__cached__``, ``__loader__``, and ``__package__`` are "
"deprecated. See :class:`~importlib.machinery.ModuleSpec` for "
"alternatives."
msgstr ""
"``__cached__``, ``__loader__`` 및 ``__package__``\\의 설정은 폐지되었습니다. 대안은 "
":class:`~importlib.machinery.ModuleSpec`\\을 참조하세요."

#: ../../library/runpy.rst:106
msgid ""
"Execute the code at the named filesystem location and return the "
"resulting module's globals dictionary. As with a script name supplied to "
"the CPython command line, *file_path* may refer to a Python source file, "
"a compiled bytecode file or a valid :data:`sys.path` entry containing a "
":mod:`__main__` module (e.g. a zipfile containing a top-level "
":file:`__main__.py` file)."
msgstr ""
"명명된 파일 시스템 위치에 있는 코드를 실행하고 결과 모듈의 전역 딕셔너리를 반환합니다. CPython 명령 줄에 제공된 스크립트 "
"이름과 마찬가지로, *file_path*\\는 파이썬 소스 파일, 컴파일된 바이트 코드 파일 또는 :mod:`__main__` "
"모듈이 포함된 유효한 :data:`sys.path` 항목(예를 들어, 최상위 수준 :file:`__main__.py` 파일을 "
"포함하는 zip 파일)을 가리킬 수 있습니다."

#: ../../library/runpy.rst:113
msgid ""
"For a simple script, the specified code is simply executed in a fresh "
"module namespace. For a valid :data:`sys.path` entry (typically a zipfile"
" or directory), the entry is first added to the beginning of "
"``sys.path``. The function then looks for and executes a :mod:`__main__` "
"module using the updated path. Note that there is no special protection "
"against invoking an existing ``__main__`` entry located elsewhere on "
"``sys.path`` if there is no such module at the specified location."
msgstr ""
"간단한 스크립트의 경우, 지정된 코드는 단순히 새로운 모듈 이름 공간에서 실행됩니다. 유효한 :data:`sys.path` "
"항목(보통 zip 파일이나 디렉터리)의 경우, 항목이 먼저 ``sys.path``\\의 시작 부분에 추가됩니다. 그런 다음 함수는 "
"갱신된 경로를 사용하여 :mod:`__main__` 모듈을 찾아 실행합니다. 지정된 위치에 해당 모듈이 없을 때 "
"``sys.path``\\의 다른 위치에 있는 기존 ``__main__`` 항목을 호출하는 것을 막는 특별한 보호 장치가 없다는 "
"점에 유의하십시오."

#: ../../library/runpy.rst:121
msgid ""
"The optional dictionary argument *init_globals* may be used to pre-"
"populate the module's globals dictionary before the code is executed. "
"*init_globals* will not be modified. If any of the special global "
"variables below are defined in *init_globals*, those definitions are "
"overridden by :func:`run_path`."
msgstr ""
"선택적 딕셔너리 인자 *init_globals*\\는 코드가 실행되기 전에 모듈의 전역 딕셔너리를 미리 채우기 위해 사용될 수 "
"있습니다. *init_globals*\\는 수정되지 않습니다. 아래의 특수 전역 변수가 *init_globals*\\에 정의되어 "
"있으면, 해당 정의가 :func:`run_path`\\에 의해 대체됩니다."

#: ../../library/runpy.rst:133
msgid ""
"``__name__`` is set to *run_name* if this optional argument is not "
":const:`None` and to ``'<run_path>'`` otherwise."
msgstr ""
"``__name__``\\은 (이 선택적 인자가 :const:`None`\\이 아니면) *run_name*\\으로, 그렇지 않으면 "
"``'<run_path>'``\\로 설정됩니다."

#: ../../library/runpy.rst:136
msgid ""
"If *file_path* directly references a script file (whether as source or as"
" precompiled byte code), then ``__file__`` will be set to *file_path*, "
"and ``__spec__``, ``__cached__``, ``__loader__`` and ``__package__`` will"
" all be set to :const:`None`."
msgstr ""
"*file_path*\\가 스크립트 파일(소스나 사전 컴파일된 바이트 코드)을 직접 참조하면, ``__file__``\\은 "
"*file_path*\\로 설정되고 ``__spec__``, ``__cached__``, ``__loader__`` 및 "
"``__package__``\\는 모두 :const:`None`\\으로 설정됩니다."

#: ../../library/runpy.rst:141
msgid ""
"If *file_path* is a reference to a valid :data:`sys.path` entry, then "
"``__spec__`` will be set appropriately for the imported :mod:`__main__` "
"module (that is, ``__spec__.name`` will always be ``__main__``). "
"``__file__``, ``__cached__``, ``__loader__`` and ``__package__`` will be "
":ref:`set as normal <import-mod-attrs>` based on the module spec."
msgstr ""
"*file_path*\\가 유효한 :data:`sys.path` 항목에 대한 참조면, ``__spec__``\\은 임포트 된 "
":mod:`__main__` 모듈에 대해 적절하게 설정됩니다 (즉, ``__spec__.name``\\은 항상 "
"``__main__``\\이 됩니다). ``__file__``, ``__cached__``, ``__loader__`` 및 "
"``__package__``\\는 모듈 스펙에 따라 :ref:`표준적으로 설정됩니다 <import-mod-attrs>`."

#: ../../library/runpy.rst:147
msgid ""
"A number of alterations are also made to the :mod:`sys` module. Firstly, "
":data:`sys.path` may be altered as described above. ``sys.argv[0]`` is "
"updated with the value of *file_path* and ``sys.modules[__name__]`` is "
"updated with a temporary module object for the module being executed. All"
" modifications to items in :mod:`sys` are reverted before the function "
"returns."
msgstr ""
":mod:`sys` 모듈에도 여러 가지 변경이 적용됩니다. 첫째, :data:`sys.path`\\는 위에서 설명한 것처럼 변경될 "
"수 있습니다. ``sys.argv[0]``\\은 *file_path* 값으로 갱신되고 "
"``sys.modules[__name__]``\\은 실행 중인 모듈에 대한 임시 모듈 객체로 갱신됩니다. 함수가 반환되기 전에 "
":mod:`sys`\\의 항목에 대한 모든 수정 내용이 되돌려집니다."

#: ../../library/runpy.rst:154
msgid ""
"Note that, unlike :func:`run_module`, the alterations made to :mod:`sys` "
"are not optional in this function as these adjustments are essential to "
"allowing the execution of :data:`sys.path` entries. As the thread-safety "
"limitations still apply, use of this function in threaded code should be "
"either serialised with the import lock or delegated to a separate "
"process."
msgstr ""
":func:`run_module`\\과 달리, :mod:`sys`\\에 대한 변경은 이 함수에서는 선택 사항이 아닌데, 이 조정이 "
":data:`sys.path` 항목의 실행을 허용하는 데 필수적이기 때문입니다. 스레드-안전 제약 사항이 계속 적용되므로, 스레드를"
" 사용하는 코드에서 이 함수를 사용하려면 임포트 잠금을 사용하여 직렬화하거나 별도의 프로세스에 위임해야 합니다."

#: ../../library/runpy.rst:161
msgid ""
":ref:`using-on-interface-options` for equivalent functionality on the "
"command line (``python path/to/script``)."
msgstr ""
"명령 줄에서의 동등한 기능에 대한 :ref:`using-on-interface-options` (``python "
"path/to/script``)."

#: ../../library/runpy.rst:166
msgid ""
"Updated to take advantage of the module spec feature added by :pep:`451`."
" This allows ``__cached__`` to be set correctly in the case where "
"``__main__`` is imported from a valid :data:`sys.path` entry rather than "
"being executed directly."
msgstr ""
":pep:`451`\\이 추가한 모듈 스펙 기능을 활용하도록 갱신되었습니다. 이것은 ``__main__``\\이 직접 실행되는 대신"
" 유효한 :data:`sys.path` 항목에서 임포트 될 때 ``__cached__``\\가 올바르게 설정되도록 합니다."

#: ../../library/runpy.rst:172
msgid ""
"The setting of ``__cached__``, ``__loader__``, and ``__package__`` are "
"deprecated."
msgstr "``__cached__``, ``__loader__`` 및 ``__package__``\\의 설정은 폐지되었습니다."

#: ../../library/runpy.rst:178
msgid ":pep:`338` -- Executing modules as scripts"
msgstr ":pep:`338` -- 모듈을 스크립트로 실행하기"

#: ../../library/runpy.rst:179 ../../library/runpy.rst:182
msgid "PEP written and implemented by Nick Coghlan."
msgstr "Nick Coghlan이 작성하고 구현한 PEP."

#: ../../library/runpy.rst:181
msgid ":pep:`366` -- Main module explicit relative imports"
msgstr ":pep:`366` -- 메인 모듈 명시적 상대 임포트"

#: ../../library/runpy.rst:184
msgid ":pep:`451` -- A ModuleSpec Type for the Import System"
msgstr ":pep:`451` -- 임포트 시스템의 ModuleSpec 형"

#: ../../library/runpy.rst:185
msgid "PEP written and implemented by Eric Snow"
msgstr "Eric Snow가 작성하고 구현한 PEP"

#: ../../library/runpy.rst:187
msgid ":ref:`using-on-general` - CPython command line details"
msgstr ":ref:`using-on-general` - CPython 명령 줄 세부 사항"

#: ../../library/runpy.rst:189
msgid "The :func:`importlib.import_module` function"
msgstr ":func:`importlib.import_module` 함수"

#: ../../library/runpy.rst:32 ../../library/runpy.rst:103
msgid "module"
msgstr "모듈"

#: ../../library/runpy.rst:32 ../../library/runpy.rst:103
msgid "__main__"
msgstr "__main__"

