# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2017, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-04-17 23:44+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: Dong-gweon Oh <flowdas@gmail.com>\n"
"Language-Team: Korean (https://python.flowdas.com)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.17.0\n"

#: ../../library/asyncio-queue.rst:7
msgid "Queues"
msgstr "큐"

#: ../../library/asyncio-queue.rst:9
msgid "**Source code:** :source:`Lib/asyncio/queues.py`"
msgstr "**소스 코드:** :source:`Lib/asyncio/queues.py`"

#: ../../library/asyncio-queue.rst:13
msgid ""
"asyncio queues are designed to be similar to classes of the :mod:`queue` "
"module.  Although asyncio queues are not thread-safe, they are designed "
"to be used specifically in async/await code."
msgstr ""
"asyncio 큐는 :mod:`queue` 모듈의 클래스와 유사하도록 설계되었습니다. asyncio 큐는 스레드 안전하지 않지만, "
"async/await 코드에서 사용되도록 설계되었습니다."

#: ../../library/asyncio-queue.rst:17
msgid ""
"Note that methods of asyncio queues don't have a *timeout* parameter; use"
" :func:`asyncio.wait_for` function to do queue operations with a timeout."
msgstr ""
"asyncio 큐의 메서드에는 *timeout* 매개 변수가 없습니다; 시간제한이 있는 큐 연산을 하려면 "
":func:`asyncio.wait_for` 함수를 사용하십시오."

#: ../../library/asyncio-queue.rst:21
msgid "See also the `Examples`_ section below."
msgstr "아래의 `예제 <Examples_>`_ 절도 참조하십시오."

#: ../../library/asyncio-queue.rst:24
msgid "Queue"
msgstr "Queue"

#: ../../library/asyncio-queue.rst:28
msgid "A first in, first out (FIFO) queue."
msgstr "선입 선출 (FIFO) 큐."

#: ../../library/asyncio-queue.rst:30
msgid ""
"If *maxsize* is less than or equal to zero, the queue size is infinite.  "
"If it is an integer greater than ``0``, then ``await put()`` blocks when "
"the queue reaches *maxsize* until an item is removed by :meth:`get`."
msgstr ""
"*maxsize*\\가 0보다 작거나 같으면 큐 크기는 무한합니다. ``0``\\보다 큰 정수면, 큐가 *maxsize*\\에 "
"도달했을 때 :meth:`get`\\이 항목을 제거할 때까지 ``await put()``\\이 블록합니다."

#: ../../library/asyncio-queue.rst:35
msgid ""
"Unlike the standard library threading :mod:`queue`, the size of the queue"
" is always known and can be returned by calling the :meth:`qsize` method."
msgstr ""
"표준 라이브러리의 스레드를 쓰는 :mod:`queue`\\와는 달리, 큐의 크기는 항상 알려져 있으며 :meth:`qsize` "
"메서드를 호출하여 얻을 수 있습니다."

#: ../../library/asyncio-queue.rst:39
#, fuzzy
msgid "Removed the *loop* parameter."
msgstr "*loop* 매개 변수"

#: ../../library/asyncio-queue.rst:43
msgid "This class is :ref:`not thread safe <asyncio-multithreading>`."
msgstr "이 클래스는 :ref:`스레드 안전하지 않습니다 <asyncio-multithreading>`."

#: ../../library/asyncio-queue.rst:47
msgid "Number of items allowed in the queue."
msgstr "큐에 허용되는 항목 수."

#: ../../library/asyncio-queue.rst:51
msgid "Return ``True`` if the queue is empty, ``False`` otherwise."
msgstr "큐가 비어 있으면 ``True``\\를 반환하고, 그렇지 않으면 ``False``\\를 반환합니다."

#: ../../library/asyncio-queue.rst:55
msgid "Return ``True`` if there are :attr:`maxsize` items in the queue."
msgstr "큐에 :attr:`maxsize` 항목이 있으면 ``True``\\를 반환합니다."

#: ../../library/asyncio-queue.rst:57
#, fuzzy
msgid ""
"If the queue was initialized with ``maxsize=0`` (the default), then "
":meth:`full` never returns ``True``."
msgstr ""
"큐가 ``maxsize=0`` (기본값)으로 초기화되었으면, :meth:`full()`\\은 절대 ``True``\\를 반환하지 "
"않습니다."

#: ../../library/asyncio-queue.rst:63
msgid ""
"Remove and return an item from the queue. If queue is empty, wait until "
"an item is available."
msgstr "큐에서 항목을 제거하고 반환합니다. 큐가 비어 있으면, 항목이 들어올 때까지 기다립니다."

#: ../../library/asyncio-queue.rst:66
msgid ""
"Raises :exc:`QueueShutDown` if the queue has been shut down and is empty,"
" or if the queue has been shut down immediately."
msgstr ""

#: ../../library/asyncio-queue.rst:71
msgid ""
"Return an item if one is immediately available, else raise "
":exc:`QueueEmpty`."
msgstr "항목을 즉시 사용할 수 있으면 항목을 반환하고, 그렇지 않으면 :exc:`QueueEmpty`\\를 발생시킵니다."

#: ../../library/asyncio-queue.rst:77
msgid "Block until all items in the queue have been received and processed."
msgstr "큐의 모든 항목을 수신하여 처리할 때까지 블록합니다."

#: ../../library/asyncio-queue.rst:79
msgid ""
"The count of unfinished tasks goes up whenever an item is added to the "
"queue. The count goes down whenever a consumer coroutine calls "
":meth:`task_done` to indicate that the item was retrieved and all work on"
" it is complete.  When the count of unfinished tasks drops to zero, "
":meth:`join` unblocks."
msgstr ""
"완료되지 않은 작업 수는 항목이 큐에 추가될 때마다 증가합니다. 이 수는 소비자 코루틴이 항목을 수신했고 그 항목에 관한 작업이 "
"모두 완료되었음을 나타내는 :meth:`task_done`\\를 호출할 때마다 감소합니다. 완료되지 않은 작업 수가 0으로 떨어지면"
" :meth:`join`\\가 블록 해제됩니다."

#: ../../library/asyncio-queue.rst:88
msgid ""
"Put an item into the queue. If the queue is full, wait until a free slot "
"is available before adding the item."
msgstr "큐에 항목을 넣습니다. 큐가 가득 차면, 항목을 추가할 빈자리가 생길 때까지 기다립니다."

#: ../../library/asyncio-queue.rst:91
msgid "Raises :exc:`QueueShutDown` if the queue has been shut down."
msgstr ""

#: ../../library/asyncio-queue.rst:95
msgid "Put an item into the queue without blocking."
msgstr "블록하지 않고 항목을 큐에 넣습니다."

#: ../../library/asyncio-queue.rst:97
msgid "If no free slot is immediately available, raise :exc:`QueueFull`."
msgstr "자리가 즉시 나지 않으면, :exc:`QueueFull`\\를 일으킵니다."

#: ../../library/asyncio-queue.rst:101
msgid "Return the number of items in the queue."
msgstr "큐에 있는 항목 수를 돌려줍니다."

#: ../../library/asyncio-queue.rst:105
msgid ""
"Shut down the queue, making :meth:`~Queue.get` and :meth:`~Queue.put` "
"raise :exc:`QueueShutDown`."
msgstr ""

#: ../../library/asyncio-queue.rst:108
msgid ""
"By default, :meth:`~Queue.get` on a shut down queue will only raise once "
"the queue is empty. Set *immediate* to true to make :meth:`~Queue.get` "
"raise immediately instead."
msgstr ""

#: ../../library/asyncio-queue.rst:112
msgid ""
"All blocked callers of :meth:`~Queue.put` and :meth:`~Queue.get` will be "
"unblocked. If *immediate* is true, a task will be marked as done for each"
" remaining item in the queue, which may unblock callers of "
":meth:`~Queue.join`."
msgstr ""

#: ../../library/asyncio-queue.rst:121
#, fuzzy
msgid "Indicate that a formerly enqueued work item is complete."
msgstr "이전에 큐에 넣은 작업이 완료되었음을 나타냅니다."

#: ../../library/asyncio-queue.rst:123
#, fuzzy
msgid ""
"Used by queue consumers. For each :meth:`~Queue.get` used to fetch a work"
" item, a subsequent call to :meth:`task_done` tells the queue that the "
"processing on the work item is complete."
msgstr ""
"큐 소비자가 사용합니다. 작업을 꺼내는 데 사용된 :meth:`~Queue.get` 마다, 뒤따르는 :meth:`task_done`"
" 호출은 작업에 관한 처리가 완료되었음을 큐에 알려줍니다."

#: ../../library/asyncio-queue.rst:127
msgid ""
"If a :meth:`join` is currently blocking, it will resume when all items "
"have been processed (meaning that a :meth:`task_done` call was received "
"for every item that had been :meth:`~Queue.put` into the queue)."
msgstr ""
":meth:`join`\\이 현재 블록 중이면, 모든 항목이 처리될 때 다시 시작됩니다 (큐에 "
":meth:`~Queue.put`\\한 모든 항목에 대해 :meth:`task_done` 호출이 수신되었음을 뜻합니다)."

#: ../../library/asyncio-queue.rst:132
msgid ""
"``shutdown(immediate=True)`` calls :meth:`task_done` for each remaining "
"item in the queue."
msgstr ""

#: ../../library/asyncio-queue.rst:135
msgid ""
"Raises :exc:`ValueError` if called more times than there were items "
"placed in the queue."
msgstr "큐에 넣은 항목보다 더 많이 호출되면 :exc:`ValueError`\\를 발생시킵니다."

#: ../../library/asyncio-queue.rst:140
msgid "Priority Queue"
msgstr "우선순위 큐"

#: ../../library/asyncio-queue.rst:144
msgid ""
"A variant of :class:`Queue`; retrieves entries in priority order (lowest "
"first)."
msgstr ":class:`Queue`\\의 변형; 우선순위 순서로 항목을 꺼냅니다 (가장 낮은 우선순위가 처음입니다)."

#: ../../library/asyncio-queue.rst:147
msgid "Entries are typically tuples of the form ``(priority_number, data)``."
msgstr "엔트리는 일반적으로 ``(priority_number, data)`` 형식의 튜플입니다."

#: ../../library/asyncio-queue.rst:152
msgid "LIFO Queue"
msgstr "LIFO 큐"

#: ../../library/asyncio-queue.rst:156
msgid ""
"A variant of :class:`Queue` that retrieves most recently added entries "
"first (last in, first out)."
msgstr "가장 최근에 추가된 항목을 먼저 꺼내는 :class:`Queue`\\의 변형 (후입 선출)."

#: ../../library/asyncio-queue.rst:161
msgid "Exceptions"
msgstr "예외"

#: ../../library/asyncio-queue.rst:165
msgid ""
"This exception is raised when the :meth:`~Queue.get_nowait` method is "
"called on an empty queue."
msgstr "이 예외는 :meth:`~Queue.get_nowait` 메서드가 빈 큐에 호출될 때 발생합니다."

#: ../../library/asyncio-queue.rst:171
msgid ""
"Exception raised when the :meth:`~Queue.put_nowait` method is called on a"
" queue that has reached its *maxsize*."
msgstr ":meth:`~Queue.put_nowait` 메서드가 *maxsize*\\에 도달한 큐에 호출될 때 발생하는 예외입니다."

#: ../../library/asyncio-queue.rst:177
#, fuzzy
msgid ""
"Exception raised when :meth:`~Queue.put` or :meth:`~Queue.get` is called "
"on a queue which has been shut down."
msgstr ":meth:`~Queue.put_nowait` 메서드가 *maxsize*\\에 도달한 큐에 호출될 때 발생하는 예외입니다."

#: ../../library/asyncio-queue.rst:184
msgid "Examples"
msgstr "예제"

#: ../../library/asyncio-queue.rst:188
msgid ""
"Queues can be used to distribute workload between several concurrent "
"tasks::"
msgstr "큐를 사용하여 여러 동시 태스크로 작업 부하를 분산시킬 수 있습니다::"

#: ../../library/asyncio-queue.rst:191
#, python-brace-format
msgid ""
"import asyncio\n"
"import random\n"
"import time\n"
"\n"
"\n"
"async def worker(name, queue):\n"
"    while True:\n"
"        # Get a \"work item\" out of the queue.\n"
"        sleep_for = await queue.get()\n"
"\n"
"        # Sleep for the \"sleep_for\" seconds.\n"
"        await asyncio.sleep(sleep_for)\n"
"\n"
"        # Notify the queue that the \"work item\" has been processed.\n"
"        queue.task_done()\n"
"\n"
"        print(f'{name} has slept for {sleep_for:.2f} seconds')\n"
"\n"
"\n"
"async def main():\n"
"    # Create a queue that we will use to store our \"workload\".\n"
"    queue = asyncio.Queue()\n"
"\n"
"    # Generate random timings and put them into the queue.\n"
"    total_sleep_time = 0\n"
"    for _ in range(20):\n"
"        sleep_for = random.uniform(0.05, 1.0)\n"
"        total_sleep_time += sleep_for\n"
"        queue.put_nowait(sleep_for)\n"
"\n"
"    # Create three worker tasks to process the queue concurrently.\n"
"    tasks = []\n"
"    for i in range(3):\n"
"        task = asyncio.create_task(worker(f'worker-{i}', queue))\n"
"        tasks.append(task)\n"
"\n"
"    # Wait until the queue is fully processed.\n"
"    started_at = time.monotonic()\n"
"    await queue.join()\n"
"    total_slept_for = time.monotonic() - started_at\n"
"\n"
"    # Cancel our worker tasks.\n"
"    for task in tasks:\n"
"        task.cancel()\n"
"    # Wait until all worker tasks are cancelled.\n"
"    await asyncio.gather(*tasks, return_exceptions=True)\n"
"\n"
"    print('====')\n"
"    print(f'3 workers slept in parallel for {total_slept_for:.2f} "
"seconds')\n"
"    print(f'total expected sleep time: {total_sleep_time:.2f} seconds')\n"
"\n"
"\n"
"asyncio.run(main())"
msgstr ""

