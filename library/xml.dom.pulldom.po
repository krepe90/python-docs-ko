# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2017, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-04-17 23:44+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: Dong-gweon Oh <flowdas@gmail.com>\n"
"Language-Team: Korean (https://python.flowdas.com)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.17.0\n"

#: ../../library/xml.dom.pulldom.rst:2
msgid ":mod:`!xml.dom.pulldom` --- Support for building partial DOM trees"
msgstr ":mod:`!xml.dom.pulldom` --- 부분 DOM 트리 구축 지원"

#: ../../library/xml.dom.pulldom.rst:9
msgid "**Source code:** :source:`Lib/xml/dom/pulldom.py`"
msgstr "**소스 코드:** :source:`Lib/xml/dom/pulldom.py`"

#: ../../library/xml.dom.pulldom.rst:13
msgid ""
"The :mod:`xml.dom.pulldom` module provides a \"pull parser\" which can "
"also be asked to produce DOM-accessible fragments of the document where "
"necessary. The basic concept involves pulling \"events\" from a stream of"
" incoming XML and processing them. In contrast to SAX which also employs "
"an event-driven processing model together with callbacks, the user of a "
"pull parser is responsible for explicitly pulling events from the stream,"
" looping over those events until either processing is finished or an "
"error condition occurs."
msgstr ""
":mod:`xml.dom.pulldom` 모듈은 필요할 때 문서의 DOM 액세스 가능한 조각을 생성하도록 요청할 수 있는 \"풀 "
"구문 분석기 (pull parser)\"를 제공합니다. 기본 개념은 들어오는 XML 스트림에서 \"이벤트\"를 끌어당겨서(pull)"
" 처리하는 것입니다. 콜백을 통한 이벤트 구동 처리 모델(event-driven processing model)을 사용하는 SAX와"
" 달리 풀 구문 분석기 사용자는 스트림에서 이벤트를 명시적으로 가져와서 처리가 완료되거나 에러 조건이 발생할 때까지 그 이벤트들을 "
"루핑해야 합니다."

#: ../../library/xml.dom.pulldom.rst:24
msgid ""
"The :mod:`xml.dom.pulldom` module is not secure against maliciously "
"constructed data.  If you need to parse untrusted or unauthenticated data"
" see :ref:`xml-vulnerabilities`."
msgstr ""
":mod:`xml.dom.pulldom` 모듈은 악의적으로 구성된 데이터로부터 안전하지 않습니다. 신뢰할 수 없거나 인증되지 않은 "
"데이터를 구문 분석해야 하면 :ref:`xml-vulnerabilities`\\를 참조하십시오."

#: ../../library/xml.dom.pulldom.rst:30
msgid ""
"The SAX parser no longer processes general external entities by default "
"to increase security by default. To enable processing of external "
"entities, pass a custom parser instance in::"
msgstr ""
"SAX 구문 분석기는 보안을 강화하기 위해 더는 일반 외부 엔티티를 처리하지 않습니다. 외부 엔티티를 처리를 활성화하려면, 사용자 "
"정의 구문 분석기 인스턴스를 전달하십시오::"

#: ../../library/xml.dom.pulldom.rst:34
msgid ""
"from xml.dom.pulldom import parse\n"
"from xml.sax import make_parser\n"
"from xml.sax.handler import feature_external_ges\n"
"\n"
"parser = make_parser()\n"
"parser.setFeature(feature_external_ges, True)\n"
"parse(filename, parser=parser)"
msgstr ""
"from xml.dom.pulldom import parse\n"
"from xml.sax import make_parser\n"
"from xml.sax.handler import feature_external_ges\n"
"\n"
"parser = make_parser()\n"
"parser.setFeature(feature_external_ges, True)\n"
"parse(filename, parser=parser)"

#: ../../library/xml.dom.pulldom.rst:43
msgid "Example::"
msgstr "예::"

#: ../../library/xml.dom.pulldom.rst:45
msgid ""
"from xml.dom import pulldom\n"
"\n"
"doc = pulldom.parse('sales_items.xml')\n"
"for event, node in doc:\n"
"    if event == pulldom.START_ELEMENT and node.tagName == 'item':\n"
"        if int(node.getAttribute('price')) > 50:\n"
"            doc.expandNode(node)\n"
"            print(node.toxml())"
msgstr ""
"from xml.dom import pulldom\n"
"\n"
"doc = pulldom.parse('sales_items.xml')\n"
"for event, node in doc:\n"
"    if event == pulldom.START_ELEMENT and node.tagName == 'item':\n"
"        if int(node.getAttribute('price')) > 50:\n"
"            doc.expandNode(node)\n"
"            print(node.toxml())"

#: ../../library/xml.dom.pulldom.rst:54
msgid "``event`` is a constant and can be one of:"
msgstr "``event``\\는 상수이며 다음 중 하나일 수 있습니다:"

#: ../../library/xml.dom.pulldom.rst:56
msgid ":data:`START_ELEMENT`"
msgstr ":data:`START_ELEMENT`"

#: ../../library/xml.dom.pulldom.rst:57
msgid ":data:`END_ELEMENT`"
msgstr ":data:`END_ELEMENT`"

#: ../../library/xml.dom.pulldom.rst:58
msgid ":data:`COMMENT`"
msgstr ":data:`COMMENT`"

#: ../../library/xml.dom.pulldom.rst:59
msgid ":data:`START_DOCUMENT`"
msgstr ":data:`START_DOCUMENT`"

#: ../../library/xml.dom.pulldom.rst:60
msgid ":data:`END_DOCUMENT`"
msgstr ":data:`END_DOCUMENT`"

#: ../../library/xml.dom.pulldom.rst:61
msgid ":data:`CHARACTERS`"
msgstr ":data:`CHARACTERS`"

#: ../../library/xml.dom.pulldom.rst:62
msgid ":data:`PROCESSING_INSTRUCTION`"
msgstr ":data:`PROCESSING_INSTRUCTION`"

#: ../../library/xml.dom.pulldom.rst:63
msgid ":data:`IGNORABLE_WHITESPACE`"
msgstr ":data:`IGNORABLE_WHITESPACE`"

#: ../../library/xml.dom.pulldom.rst:65
msgid ""
"``node`` is an object of type :class:`xml.dom.minidom.Document`, "
":class:`xml.dom.minidom.Element` or :class:`xml.dom.minidom.Text`."
msgstr ""
"``node``\\는 :class:`xml.dom.minidom.Document`, "
":class:`xml.dom.minidom.Element` 또는 :class:`xml.dom.minidom.Text` 형의 "
"객체입니다."

#: ../../library/xml.dom.pulldom.rst:68
msgid ""
"Since the document is treated as a \"flat\" stream of events, the "
"document \"tree\" is implicitly traversed and the desired elements are "
"found regardless of their depth in the tree. In other words, one does not"
" need to consider hierarchical issues such as recursive searching of the "
"document nodes, although if the context of elements were important, one "
"would either need to maintain some context-related state (i.e. "
"remembering where one is in the document at any given point) or to make "
"use of the :func:`DOMEventStream.expandNode` method and switch to DOM-"
"related processing."
msgstr ""
"문서는 \"평평한(flat)\" 이벤트 스트림으로 취급되므로, 문서 \"트리\"는 묵시적으로 탐색 되며 트리에서의 깊이와 관계없이 "
"원하는 요소를 찾습니다. 다시 말해, 문서 노드의 재귀적 검색과 같은 계층적 문제를 고려할 필요는 없습니다. 하지만, 엘리먼트의 "
"문맥이 중요하다면, 문맥과 관련된 상태를 유지하거나 (즉, 주어진 지점에서 문서의 어느 위치에 있는지 기억함으로써),  "
":func:`DOMEventStream.expandNode` 메서드를 사용하고 DOM 관련 처리로 전환해야 합니다."

#: ../../library/xml.dom.pulldom.rst:80 ../../library/xml.dom.pulldom.rst:85
msgid "Subclass of :class:`xml.sax.handler.ContentHandler`."
msgstr ":class:`xml.sax.handler.ContentHandler`\\의 서브 클래스."

#: ../../library/xml.dom.pulldom.rst:90
msgid ""
"Return a :class:`DOMEventStream` from the given input. *stream_or_string*"
" may be either a file name, or a file-like object. *parser*, if given, "
"must be an :class:`~xml.sax.xmlreader.XMLReader` object. This function "
"will change the document handler of the parser and activate namespace "
"support; other parser configuration (like setting an entity resolver) "
"must have been done in advance."
msgstr ""
"주어진 입력으로부터 :class:`DOMEventStream`\\을 반환합니다. *stream_or_string*\\은 파일 "
"이름이거나 파일류 객체일 수 있습니다. 주어질 때, *parser*\\는 "
":class:`~xml.sax.xmlreader.XMLReader` 객체여야 합니다. 이 함수는 구문 분석기의 문서 처리기를 "
"변경하고 이름 공간 지원을 활성화합니다; 다른 구문 분석기 구성(엔티티 해석기 설정과 같은)은 미리 수행되어 있어야 합니다."

#: ../../library/xml.dom.pulldom.rst:97
msgid ""
"If you have XML in a string, you can use the :func:`parseString` function"
" instead:"
msgstr "문자열로 XML을 갖고 있다면, :func:`parseString` 함수를 대신 사용할 수 있습니다:"

#: ../../library/xml.dom.pulldom.rst:101
msgid "Return a :class:`DOMEventStream` that represents the (Unicode) *string*."
msgstr "(유니코드) *string*\\을 표현하는 :class:`DOMEventStream`\\을 반환합니다."

#: ../../library/xml.dom.pulldom.rst:105
msgid "Default value for the *bufsize* parameter to :func:`parse`."
msgstr ":func:`parse`\\의 *bufsize* 매개 변수의 기본값."

#: ../../library/xml.dom.pulldom.rst:107
msgid ""
"The value of this variable can be changed before calling :func:`parse` "
"and the new value will take effect."
msgstr "이 변수의 값은 :func:`parse`\\를 호출하기 전에 변경될 수 있으며 새 값이 적용됩니다."

#: ../../library/xml.dom.pulldom.rst:113
msgid "DOMEventStream Objects"
msgstr "DOMEventStream 객체"

#: ../../library/xml.dom.pulldom.rst:117
msgid "Support for :meth:`~object.__getitem__` method has been removed."
msgstr ":meth:`~object.__getitem__` 메서드 지원은 제거했습니다."

#: ../../library/xml.dom.pulldom.rst:122
msgid ""
"Return a tuple containing *event* and the current *node* as "
":class:`xml.dom.minidom.Document` if event equals :data:`START_DOCUMENT`,"
" :class:`xml.dom.minidom.Element` if event equals :data:`START_ELEMENT` "
"or :data:`END_ELEMENT` or :class:`xml.dom.minidom.Text` if event equals "
":data:`CHARACTERS`. The current node does not contain information about "
"its children, unless :func:`expandNode` is called."
msgstr ""
"*event*\\와 현재 *node*\\를 포함하는 튜플을 반환합니다. 노드는 이벤트가 "
":data:`START_DOCUMENT`\\와 같으면 :class:`xml.dom.minidom.Document`, 이벤트가 "
":data:`START_ELEMENT`\\나 :data:`END_ELEMENT`\\와 같으면 "
":class:`xml.dom.minidom.Element`, 이벤트가 :data:`CHARACTERS`\\와 같으면 "
":class:`xml.dom.minidom.Text` 입니다. :func:`expandNode`\\가 호출되지 않는 한 현재 "
"노드에는 자식에 대한 정보가 없습니다."

#: ../../library/xml.dom.pulldom.rst:132
msgid "Expands all children of *node* into *node*. Example::"
msgstr "*node*\\의 모든 자식을 *node*\\로 확장합니다. 예::"

#: ../../library/xml.dom.pulldom.rst:134
msgid ""
"from xml.dom import pulldom\n"
"\n"
"xml = '<html><title>Foo</title> <p>Some text <div>and more</div></p> "
"</html>'\n"
"doc = pulldom.parseString(xml)\n"
"for event, node in doc:\n"
"    if event == pulldom.START_ELEMENT and node.tagName == 'p':\n"
"        # Following statement only prints '<p/>'\n"
"        print(node.toxml())\n"
"        doc.expandNode(node)\n"
"        # Following statement prints node with all its children '<p>Some "
"text <div>and more</div></p>'\n"
"        print(node.toxml())"
msgstr ""
"from xml.dom import pulldom\n"
"\n"
"xml = '<html><title>Foo</title> <p>Some text <div>and more</div></p> "
"</html>'\n"
"doc = pulldom.parseString(xml)\n"
"for event, node in doc:\n"
"    if event == pulldom.START_ELEMENT and node.tagName == 'p':\n"
"        # 다음 문장은 '<p/>' 만 인쇄합니다\n"
"        print(node.toxml())\n"
"        doc.expandNode(node)\n"
"        # 다음 문장은 노드와 모든 자식을 인쇄합니다 '<p>Some text <div>and more</div></p>'\n"
"        print(node.toxml())"

