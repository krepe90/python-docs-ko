# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2017, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-04-17 23:44+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: Dong-gweon Oh <flowdas@gmail.com>\n"
"Language-Team: Korean (https://python.flowdas.com)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.17.0\n"

#: ../../using/unix.rst:7
msgid "Using Python on Unix platforms"
msgstr "유닉스 플랫폼에서 파이썬 사용하기"

#: ../../using/unix.rst:13
msgid "Getting and installing the latest version of Python"
msgstr "최신 버전의 파이썬 내려받기와 설치"

#: ../../using/unix.rst:16
msgid "On Linux"
msgstr "리눅스"

#: ../../using/unix.rst:18
msgid ""
"Python comes preinstalled on most Linux distributions, and is available "
"as a package on all others.  However there are certain features you might"
" want to use that are not available on your distro's package.  You can "
"compile the latest version of Python from source."
msgstr ""
"파이썬은 대부분 리눅스 배포판에 사전 설치되어 있으며, 다른 모든 곳에서 패키지로 사용할 수 있습니다. 그러나 배포판 패키지에 없는"
" 어떤 기능을 사용하고 싶을 수 있습니다. 소스에서 최신 버전의 파이썬을 컴파일할 수 있습니다."

#: ../../using/unix.rst:23
msgid ""
"In the event that the latest version of Python doesn't come preinstalled "
"and isn't in the repositories as well, you can make packages for your own"
" distro.  Have a look at the following links:"
msgstr ""
"최신 버전의 파이썬이 미리 설치되어 있지 않고 저장소에도 없으면, 여러분 자신의 배포를 위한 패키지를 만들 수 있습니다. 다음 "
"링크를 살펴보십시오:"

#: ../../using/unix.rst:29
msgid "https://www.debian.org/doc/manuals/maint-guide/first.en.html"
msgstr "https://www.debian.org/doc/manuals/maint-guide/first.en.html"

#: ../../using/unix.rst:30
msgid "for Debian users"
msgstr "데비안 사용자용"

#: ../../using/unix.rst:31
msgid "https://en.opensuse.org/Portal:Packaging"
msgstr "https://en.opensuse.org/Portal:Packaging"

#: ../../using/unix.rst:32
msgid "for OpenSuse users"
msgstr "OpenSuse 사용자용"

#: ../../using/unix.rst:33
msgid ""
"https://docs.fedoraproject.org/en-US/package-"
"maintainers/Packaging_Tutorial_GNU_Hello/"
msgstr ""
"https://docs.fedoraproject.org/en-US/package-"
"maintainers/Packaging_Tutorial_GNU_Hello/"

#: ../../using/unix.rst:34
msgid "for Fedora users"
msgstr "Fedora 사용자용"

#: ../../using/unix.rst:35
msgid "https://slackbook.org/html/package-management-making-packages.html"
msgstr "https://slackbook.org/html/package-management-making-packages.html"

#: ../../using/unix.rst:36
msgid "for Slackware users"
msgstr "Slackware 사용자용"

#: ../../using/unix.rst:41
msgid "Installing IDLE"
msgstr ""

#: ../../using/unix.rst:43
msgid "In some cases, IDLE might not be included in your Python installation."
msgstr ""

#: ../../using/unix.rst:45
msgid "For Debian and Ubuntu users::"
msgstr "데비안과 우분투 사용자용::"

#: ../../using/unix.rst:47
msgid ""
"sudo apt update\n"
"sudo apt install idle"
msgstr ""
"sudo apt update\n"
"sudo apt install idle"

#: ../../using/unix.rst:50
msgid "For Fedora, RHEL, and CentOS users::"
msgstr "Fedora, RHEL 및 CentOS 사용자용::"

#: ../../using/unix.rst:52
msgid "sudo dnf install python3-idle"
msgstr "sudo dnf install python3-idle"

#: ../../using/unix.rst:54
msgid "For SUSE and OpenSUSE users::"
msgstr "SUSE 와 OpenSuse 사용자용::"

#: ../../using/unix.rst:56
msgid "sudo zypper install python3-idle"
msgstr "sudo zypper install python3-idle"

#: ../../using/unix.rst:58
msgid "For Alpine Linux users::"
msgstr "알파인 리눅스 사용자용::"

#: ../../using/unix.rst:60
msgid "sudo apk add python3-idle"
msgstr "sudo apk add python3-idle"

#: ../../using/unix.rst:65
msgid "On FreeBSD and OpenBSD"
msgstr "FreeBSD와 OpenBSD"

#: ../../using/unix.rst:67
msgid "FreeBSD users, to add the package use::"
msgstr "FreeBSD 사용자, 패키지를 추가하려면 이렇게 하십시오::"

#: ../../using/unix.rst:69
msgid "pkg install python3"
msgstr "pkg install python3"

#: ../../using/unix.rst:71
msgid "OpenBSD users, to add the package use::"
msgstr "OpenBSD 사용자, 패키지를 추가하려면 이렇게 하십시오::"

#: ../../using/unix.rst:73
msgid ""
"pkg_add -r python\n"
"\n"
"pkg_add ftp://ftp.openbsd.org/pub/OpenBSD/4.2/packages/<insert your "
"architecture here>/python-<version>.tgz"
msgstr ""
"pkg_add -r python\n"
"\n"
"pkg_add ftp://ftp.openbsd.org/pub/OpenBSD/4.2/packages/<insert your "
"architecture here>/python-<version>.tgz"

#: ../../using/unix.rst:77
msgid "For example i386 users get the 2.5.1 version of Python using::"
msgstr "예를 들어 i386 사용자는 이렇게 파이썬 2.5.1 버전을 얻습니다::"

#: ../../using/unix.rst:79
msgid ""
"pkg_add "
"ftp://ftp.openbsd.org/pub/OpenBSD/4.2/packages/i386/python-2.5.1p2.tgz"
msgstr ""
"pkg_add "
"ftp://ftp.openbsd.org/pub/OpenBSD/4.2/packages/i386/python-2.5.1p2.tgz"

#: ../../using/unix.rst:85
msgid "Building Python"
msgstr "파이썬 빌드하기"

#: ../../using/unix.rst:87
msgid ""
"If you want to compile CPython yourself, first thing you should do is get"
" the `source <https://www.python.org/downloads/source/>`_. You can "
"download either the latest release's source or just grab a fresh `clone "
"<https://devguide.python.org/setup/#get-the-source-code>`_.  (If you want"
" to contribute patches, you will need a clone.)"
msgstr ""
"CPython을 직접 컴파일하려면, 먼저 `소스 "
"<https://www.python.org/downloads/source/>`_\\를 얻습니다. 최신 버전의 소스를 내려받거나 새로"
" `clone <https://devguide.python.org/setup/#get-the-source-code>`_ 할 수 "
"있습니다. (패치에 이바지하려면 clone이 필요합니다.)"

#: ../../using/unix.rst:93
msgid "The build process consists of the usual commands::"
msgstr "빌드 프로세스는 일반적으로 다음과 같은 명령으로 구성됩니다 ::"

#: ../../using/unix.rst:95
msgid ""
"./configure\n"
"make\n"
"make install"
msgstr ""
"./configure\n"
"make\n"
"make install"

#: ../../using/unix.rst:99
msgid ""
":ref:`Configuration options <configure-options>` and caveats for specific"
" Unix platforms are extensively documented in the :source:`README.rst` "
"file in the root of the Python source tree."
msgstr ""
"특정 유닉스 플랫폼에 대한 :ref:`구성 옵션 <configure-options>`\\과 주의 사항은 파이썬 소스 트리의 루트에 "
"있는 :source:`README.rst` 파일에 광범위하게 설명되어있습니다."

#: ../../using/unix.rst:105
#, python-brace-format
msgid ""
"``make install`` can overwrite or masquerade the :file:`python3` binary. "
"``make altinstall`` is therefore recommended instead of ``make install`` "
"since it only installs :file:`{exec_prefix}/bin/python{version}`."
msgstr ""
"``make install``\\은 :file:`python3` 바이너리를 덮어쓰거나 가장 할 수 있습니다. 따라서 ``make "
"altinstall``\\을 ``make install`` 대신 권장하는데, "
":file:`{exec_prefix}/bin/python{version}` 만 설치하기 때문입니다."

#: ../../using/unix.rst:111
msgid "Python-related paths and files"
msgstr "파이썬 관련 경로와 파일"

#: ../../using/unix.rst:113
msgid ""
"These are subject to difference depending on local installation "
"conventions; :option:`prefix <--prefix>` and :option:`exec_prefix "
"<--exec-prefix>` are installation-dependent and should be interpreted as "
"for GNU software; they may be the same."
msgstr ""
"이는 지역 설치 규칙에 따라 달라질 수 있습니다; :option:`prefix <--prefix>` 와 "
":option:`exec_prefix <--exec-prefix>`\\는 설치에 따라 다르며 GNU 소프트웨어처럼 해석되어야 "
"합니다; 이것들은 같을 수도 있습니다."

#: ../../using/unix.rst:118
msgid "For example, on most Linux systems, the default for both is :file:`/usr`."
msgstr "예를 들어, 대부분 리눅스 시스템에서, 기본값은 모두 :file:`/usr`\\입니다."

#: ../../using/unix.rst:121
msgid "File/directory"
msgstr "파일/디렉터리"

#: ../../using/unix.rst:121
msgid "Meaning"
msgstr "의미"

#: ../../using/unix.rst:123
#, python-brace-format
msgid ":file:`{exec_prefix}/bin/python3`"
msgstr ":file:`{exec_prefix}/bin/python3`"

#: ../../using/unix.rst:123
msgid "Recommended location of the interpreter."
msgstr "인터프리터의 권장 위치."

#: ../../using/unix.rst:125
#, python-brace-format
msgid ""
":file:`{prefix}/lib/python{version}`, "
":file:`{exec_prefix}/lib/python{version}`"
msgstr ""
":file:`{prefix}/lib/python{version}`, "
":file:`{exec_prefix}/lib/python{version}`"

#: ../../using/unix.rst:125
msgid "Recommended locations of the directories containing the standard modules."
msgstr "표준 모듈을 포함하는 디렉터리의 권장 위치."

#: ../../using/unix.rst:128
#, python-brace-format
msgid ""
":file:`{prefix}/include/python{version}`, "
":file:`{exec_prefix}/include/python{version}`"
msgstr ""
":file:`{prefix}/include/python{version}`, "
":file:`{exec_prefix}/include/python{version}`"

#: ../../using/unix.rst:128
msgid ""
"Recommended locations of the directories containing the include files "
"needed for developing Python extensions and embedding the interpreter."
msgstr "파이썬 확장을 개발하고 인터프리터를 내장하는 데 필요한 인클루드 파일을 포함하는 디렉터리의 권장 위치."

#: ../../using/unix.rst:136
msgid "Miscellaneous"
msgstr "잡동사니"

#: ../../using/unix.rst:138
msgid ""
"To easily use Python scripts on Unix, you need to make them executable, "
"e.g. with"
msgstr "유닉스에서 파이썬 스크립트를 쉽게 사용하려면, 실행 파일로 만들어야 합니다. 예를 들어, 이렇게"

#: ../../using/unix.rst:141
msgid "$ chmod +x script"
msgstr "$ chmod +x script"

#: ../../using/unix.rst:145
msgid ""
"and put an appropriate Shebang line at the top of the script.  A good "
"choice is usually ::"
msgstr "그리고, 스크립트의 상단에 적절한 셔뱅(Shebang) 줄을 넣습니다. 좋은 선택은 대개 이렇습니다 ::"

#: ../../using/unix.rst:148
msgid "#!/usr/bin/env python3"
msgstr "#!/usr/bin/env python3"

#: ../../using/unix.rst:150
msgid ""
"which searches for the Python interpreter in the whole :envvar:`PATH`.  "
"However, some Unices may not have the :program:`env` command, so you may "
"need to hardcode ``/usr/bin/python3`` as the interpreter path."
msgstr ""
"이것은 :envvar:`PATH` 전체에서 파이썬 인터프리터를 검색합니다. 그러나, 일부 유닉스에는 :program:`env` "
"명령이 없을 수 있으므로, 인터프리터 경로로 ``/usr/bin/python3``\\를 하드 코딩해야 할 수 있습니다."

#: ../../using/unix.rst:154
msgid ""
"To use shell commands in your Python scripts, look at the "
":mod:`subprocess` module."
msgstr "파이썬 스크립트에서 셸 명령을 사용하려면, :mod:`subprocess` 모듈을 보십시오."

#: ../../using/unix.rst:159
msgid "Custom OpenSSL"
msgstr ""

#: ../../using/unix.rst:161
msgid ""
"To use your vendor's OpenSSL configuration and system trust store, locate"
" the directory with ``openssl.cnf`` file or symlink in ``/etc``. On most "
"distribution the file is either in ``/etc/ssl`` or ``/etc/pki/tls``. The "
"directory should also contain a ``cert.pem`` file and/or a ``certs`` "
"directory."
msgstr ""

#: ../../using/unix.rst:167
msgid ""
"$ find /etc/ -name openssl.cnf -printf \"%h\\n\"\n"
"/etc/ssl"
msgstr ""
"$ find /etc/ -name openssl.cnf -printf \"%h\\n\"\n"
"/etc/ssl"

#: ../../using/unix.rst:172
msgid ""
"Download, build, and install OpenSSL. Make sure you use ``install_sw`` "
"and not ``install``. The ``install_sw`` target does not override "
"``openssl.cnf``."
msgstr ""

#: ../../using/unix.rst:176
msgid ""
"$ curl -O https://www.openssl.org/source/openssl-VERSION.tar.gz\n"
"$ tar xzf openssl-VERSION\n"
"$ pushd openssl-VERSION\n"
"$ ./config \\\n"
"    --prefix=/usr/local/custom-openssl \\\n"
"    --libdir=lib \\\n"
"    --openssldir=/etc/ssl\n"
"$ make -j1 depend\n"
"$ make -j8\n"
"$ make install_sw\n"
"$ popd"
msgstr ""
"$ curl -O https://www.openssl.org/source/openssl-VERSION.tar.gz\n"
"$ tar xzf openssl-VERSION\n"
"$ pushd openssl-VERSION\n"
"$ ./config \\\n"
"    --prefix=/usr/local/custom-openssl \\\n"
"    --libdir=lib \\\n"
"    --openssldir=/etc/ssl\n"
"$ make -j1 depend\n"
"$ make -j8\n"
"$ make install_sw\n"
"$ popd"

#: ../../using/unix.rst:190
msgid ""
"Build Python with custom OpenSSL (see the configure ``--with-openssl`` "
"and ``--with-openssl-rpath`` options)"
msgstr ""

#: ../../using/unix.rst:193
msgid ""
"$ pushd python-3.x.x\n"
"$ ./configure -C \\\n"
"    --with-openssl=/usr/local/custom-openssl \\\n"
"    --with-openssl-rpath=auto \\\n"
"    --prefix=/usr/local/python-3.x.x\n"
"$ make -j8\n"
"$ make altinstall"
msgstr ""
"$ pushd python-3.x.x\n"
"$ ./configure -C \\\n"
"    --with-openssl=/usr/local/custom-openssl \\\n"
"    --with-openssl-rpath=auto \\\n"
"    --prefix=/usr/local/python-3.x.x\n"
"$ make -j8\n"
"$ make altinstall"

#: ../../using/unix.rst:205
msgid ""
"Patch releases of OpenSSL have a backwards compatible ABI. You don't need"
" to recompile Python to update OpenSSL. It's sufficient to replace the "
"custom OpenSSL installation with a newer version."
msgstr ""

